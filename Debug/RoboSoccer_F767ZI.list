
RoboSoccer_F767ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000164f0  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b54  080166f0  080166f0  000176f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017244  08017244  000192b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08017244  08017244  00018244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801724c  0801724c  000192b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801724c  0801724c  0001824c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017250  08017250  00018250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b8  20000000  08017254  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d764  200002c0  0801750c  000192c0  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  2000da24  0801750c  00019a24  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000192b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000386b1  00000000  00000000  000192e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007d79  00000000  00000000  00051997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002928  00000000  00000000  00059710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fb5  00000000  00000000  0005c038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032528  00000000  00000000  0005dfed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000396aa  00000000  00000000  00090515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a495  00000000  00000000  000c9bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e4054  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b944  00000000  00000000  001e4098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001ef9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002c0 	.word	0x200002c0
 800021c:	00000000 	.word	0x00000000
 8000220:	080166d8 	.word	0x080166d8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002c4 	.word	0x200002c4
 800023c:	080166d8 	.word	0x080166d8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800061c:	b480      	push	{r7}
 800061e:	b087      	sub	sp, #28
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800062e:	2320      	movs	r3, #32
 8000630:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000632:	f3bf 8f4f 	dsb	sy
}
 8000636:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8000638:	e00b      	b.n	8000652 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800063a:	4a0d      	ldr	r2, [pc, #52]	@ (8000670 <SCB_InvalidateDCache_by_Addr+0x54>)
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	693a      	ldr	r2, [r7, #16]
 8000646:	4413      	add	r3, r2
 8000648:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	2b00      	cmp	r3, #0
 8000656:	dcf0      	bgt.n	800063a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000658:	f3bf 8f4f 	dsb	sy
}
 800065c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800065e:	f3bf 8f6f 	isb	sy
}
 8000662:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8000664:	bf00      	nop
 8000666:	371c      	adds	r7, #28
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <STServo_Init>:
 * @param handle Pointer to servo handle
 * @param huart Pointer to UART handle
 * @return true if successful, false otherwise
 */
bool STServo_Init(STServo_Handle_t *handle, UART_HandleTypeDef *huart)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
  if (!handle || !huart) {
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d002      	beq.n	800068a <STServo_Init+0x16>
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d104      	bne.n	8000694 <STServo_Init+0x20>
    last_error = STSERVO_ERROR_INVALID_PARAM;
 800068a:	4b2a      	ldr	r3, [pc, #168]	@ (8000734 <STServo_Init+0xc0>)
 800068c:	2203      	movs	r2, #3
 800068e:	701a      	strb	r2, [r3, #0]
    return false;
 8000690:	2300      	movs	r3, #0
 8000692:	e04a      	b.n	800072a <STServo_Init+0xb6>
  }

  handle->huart = huart;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	601a      	str	r2, [r3, #0]
  handle->txDone = motorTxSemHandle;
 800069a:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <STServo_Init+0xc4>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	60da      	str	r2, [r3, #12]
  handle->rxQueue = motorRxQueueHandle;
 80006a2:	4b26      	ldr	r3, [pc, #152]	@ (800073c <STServo_Init+0xc8>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	611a      	str	r2, [r3, #16]

  if (handle->txDone == NULL || handle->rxQueue == NULL) {
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	68db      	ldr	r3, [r3, #12]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d003      	beq.n	80006ba <STServo_Init+0x46>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	691b      	ldr	r3, [r3, #16]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d104      	bne.n	80006c4 <STServo_Init+0x50>
    last_error = STSERVO_ERROR_INVALID_PARAM;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <STServo_Init+0xc0>)
 80006bc:	2203      	movs	r2, #3
 80006be:	701a      	strb	r2, [r3, #0]
    return false;
 80006c0:	2300      	movs	r3, #0
 80006c2:	e032      	b.n	800072a <STServo_Init+0xb6>
  }

  handle->timeout_ms = SERVO_RX_TIMEOUT;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	220a      	movs	r2, #10
 80006c8:	605a      	str	r2, [r3, #4]
  memset(&handle->rxCtx, 0, sizeof(handle->rxCtx));
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3320      	adds	r3, #32
 80006ce:	f44f 628c 	mov.w	r2, #1120	@ 0x460
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f014 fa37 	bl	8014b48 <memset>

  // Enable uart circular receive dma
  if (HAL_UART_Receive_DMA(handle->huart, handle->rxCtx.dma_buf, RX_RING_BUFFER_SIZE) != HAL_OK) {
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80006e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e8:	4619      	mov	r1, r3
 80006ea:	f009 fac5 	bl	8009c78 <HAL_UART_Receive_DMA>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d004      	beq.n	80006fe <STServo_Init+0x8a>
    last_error = STSERVO_ERROR_COMM_FAILED;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <STServo_Init+0xc0>)
 80006f6:	2204      	movs	r2, #4
 80006f8:	701a      	strb	r2, [r3, #0]
    return false;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e015      	b.n	800072a <STServo_Init+0xb6>
  }
  // Clear idel line flag and enable idel line interrupt
  handle->huart->Instance->ICR = UART_CLEAR_IDLEF;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2210      	movs	r2, #16
 8000706:	621a      	str	r2, [r3, #32]
  handle->huart->Instance->CR1 |= USART_CR1_IDLEIE_Msk;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f042 0210 	orr.w	r2, r2, #16
 800071a:	601a      	str	r2, [r3, #0]

  last_error = STSERVO_OK;
 800071c:	4b05      	ldr	r3, [pc, #20]	@ (8000734 <STServo_Init+0xc0>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
  handle->initialized = true;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2201      	movs	r2, #1
 8000726:	721a      	strb	r2, [r3, #8]
  return true;
 8000728:	2301      	movs	r3, #1
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200002dc 	.word	0x200002dc
 8000738:	20006d10 	.word	0x20006d10
 800073c:	20006c48 	.word	0x20006c48

08000740 <STServo_SendPacket>:
 * @param packet Packet data
 * @param length Packet length
 * @return true if successful, false otherwise
 */
static bool STServo_SendPacket(STServo_Handle_t *handle, const uint8_t *packet, uint8_t length)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	4613      	mov	r3, r2
 800074c:	71fb      	strb	r3, [r7, #7]
  if (!handle || !packet) {
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d002      	beq.n	800075a <STServo_SendPacket+0x1a>
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d104      	bne.n	8000764 <STServo_SendPacket+0x24>
    last_error = STSERVO_ERROR_INVALID_PARAM;
 800075a:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <STServo_SendPacket+0x74>)
 800075c:	2203      	movs	r2, #3
 800075e:	701a      	strb	r2, [r3, #0]
    return false;
 8000760:	2300      	movs	r3, #0
 8000762:	e022      	b.n	80007aa <STServo_SendPacket+0x6a>
//  uint8_t dbg_pkt[7];
//  for (uint8_t i = 0; i < 7; i++) {
//    dbg_pkt[i] = packet[i];
//  }

  HAL_StatusTypeDef status = HAL_UART_Transmit_IT(handle->huart, (uint8_t*)packet, length);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	b292      	uxth	r2, r2
 800076c:	68b9      	ldr	r1, [r7, #8]
 800076e:	4618      	mov	r0, r3
 8000770:	f009 fa24 	bl	8009bbc <HAL_UART_Transmit_IT>
 8000774:	4603      	mov	r3, r0
 8000776:	75fb      	strb	r3, [r7, #23]
  if (status != HAL_OK) {
 8000778:	7dfb      	ldrb	r3, [r7, #23]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d004      	beq.n	8000788 <STServo_SendPacket+0x48>
    last_error = STSERVO_ERROR_COMM_FAILED;
 800077e:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <STServo_SendPacket+0x74>)
 8000780:	2204      	movs	r2, #4
 8000782:	701a      	strb	r2, [r3, #0]
    return false;
 8000784:	2300      	movs	r3, #0
 8000786:	e010      	b.n	80007aa <STServo_SendPacket+0x6a>
  }

  if (osSemaphoreAcquire(handle->txDone, handle->timeout_ms)) {
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	68da      	ldr	r2, [r3, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	4619      	mov	r1, r3
 8000792:	4610      	mov	r0, r2
 8000794:	f00d f8b0 	bl	800d8f8 <osSemaphoreAcquire>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d004      	beq.n	80007a8 <STServo_SendPacket+0x68>
    last_error = STSERVO_ERROR_TIMEOUT;
 800079e:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <STServo_SendPacket+0x74>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
    return false;
 80007a4:	2300      	movs	r3, #0
 80007a6:	e000      	b.n	80007aa <STServo_SendPacket+0x6a>
  }

  return true;
 80007a8:	2301      	movs	r3, #1
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200002dc 	.word	0x200002dc

080007b8 <STServo_ReceivePacket>:
 * @param packet Buffer for received packet
 * @param length Pointer to received length
 * @return true if successful, false otherwise
 */
static bool STServo_ReceivePacket(STServo_Handle_t *handle, uint8_t *packet, uint8_t *length)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
  if (!handle || !packet || !length) {
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d005      	beq.n	80007d6 <STServo_ReceivePacket+0x1e>
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <STServo_ReceivePacket+0x1e>
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d104      	bne.n	80007e0 <STServo_ReceivePacket+0x28>
    last_error = STSERVO_ERROR_INVALID_PARAM;
 80007d6:	4b29      	ldr	r3, [pc, #164]	@ (800087c <STServo_ReceivePacket+0xc4>)
 80007d8:	2203      	movs	r2, #3
 80007da:	701a      	strb	r2, [r3, #0]
    return false;
 80007dc:	2300      	movs	r3, #0
 80007de:	e048      	b.n	8000872 <STServo_ReceivePacket+0xba>
  }

  // Wait for message to arrive and task yield
  uint8_t msg_len;
  if (osMessageQueueGet(handle->rxQueue, &msg_len, 0, handle->timeout_ms)) {
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	6918      	ldr	r0, [r3, #16]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	f107 0116 	add.w	r1, r7, #22
 80007ec:	2200      	movs	r2, #0
 80007ee:	f00d fa3b 	bl	800dc68 <osMessageQueueGet>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d004      	beq.n	8000802 <STServo_ReceivePacket+0x4a>
    last_error = STSERVO_ERROR_TIMEOUT;
 80007f8:	4b20      	ldr	r3, [pc, #128]	@ (800087c <STServo_ReceivePacket+0xc4>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
    return false;
 80007fe:	2300      	movs	r3, #0
 8000800:	e037      	b.n	8000872 <STServo_ReceivePacket+0xba>
  }

  // Message arrived
  //uint8_t debug_pkt[msg_len];
  // Write caller buffer
  for (uint8_t i = 0; i < msg_len; i++) {
 8000802:	2300      	movs	r3, #0
 8000804:	75fb      	strb	r3, [r7, #23]
 8000806:	e01b      	b.n	8000840 <STServo_ReceivePacket+0x88>
    RING_POP(&handle->rxCtx, packet[i]);
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f8b3 3228 	ldrh.w	r3, [r3, #552]	@ 0x228
 800080e:	b29b      	uxth	r3, r3
 8000810:	4619      	mov	r1, r3
 8000812:	7dfb      	ldrb	r3, [r7, #23]
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	4413      	add	r3, r2
 8000818:	68fa      	ldr	r2, [r7, #12]
 800081a:	440a      	add	r2, r1
 800081c:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f8b3 3228 	ldrh.w	r3, [r3, #552]	@ 0x228
 8000828:	b29b      	uxth	r3, r3
 800082a:	3301      	adds	r3, #1
 800082c:	b29b      	uxth	r3, r3
 800082e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000832:	b29a      	uxth	r2, r3
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f8a3 2228 	strh.w	r2, [r3, #552]	@ 0x228
  for (uint8_t i = 0; i < msg_len; i++) {
 800083a:	7dfb      	ldrb	r3, [r7, #23]
 800083c:	3301      	adds	r3, #1
 800083e:	75fb      	strb	r3, [r7, #23]
 8000840:	7dbb      	ldrb	r3, [r7, #22]
 8000842:	7dfa      	ldrb	r2, [r7, #23]
 8000844:	429a      	cmp	r2, r3
 8000846:	d3df      	bcc.n	8000808 <STServo_ReceivePacket+0x50>
    //debug_pkt[i] = packet[i];
  }
  // Write caller length
  *length = msg_len;
 8000848:	7dba      	ldrb	r2, [r7, #22]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	701a      	strb	r2, [r3, #0]

  // Validate checksum
  if (!STServo_ValidateChecksum(packet, *length)) {
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	4619      	mov	r1, r3
 8000854:	68b8      	ldr	r0, [r7, #8]
 8000856:	f000 f8ad 	bl	80009b4 <STServo_ValidateChecksum>
 800085a:	4603      	mov	r3, r0
 800085c:	f083 0301 	eor.w	r3, r3, #1
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d004      	beq.n	8000870 <STServo_ReceivePacket+0xb8>
    last_error = STSERVO_ERROR_CHECKSUM;
 8000866:	4b05      	ldr	r3, [pc, #20]	@ (800087c <STServo_ReceivePacket+0xc4>)
 8000868:	2202      	movs	r2, #2
 800086a:	701a      	strb	r2, [r3, #0]
    return false;
 800086c:	2300      	movs	r3, #0
 800086e:	e000      	b.n	8000872 <STServo_ReceivePacket+0xba>
  }

  return true;
 8000870:	2301      	movs	r3, #1
}
 8000872:	4618      	mov	r0, r3
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200002dc 	.word	0x200002dc

08000880 <STServo_WriteData>:
 * @param length Data length
 * @return true if successful, false otherwise
 */
static bool STServo_WriteData(STServo_Handle_t *handle, uint8_t id, uint8_t address,
                              uint8_t instruction, const uint8_t *data, uint8_t length)
{
 8000880:	b5b0      	push	{r4, r5, r7, lr}
 8000882:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000886:	af02      	add	r7, sp, #8
 8000888:	f507 7402 	add.w	r4, r7, #520	@ 0x208
 800088c:	f5a4 7401 	sub.w	r4, r4, #516	@ 0x204
 8000890:	6020      	str	r0, [r4, #0]
 8000892:	460c      	mov	r4, r1
 8000894:	4610      	mov	r0, r2
 8000896:	4619      	mov	r1, r3
 8000898:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800089c:	f2a3 2305 	subw	r3, r3, #517	@ 0x205
 80008a0:	4622      	mov	r2, r4
 80008a2:	701a      	strb	r2, [r3, #0]
 80008a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80008a8:	f2a3 2306 	subw	r3, r3, #518	@ 0x206
 80008ac:	4602      	mov	r2, r0
 80008ae:	701a      	strb	r2, [r3, #0]
 80008b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80008b4:	f2a3 2307 	subw	r3, r3, #519	@ 0x207
 80008b8:	460a      	mov	r2, r1
 80008ba:	701a      	strb	r2, [r3, #0]
  if (!handle || !data || length == 0) {
 80008bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80008c0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d007      	beq.n	80008da <STServo_WriteData+0x5a>
 80008ca:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d003      	beq.n	80008da <STServo_WriteData+0x5a>
 80008d2:	f897 321c 	ldrb.w	r3, [r7, #540]	@ 0x21c
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d104      	bne.n	80008e4 <STServo_WriteData+0x64>
    last_error = STSERVO_ERROR_INVALID_PARAM;
 80008da:	4b20      	ldr	r3, [pc, #128]	@ (800095c <STServo_WriteData+0xdc>)
 80008dc:	2203      	movs	r2, #3
 80008de:	701a      	strb	r2, [r3, #0]
    return false;
 80008e0:	2300      	movs	r3, #0
 80008e2:	e036      	b.n	8000952 <STServo_WriteData+0xd2>
  }

  uint8_t params[ST_SERVO_MAX_BUFFER_SIZE - 6];
  params[0] = address;
 80008e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80008e8:	f2a3 2306 	subw	r3, r3, #518	@ 0x206
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
  memcpy(&params[1], data, length);
 80008f2:	f897 221c 	ldrb.w	r2, [r7, #540]	@ 0x21c
 80008f6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80008fa:	3301      	adds	r3, #1
 80008fc:	f8d7 1218 	ldr.w	r1, [r7, #536]	@ 0x218
 8000900:	4618      	mov	r0, r3
 8000902:	f014 fa0e 	bl	8014d22 <memcpy>

  STServo_Packet_t packet;
  uint8_t packet_length = STServo_BuildPacket(&packet, id, instruction, params, length + 1);
 8000906:	f897 321c 	ldrb.w	r3, [r7, #540]	@ 0x21c
 800090a:	3301      	adds	r3, #1
 800090c:	b2db      	uxtb	r3, r3
 800090e:	f507 7586 	add.w	r5, r7, #268	@ 0x10c
 8000912:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8000916:	f2a2 2207 	subw	r2, r2, #519	@ 0x207
 800091a:	7814      	ldrb	r4, [r2, #0]
 800091c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8000920:	f2a2 2205 	subw	r2, r2, #517	@ 0x205
 8000924:	7811      	ldrb	r1, [r2, #0]
 8000926:	f107 000c 	add.w	r0, r7, #12
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	462b      	mov	r3, r5
 800092e:	4622      	mov	r2, r4
 8000930:	f000 f868 	bl	8000a04 <STServo_BuildPacket>
 8000934:	4603      	mov	r3, r0
 8000936:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207

  return STServo_SendPacket(handle, (uint8_t*)&packet, packet_length);
 800093a:	f897 2207 	ldrb.w	r2, [r7, #519]	@ 0x207
 800093e:	f107 010c 	add.w	r1, r7, #12
 8000942:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000946:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800094a:	6818      	ldr	r0, [r3, #0]
 800094c:	f7ff fef8 	bl	8000740 <STServo_SendPacket>
 8000950:	4603      	mov	r3, r0
}
 8000952:	4618      	mov	r0, r3
 8000954:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8000958:	46bd      	mov	sp, r7
 800095a:	bdb0      	pop	{r4, r5, r7, pc}
 800095c:	200002dc 	.word	0x200002dc

08000960 <STServo_CalculateChecksum>:
 * @param packet Packet data (excluding checksum)
 * @param length Packet length (excluding checksum)
 * @return Calculated checksum
 */
static uint8_t STServo_CalculateChecksum(const uint8_t *packet, uint8_t length)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	460b      	mov	r3, r1
 800096a:	70fb      	strb	r3, [r7, #3]
  if (!packet || length < 4) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d002      	beq.n	8000978 <STServo_CalculateChecksum+0x18>
 8000972:	78fb      	ldrb	r3, [r7, #3]
 8000974:	2b03      	cmp	r3, #3
 8000976:	d801      	bhi.n	800097c <STServo_CalculateChecksum+0x1c>
    return 0;
 8000978:	2300      	movs	r3, #0
 800097a:	e015      	b.n	80009a8 <STServo_CalculateChecksum+0x48>
  }

  uint8_t checksum = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]
  // Skip header bytes (0xFF, 0xFF), start from ID
  for (uint8_t i = 2; i < length; i++) {
 8000980:	2302      	movs	r3, #2
 8000982:	73bb      	strb	r3, [r7, #14]
 8000984:	e009      	b.n	800099a <STServo_CalculateChecksum+0x3a>
    checksum += packet[i];
 8000986:	7bbb      	ldrb	r3, [r7, #14]
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	4413      	add	r3, r2
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	4413      	add	r3, r2
 8000992:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 2; i < length; i++) {
 8000994:	7bbb      	ldrb	r3, [r7, #14]
 8000996:	3301      	adds	r3, #1
 8000998:	73bb      	strb	r3, [r7, #14]
 800099a:	7bba      	ldrb	r2, [r7, #14]
 800099c:	78fb      	ldrb	r3, [r7, #3]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d3f1      	bcc.n	8000986 <STServo_CalculateChecksum+0x26>
  }

  return ~checksum;  // Bitwise NOT
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	43db      	mvns	r3, r3
 80009a6:	b2db      	uxtb	r3, r3
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <STServo_ValidateChecksum>:
 * @param packet Complete packet including checksum
 * @param length Total packet length
 * @return true if checksum is valid, false otherwise
 */
static bool STServo_ValidateChecksum(const uint8_t *packet, uint8_t length)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	70fb      	strb	r3, [r7, #3]
  if (!packet || length < 5) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d002      	beq.n	80009cc <STServo_ValidateChecksum+0x18>
 80009c6:	78fb      	ldrb	r3, [r7, #3]
 80009c8:	2b04      	cmp	r3, #4
 80009ca:	d801      	bhi.n	80009d0 <STServo_ValidateChecksum+0x1c>
    return false;
 80009cc:	2300      	movs	r3, #0
 80009ce:	e015      	b.n	80009fc <STServo_ValidateChecksum+0x48>
  }

  uint8_t calculated_checksum = STServo_CalculateChecksum(packet, length - 1);
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	4619      	mov	r1, r3
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff ffc1 	bl	8000960 <STServo_CalculateChecksum>
 80009de:	4603      	mov	r3, r0
 80009e0:	73fb      	strb	r3, [r7, #15]
  uint8_t received_checksum = packet[length - 1];
 80009e2:	78fb      	ldrb	r3, [r7, #3]
 80009e4:	3b01      	subs	r3, #1
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	73bb      	strb	r3, [r7, #14]

  return calculated_checksum == received_checksum;
 80009ee:	7bfa      	ldrb	r2, [r7, #15]
 80009f0:	7bbb      	ldrb	r3, [r7, #14]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	bf0c      	ite	eq
 80009f6:	2301      	moveq	r3, #1
 80009f8:	2300      	movne	r3, #0
 80009fa:	b2db      	uxtb	r3, r3
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <STServo_BuildPacket>:
 * @param param_length Parameter length
 * @return Total packet length
 */
static uint8_t STServo_BuildPacket(STServo_Packet_t *packet, uint8_t id, uint8_t instruction,
                                   const uint8_t *parameters, uint8_t param_length)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b087      	sub	sp, #28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	72fb      	strb	r3, [r7, #11]
 8000a12:	4613      	mov	r3, r2
 8000a14:	72bb      	strb	r3, [r7, #10]
  if (!packet) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d101      	bne.n	8000a20 <STServo_BuildPacket+0x1c>
    return 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	e033      	b.n	8000a88 <STServo_BuildPacket+0x84>
  }

  // Build packet
  packet->header[0] = ST_SERVO_FRAME_HEADER;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	22ff      	movs	r2, #255	@ 0xff
 8000a24:	701a      	strb	r2, [r3, #0]
  packet->header[1] = ST_SERVO_FRAME_HEADER2;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	22ff      	movs	r2, #255	@ 0xff
 8000a2a:	705a      	strb	r2, [r3, #1]
  packet->id = id;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	7afa      	ldrb	r2, [r7, #11]
 8000a30:	709a      	strb	r2, [r3, #2]
  packet->length = param_length + 2;  // instruction + checksum
 8000a32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000a36:	3302      	adds	r3, #2
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	70da      	strb	r2, [r3, #3]
  packet->instruction = instruction;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	7aba      	ldrb	r2, [r7, #10]
 8000a42:	711a      	strb	r2, [r3, #4]

  // Copy parameters if provided
  if (parameters && param_length > 0) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d00b      	beq.n	8000a62 <STServo_BuildPacket+0x5e>
 8000a4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d007      	beq.n	8000a62 <STServo_BuildPacket+0x5e>
    memcpy(packet->parameters, parameters, param_length);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3305      	adds	r3, #5
 8000a56:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f014 f960 	bl	8014d22 <memcpy>
  }

  // Calculate total length
  uint8_t total_length = 4 + param_length + 1;  // header + id + length + instruction + params
 8000a62:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000a66:	3305      	adds	r3, #5
 8000a68:	75fb      	strb	r3, [r7, #23]

  // Appened checksum to the end of parameter buffer
  packet->parameters[param_length] = STServo_CalculateChecksum((uint8_t*)packet, total_length);
 8000a6a:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8000a6e:	7dfb      	ldrb	r3, [r7, #23]
 8000a70:	4619      	mov	r1, r3
 8000a72:	68f8      	ldr	r0, [r7, #12]
 8000a74:	f7ff ff74 	bl	8000960 <STServo_CalculateChecksum>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4423      	add	r3, r4
 8000a80:	715a      	strb	r2, [r3, #5]

  return total_length + 1;  // Include checksum in total length
 8000a82:	7dfb      	ldrb	r3, [r7, #23]
 8000a84:	3301      	adds	r3, #1
 8000a86:	b2db      	uxtb	r3, r3
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	371c      	adds	r7, #28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd90      	pop	{r4, r7, pc}

08000a90 <STServo_ReadFromISR>:
 *        Split the frame if the frame wrapped around in the circular buffer.
 * @param handle Servo handle
 * @note  Called from USARTx_IRQHandler when UART rx idel line is detected
 */
void STServo_ReadFromISR(STServo_Handle_t *handle)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if (__HAL_UART_GET_FLAG(handle->huart, UART_FLAG_IDLE) == RESET) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	69db      	ldr	r3, [r3, #28]
 8000aa0:	f003 0310 	and.w	r3, r3, #16
 8000aa4:	2b10      	cmp	r3, #16
 8000aa6:	d178      	bne.n	8000b9a <STServo_ReadFromISR+0x10a>
    return;
  }
  // Clear idel line flag
  handle->huart->Instance->ICR = UART_CLEAR_IDLEF;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2210      	movs	r2, #16
 8000ab0:	621a      	str	r2, [r3, #32]

  STServo_RxCtx_t *rx = &handle->rxCtx;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3320      	adds	r3, #32
 8000ab6:	617b      	str	r3, [r7, #20]

  // Calculate how many bytes the DMA controller produced in the circular buffer
  // Get byte count from NDTR number of data register
  uint16_t current = RX_RING_BUFFER_SIZE - (handle->huart->hdmarx->Instance->NDTR);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000ac8:	827b      	strh	r3, [r7, #18]
  uint16_t produced = (current >= rx->dma_last) ? (current - rx->dma_last)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	f8b3 3440 	ldrh.w	r3, [r3, #1088]	@ 0x440
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	8a7a      	ldrh	r2, [r7, #18]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d307      	bcc.n	8000ae8 <STServo_ReadFromISR+0x58>
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	f8b3 3440 	ldrh.w	r3, [r3, #1088]	@ 0x440
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	8a7a      	ldrh	r2, [r7, #18]
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	e009      	b.n	8000afc <STServo_ReadFromISR+0x6c>
                                                : (RX_RING_BUFFER_SIZE - rx->dma_last + current);
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	f8b3 3440 	ldrh.w	r3, [r3, #1088]	@ 0x440
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	8a7a      	ldrh	r2, [r7, #18]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	b29b      	uxth	r3, r3
  uint16_t produced = (current >= rx->dma_last) ? (current - rx->dma_last)
 8000af6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	823b      	strh	r3, [r7, #16]

  if (produced == 0) return;
 8000afe:	8a3b      	ldrh	r3, [r7, #16]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d04c      	beq.n	8000b9e <STServo_ReadFromISR+0x10e>

  // Process possibly wrapped region in two slices to avoid out of bound access
  uint16_t first = (uint16_t)MIN(produced, (uint16_t)(RX_RING_BUFFER_SIZE - rx->dma_last));
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	f8b3 3440 	ldrh.w	r3, [r3, #1088]	@ 0x440
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	8a3a      	ldrh	r2, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d307      	bcc.n	8000b28 <STServo_ReadFromISR+0x98>
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	f8b3 3440 	ldrh.w	r3, [r3, #1088]	@ 0x440
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	e000      	b.n	8000b2a <STServo_ReadFromISR+0x9a>
 8000b28:	8a3b      	ldrh	r3, [r7, #16]
 8000b2a:	81fb      	strh	r3, [r7, #14]
  SCB_InvalidateDCache_by_Addr((uint32_t*)&rx->dma_buf[rx->dma_last], first);
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	f8b3 3440 	ldrh.w	r3, [r3, #1088]	@ 0x440
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	89fa      	ldrh	r2, [r7, #14]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fd6b 	bl	800061c <SCB_InvalidateDCache_by_Addr>
  STServo_ProcessRxData(handle, &rx->dma_buf[rx->dma_last], first);
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	f8b3 3440 	ldrh.w	r3, [r3, #1088]	@ 0x440
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	4413      	add	r3, r2
 8000b56:	89fa      	ldrh	r2, [r7, #14]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 f824 	bl	8000ba8 <STServo_ProcessRxData>
  if (produced > first) {
 8000b60:	8a3a      	ldrh	r2, [r7, #16]
 8000b62:	89fb      	ldrh	r3, [r7, #14]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d913      	bls.n	8000b90 <STServo_ReadFromISR+0x100>
    SCB_InvalidateDCache_by_Addr((uint32_t*)&rx->dma_buf[0], produced - first);
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	f503 7010 	add.w	r0, r3, #576	@ 0x240
 8000b6e:	8a3a      	ldrh	r2, [r7, #16]
 8000b70:	89fb      	ldrh	r3, [r7, #14]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	4619      	mov	r1, r3
 8000b76:	f7ff fd51 	bl	800061c <SCB_InvalidateDCache_by_Addr>
    STServo_ProcessRxData(handle, &rx->dma_buf[0], produced - first);
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	f503 7110 	add.w	r1, r3, #576	@ 0x240
 8000b80:	8a3a      	ldrh	r2, [r7, #16]
 8000b82:	89fb      	ldrh	r3, [r7, #14]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 f80c 	bl	8000ba8 <STServo_ProcessRxData>
  }

  rx->dma_last = current;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	8a7a      	ldrh	r2, [r7, #18]
 8000b94:	f8a3 2440 	strh.w	r2, [r3, #1088]	@ 0x440
 8000b98:	e002      	b.n	8000ba0 <STServo_ReadFromISR+0x110>
    return;
 8000b9a:	bf00      	nop
 8000b9c:	e000      	b.n	8000ba0 <STServo_ReadFromISR+0x110>
  if (produced == 0) return;
 8000b9e:	bf00      	nop
}
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <STServo_ProcessRxData>:
 * @param handle Servo handle
 * @param data Pointer to raw DMA buffer start addr
 * @param len Length of DMA buffer
 */
static void STServo_ProcessRxData(STServo_Handle_t *handle, const uint8_t *data, uint16_t len)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	80fb      	strh	r3, [r7, #6]
  STServo_RxCtx_t *rx = &handle->rxCtx;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	3320      	adds	r3, #32
 8000bba:	61bb      	str	r3, [r7, #24]

  for (uint16_t i = 0; i < len; ++i) {
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	83fb      	strh	r3, [r7, #30]
 8000bc0:	e0d8      	b.n	8000d74 <STServo_ProcessRxData+0x1cc>
    // Build 4-byte header: FF FF ID LEN
    if (rx->info_index < 4) {
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	795b      	ldrb	r3, [r3, #5]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d84c      	bhi.n	8000c66 <STServo_ProcessRxData+0xbe>
      rx->info[rx->info_index++] = data[i];
 8000bcc:	8bfb      	ldrh	r3, [r7, #30]
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	441a      	add	r2, r3
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	795b      	ldrb	r3, [r3, #5]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	1c59      	adds	r1, r3, #1
 8000bda:	b2c8      	uxtb	r0, r1
 8000bdc:	69b9      	ldr	r1, [r7, #24]
 8000bde:	7148      	strb	r0, [r1, #5]
 8000be0:	4619      	mov	r1, r3
 8000be2:	7812      	ldrb	r2, [r2, #0]
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	440b      	add	r3, r1
 8000be8:	705a      	strb	r2, [r3, #1]

      switch (rx->info_index) {
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	795b      	ldrb	r3, [r3, #5]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	f200 80ba 	bhi.w	8000d6c <STServo_ProcessRxData+0x1c4>
 8000bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8000c00 <STServo_ProcessRxData+0x58>)
 8000bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfe:	bf00      	nop
 8000c00:	08000c5b 	.word	0x08000c5b
 8000c04:	08000c11 	.word	0x08000c11
 8000c08:	08000c5b 	.word	0x08000c5b
 8000c0c:	08000c31 	.word	0x08000c31
        case 1:
          break; // wait for 2nd header byte

        case 2:
          if (rx->info[0] != 0xFF || rx->info[1] != 0xFF) {
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	785b      	ldrb	r3, [r3, #1]
 8000c14:	2bff      	cmp	r3, #255	@ 0xff
 8000c16:	d103      	bne.n	8000c20 <STServo_ProcessRxData+0x78>
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	789b      	ldrb	r3, [r3, #2]
 8000c1c:	2bff      	cmp	r3, #255	@ 0xff
 8000c1e:	d01e      	beq.n	8000c5e <STServo_ProcessRxData+0xb6>
            rx->info[0] = rx->info[1];
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	789a      	ldrb	r2, [r3, #2]
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	705a      	strb	r2, [r3, #1]
            rx->info_index = 1;
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	715a      	strb	r2, [r3, #5]
          }
          break;
 8000c2e:	e016      	b.n	8000c5e <STServo_ProcessRxData+0xb6>

        case 3:
          break; // got ID, wait LEN

        case 4:
          rx->data_len = rx->info[3];
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	791a      	ldrb	r2, [r3, #4]
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	719a      	strb	r2, [r3, #6]
          rx->data_index = 0;
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	71da      	strb	r2, [r3, #7]
          if (rx->data_len == 0 || rx->data_len > ST_SERVO_MAX_BUFFER_SIZE - 4) {
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	799b      	ldrb	r3, [r3, #6]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d004      	beq.n	8000c52 <STServo_ProcessRxData+0xaa>
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	799b      	ldrb	r3, [r3, #6]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2bfb      	cmp	r3, #251	@ 0xfb
 8000c50:	d907      	bls.n	8000c62 <STServo_ProcessRxData+0xba>
            // bad LEN -> restart header
            rx->info_index = 0;
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	2200      	movs	r2, #0
 8000c56:	715a      	strb	r2, [r3, #5]
          }
          break;
 8000c58:	e003      	b.n	8000c62 <STServo_ProcessRxData+0xba>
          break; // wait for 2nd header byte
 8000c5a:	bf00      	nop
 8000c5c:	e086      	b.n	8000d6c <STServo_ProcessRxData+0x1c4>
          break;
 8000c5e:	bf00      	nop
 8000c60:	e084      	b.n	8000d6c <STServo_ProcessRxData+0x1c4>
          break;
 8000c62:	bf00      	nop
      }
      // Skip the following while building header
      continue;
 8000c64:	e082      	b.n	8000d6c <STServo_ProcessRxData+0x1c4>
    }

    // Collect payload bytes
    if (rx->data_index < rx->data_len) {
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	79db      	ldrb	r3, [r3, #7]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	799b      	ldrb	r3, [r3, #6]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d27b      	bcs.n	8000d6e <STServo_ProcessRxData+0x1c6>
      if (rx->data_index < sizeof(rx->tmp_frame)) {
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	79db      	ldrb	r3, [r3, #7]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b1f      	cmp	r3, #31
 8000c7e:	d80b      	bhi.n	8000c98 <STServo_ProcessRxData+0xf0>
        rx->tmp_frame[rx->data_index] = data[i];
 8000c80:	8bfb      	ldrh	r3, [r7, #30]
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	4413      	add	r3, r2
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	79d2      	ldrb	r2, [r2, #7]
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 220c 	strb.w	r2, [r3, #524]	@ 0x20c
      }
      rx->data_index++;
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	79db      	ldrb	r3, [r3, #7]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	71da      	strb	r2, [r3, #7]

      // If full payload collected, publish a frame (info[4]+payload)
      if (rx->data_index == rx->data_len) {
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	79db      	ldrb	r3, [r3, #7]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	799b      	ldrb	r3, [r3, #6]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d15b      	bne.n	8000d6e <STServo_ProcessRxData+0x1c6>
        // Push info to the ring buffer
        for (uint8_t i = 0; i < 4; i++) {
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	777b      	strb	r3, [r7, #29]
 8000cba:	e01a      	b.n	8000cf2 <STServo_ProcessRxData+0x14a>
          RING_PUSH(rx, rx->info[i]);
 8000cbc:	7f7b      	ldrb	r3, [r7, #29]
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	f8b2 220a 	ldrh.w	r2, [r2, #522]	@ 0x20a
 8000cc4:	b292      	uxth	r2, r2
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4413      	add	r3, r2
 8000ccc:	785a      	ldrb	r2, [r3, #1]
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	440b      	add	r3, r1
 8000cd2:	721a      	strb	r2, [r3, #8]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	f8b3 320a 	ldrh.w	r3, [r3, #522]	@ 0x20a
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	3301      	adds	r3, #1
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	f8a3 220a 	strh.w	r2, [r3, #522]	@ 0x20a
        for (uint8_t i = 0; i < 4; i++) {
 8000cec:	7f7b      	ldrb	r3, [r7, #29]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	777b      	strb	r3, [r7, #29]
 8000cf2:	7f7b      	ldrb	r3, [r7, #29]
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	d9e1      	bls.n	8000cbc <STServo_ProcessRxData+0x114>
        }
        // Push data to the ring buffer
        for (uint8_t i = 0; i < rx->data_len; i++) {
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	773b      	strb	r3, [r7, #28]
 8000cfc:	e01b      	b.n	8000d36 <STServo_ProcessRxData+0x18e>
          RING_PUSH(rx, rx->tmp_frame[i]);
 8000cfe:	7f3b      	ldrb	r3, [r7, #28]
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	f8b2 220a 	ldrh.w	r2, [r2, #522]	@ 0x20a
 8000d06:	b292      	uxth	r2, r2
 8000d08:	4611      	mov	r1, r2
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	f893 220c 	ldrb.w	r2, [r3, #524]	@ 0x20c
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	440b      	add	r3, r1
 8000d16:	721a      	strb	r2, [r3, #8]
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	f8b3 320a 	ldrh.w	r3, [r3, #522]	@ 0x20a
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	3301      	adds	r3, #1
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	f8a3 220a 	strh.w	r2, [r3, #522]	@ 0x20a
        for (uint8_t i = 0; i < rx->data_len; i++) {
 8000d30:	7f3b      	ldrb	r3, [r7, #28]
 8000d32:	3301      	adds	r3, #1
 8000d34:	773b      	strb	r3, [r7, #28]
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	799b      	ldrb	r3, [r3, #6]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	7f3a      	ldrb	r2, [r7, #28]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d3dd      	bcc.n	8000cfe <STServo_ProcessRxData+0x156>
        }

        uint8_t frame_len = (uint8_t)(rx->data_len + 4U);
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	799b      	ldrb	r3, [r3, #6]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	3304      	adds	r3, #4
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	75fb      	strb	r3, [r7, #23]
        (void)osMessageQueuePut(handle->rxQueue, &frame_len, 0, 0);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	6918      	ldr	r0, [r3, #16]
 8000d52:	f107 0117 	add.w	r1, r7, #23
 8000d56:	2300      	movs	r3, #0
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f00c ff11 	bl	800db80 <osMessageQueuePut>

        // Restart for next frame
        rx->info_index = 0;
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	2200      	movs	r2, #0
 8000d62:	715a      	strb	r2, [r3, #5]
        rx->data_index = 0;
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	2200      	movs	r2, #0
 8000d68:	71da      	strb	r2, [r3, #7]
 8000d6a:	e000      	b.n	8000d6e <STServo_ProcessRxData+0x1c6>
      continue;
 8000d6c:	bf00      	nop
  for (uint16_t i = 0; i < len; ++i) {
 8000d6e:	8bfb      	ldrh	r3, [r7, #30]
 8000d70:	3301      	adds	r3, #1
 8000d72:	83fb      	strh	r3, [r7, #30]
 8000d74:	8bfa      	ldrh	r2, [r7, #30]
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	f4ff af22 	bcc.w	8000bc2 <STServo_ProcessRxData+0x1a>
      }
    }
  }

}
 8000d7e:	bf00      	nop
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <STServo_Ping>:
 * @param handle Servo handle
 * @param id Servo ID
 * @return true if servo responds, false otherwise
 */
bool STServo_Ping(STServo_Handle_t *handle, uint8_t id)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0c8      	sub	sp, #288	@ 0x120
 8000d8c:	af02      	add	r7, sp, #8
 8000d8e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d92:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d96:	6018      	str	r0, [r3, #0]
 8000d98:	460a      	mov	r2, r1
 8000d9a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d9e:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8000da2:	701a      	strb	r2, [r3, #0]
  if (!handle || !handle->initialized || id > MAX_SERVO_ID) {
 8000da4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000da8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d011      	beq.n	8000dd6 <STServo_Ping+0x4e>
 8000db2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000db6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	7a1b      	ldrb	r3, [r3, #8]
 8000dbe:	f083 0301 	eor.w	r3, r3, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d106      	bne.n	8000dd6 <STServo_Ping+0x4e>
 8000dc8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000dcc:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b15      	cmp	r3, #21
 8000dd4:	d904      	bls.n	8000de0 <STServo_Ping+0x58>
    last_error = STSERVO_ERROR_INVALID_PARAM;
 8000dd6:	4b76      	ldr	r3, [pc, #472]	@ (8000fb0 <STServo_Ping+0x228>)
 8000dd8:	2203      	movs	r2, #3
 8000dda:	701a      	strb	r2, [r3, #0]
    return false;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e0e1      	b.n	8000fa4 <STServo_Ping+0x21c>
  }

  STServo_Packet_t packet;
  uint8_t packet_length = STServo_BuildPacket(&packet, id, ST_INST_PING, NULL, 0);
 8000de0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000de4:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8000de8:	7819      	ldrb	r1, [r3, #0]
 8000dea:	f107 0018 	add.w	r0, r7, #24
 8000dee:	2300      	movs	r3, #0
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2300      	movs	r3, #0
 8000df4:	2201      	movs	r2, #1
 8000df6:	f7ff fe05 	bl	8000a04 <STServo_BuildPacket>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

  if (!STServo_SendPacket(handle, (uint8_t*)&packet, packet_length)) {
 8000e00:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 8000e04:	f107 0118 	add.w	r1, r7, #24
 8000e08:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e0c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000e10:	6818      	ldr	r0, [r3, #0]
 8000e12:	f7ff fc95 	bl	8000740 <STServo_SendPacket>
 8000e16:	4603      	mov	r3, r0
 8000e18:	f083 0301 	eor.w	r3, r3, #1
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d01f      	beq.n	8000e62 <STServo_Ping+0xda>
    servo_data[id].sw_error_flags |= SERVO_PING_TX_FAILURE;
 8000e22:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e26:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8000e2a:	781a      	ldrb	r2, [r3, #0]
 8000e2c:	4961      	ldr	r1, [pc, #388]	@ (8000fb4 <STServo_Ping+0x22c>)
 8000e2e:	4613      	mov	r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	4413      	add	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	440b      	add	r3, r1
 8000e38:	3302      	adds	r3, #2
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000e40:	f2a2 1215 	subw	r2, r2, #277	@ 0x115
 8000e44:	7812      	ldrb	r2, [r2, #0]
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	b2d8      	uxtb	r0, r3
 8000e4c:	4959      	ldr	r1, [pc, #356]	@ (8000fb4 <STServo_Ping+0x22c>)
 8000e4e:	4613      	mov	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4413      	add	r3, r2
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	440b      	add	r3, r1
 8000e58:	3302      	adds	r3, #2
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	701a      	strb	r2, [r3, #0]
    return false;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	e0a0      	b.n	8000fa4 <STServo_Ping+0x21c>
  }

  uint8_t response[ST_SERVO_DEFAULT_RSP_SIZE];
  uint8_t response_length;

  if (!STServo_ReceivePacket(handle, response, &response_length)) {
 8000e62:	f107 020f 	add.w	r2, r7, #15
 8000e66:	f107 0110 	add.w	r1, r7, #16
 8000e6a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e6e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	f7ff fca0 	bl	80007b8 <STServo_ReceivePacket>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	f083 0301 	eor.w	r3, r3, #1
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d01f      	beq.n	8000ec4 <STServo_Ping+0x13c>
    servo_data[id].sw_error_flags |= SERVO_PING_RX_FAILURE;
 8000e84:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000e88:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8000e8c:	781a      	ldrb	r2, [r3, #0]
 8000e8e:	4949      	ldr	r1, [pc, #292]	@ (8000fb4 <STServo_Ping+0x22c>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	440b      	add	r3, r1
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000ea2:	f2a2 1215 	subw	r2, r2, #277	@ 0x115
 8000ea6:	7812      	ldrb	r2, [r2, #0]
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	b2d8      	uxtb	r0, r3
 8000eae:	4941      	ldr	r1, [pc, #260]	@ (8000fb4 <STServo_Ping+0x22c>)
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	440b      	add	r3, r1
 8000eba:	3302      	adds	r3, #2
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	701a      	strb	r2, [r3, #0]
    return false;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e06f      	b.n	8000fa4 <STServo_Ping+0x21c>
  }

  // Check id
  if (response[2] != id) {
 8000ec4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000ecc:	789b      	ldrb	r3, [r3, #2]
 8000ece:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000ed2:	f2a2 1215 	subw	r2, r2, #277	@ 0x115
 8000ed6:	7812      	ldrb	r2, [r2, #0]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d01f      	beq.n	8000f1c <STServo_Ping+0x194>
    servo_data[id].sw_error_flags |= SERVO_PING_RX_FAILURE;
 8000edc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ee0:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8000ee4:	781a      	ldrb	r2, [r3, #0]
 8000ee6:	4933      	ldr	r1, [pc, #204]	@ (8000fb4 <STServo_Ping+0x22c>)
 8000ee8:	4613      	mov	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	440b      	add	r3, r1
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000efa:	f2a2 1215 	subw	r2, r2, #277	@ 0x115
 8000efe:	7812      	ldrb	r2, [r2, #0]
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	b2d8      	uxtb	r0, r3
 8000f06:	492b      	ldr	r1, [pc, #172]	@ (8000fb4 <STServo_Ping+0x22c>)
 8000f08:	4613      	mov	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	440b      	add	r3, r1
 8000f12:	3302      	adds	r3, #2
 8000f14:	4602      	mov	r2, r0
 8000f16:	701a      	strb	r2, [r3, #0]
    return false;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	e043      	b.n	8000fa4 <STServo_Ping+0x21c>
  }

  // Load working condition
  // Format : 0xFF, 0xFF, ID, LEN, Flags, CheckSum
  servo_data[id].hw_error_flags = response[4];
 8000f1c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f20:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8000f24:	781a      	ldrb	r2, [r3, #0]
 8000f26:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f2e:	7918      	ldrb	r0, [r3, #4]
 8000f30:	4920      	ldr	r1, [pc, #128]	@ (8000fb4 <STServo_Ping+0x22c>)
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	440b      	add	r3, r1
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	4602      	mov	r2, r0
 8000f40:	701a      	strb	r2, [r3, #0]
  servo_data[id].status_flags |= MOTOR_IS_ONLINE;
 8000f42:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f46:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8000f4a:	781a      	ldrb	r2, [r3, #0]
 8000f4c:	4919      	ldr	r1, [pc, #100]	@ (8000fb4 <STServo_Ping+0x22c>)
 8000f4e:	4613      	mov	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	440b      	add	r3, r1
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000f5e:	f2a2 1215 	subw	r2, r2, #277	@ 0x115
 8000f62:	7812      	ldrb	r2, [r2, #0]
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	b2d8      	uxtb	r0, r3
 8000f6a:	4912      	ldr	r1, [pc, #72]	@ (8000fb4 <STServo_Ping+0x22c>)
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	440b      	add	r3, r1
 8000f76:	4602      	mov	r2, r0
 8000f78:	701a      	strb	r2, [r3, #0]

  if (servo_data[id].hw_error_flags != 0) {
 8000f7a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f7e:	f2a3 1315 	subw	r3, r3, #277	@ 0x115
 8000f82:	781a      	ldrb	r2, [r3, #0]
 8000f84:	490b      	ldr	r1, [pc, #44]	@ (8000fb4 <STServo_Ping+0x22c>)
 8000f86:	4613      	mov	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	440b      	add	r3, r1
 8000f90:	3301      	adds	r3, #1
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d004      	beq.n	8000fa2 <STServo_Ping+0x21a>
    last_error = STSERVO_ERROR_HARDWARE;
 8000f98:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <STServo_Ping+0x228>)
 8000f9a:	2205      	movs	r2, #5
 8000f9c:	701a      	strb	r2, [r3, #0]
    return false;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <STServo_Ping+0x21c>
  }
  return true;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200002dc 	.word	0x200002dc
 8000fb4:	20000760 	.word	0x20000760

08000fb8 <STServo_SyncWritePosition>:
 * @param handle Servo handle
 * @note  This fn read servo_control and servo_data
 * @return STServo_Status_t
 */
STServo_Status_t STServo_SyncWritePosition(STServo_Handle_t *handle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b0c6      	sub	sp, #280	@ 0x118
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000fc6:	6018      	str	r0, [r3, #0]
  if (!handle || !handle->initialized) {
 8000fc8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fcc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00a      	beq.n	8000fec <STServo_SyncWritePosition+0x34>
 8000fd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000fda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	7a1b      	ldrb	r3, [r3, #8]
 8000fe2:	f083 0301 	eor.w	r3, r3, #1
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d004      	beq.n	8000ff6 <STServo_SyncWritePosition+0x3e>
    last_error = STSERVO_ERROR_INVALID_PARAM;
 8000fec:	4b82      	ldr	r3, [pc, #520]	@ (80011f8 <STServo_SyncWritePosition+0x240>)
 8000fee:	2203      	movs	r2, #3
 8000ff0:	701a      	strb	r2, [r3, #0]
    return SERVO_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e0fb      	b.n	80011ee <STServo_SyncWritePosition+0x236>
  }

  // buffer to store parameters and track its index
  uint8_t params[ST_SERVO_MAX_BUFFER_SIZE - 5];
  uint8_t index = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    last_error = STSERVO_ERROR_INVALID_PARAM;
    return SERVO_ERROR;
  }

  // Write parameters
  params[index++] = 0x07;       // Bytes per servo, exclude id
 8000ffc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 8001006:	461a      	mov	r2, r3
 8001008:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800100c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001010:	2107      	movs	r1, #7
 8001012:	5499      	strb	r1, [r3, r2]
  for (uint8_t id = 0; id < MAX_SERVO_ID; id++) {
 8001014:	2300      	movs	r3, #0
 8001016:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 800101a:	e098      	b.n	800114e <STServo_SyncWritePosition+0x196>
    // Skip if current servo is not online
    if (!(servo_data[id].status_flags & MOTOR_IS_ONLINE)) continue;
 800101c:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8001020:	4976      	ldr	r1, [pc, #472]	@ (80011fc <STServo_SyncWritePosition+0x244>)
 8001022:	4613      	mov	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	440b      	add	r3, r1
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	f000 8085 	beq.w	8001142 <STServo_SyncWritePosition+0x18a>

    // Load params per servo from servo control table
    STServo_Control_t *servo = &servo_control[id];
 8001038:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4a70      	ldr	r2, [pc, #448]	@ (8001200 <STServo_SyncWritePosition+0x248>)
 8001040:	4413      	add	r3, r2
 8001042:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    params[index++] = id;                                   // Servo id
 8001046:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 8001050:	4619      	mov	r1, r3
 8001052:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001056:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800105a:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 800105e:	545a      	strb	r2, [r3, r1]
    params[index++] = servo->goal_acc;                      // Goal Acceleration
 8001060:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 800106a:	461a      	mov	r2, r3
 800106c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001070:	7919      	ldrb	r1, [r3, #4]
 8001072:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001076:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800107a:	5499      	strb	r1, [r3, r2]
    params[index++] = servo->goal_position & 0xFF;          // Position low byte
 800107c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001080:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001084:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 800108e:	461a      	mov	r2, r3
 8001090:	b2c9      	uxtb	r1, r1
 8001092:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800109a:	5499      	strb	r1, [r3, r2]
    params[index++] = (servo->goal_position >> 8) & 0xFF;   // Position high byte
 800109c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80010a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a4:	121b      	asrs	r3, r3, #8
 80010a6:	b219      	sxth	r1, r3
 80010a8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80010ac:	1c5a      	adds	r2, r3, #1
 80010ae:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 80010b2:	461a      	mov	r2, r3
 80010b4:	b2c9      	uxtb	r1, r1
 80010b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010be:	5499      	strb	r1, [r3, r2]
    params[index++] = servo->goal_time & 0xFF;              // Time low byte (0 = max speed)
 80010c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80010c4:	88d9      	ldrh	r1, [r3, #6]
 80010c6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 80010d0:	461a      	mov	r2, r3
 80010d2:	b2c9      	uxtb	r1, r1
 80010d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010dc:	5499      	strb	r1, [r3, r2]
    params[index++] = (servo->goal_time >> 8) & 0xFF;       // Time high byte
 80010de:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80010e2:	88db      	ldrh	r3, [r3, #6]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	b299      	uxth	r1, r3
 80010e8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 80010f2:	461a      	mov	r2, r3
 80010f4:	b2c9      	uxtb	r1, r1
 80010f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80010fe:	5499      	strb	r1, [r3, r2]
    params[index++] = servo->goal_speed & 0xFF;             // Speed low byte
 8001100:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001104:	8859      	ldrh	r1, [r3, #2]
 8001106:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 8001110:	461a      	mov	r2, r3
 8001112:	b2c9      	uxtb	r1, r1
 8001114:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001118:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800111c:	5499      	strb	r1, [r3, r2]
    params[index++] = (servo->goal_speed >> 8) & 0xFF;      // Speed high byte
 800111e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001122:	885b      	ldrh	r3, [r3, #2]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	b299      	uxth	r1, r3
 8001128:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	f887 210f 	strb.w	r2, [r7, #271]	@ 0x10f
 8001132:	461a      	mov	r2, r3
 8001134:	b2c9      	uxtb	r1, r1
 8001136:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800113a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800113e:	5499      	strb	r1, [r3, r2]
 8001140:	e000      	b.n	8001144 <STServo_SyncWritePosition+0x18c>
    if (!(servo_data[id].status_flags & MOTOR_IS_ONLINE)) continue;
 8001142:	bf00      	nop
  for (uint8_t id = 0; id < MAX_SERVO_ID; id++) {
 8001144:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001148:	3301      	adds	r3, #1
 800114a:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e
 800114e:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 8001152:	2b14      	cmp	r3, #20
 8001154:	f67f af62 	bls.w	800101c <STServo_SyncWritePosition+0x64>
  }

  if (!STServo_WriteData(handle, ST_SERVO_BROADCAST_ID, SMS_STS_ACC, ST_INST_SYNC_WRITE, params, index)) {
 8001158:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800115c:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8001160:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2383      	movs	r3, #131	@ 0x83
 800116e:	2229      	movs	r2, #41	@ 0x29
 8001170:	21fe      	movs	r1, #254	@ 0xfe
 8001172:	6800      	ldr	r0, [r0, #0]
 8001174:	f7ff fb84 	bl	8000880 <STServo_WriteData>
 8001178:	4603      	mov	r3, r0
 800117a:	f083 0301 	eor.w	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d033      	beq.n	80011ec <STServo_SyncWritePosition+0x234>
    SERVO_SET_ERROR_ALL_ONLINE(SERVO_RD_TX_FAILURE);
 8001184:	2300      	movs	r3, #0
 8001186:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 800118a:	e029      	b.n	80011e0 <STServo_SyncWritePosition+0x228>
 800118c:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 8001190:	491a      	ldr	r1, [pc, #104]	@ (80011fc <STServo_SyncWritePosition+0x244>)
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	440b      	add	r3, r1
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d017      	beq.n	80011d6 <STServo_SyncWritePosition+0x21e>
 80011a6:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 80011aa:	4914      	ldr	r1, [pc, #80]	@ (80011fc <STServo_SyncWritePosition+0x244>)
 80011ac:	4613      	mov	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	440b      	add	r3, r1
 80011b6:	3302      	adds	r3, #2
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	f897 210d 	ldrb.w	r2, [r7, #269]	@ 0x10d
 80011be:	f043 0310 	orr.w	r3, r3, #16
 80011c2:	b2d8      	uxtb	r0, r3
 80011c4:	490d      	ldr	r1, [pc, #52]	@ (80011fc <STServo_SyncWritePosition+0x244>)
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	440b      	add	r3, r1
 80011d0:	3302      	adds	r3, #2
 80011d2:	4602      	mov	r2, r0
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80011da:	3301      	adds	r3, #1
 80011dc:	f887 310d 	strb.w	r3, [r7, #269]	@ 0x10d
 80011e0:	f897 310d 	ldrb.w	r3, [r7, #269]	@ 0x10d
 80011e4:	2b15      	cmp	r3, #21
 80011e6:	d9d1      	bls.n	800118c <STServo_SyncWritePosition+0x1d4>
    return SERVO_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <STServo_SyncWritePosition+0x236>
  }

  return SERVO_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200002dc 	.word	0x200002dc
 80011fc:	20000760 	.word	0x20000760
 8001200:	200007e0 	.word	0x200007e0

08001204 <STServo_SyncRead>:
 * @param handle Servo handle
 * @note  This fn load data to servo_data
 * @return STServo_Status_t
 */
STServo_Status_t STServo_SyncRead(STServo_Handle_t *handle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b0cc      	sub	sp, #304	@ 0x130
 8001208:	af02      	add	r7, sp, #8
 800120a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800120e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001212:	6018      	str	r0, [r3, #0]
  if (!handle || !handle->initialized) {
 8001214:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001218:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00a      	beq.n	8001238 <STServo_SyncRead+0x34>
 8001222:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001226:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	7a1b      	ldrb	r3, [r3, #8]
 800122e:	f083 0301 	eor.w	r3, r3, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d004      	beq.n	8001242 <STServo_SyncRead+0x3e>
    last_error = STSERVO_ERROR_INVALID_PARAM;
 8001238:	4b9a      	ldr	r3, [pc, #616]	@ (80014a4 <STServo_SyncRead+0x2a0>)
 800123a:	2203      	movs	r2, #3
 800123c:	701a      	strb	r2, [r3, #0]
    return SERVO_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e12a      	b.n	8001498 <STServo_SyncRead+0x294>
  }

  // buffer to store parameters and track its index
  uint8_t params[ST_SERVO_MAX_BUFFER_SIZE - 5];
  uint8_t index = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

  // Write parameters
  // Request data from addr SMS_STS_PRESENT_POSITION_L to SMS_STS_PRESENT_POSITION_H
  params[index++] = SMS_STS_PRESENT_POSITION_H - SMS_STS_PRESENT_POSITION_L + 1;  // Data length
 8001248:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 8001252:	461a      	mov	r2, r3
 8001254:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001258:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800125c:	2102      	movs	r1, #2
 800125e:	5499      	strb	r1, [r3, r2]
  for (uint8_t id = 0; id < MAX_SERVO_ID; id++) {
 8001260:	2300      	movs	r3, #0
 8001262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8001266:	e020      	b.n	80012aa <STServo_SyncRead+0xa6>
    // Skip if current servo is not online
    if (!(servo_data[id].status_flags & MOTOR_IS_ONLINE)) continue;
 8001268:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 800126c:	498e      	ldr	r1, [pc, #568]	@ (80014a8 <STServo_SyncRead+0x2a4>)
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	440b      	add	r3, r1
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00d      	beq.n	800129e <STServo_SyncRead+0x9a>
    params[index++] = id;                                                        // Servo id
 8001282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 800128c:	4619      	mov	r1, r3
 800128e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001292:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001296:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 800129a:	545a      	strb	r2, [r3, r1]
 800129c:	e000      	b.n	80012a0 <STServo_SyncRead+0x9c>
    if (!(servo_data[id].status_flags & MOTOR_IS_ONLINE)) continue;
 800129e:	bf00      	nop
  for (uint8_t id = 0; id < MAX_SERVO_ID; id++) {
 80012a0:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80012a4:	3301      	adds	r3, #1
 80012a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80012aa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80012ae:	2b14      	cmp	r3, #20
 80012b0:	d9da      	bls.n	8001268 <STServo_SyncRead+0x64>
  }

  if (!STServo_WriteData(handle, ST_SERVO_BROADCAST_ID, SMS_STS_PRESENT_POSITION_L,
 80012b2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80012b6:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 80012ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2382      	movs	r3, #130	@ 0x82
 80012c8:	2238      	movs	r2, #56	@ 0x38
 80012ca:	21fe      	movs	r1, #254	@ 0xfe
 80012cc:	6800      	ldr	r0, [r0, #0]
 80012ce:	f7ff fad7 	bl	8000880 <STServo_WriteData>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f083 0301 	eor.w	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d033      	beq.n	8001346 <STServo_SyncRead+0x142>
                         ST_INST_SYNC_READ, params, index)) {
    SERVO_SET_ERROR_ALL_ONLINE(SERVO_SYNC_TX_FAILURE);
 80012de:	2300      	movs	r3, #0
 80012e0:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
 80012e4:	e029      	b.n	800133a <STServo_SyncRead+0x136>
 80012e6:	f897 2125 	ldrb.w	r2, [r7, #293]	@ 0x125
 80012ea:	496f      	ldr	r1, [pc, #444]	@ (80014a8 <STServo_SyncRead+0x2a4>)
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	440b      	add	r3, r1
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d017      	beq.n	8001330 <STServo_SyncRead+0x12c>
 8001300:	f897 2125 	ldrb.w	r2, [r7, #293]	@ 0x125
 8001304:	4968      	ldr	r1, [pc, #416]	@ (80014a8 <STServo_SyncRead+0x2a4>)
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	440b      	add	r3, r1
 8001310:	3302      	adds	r3, #2
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	f897 2125 	ldrb.w	r2, [r7, #293]	@ 0x125
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	b2d8      	uxtb	r0, r3
 800131e:	4962      	ldr	r1, [pc, #392]	@ (80014a8 <STServo_SyncRead+0x2a4>)
 8001320:	4613      	mov	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4413      	add	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	440b      	add	r3, r1
 800132a:	3302      	adds	r3, #2
 800132c:	4602      	mov	r2, r0
 800132e:	701a      	strb	r2, [r3, #0]
 8001330:	f897 3125 	ldrb.w	r3, [r7, #293]	@ 0x125
 8001334:	3301      	adds	r3, #1
 8001336:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
 800133a:	f897 3125 	ldrb.w	r3, [r7, #293]	@ 0x125
 800133e:	2b15      	cmp	r3, #21
 8001340:	d9d1      	bls.n	80012e6 <STServo_SyncRead+0xe2>
    return SERVO_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e0a8      	b.n	8001498 <STServo_SyncRead+0x294>

  /* Handle data feedback
   * Format: 0xFF, 0xFF, ID, LEN, WorkCondi, Position_L, Position_H, Speed_L, Speed_H, Load_L, Load_H,
             Voltage, Temperature, DNC, DNC, movement flag, DNC, DNC, Current_L, Current_H, Checksum
  */
  for (uint8_t id = 0; id < MAX_SERVO_ID; id++) {
 8001346:	2300      	movs	r3, #0
 8001348:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
 800134c:	e09e      	b.n	800148c <STServo_SyncRead+0x288>
    // Skip if current servo is not online
    if (!(servo_data[id].status_flags & MOTOR_IS_ONLINE)) continue;
 800134e:	f897 2124 	ldrb.w	r2, [r7, #292]	@ 0x124
 8001352:	4955      	ldr	r1, [pc, #340]	@ (80014a8 <STServo_SyncRead+0x2a4>)
 8001354:	4613      	mov	r3, r2
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	440b      	add	r3, r1
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 808b 	beq.w	8001480 <STServo_SyncRead+0x27c>

    uint8_t response[ST_SERVO_SYNC_RD_RSP_SIZE];
    uint8_t response_length;

    if (!STServo_ReceivePacket(handle, response, &response_length)) {
 800136a:	f107 020f 	add.w	r2, r7, #15
 800136e:	f107 0110 	add.w	r1, r7, #16
 8001372:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001376:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	f7ff fa1c 	bl	80007b8 <STServo_ReceivePacket>
 8001380:	4603      	mov	r3, r0
 8001382:	f083 0301 	eor.w	r3, r3, #1
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d019      	beq.n	80013c0 <STServo_SyncRead+0x1bc>
      servo_data[id].sw_error_flags |= SERVO_SYNC_RX_FAILURE;
 800138c:	f897 2124 	ldrb.w	r2, [r7, #292]	@ 0x124
 8001390:	4945      	ldr	r1, [pc, #276]	@ (80014a8 <STServo_SyncRead+0x2a4>)
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	440b      	add	r3, r1
 800139c:	3302      	adds	r3, #2
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	f897 2124 	ldrb.w	r2, [r7, #292]	@ 0x124
 80013a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013a8:	b2d8      	uxtb	r0, r3
 80013aa:	493f      	ldr	r1, [pc, #252]	@ (80014a8 <STServo_SyncRead+0x2a4>)
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	440b      	add	r3, r1
 80013b6:	3302      	adds	r3, #2
 80013b8:	4602      	mov	r2, r0
 80013ba:	701a      	strb	r2, [r3, #0]
      return SERVO_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e06b      	b.n	8001498 <STServo_SyncRead+0x294>
    }

    // Check id
    if (response[2] != id) {
 80013c0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013c4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80013c8:	789b      	ldrb	r3, [r3, #2]
 80013ca:	f897 2124 	ldrb.w	r2, [r7, #292]	@ 0x124
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d019      	beq.n	8001406 <STServo_SyncRead+0x202>
      servo_data[id].sw_error_flags |= SERVO_SYNC_RX_ID_ERROR;
 80013d2:	f897 2124 	ldrb.w	r2, [r7, #292]	@ 0x124
 80013d6:	4934      	ldr	r1, [pc, #208]	@ (80014a8 <STServo_SyncRead+0x2a4>)
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	440b      	add	r3, r1
 80013e2:	3302      	adds	r3, #2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	f897 2124 	ldrb.w	r2, [r7, #292]	@ 0x124
 80013ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013ee:	b2d8      	uxtb	r0, r3
 80013f0:	492d      	ldr	r1, [pc, #180]	@ (80014a8 <STServo_SyncRead+0x2a4>)
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	440b      	add	r3, r1
 80013fc:	3302      	adds	r3, #2
 80013fe:	4602      	mov	r2, r0
 8001400:	701a      	strb	r2, [r3, #0]
      return SERVO_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e048      	b.n	8001498 <STServo_SyncRead+0x294>
    }

    // Load working condition
    servo_data[id].hw_error_flags = response[4];
 8001406:	f897 2124 	ldrb.w	r2, [r7, #292]	@ 0x124
 800140a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800140e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001412:	7918      	ldrb	r0, [r3, #4]
 8001414:	4924      	ldr	r1, [pc, #144]	@ (80014a8 <STServo_SyncRead+0x2a4>)
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	440b      	add	r3, r1
 8001420:	3301      	adds	r3, #1
 8001422:	4602      	mov	r2, r0
 8001424:	701a      	strb	r2, [r3, #0]
    if (servo_data[id].hw_error_flags != 0) {
 8001426:	f897 2124 	ldrb.w	r2, [r7, #292]	@ 0x124
 800142a:	491f      	ldr	r1, [pc, #124]	@ (80014a8 <STServo_SyncRead+0x2a4>)
 800142c:	4613      	mov	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4413      	add	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	440b      	add	r3, r1
 8001436:	3301      	adds	r3, #1
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d004      	beq.n	8001448 <STServo_SyncRead+0x244>
      last_error = STSERVO_ERROR_HARDWARE;
 800143e:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <STServo_SyncRead+0x2a0>)
 8001440:	2205      	movs	r2, #5
 8001442:	701a      	strb	r2, [r3, #0]
      return SERVO_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e027      	b.n	8001498 <STServo_SyncRead+0x294>
    }

    // Load data feedback
    servo_data[id].position = (response[5] + (response[6] << 8));
 8001448:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800144c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001450:	795b      	ldrb	r3, [r3, #5]
 8001452:	461a      	mov	r2, r3
 8001454:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001458:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800145c:	799b      	ldrb	r3, [r3, #6]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b29b      	uxth	r3, r3
 8001462:	4413      	add	r3, r2
 8001464:	b29b      	uxth	r3, r3
 8001466:	f897 2124 	ldrb.w	r2, [r7, #292]	@ 0x124
 800146a:	b218      	sxth	r0, r3
 800146c:	490e      	ldr	r1, [pc, #56]	@ (80014a8 <STServo_SyncRead+0x2a4>)
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	440b      	add	r3, r1
 8001478:	3304      	adds	r3, #4
 800147a:	4602      	mov	r2, r0
 800147c:	801a      	strh	r2, [r3, #0]
 800147e:	e000      	b.n	8001482 <STServo_SyncRead+0x27e>
    if (!(servo_data[id].status_flags & MOTOR_IS_ONLINE)) continue;
 8001480:	bf00      	nop
  for (uint8_t id = 0; id < MAX_SERVO_ID; id++) {
 8001482:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 8001486:	3301      	adds	r3, #1
 8001488:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
 800148c:	f897 3124 	ldrb.w	r3, [r7, #292]	@ 0x124
 8001490:	2b14      	cmp	r3, #20
 8001492:	f67f af5c 	bls.w	800134e <STServo_SyncRead+0x14a>
//    servo_data[id].status_flags = response[15] ? (servo_data[id].status_flags | MOTOR_IS_MOVING)
//                                               : (servo_data[id].status_flags & ~MOTOR_IS_MOVING);
//    servo_data[id].current = (response[18] + (response[19] << 8));
  }

  return SERVO_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200002dc 	.word	0x200002dc
 80014a8:	20000760 	.word	0x20000760

080014ac <STServo_GetLastError>:
 * @brief Get last error
 * @param handle Servo handle
 * @return Last error code
 */
STServo_Error_t STServo_GetLastError(STServo_Handle_t *handle)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  (void)handle;  // Unused parameter
  return last_error;
 80014b4:	4b03      	ldr	r3, [pc, #12]	@ (80014c4 <STServo_GetLastError+0x18>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	200002dc 	.word	0x200002dc

080014c8 <STServo_GetErrorString>:
 * @brief Get error string
 * @param error Error code
 * @return Error description string
 */
const char* STServo_GetErrorString(STServo_Error_t error)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  switch (error) {
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b05      	cmp	r3, #5
 80014d6:	d81b      	bhi.n	8001510 <STServo_GetErrorString+0x48>
 80014d8:	a201      	add	r2, pc, #4	@ (adr r2, 80014e0 <STServo_GetErrorString+0x18>)
 80014da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014de:	bf00      	nop
 80014e0:	080014f9 	.word	0x080014f9
 80014e4:	080014fd 	.word	0x080014fd
 80014e8:	08001501 	.word	0x08001501
 80014ec:	08001505 	.word	0x08001505
 80014f0:	08001509 	.word	0x08001509
 80014f4:	0800150d 	.word	0x0800150d
    case STSERVO_OK: return "No error";
 80014f8:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <STServo_GetErrorString+0x58>)
 80014fa:	e00a      	b.n	8001512 <STServo_GetErrorString+0x4a>
    case STSERVO_ERROR_TIMEOUT: return "Servo communication timeout";
 80014fc:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <STServo_GetErrorString+0x5c>)
 80014fe:	e008      	b.n	8001512 <STServo_GetErrorString+0x4a>
    case STSERVO_ERROR_CHECKSUM: return "Servo checksum error";
 8001500:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <STServo_GetErrorString+0x60>)
 8001502:	e006      	b.n	8001512 <STServo_GetErrorString+0x4a>
    case STSERVO_ERROR_INVALID_PARAM: return "Servo invalid parameter";
 8001504:	4b09      	ldr	r3, [pc, #36]	@ (800152c <STServo_GetErrorString+0x64>)
 8001506:	e004      	b.n	8001512 <STServo_GetErrorString+0x4a>
    case STSERVO_ERROR_COMM_FAILED: return "Servo communication failed";
 8001508:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <STServo_GetErrorString+0x68>)
 800150a:	e002      	b.n	8001512 <STServo_GetErrorString+0x4a>
    case STSERVO_ERROR_HARDWARE: return "Servo hardware Fault";
 800150c:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <STServo_GetErrorString+0x6c>)
 800150e:	e000      	b.n	8001512 <STServo_GetErrorString+0x4a>
    default: return "Unknown error";
 8001510:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <STServo_GetErrorString+0x70>)
  }
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	080166f0 	.word	0x080166f0
 8001524:	080166fc 	.word	0x080166fc
 8001528:	08016718 	.word	0x08016718
 800152c:	08016730 	.word	0x08016730
 8001530:	08016748 	.word	0x08016748
 8001534:	08016764 	.word	0x08016764
 8001538:	0801677c 	.word	0x0801677c

0800153c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800154e:	4b37      	ldr	r3, [pc, #220]	@ (800162c <MX_ADC1_Init+0xf0>)
 8001550:	4a37      	ldr	r2, [pc, #220]	@ (8001630 <MX_ADC1_Init+0xf4>)
 8001552:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001554:	4b35      	ldr	r3, [pc, #212]	@ (800162c <MX_ADC1_Init+0xf0>)
 8001556:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800155a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800155c:	4b33      	ldr	r3, [pc, #204]	@ (800162c <MX_ADC1_Init+0xf0>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001562:	4b32      	ldr	r3, [pc, #200]	@ (800162c <MX_ADC1_Init+0xf0>)
 8001564:	2201      	movs	r2, #1
 8001566:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001568:	4b30      	ldr	r3, [pc, #192]	@ (800162c <MX_ADC1_Init+0xf0>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800156e:	4b2f      	ldr	r3, [pc, #188]	@ (800162c <MX_ADC1_Init+0xf0>)
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001576:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <MX_ADC1_Init+0xf0>)
 8001578:	2200      	movs	r2, #0
 800157a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800157c:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <MX_ADC1_Init+0xf0>)
 800157e:	4a2d      	ldr	r2, [pc, #180]	@ (8001634 <MX_ADC1_Init+0xf8>)
 8001580:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001582:	4b2a      	ldr	r3, [pc, #168]	@ (800162c <MX_ADC1_Init+0xf0>)
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001588:	4b28      	ldr	r3, [pc, #160]	@ (800162c <MX_ADC1_Init+0xf0>)
 800158a:	2204      	movs	r2, #4
 800158c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800158e:	4b27      	ldr	r3, [pc, #156]	@ (800162c <MX_ADC1_Init+0xf0>)
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001596:	4b25      	ldr	r3, [pc, #148]	@ (800162c <MX_ADC1_Init+0xf0>)
 8001598:	2201      	movs	r2, #1
 800159a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800159c:	4823      	ldr	r0, [pc, #140]	@ (800162c <MX_ADC1_Init+0xf0>)
 800159e:	f002 ff43 	bl	8004428 <HAL_ADC_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015a8:	f001 ff6c 	bl	8003484 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015b0:	2301      	movs	r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80015b4:	2307      	movs	r3, #7
 80015b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b8:	463b      	mov	r3, r7
 80015ba:	4619      	mov	r1, r3
 80015bc:	481b      	ldr	r0, [pc, #108]	@ (800162c <MX_ADC1_Init+0xf0>)
 80015be:	f003 f8e3 	bl	8004788 <HAL_ADC_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015c8:	f001 ff5c 	bl	8003484 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015d0:	2302      	movs	r3, #2
 80015d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d4:	463b      	mov	r3, r7
 80015d6:	4619      	mov	r1, r3
 80015d8:	4814      	ldr	r0, [pc, #80]	@ (800162c <MX_ADC1_Init+0xf0>)
 80015da:	f003 f8d5 	bl	8004788 <HAL_ADC_ConfigChannel>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80015e4:	f001 ff4e 	bl	8003484 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80015e8:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <MX_ADC1_Init+0xfc>)
 80015ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015ec:	2303      	movs	r3, #3
 80015ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80015f0:	2306      	movs	r3, #6
 80015f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f4:	463b      	mov	r3, r7
 80015f6:	4619      	mov	r1, r3
 80015f8:	480c      	ldr	r0, [pc, #48]	@ (800162c <MX_ADC1_Init+0xf0>)
 80015fa:	f003 f8c5 	bl	8004788 <HAL_ADC_ConfigChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001604:	f001 ff3e 	bl	8003484 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001608:	2311      	movs	r3, #17
 800160a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800160c:	2304      	movs	r3, #4
 800160e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	4619      	mov	r1, r3
 8001614:	4805      	ldr	r0, [pc, #20]	@ (800162c <MX_ADC1_Init+0xf0>)
 8001616:	f003 f8b7 	bl	8004788 <HAL_ADC_ConfigChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001620:	f001 ff30 	bl	8003484 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000888 	.word	0x20000888
 8001630:	40012000 	.word	0x40012000
 8001634:	0f000001 	.word	0x0f000001
 8001638:	10000012 	.word	0x10000012

0800163c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a2d      	ldr	r2, [pc, #180]	@ (8001710 <HAL_ADC_MspInit+0xd4>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d154      	bne.n	8001708 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800165e:	4b2d      	ldr	r3, [pc, #180]	@ (8001714 <HAL_ADC_MspInit+0xd8>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001662:	4a2c      	ldr	r2, [pc, #176]	@ (8001714 <HAL_ADC_MspInit+0xd8>)
 8001664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001668:	6453      	str	r3, [r2, #68]	@ 0x44
 800166a:	4b2a      	ldr	r3, [pc, #168]	@ (8001714 <HAL_ADC_MspInit+0xd8>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	4b27      	ldr	r3, [pc, #156]	@ (8001714 <HAL_ADC_MspInit+0xd8>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a26      	ldr	r2, [pc, #152]	@ (8001714 <HAL_ADC_MspInit+0xd8>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <HAL_ADC_MspInit+0xd8>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_FSR1_Pin|ADC_FSR2_Pin;
 800168e:	2303      	movs	r3, #3
 8001690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001692:	2303      	movs	r3, #3
 8001694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	481d      	ldr	r0, [pc, #116]	@ (8001718 <HAL_ADC_MspInit+0xdc>)
 80016a2:	f004 f865 	bl	8005770 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80016a6:	4b1d      	ldr	r3, [pc, #116]	@ (800171c <HAL_ADC_MspInit+0xe0>)
 80016a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001720 <HAL_ADC_MspInit+0xe4>)
 80016aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80016ac:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <HAL_ADC_MspInit+0xe0>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b2:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <HAL_ADC_MspInit+0xe0>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b8:	4b18      	ldr	r3, [pc, #96]	@ (800171c <HAL_ADC_MspInit+0xe0>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016be:	4b17      	ldr	r3, [pc, #92]	@ (800171c <HAL_ADC_MspInit+0xe0>)
 80016c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016c6:	4b15      	ldr	r3, [pc, #84]	@ (800171c <HAL_ADC_MspInit+0xe0>)
 80016c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016ce:	4b13      	ldr	r3, [pc, #76]	@ (800171c <HAL_ADC_MspInit+0xe0>)
 80016d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <HAL_ADC_MspInit+0xe0>)
 80016d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016de:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <HAL_ADC_MspInit+0xe0>)
 80016e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016e4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e6:	4b0d      	ldr	r3, [pc, #52]	@ (800171c <HAL_ADC_MspInit+0xe0>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016ec:	480b      	ldr	r0, [pc, #44]	@ (800171c <HAL_ADC_MspInit+0xe0>)
 80016ee:	f003 fc35 	bl	8004f5c <HAL_DMA_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80016f8:	f001 fec4 	bl	8003484 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a07      	ldr	r2, [pc, #28]	@ (800171c <HAL_ADC_MspInit+0xe0>)
 8001700:	639a      	str	r2, [r3, #56]	@ 0x38
 8001702:	4a06      	ldr	r2, [pc, #24]	@ (800171c <HAL_ADC_MspInit+0xe0>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	@ 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40012000 	.word	0x40012000
 8001714:	40023800 	.word	0x40023800
 8001718:	40020000 	.word	0x40020000
 800171c:	200008d0 	.word	0x200008d0
 8001720:	40026410 	.word	0x40026410

08001724 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1 && adc1SemHandle != NULL) {
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a07      	ldr	r2, [pc, #28]	@ (8001750 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d108      	bne.n	8001748 <HAL_ADC_ConvCpltCallback+0x24>
 8001736:	4b07      	ldr	r3, [pc, #28]	@ (8001754 <HAL_ADC_ConvCpltCallback+0x30>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d004      	beq.n	8001748 <HAL_ADC_ConvCpltCallback+0x24>
    osSemaphoreRelease(adc1SemHandle);
 800173e:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <HAL_ADC_ConvCpltCallback+0x30>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f00c f93e 	bl	800d9c4 <osSemaphoreRelease>
  }
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40012000 	.word	0x40012000
 8001754:	20006cbc 	.word	0x20006cbc

08001758 <SCB_InvalidateDCache_by_Addr>:
{
 8001758:	b480      	push	{r7}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800176a:	2320      	movs	r3, #32
 800176c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800176e:	f3bf 8f4f 	dsb	sy
}
 8001772:	bf00      	nop
    while (op_size > 0) {
 8001774:	e00b      	b.n	800178e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8001776:	4a0d      	ldr	r2, [pc, #52]	@ (80017ac <SCB_InvalidateDCache_by_Addr+0x54>)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4413      	add	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2b00      	cmp	r3, #0
 8001792:	dcf0      	bgt.n	8001776 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8001794:	f3bf 8f4f 	dsb	sy
}
 8001798:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800179a:	f3bf 8f6f 	isb	sy
}
 800179e:	bf00      	nop
}
 80017a0:	bf00      	nop
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80017c2:	2320      	movs	r3, #32
 80017c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80017c6:	f3bf 8f4f 	dsb	sy
}
 80017ca:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 80017cc:	e00b      	b.n	80017e6 <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 80017ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001804 <SCB_CleanDCache_by_Addr+0x54>)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4413      	add	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	dcf0      	bgt.n	80017ce <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80017ec:	f3bf 8f4f 	dsb	sy
}
 80017f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017f2:	f3bf 8f6f 	isb	sy
}
 80017f6:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80017f8:	bf00      	nop
 80017fa:	371c      	adds	r7, #28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <ADC1_Init>:
/* Function definitions -------------------------------------------------------*/
/**
 * @brief  ADC1 Peripheral and buffer Init
 */
void ADC1_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
  MX_ADC1_Init();
 800180e:	f7ff fe95 	bl	800153c <MX_ADC1_Init>
  adc1_avg_ctx.hadc         = &hadc1;
 8001812:	4b1a      	ldr	r3, [pc, #104]	@ (800187c <ADC1_Init+0x74>)
 8001814:	4a1a      	ldr	r2, [pc, #104]	@ (8001880 <ADC1_Init+0x78>)
 8001816:	601a      	str	r2, [r3, #0]
  adc1_avg_ctx.buf_size     = ADC1_CHANNEL_COUNT;
 8001818:	4b18      	ldr	r3, [pc, #96]	@ (800187c <ADC1_Init+0x74>)
 800181a:	2204      	movs	r2, #4
 800181c:	731a      	strb	r2, [r3, #12]
  adc1_avg_ctx.dma_buf      = adc1_dma_buffer;
 800181e:	4b17      	ldr	r3, [pc, #92]	@ (800187c <ADC1_Init+0x74>)
 8001820:	4a18      	ldr	r2, [pc, #96]	@ (8001884 <ADC1_Init+0x7c>)
 8001822:	605a      	str	r2, [r3, #4]
  adc1_avg_ctx.filtered_buf = adc1_filtered_buffer;
 8001824:	4b15      	ldr	r3, [pc, #84]	@ (800187c <ADC1_Init+0x74>)
 8001826:	4a18      	ldr	r2, [pc, #96]	@ (8001888 <ADC1_Init+0x80>)
 8001828:	609a      	str	r2, [r3, #8]
  adc1_avg_ctx.sem = adc1SemHandle;
 800182a:	4b18      	ldr	r3, [pc, #96]	@ (800188c <ADC1_Init+0x84>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a13      	ldr	r2, [pc, #76]	@ (800187c <ADC1_Init+0x74>)
 8001830:	6113      	str	r3, [r2, #16]

  for (uint8_t i = 0; i < ADC1_CHANNEL_COUNT; i++) {
 8001832:	2300      	movs	r3, #0
 8001834:	71fb      	strb	r3, [r7, #7]
 8001836:	e012      	b.n	800185e <ADC1_Init+0x56>
    adc1_dma_buffer[i] = 0;
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	4a12      	ldr	r2, [pc, #72]	@ (8001884 <ADC1_Init+0x7c>)
 800183c:	2100      	movs	r1, #0
 800183e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    adc1_filtered_buffer[i] = 0;
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	4a10      	ldr	r2, [pc, #64]	@ (8001888 <ADC1_Init+0x80>)
 8001846:	2100      	movs	r1, #0
 8001848:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    // Implement with EEPROM recovery later -> return false if needed
    adc1_avg_ctx.error_flags = 0;
 800184c:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <ADC1_Init+0x74>)
 800184e:	2200      	movs	r2, #0
 8001850:	751a      	strb	r2, [r3, #20]
    adc1_avg_ctx.status_flags = 0;
 8001852:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <ADC1_Init+0x74>)
 8001854:	2200      	movs	r2, #0
 8001856:	755a      	strb	r2, [r3, #21]
  for (uint8_t i = 0; i < ADC1_CHANNEL_COUNT; i++) {
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	3301      	adds	r3, #1
 800185c:	71fb      	strb	r3, [r7, #7]
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b03      	cmp	r3, #3
 8001862:	d9e9      	bls.n	8001838 <ADC1_Init+0x30>
  }

  adc1_avg_ctx.status_flags |= ADC_STATUS_INITIALIZED;
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <ADC1_Init+0x74>)
 8001866:	7d5b      	ldrb	r3, [r3, #21]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b02      	ldr	r3, [pc, #8]	@ (800187c <ADC1_Init+0x74>)
 8001872:	755a      	strb	r2, [r3, #21]
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000930 	.word	0x20000930
 8001880:	20000888 	.word	0x20000888
 8001884:	20000960 	.word	0x20000960
 8001888:	20000968 	.word	0x20000968
 800188c:	20006cbc 	.word	0x20006cbc

08001890 <ADC_ReadAverage>:
 * @param  filter_size Moving-average window
 * @param  timeout ADC sampling timeout ms
 * @retval Is adc sampling successful
 */
adc_status_t ADC_ReadAverage(ADC_AvgCtx_t* ctx, uint8_t filter_size, TickType_t timeout)
{
 8001890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001894:	b089      	sub	sp, #36	@ 0x24
 8001896:	af00      	add	r7, sp, #0
 8001898:	60f8      	str	r0, [r7, #12]
 800189a:	460b      	mov	r3, r1
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	72fb      	strb	r3, [r7, #11]
 80018a0:	466b      	mov	r3, sp
 80018a2:	461e      	mov	r6, r3
  if (!(ctx->status_flags & ADC_STATUS_INITIALIZED)) {
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	7d5b      	ldrb	r3, [r3, #21]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <ADC_ReadAverage+0x36>
    ctx->error_flags |= ADC_INVALID_PARAM;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	7d1b      	ldrb	r3, [r3, #20]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	751a      	strb	r2, [r3, #20]
    return ADC_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0c6      	b.n	8001a54 <ADC_ReadAverage+0x1c4>
  }

  uint32_t sum_buffer[ctx->buf_size];
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	7b19      	ldrb	r1, [r3, #12]
 80018ca:	460b      	mov	r3, r1
 80018cc:	3b01      	subs	r3, #1
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	b2cb      	uxtb	r3, r1
 80018d2:	2200      	movs	r2, #0
 80018d4:	4698      	mov	r8, r3
 80018d6:	4691      	mov	r9, r2
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80018e4:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80018e8:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80018ec:	b2cb      	uxtb	r3, r1
 80018ee:	2200      	movs	r2, #0
 80018f0:	461c      	mov	r4, r3
 80018f2:	4615      	mov	r5, r2
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	016b      	lsls	r3, r5, #5
 80018fe:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001902:	0162      	lsls	r2, r4, #5
 8001904:	460b      	mov	r3, r1
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	3307      	adds	r3, #7
 800190a:	08db      	lsrs	r3, r3, #3
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	ebad 0d03 	sub.w	sp, sp, r3
 8001912:	466b      	mov	r3, sp
 8001914:	3303      	adds	r3, #3
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	617b      	str	r3, [r7, #20]
  for (uint8_t i = 0; i < ctx->buf_size; i++) {
 800191c:	2300      	movs	r3, #0
 800191e:	77fb      	strb	r3, [r7, #31]
 8001920:	e007      	b.n	8001932 <ADC_ReadAverage+0xa2>
    sum_buffer[i] = 0;
 8001922:	7ffa      	ldrb	r2, [r7, #31]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2100      	movs	r1, #0
 8001928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (uint8_t i = 0; i < ctx->buf_size; i++) {
 800192c:	7ffb      	ldrb	r3, [r7, #31]
 800192e:	3301      	adds	r3, #1
 8001930:	77fb      	strb	r3, [r7, #31]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	7b1b      	ldrb	r3, [r3, #12]
 8001936:	7ffa      	ldrb	r2, [r7, #31]
 8001938:	429a      	cmp	r2, r3
 800193a:	d3f2      	bcc.n	8001922 <ADC_ReadAverage+0x92>
  }

  for (uint8_t i = 0; i < filter_size; i++) {
 800193c:	2300      	movs	r3, #0
 800193e:	77bb      	strb	r3, [r7, #30]
 8001940:	e062      	b.n	8001a08 <ADC_ReadAverage+0x178>
    // Clean data cache before DMA write
    SCB_CleanDCache_by_Addr((uint32_t*)ctx->dma_buf, ctx->buf_size * sizeof(uint16_t));
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	7b1b      	ldrb	r3, [r3, #12]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4619      	mov	r1, r3
 800194e:	4610      	mov	r0, r2
 8001950:	f7ff ff2e 	bl	80017b0 <SCB_CleanDCache_by_Addr>

    if (HAL_ADC_Start_DMA(ctx->hadc, (uint32_t*)ctx->dma_buf, ctx->buf_size) != HAL_OK) {
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	7b1b      	ldrb	r3, [r3, #12]
 8001960:	461a      	mov	r2, r3
 8001962:	f002 fda5 	bl	80044b0 <HAL_ADC_Start_DMA>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d009      	beq.n	8001980 <ADC_ReadAverage+0xf0>
      ctx->error_flags |= ADC_START_ERROR;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	7d1b      	ldrb	r3, [r3, #20]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	b2da      	uxtb	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	751a      	strb	r2, [r3, #20]
      return ADC_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e069      	b.n	8001a54 <ADC_ReadAverage+0x1c4>
    }
    // wait until ISR signals
    if (osSemaphoreAcquire(ctx->sem, timeout) != osOK) {
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4618      	mov	r0, r3
 8001988:	f00b ffb6 	bl	800d8f8 <osSemaphoreAcquire>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00e      	beq.n	80019b0 <ADC_ReadAverage+0x120>
      ctx->error_flags |= ADC_START_ERROR;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	7d1b      	ldrb	r3, [r3, #20]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	b2da      	uxtb	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	751a      	strb	r2, [r3, #20]
      HAL_ADC_Stop_DMA(ctx->hadc);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 fe80 	bl	80046ac <HAL_ADC_Stop_DMA>
      return ADC_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e051      	b.n	8001a54 <ADC_ReadAverage+0x1c4>
    }
    HAL_ADC_Stop_DMA(ctx->hadc);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 fe79 	bl	80046ac <HAL_ADC_Stop_DMA>

    // Invalidate data Cache after DMA read
    SCB_InvalidateDCache_by_Addr((uint32_t*)ctx->dma_buf, ctx->buf_size * sizeof(uint16_t));
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	7b1b      	ldrb	r3, [r3, #12]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4619      	mov	r1, r3
 80019c6:	4610      	mov	r0, r2
 80019c8:	f7ff fec6 	bl	8001758 <SCB_InvalidateDCache_by_Addr>

    // Sum all the samples
    for (uint8_t ch = 0; ch < ctx->buf_size; ch++) {
 80019cc:	2300      	movs	r3, #0
 80019ce:	777b      	strb	r3, [r7, #29]
 80019d0:	e012      	b.n	80019f8 <ADC_ReadAverage+0x168>
      sum_buffer[ch] += ctx->dma_buf[ch];
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	7f7b      	ldrb	r3, [r7, #29]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	b299      	uxth	r1, r3
 80019e0:	7f7a      	ldrb	r2, [r7, #29]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e8:	7f7a      	ldrb	r2, [r7, #29]
 80019ea:	4419      	add	r1, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (uint8_t ch = 0; ch < ctx->buf_size; ch++) {
 80019f2:	7f7b      	ldrb	r3, [r7, #29]
 80019f4:	3301      	adds	r3, #1
 80019f6:	777b      	strb	r3, [r7, #29]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	7b1b      	ldrb	r3, [r3, #12]
 80019fc:	7f7a      	ldrb	r2, [r7, #29]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d3e7      	bcc.n	80019d2 <ADC_ReadAverage+0x142>
  for (uint8_t i = 0; i < filter_size; i++) {
 8001a02:	7fbb      	ldrb	r3, [r7, #30]
 8001a04:	3301      	adds	r3, #1
 8001a06:	77bb      	strb	r3, [r7, #30]
 8001a08:	7fba      	ldrb	r2, [r7, #30]
 8001a0a:	7afb      	ldrb	r3, [r7, #11]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d398      	bcc.n	8001942 <ADC_ReadAverage+0xb2>
    }
  }

  // Calculate filtered buffer
  for (uint8_t ch = 0; ch < ctx->buf_size; ch++) {
 8001a10:	2300      	movs	r3, #0
 8001a12:	773b      	strb	r3, [r7, #28]
 8001a14:	e010      	b.n	8001a38 <ADC_ReadAverage+0x1a8>
    ctx->filtered_buf[ch] = (uint16_t)(sum_buffer[ch] / filter_size);
 8001a16:	7f3a      	ldrb	r2, [r7, #28]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a1e:	7afb      	ldrb	r3, [r7, #11]
 8001a20:	fbb2 f1f3 	udiv	r1, r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	7f3b      	ldrb	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	b28a      	uxth	r2, r1
 8001a30:	801a      	strh	r2, [r3, #0]
  for (uint8_t ch = 0; ch < ctx->buf_size; ch++) {
 8001a32:	7f3b      	ldrb	r3, [r7, #28]
 8001a34:	3301      	adds	r3, #1
 8001a36:	773b      	strb	r3, [r7, #28]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	7b1b      	ldrb	r3, [r3, #12]
 8001a3c:	7f3a      	ldrb	r2, [r7, #28]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d3e9      	bcc.n	8001a16 <ADC_ReadAverage+0x186>
  }

  ctx->status_flags |= ADC_OPERATIONAL;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	7d5b      	ldrb	r3, [r3, #21]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	755a      	strb	r2, [r3, #21]
  return ADC_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	46b5      	mov	sp, r6
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3724      	adds	r7, #36	@ 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001a60 <ADC_ReadVdda>:

/**
 * @brief  Get VDDA ADC reading
 * @retval VDDA in 1 mv
 */
uint16_t ADC_ReadVdda(void) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
  // If no readings have been made, read once
  if (!(adc1_avg_ctx.status_flags & ADC_OPERATIONAL)) {
 8001a66:	4b36      	ldr	r3, [pc, #216]	@ (8001b40 <ADC_ReadVdda+0xe0>)
 8001a68:	7d5b      	ldrb	r3, [r3, #21]
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d109      	bne.n	8001a88 <ADC_ReadVdda+0x28>
    if (ADC_ReadAverage(&adc1_avg_ctx, NO_FILTER, ADC_TIMEOUT) == ADC_ERROR)
 8001a74:	2202      	movs	r2, #2
 8001a76:	2101      	movs	r1, #1
 8001a78:	4831      	ldr	r0, [pc, #196]	@ (8001b40 <ADC_ReadVdda+0xe0>)
 8001a7a:	f7ff ff09 	bl	8001890 <ADC_ReadAverage>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <ADC_ReadVdda+0x28>
      return 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	e057      	b.n	8001b38 <ADC_ReadVdda+0xd8>
  }

  uint16_t vref_raw = adc1_filtered_buffer[VDDA_CHANNEL_INDEX];
 8001a88:	4b2e      	ldr	r3, [pc, #184]	@ (8001b44 <ADC_ReadVdda+0xe4>)
 8001a8a:	88db      	ldrh	r3, [r3, #6]
 8001a8c:	80fb      	strh	r3, [r7, #6]
  // Flag if sensor is faulty
  if (vref_raw == 0U) {
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d110      	bne.n	8001ab6 <ADC_ReadVdda+0x56>
    if (adc1_avg_ctx.status_flags & ADC_OPERATIONAL) {
 8001a94:	4b2a      	ldr	r3, [pc, #168]	@ (8001b40 <ADC_ReadVdda+0xe0>)
 8001a96:	7d5b      	ldrb	r3, [r3, #21]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d007      	beq.n	8001ab2 <ADC_ReadVdda+0x52>
      adc1_avg_ctx.error_flags |= ADC_VREF_SENSOR_ERROR;
 8001aa2:	4b27      	ldr	r3, [pc, #156]	@ (8001b40 <ADC_ReadVdda+0xe0>)
 8001aa4:	7d1b      	ldrb	r3, [r3, #20]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f043 0308 	orr.w	r3, r3, #8
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b24      	ldr	r3, [pc, #144]	@ (8001b40 <ADC_ReadVdda+0xe0>)
 8001ab0:	751a      	strb	r2, [r3, #20]
    }
    return 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e040      	b.n	8001b38 <ADC_ReadVdda+0xd8>
  }

  // Convert raw sample to 12 bit resolution
  uint8_t adc1_resolution = ADC_GET_RESOLUTION_BITS(&hadc1);
 8001ab6:	4b24      	ldr	r3, [pc, #144]	@ (8001b48 <ADC_ReadVdda+0xe8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	0e1b      	lsrs	r3, r3, #24
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f1c3 0306 	rsb	r3, r3, #6
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	717b      	strb	r3, [r7, #5]
  vref_raw <<= (12U - adc1_resolution);
 8001ad0:	88fa      	ldrh	r2, [r7, #6]
 8001ad2:	797b      	ldrb	r3, [r7, #5]
 8001ad4:	f1c3 030c 	rsb	r3, r3, #12
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	80fb      	strh	r3, [r7, #6]

  // Vref_cal / 3300mv = Vref_raw / Vdda
  const uint16_t vref_cal = *VREFINT_CAL_ADDR_CMSIS;
 8001ade:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <ADC_ReadVdda+0xec>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	807b      	strh	r3, [r7, #2]
  uint16_t vdda = (uint16_t)((uint32_t)(VDDA_3300 * vref_cal + (vref_raw >> 1U)) / vref_raw);
 8001ae4:	887b      	ldrh	r3, [r7, #2]
 8001ae6:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001aea:	fb02 f303 	mul.w	r3, r2, r3
 8001aee:	88fa      	ldrh	r2, [r7, #6]
 8001af0:	0852      	lsrs	r2, r2, #1
 8001af2:	b292      	uxth	r2, r2
 8001af4:	441a      	add	r2, r3
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afc:	803b      	strh	r3, [r7, #0]
  if (vdda <= VDDA_LOW_THRESHOLD) {
 8001afe:	883b      	ldrh	r3, [r7, #0]
 8001b00:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 8001b04:	d809      	bhi.n	8001b1a <ADC_ReadVdda+0xba>
    sys_error_flags |= MCU_VDDA_LOW_ERROR;
 8001b06:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <ADC_ReadVdda+0xf0>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <ADC_ReadVdda+0xf0>)
 8001b14:	701a      	strb	r2, [r3, #0]
    return vdda;
 8001b16:	883b      	ldrh	r3, [r7, #0]
 8001b18:	e00e      	b.n	8001b38 <ADC_ReadVdda+0xd8>
  }
  if (vdda >= VDDA_HIGH_THRESHOLD) {
 8001b1a:	883b      	ldrh	r3, [r7, #0]
 8001b1c:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8001b20:	d309      	bcc.n	8001b36 <ADC_ReadVdda+0xd6>
    sys_error_flags |= MCU_VDDA_HIGH_ERROR;
 8001b22:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <ADC_ReadVdda+0xf0>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b08      	ldr	r3, [pc, #32]	@ (8001b50 <ADC_ReadVdda+0xf0>)
 8001b30:	701a      	strb	r2, [r3, #0]
    return vdda;
 8001b32:	883b      	ldrh	r3, [r7, #0]
 8001b34:	e000      	b.n	8001b38 <ADC_ReadVdda+0xd8>
  }

  return vdda;
 8001b36:	883b      	ldrh	r3, [r7, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000930 	.word	0x20000930
 8001b44:	20000968 	.word	0x20000968
 8001b48:	20000888 	.word	0x20000888
 8001b4c:	1ff0f44a 	.word	0x1ff0f44a
 8001b50:	20000974 	.word	0x20000974

08001b54 <ADC_ReadTempSensor>:
 * @brief  Get MCU temperature sensor reading
 * @param  vdda_mv Current VDDA in millivolt
 * @retval MCU temperature in unit 1 celsius
 */
uint8_t ADC_ReadTempSensor(uint16_t vdda_mv)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80fb      	strh	r3, [r7, #6]
  // If no readings have been made, read once
  if (!(adc1_avg_ctx.status_flags & ADC_OPERATIONAL)) {
 8001b5e:	4b49      	ldr	r3, [pc, #292]	@ (8001c84 <ADC_ReadTempSensor+0x130>)
 8001b60:	7d5b      	ldrb	r3, [r3, #21]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <ADC_ReadTempSensor+0x2c>
    if (ADC_ReadAverage(&adc1_avg_ctx, NO_FILTER, ADC_TIMEOUT) == ADC_ERROR)
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	2101      	movs	r1, #1
 8001b70:	4844      	ldr	r0, [pc, #272]	@ (8001c84 <ADC_ReadTempSensor+0x130>)
 8001b72:	f7ff fe8d 	bl	8001890 <ADC_ReadAverage>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <ADC_ReadTempSensor+0x2c>
      return 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	e07d      	b.n	8001c7c <ADC_ReadTempSensor+0x128>
  }

  uint16_t vtemp_raw = adc1_filtered_buffer[TEMPSENSOR_CHANNEL_INDEX];
 8001b80:	4b41      	ldr	r3, [pc, #260]	@ (8001c88 <ADC_ReadTempSensor+0x134>)
 8001b82:	889b      	ldrh	r3, [r3, #4]
 8001b84:	82fb      	strh	r3, [r7, #22]
  // Flag if sensor is faulty
  if (vtemp_raw == 0U) {
 8001b86:	8afb      	ldrh	r3, [r7, #22]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10e      	bne.n	8001baa <ADC_ReadTempSensor+0x56>
    if (adc1_avg_ctx.status_flags & ADC_OPERATIONAL) {
 8001b8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001c84 <ADC_ReadTempSensor+0x130>)
 8001b8e:	7d5b      	ldrb	r3, [r3, #21]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <ADC_ReadTempSensor+0x56>
      adc1_avg_ctx.error_flags |= ADC_TEMP_SENSOR_ERROR;
 8001b9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c84 <ADC_ReadTempSensor+0x130>)
 8001b9c:	7d1b      	ldrb	r3, [r3, #20]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f043 0310 	orr.w	r3, r3, #16
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4b37      	ldr	r3, [pc, #220]	@ (8001c84 <ADC_ReadTempSensor+0x130>)
 8001ba8:	751a      	strb	r2, [r3, #20]
    }
  }

  // Calibrate temp sensor reading to 3.3v as the interpolation values are taken at 3.3v
  uint8_t adc1_resolution = ADC_GET_RESOLUTION_BITS(&hadc1);
 8001baa:	4b38      	ldr	r3, [pc, #224]	@ (8001c8c <ADC_ReadTempSensor+0x138>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	0e1b      	lsrs	r3, r3, #24
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	f1c3 0306 	rsb	r3, r3, #6
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	757b      	strb	r3, [r7, #21]
  vtemp_raw = ADC_CALIBRATE_SAMPLE(vtemp_raw, vdda_mv, adc1_resolution);
 8001bc4:	8afa      	ldrh	r2, [r7, #22]
 8001bc6:	7d7b      	ldrb	r3, [r7, #21]
 8001bc8:	f1c3 030c 	rsb	r3, r3, #12
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	7d7b      	ldrb	r3, [r7, #21]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	fb03 f101 	mul.w	r1, r3, r1
 8001be0:	88fa      	ldrh	r2, [r7, #6]
 8001be2:	4613      	mov	r3, r2
 8001be4:	031b      	lsls	r3, r3, #12
 8001be6:	1a9b      	subs	r3, r3, r2
 8001be8:	f203 6372 	addw	r3, r3, #1650	@ 0x672
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	4a28      	ldr	r2, [pc, #160]	@ (8001c90 <ADC_ReadTempSensor+0x13c>)
 8001bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf4:	095b      	lsrs	r3, r3, #5
 8001bf6:	085b      	lsrs	r3, r3, #1
 8001bf8:	4419      	add	r1, r3
 8001bfa:	88fa      	ldrh	r2, [r7, #6]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	031b      	lsls	r3, r3, #12
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	f203 6372 	addw	r3, r3, #1650	@ 0x672
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	4a21      	ldr	r2, [pc, #132]	@ (8001c90 <ADC_ReadTempSensor+0x13c>)
 8001c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c14:	82fb      	strh	r3, [r7, #22]

  const uint16_t temp30_cal = *TEMPSENSOR_CAL1_ADDR_CMSIS;
 8001c16:	4b1f      	ldr	r3, [pc, #124]	@ (8001c94 <ADC_ReadTempSensor+0x140>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	827b      	strh	r3, [r7, #18]
  const uint16_t temp110_cal = *TEMPSENSOR_CAL2_ADDR_CMSIS;
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001c98 <ADC_ReadTempSensor+0x144>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	823b      	strh	r3, [r7, #16]
  uint16_t delta_cal = (temp110_cal - temp30_cal);
 8001c22:	8a3a      	ldrh	r2, [r7, #16]
 8001c24:	8a7b      	ldrh	r3, [r7, #18]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	81fb      	strh	r3, [r7, #14]

  // Linear interpolation T(C) = (((raw – V30) × (110-30) + round)/(V110 – V30)) + 30
  uint8_t temp_c = (uint8_t)( (((vtemp_raw - temp30_cal) * (110U - 30U) + (delta_cal >> 1U)) / delta_cal) + 30U );
 8001c2a:	8afa      	ldrh	r2, [r7, #22]
 8001c2c:	8a7b      	ldrh	r3, [r7, #18]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	461a      	mov	r2, r3
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	89fb      	ldrh	r3, [r7, #14]
 8001c3e:	085b      	lsrs	r3, r3, #1
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	441a      	add	r2, r3
 8001c44:	89fb      	ldrh	r3, [r7, #14]
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	331e      	adds	r3, #30
 8001c4e:	737b      	strb	r3, [r7, #13]

  static uint8_t error_count = 0U;
  if (temp_c >= MCU_TEMP_HIGH_THRESHOLD) {
 8001c50:	7b7b      	ldrb	r3, [r7, #13]
 8001c52:	2b77      	cmp	r3, #119	@ 0x77
 8001c54:	d911      	bls.n	8001c7a <ADC_ReadTempSensor+0x126>
    error_count += 1U;
 8001c56:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <ADC_ReadTempSensor+0x148>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <ADC_ReadTempSensor+0x148>)
 8001c60:	701a      	strb	r2, [r3, #0]
    if (error_count > 5U) {
 8001c62:	4b0e      	ldr	r3, [pc, #56]	@ (8001c9c <ADC_ReadTempSensor+0x148>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2b05      	cmp	r3, #5
 8001c68:	d907      	bls.n	8001c7a <ADC_ReadTempSensor+0x126>
      sys_error_flags |= MCU_TEMP_HIGH_ERROR;
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca0 <ADC_ReadTempSensor+0x14c>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <ADC_ReadTempSensor+0x14c>)
 8001c78:	701a      	strb	r2, [r3, #0]
    }
  }
  return temp_c;
 8001c7a:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000930 	.word	0x20000930
 8001c88:	20000968 	.word	0x20000968
 8001c8c:	20000888 	.word	0x20000888
 8001c90:	09ee009f 	.word	0x09ee009f
 8001c94:	1ff0f44c 	.word	0x1ff0f44c
 8001c98:	1ff0f44e 	.word	0x1ff0f44e
 8001c9c:	20000973 	.word	0x20000973
 8001ca0:	20000974 	.word	0x20000974

08001ca4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <MX_DMA_Init+0x48>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	4a0f      	ldr	r2, [pc, #60]	@ (8001cec <MX_DMA_Init+0x48>)
 8001cb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cec <MX_DMA_Init+0x48>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2105      	movs	r1, #5
 8001cc6:	2038      	movs	r0, #56	@ 0x38
 8001cc8:	f003 f910 	bl	8004eec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ccc:	2038      	movs	r0, #56	@ 0x38
 8001cce:	f003 f929 	bl	8004f24 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 7, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2107      	movs	r1, #7
 8001cd6:	203a      	movs	r0, #58	@ 0x3a
 8001cd8:	f003 f908 	bl	8004eec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001cdc:	203a      	movs	r0, #58	@ 0x3a
 8001cde:	f003 f921 	bl	8004f24 <HAL_NVIC_EnableIRQ>

}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800

08001cf0 <RoboSoccer_errorHandler>:
volatile uint8_t sys_error_flags;


/* Function definitions -------------------------------------------------------*/
void RoboSoccer_errorHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0

  for (;;) {
    printf("====== System Error  ======\r\n");
 8001cf4:	4819      	ldr	r0, [pc, #100]	@ (8001d5c <RoboSoccer_errorHandler+0x6c>)
 8001cf6:	f012 fe47 	bl	8014988 <puts>
    printf("Hardware Fault Flags   : 0x%04X\r\n", hard_fault_flags);
 8001cfa:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <RoboSoccer_errorHandler+0x70>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	4619      	mov	r1, r3
 8001d02:	4818      	ldr	r0, [pc, #96]	@ (8001d64 <RoboSoccer_errorHandler+0x74>)
 8001d04:	f012 fdd8 	bl	80148b8 <iprintf>
    printf("Bus Error Address      : 0x%08lX\r\n", bus_error_addr);
 8001d08:	4b17      	ldr	r3, [pc, #92]	@ (8001d68 <RoboSoccer_errorHandler+0x78>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4817      	ldr	r0, [pc, #92]	@ (8001d6c <RoboSoccer_errorHandler+0x7c>)
 8001d10:	f012 fdd2 	bl	80148b8 <iprintf>
    printf("Mem Access Error Addr  : 0x%08lX\r\n", mem_access_error_addr);
 8001d14:	4b16      	ldr	r3, [pc, #88]	@ (8001d70 <RoboSoccer_errorHandler+0x80>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4816      	ldr	r0, [pc, #88]	@ (8001d74 <RoboSoccer_errorHandler+0x84>)
 8001d1c:	f012 fdcc 	bl	80148b8 <iprintf>
    printf("ADC1 Error Flags       : 0x%02X\r\n", adc1_avg_ctx.error_flags);
 8001d20:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <RoboSoccer_errorHandler+0x88>)
 8001d22:	7d1b      	ldrb	r3, [r3, #20]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	4619      	mov	r1, r3
 8001d28:	4814      	ldr	r0, [pc, #80]	@ (8001d7c <RoboSoccer_errorHandler+0x8c>)
 8001d2a:	f012 fdc5 	bl	80148b8 <iprintf>
    printf("IMU Error Flags        : 0x%08lX\r\n", imu_error_flags);
 8001d2e:	4b14      	ldr	r3, [pc, #80]	@ (8001d80 <RoboSoccer_errorHandler+0x90>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4619      	mov	r1, r3
 8001d34:	4813      	ldr	r0, [pc, #76]	@ (8001d84 <RoboSoccer_errorHandler+0x94>)
 8001d36:	f012 fdbf 	bl	80148b8 <iprintf>
    printf("===========================\r\n");
 8001d3a:	4813      	ldr	r0, [pc, #76]	@ (8001d88 <RoboSoccer_errorHandler+0x98>)
 8001d3c:	f012 fe24 	bl	8014988 <puts>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d40:	b672      	cpsid	i
}
 8001d42:	bf00      	nop
    __disable_irq();
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001d44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d48:	4810      	ldr	r0, [pc, #64]	@ (8001d8c <RoboSoccer_errorHandler+0x9c>)
 8001d4a:	f003 ffe2 	bl	8005d12 <HAL_GPIO_TogglePin>

    HAL_Delay(500);
 8001d4e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d52:	f002 fb45 	bl	80043e0 <HAL_Delay>
    printf("====== System Error  ======\r\n");
 8001d56:	bf00      	nop
 8001d58:	e7cc      	b.n	8001cf4 <RoboSoccer_errorHandler+0x4>
 8001d5a:	bf00      	nop
 8001d5c:	0801678c 	.word	0x0801678c
 8001d60:	200076f8 	.word	0x200076f8
 8001d64:	080167ac 	.word	0x080167ac
 8001d68:	200000d8 	.word	0x200000d8
 8001d6c:	080167d0 	.word	0x080167d0
 8001d70:	200000dc 	.word	0x200000dc
 8001d74:	080167f4 	.word	0x080167f4
 8001d78:	20000930 	.word	0x20000930
 8001d7c:	08016818 	.word	0x08016818
 8001d80:	200072e2 	.word	0x200072e2
 8001d84:	0801683c 	.word	0x0801683c
 8001d88:	08016860 	.word	0x08016860
 8001d8c:	40020400 	.word	0x40020400

08001d90 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
return 0;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  // Refresh watch dog timer
  // If any task hangs for more than 1 second, trigger a software reset
  HAL_IWDG_Refresh(&hiwdg);
 8001db4:	4802      	ldr	r0, [pc, #8]	@ (8001dc0 <vApplicationIdleHook+0x10>)
 8001db6:	f003 ffdf 	bl	8005d78 <HAL_IWDG_Refresh>
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20007430 	.word	0x20007430

08001dc4 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  (void)xTask;
  printf("Stack overflow in %s\n\r", pcTaskName);
 8001dce:	6839      	ldr	r1, [r7, #0]
 8001dd0:	4803      	ldr	r0, [pc, #12]	@ (8001de0 <vApplicationStackOverflowHook+0x1c>)
 8001dd2:	f012 fd71 	bl	80148b8 <iprintf>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	080168e0 	.word	0x080168e0

08001de4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of adc1Sem */
  adc1SemHandle = osSemaphoreNew(1, 1, &adc1Sem_attributes);
 8001de8:	4a25      	ldr	r2, [pc, #148]	@ (8001e80 <MX_FREERTOS_Init+0x9c>)
 8001dea:	2101      	movs	r1, #1
 8001dec:	2001      	movs	r0, #1
 8001dee:	f00b fce7 	bl	800d7c0 <osSemaphoreNew>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4a23      	ldr	r2, [pc, #140]	@ (8001e84 <MX_FREERTOS_Init+0xa0>)
 8001df6:	6013      	str	r3, [r2, #0]

  /* creation of motorTxSem */
  motorTxSemHandle = osSemaphoreNew(1, 1, &motorTxSem_attributes);
 8001df8:	4a23      	ldr	r2, [pc, #140]	@ (8001e88 <MX_FREERTOS_Init+0xa4>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f00b fcdf 	bl	800d7c0 <osSemaphoreNew>
 8001e02:	4603      	mov	r3, r0
 8001e04:	4a21      	ldr	r2, [pc, #132]	@ (8001e8c <MX_FREERTOS_Init+0xa8>)
 8001e06:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  (void)osSemaphoreAcquire(adc1SemHandle, 0);
 8001e08:	4b1e      	ldr	r3, [pc, #120]	@ (8001e84 <MX_FREERTOS_Init+0xa0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f00b fd72 	bl	800d8f8 <osSemaphoreAcquire>
  (void)osSemaphoreAcquire(motorTxSemHandle, 0);
 8001e14:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <MX_FREERTOS_Init+0xa8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f00b fd6c 	bl	800d8f8 <osSemaphoreAcquire>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of motorRxQueue */
  motorRxQueueHandle = osMessageQueueNew (32, sizeof(uint8_t), &motorRxQueue_attributes);
 8001e20:	4a1b      	ldr	r2, [pc, #108]	@ (8001e90 <MX_FREERTOS_Init+0xac>)
 8001e22:	2101      	movs	r1, #1
 8001e24:	2020      	movs	r0, #32
 8001e26:	f00b fe25 	bl	800da74 <osMessageQueueNew>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4a19      	ldr	r2, [pc, #100]	@ (8001e94 <MX_FREERTOS_Init+0xb0>)
 8001e2e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of AnalogTask */
  AnalogTaskHandle = osThreadNew(StartAnalogTask, NULL, &AnalogTask_attributes);
 8001e30:	4a19      	ldr	r2, [pc, #100]	@ (8001e98 <MX_FREERTOS_Init+0xb4>)
 8001e32:	2100      	movs	r1, #0
 8001e34:	4819      	ldr	r0, [pc, #100]	@ (8001e9c <MX_FREERTOS_Init+0xb8>)
 8001e36:	f00b fbcb 	bl	800d5d0 <osThreadNew>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4a18      	ldr	r2, [pc, #96]	@ (8001ea0 <MX_FREERTOS_Init+0xbc>)
 8001e3e:	6013      	str	r3, [r2, #0]

  /* creation of GeneralTask0 */
  GeneralTask0Handle = osThreadNew(StartGeneralTask0, NULL, &GeneralTask0_attributes);
 8001e40:	4a18      	ldr	r2, [pc, #96]	@ (8001ea4 <MX_FREERTOS_Init+0xc0>)
 8001e42:	2100      	movs	r1, #0
 8001e44:	4818      	ldr	r0, [pc, #96]	@ (8001ea8 <MX_FREERTOS_Init+0xc4>)
 8001e46:	f00b fbc3 	bl	800d5d0 <osThreadNew>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4a17      	ldr	r2, [pc, #92]	@ (8001eac <MX_FREERTOS_Init+0xc8>)
 8001e4e:	6013      	str	r3, [r2, #0]

  /* creation of ImuTask */
  ImuTaskHandle = osThreadNew(StartImuTask, NULL, &ImuTask_attributes);
 8001e50:	4a17      	ldr	r2, [pc, #92]	@ (8001eb0 <MX_FREERTOS_Init+0xcc>)
 8001e52:	2100      	movs	r1, #0
 8001e54:	4817      	ldr	r0, [pc, #92]	@ (8001eb4 <MX_FREERTOS_Init+0xd0>)
 8001e56:	f00b fbbb 	bl	800d5d0 <osThreadNew>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4a16      	ldr	r2, [pc, #88]	@ (8001eb8 <MX_FREERTOS_Init+0xd4>)
 8001e5e:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(StartMotorTask, NULL, &MotorTask_attributes);
 8001e60:	4a16      	ldr	r2, [pc, #88]	@ (8001ebc <MX_FREERTOS_Init+0xd8>)
 8001e62:	2100      	movs	r1, #0
 8001e64:	4816      	ldr	r0, [pc, #88]	@ (8001ec0 <MX_FREERTOS_Init+0xdc>)
 8001e66:	f00b fbb3 	bl	800d5d0 <osThreadNew>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4a15      	ldr	r2, [pc, #84]	@ (8001ec4 <MX_FREERTOS_Init+0xe0>)
 8001e6e:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of ServoEvent */
  ServoEventHandle = osEventFlagsNew(&ServoEvent_attributes);
 8001e70:	4815      	ldr	r0, [pc, #84]	@ (8001ec8 <MX_FREERTOS_Init+0xe4>)
 8001e72:	f00b fc53 	bl	800d71c <osEventFlagsNew>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4a14      	ldr	r2, [pc, #80]	@ (8001ecc <MX_FREERTOS_Init+0xe8>)
 8001e7a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	08016ddc 	.word	0x08016ddc
 8001e84:	20006cbc 	.word	0x20006cbc
 8001e88:	08016dec 	.word	0x08016dec
 8001e8c:	20006d10 	.word	0x20006d10
 8001e90:	08016dc4 	.word	0x08016dc4
 8001e94:	20006c48 	.word	0x20006c48
 8001e98:	08016d34 	.word	0x08016d34
 8001e9c:	08001ed1 	.word	0x08001ed1
 8001ea0:	20000978 	.word	0x20000978
 8001ea4:	08016d58 	.word	0x08016d58
 8001ea8:	08001f61 	.word	0x08001f61
 8001eac:	20001a2c 	.word	0x20001a2c
 8001eb0:	08016d7c 	.word	0x08016d7c
 8001eb4:	08001f8d 	.word	0x08001f8d
 8001eb8:	20002ae0 	.word	0x20002ae0
 8001ebc:	08016da0 	.word	0x08016da0
 8001ec0:	08001fc9 	.word	0x08001fc9
 8001ec4:	20004b94 	.word	0x20004b94
 8001ec8:	08016dfc 	.word	0x08016dfc
 8001ecc:	20006d64 	.word	0x20006d64

08001ed0 <StartAnalogTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAnalogTask */
void StartAnalogTask(void *argument)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAnalogTask */
  (void)argument;
  TickType_t xWakeTime = xTaskGetTickCount();
 8001ed8:	f00d fc62 	bl	800f7a0 <xTaskGetTickCount>
 8001edc:	4603      	mov	r3, r0
 8001ede:	60fb      	str	r3, [r7, #12]
  ADC1_Init();
 8001ee0:	f7ff fc92 	bl	8001808 <ADC1_Init>
  printf("Running AnalogTask 1ms loop \n\r");
 8001ee4:	4818      	ldr	r0, [pc, #96]	@ (8001f48 <StartAnalogTask+0x78>)
 8001ee6:	f012 fce7 	bl	80148b8 <iprintf>
  /* Infinite loop */
  for(;;)
  {
    // Read from adc1
    if (ADC_ReadAverage(&adc1_avg_ctx, ADC1_FILTER_SIZE, ADC_TIMEOUT) != ADC_OK)  {
 8001eea:	2202      	movs	r2, #2
 8001eec:	2106      	movs	r1, #6
 8001eee:	4817      	ldr	r0, [pc, #92]	@ (8001f4c <StartAnalogTask+0x7c>)
 8001ef0:	f7ff fcce 	bl	8001890 <ADC_ReadAverage>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <StartAnalogTask+0x2e>
      RoboSoccer_errorHandler();
 8001efa:	f7ff fef9 	bl	8001cf0 <RoboSoccer_errorHandler>
    }
    // Read Vref
    VDDA_mv = ADC_ReadVdda();
 8001efe:	f7ff fdaf 	bl	8001a60 <ADC_ReadVdda>
 8001f02:	4603      	mov	r3, r0
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <StartAnalogTask+0x80>)
 8001f08:	801a      	strh	r2, [r3, #0]
    MCU_TEMP_c = ADC_ReadTempSensor(VDDA_mv);
 8001f0a:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <StartAnalogTask+0x80>)
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fe20 	bl	8001b54 <ADC_ReadTempSensor>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <StartAnalogTask+0x84>)
 8001f1a:	701a      	strb	r2, [r3, #0]
    if (adc1_filtered_buffer[0] > 1500) {
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <StartAnalogTask+0x88>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d903      	bls.n	8001f30 <StartAnalogTask+0x60>
      LD2_GPIO_Port->BSRR = (uint32_t)LD2_Pin;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <StartAnalogTask+0x8c>)
 8001f2a:	2280      	movs	r2, #128	@ 0x80
 8001f2c:	619a      	str	r2, [r3, #24]
 8001f2e:	e003      	b.n	8001f38 <StartAnalogTask+0x68>
    } else {
      LD2_GPIO_Port->BSRR = (uint32_t)LD2_Pin << 16;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <StartAnalogTask+0x8c>)
 8001f32:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001f36:	619a      	str	r2, [r3, #24]
    }
    vTaskDelayUntil(&xWakeTime, pdMS_TO_TICKS(2));
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f00d fa84 	bl	800f44c <vTaskDelayUntil>
    if (ADC_ReadAverage(&adc1_avg_ctx, ADC1_FILTER_SIZE, ADC_TIMEOUT) != ADC_OK)  {
 8001f44:	e7d1      	b.n	8001eea <StartAnalogTask+0x1a>
 8001f46:	bf00      	nop
 8001f48:	080168f8 	.word	0x080168f8
 8001f4c:	20000930 	.word	0x20000930
 8001f50:	20000970 	.word	0x20000970
 8001f54:	20000972 	.word	0x20000972
 8001f58:	20000968 	.word	0x20000968
 8001f5c:	40020400 	.word	0x40020400

08001f60 <StartGeneralTask0>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGeneralTask0 */
void StartGeneralTask0(void *argument)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGeneralTask0 */
  (void)argument;
  TickType_t xWakeTime = xTaskGetTickCount();
 8001f68:	f00d fc1a 	bl	800f7a0 <xTaskGetTickCount>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	60fb      	str	r3, [r7, #12]
  printf("Running GeneralTask 100ms loop \r\n");
 8001f70:	4805      	ldr	r0, [pc, #20]	@ (8001f88 <StartGeneralTask0+0x28>)
 8001f72:	f012 fd09 	bl	8014988 <puts>
  {
//
//    printf("imu_timestamp: %ld \r\n ", imu_spi.rx_timestamp);
//    printf("adc1[0] Reading: %d \r\n",adc1_filtered_buffer[0]);
//    printf("adc1[1] Reading: %d \r\n",adc1_filtered_buffer[1]);
    vTaskDelayUntil(&xWakeTime, pdMS_TO_TICKS(1000));
 8001f76:	f107 030c 	add.w	r3, r7, #12
 8001f7a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f00d fa64 	bl	800f44c <vTaskDelayUntil>
 8001f84:	e7f7      	b.n	8001f76 <StartGeneralTask0+0x16>
 8001f86:	bf00      	nop
 8001f88:	08016918 	.word	0x08016918

08001f8c <StartImuTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartImuTask */
void StartImuTask(void *argument)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartImuTask */
  (void)argument;
  TickType_t xWakeTime = xTaskGetTickCount();
 8001f94:	f00d fc04 	bl	800f7a0 <xTaskGetTickCount>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60fb      	str	r3, [r7, #12]
  if (imu_sys_init() != IMU_OK) {
 8001f9c:	f000 fff2 	bl	8002f84 <imu_sys_init>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <StartImuTask+0x1e>
    RoboSoccer_errorHandler();
 8001fa6:	f7ff fea3 	bl	8001cf0 <RoboSoccer_errorHandler>
  }
  printf("Running ImuTask 1ms loop \n\r");
 8001faa:	4806      	ldr	r0, [pc, #24]	@ (8001fc4 <StartImuTask+0x38>)
 8001fac:	f012 fc84 	bl	80148b8 <iprintf>
  /* Infinite loop */
  for(;;)
  {
    // Cyclically service sh2
    imu_service();
 8001fb0:	f001 f820 	bl	8002ff4 <imu_service>
    vTaskDelayUntil(&xWakeTime, pdMS_TO_TICKS(1));
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	2101      	movs	r1, #1
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f00d fa46 	bl	800f44c <vTaskDelayUntil>
    imu_service();
 8001fc0:	bf00      	nop
 8001fc2:	e7f5      	b.n	8001fb0 <StartImuTask+0x24>
 8001fc4:	0801693c 	.word	0x0801693c

08001fc8 <StartMotorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorTask */
void StartMotorTask(void *argument)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	@ 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  (void)argument;
  TickType_t xWakeTime = xTaskGetTickCount();
 8001fd0:	f00d fbe6 	bl	800f7a0 <xTaskGetTickCount>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	61bb      	str	r3, [r7, #24]
  // Give the first second to imu task
  if (!STServo_Init(&hservo, &huart1)) {
 8001fd8:	4981      	ldr	r1, [pc, #516]	@ (80021e0 <StartMotorTask+0x218>)
 8001fda:	4882      	ldr	r0, [pc, #520]	@ (80021e4 <StartMotorTask+0x21c>)
 8001fdc:	f7fe fb4a 	bl	8000674 <STServo_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f083 0301 	eor.w	r3, r3, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <StartMotorTask+0x2c>
    printf("Motor Init Failed \n\r");
 8001fec:	487e      	ldr	r0, [pc, #504]	@ (80021e8 <StartMotorTask+0x220>)
 8001fee:	f012 fc63 	bl	80148b8 <iprintf>
 8001ff2:	e002      	b.n	8001ffa <StartMotorTask+0x32>
  } else {
    printf("Motor Init Success \n\r");
 8001ff4:	487d      	ldr	r0, [pc, #500]	@ (80021ec <StartMotorTask+0x224>)
 8001ff6:	f012 fc5f 	bl	80148b8 <iprintf>
  }

  for (uint8_t id = 0; id < MAX_SERVO_ID; id++) {
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002000:	e01d      	b.n	800203e <StartMotorTask+0x76>
    if (!STServo_Ping(&hservo, id)) {
 8002002:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002006:	4619      	mov	r1, r3
 8002008:	4876      	ldr	r0, [pc, #472]	@ (80021e4 <StartMotorTask+0x21c>)
 800200a:	f7fe febd 	bl	8000d88 <STServo_Ping>
 800200e:	4603      	mov	r3, r0
 8002010:	f083 0301 	eor.w	r3, r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d006      	beq.n	8002028 <StartMotorTask+0x60>
      printf("Motor %d NOT Found \n\r" , id);
 800201a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800201e:	4619      	mov	r1, r3
 8002020:	4873      	ldr	r0, [pc, #460]	@ (80021f0 <StartMotorTask+0x228>)
 8002022:	f012 fc49 	bl	80148b8 <iprintf>
 8002026:	e005      	b.n	8002034 <StartMotorTask+0x6c>
    } else {
      printf("Motor %d Connected \n\r", id);
 8002028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800202c:	4619      	mov	r1, r3
 800202e:	4871      	ldr	r0, [pc, #452]	@ (80021f4 <StartMotorTask+0x22c>)
 8002030:	f012 fc42 	bl	80148b8 <iprintf>
  for (uint8_t id = 0; id < MAX_SERVO_ID; id++) {
 8002034:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002038:	3301      	adds	r3, #1
 800203a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800203e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002042:	2b14      	cmp	r3, #20
 8002044:	d9dd      	bls.n	8002002 <StartMotorTask+0x3a>
    }
  }

  const int16_t position[5] = {0, 1024, 2048, 3072, 4095};
 8002046:	4a6c      	ldr	r2, [pc, #432]	@ (80021f8 <StartMotorTask+0x230>)
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	ca07      	ldmia	r2, {r0, r1, r2}
 800204e:	c303      	stmia	r3!, {r0, r1}
 8002050:	801a      	strh	r2, [r3, #0]
  const uint16_t speed = 4095;
 8002052:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8002056:	84bb      	strh	r3, [r7, #36]	@ 0x24
  const uint8_t acc = 0; // Ramp up as fast as possible
 8002058:	2300      	movs	r3, #0
 800205a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint16_t time = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	843b      	strh	r3, [r7, #32]
  uint8_t step = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  /* Infinite loop */
  for(;;)
  {
    if (btn_pressed) {
 8002068:	4b64      	ldr	r3, [pc, #400]	@ (80021fc <StartMotorTask+0x234>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 809a 	beq.w	80021a8 <StartMotorTask+0x1e0>
      btn_pressed = 0;
 8002074:	4b61      	ldr	r3, [pc, #388]	@ (80021fc <StartMotorTask+0x234>)
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
      // Write control table
      servo_control[2].goal_acc = acc;
 800207a:	4a61      	ldr	r2, [pc, #388]	@ (8002200 <StartMotorTask+0x238>)
 800207c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002080:	7513      	strb	r3, [r2, #20]
      servo_control[2].goal_position = position[step];
 8002082:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	3328      	adds	r3, #40	@ 0x28
 800208a:	443b      	add	r3, r7
 800208c:	f933 2c1c 	ldrsh.w	r2, [r3, #-28]
 8002090:	4b5b      	ldr	r3, [pc, #364]	@ (8002200 <StartMotorTask+0x238>)
 8002092:	821a      	strh	r2, [r3, #16]
      servo_control[2].goal_speed = speed;
 8002094:	4a5a      	ldr	r2, [pc, #360]	@ (8002200 <StartMotorTask+0x238>)
 8002096:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002098:	8253      	strh	r3, [r2, #18]
      servo_control[2].goal_time = time;
 800209a:	4a59      	ldr	r2, [pc, #356]	@ (8002200 <StartMotorTask+0x238>)
 800209c:	8c3b      	ldrh	r3, [r7, #32]
 800209e:	82d3      	strh	r3, [r2, #22]

      servo_control[4].goal_acc = acc;
 80020a0:	4a57      	ldr	r2, [pc, #348]	@ (8002200 <StartMotorTask+0x238>)
 80020a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020a6:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
      servo_control[4].goal_position = position[4 - step];
 80020aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80020ae:	f1c3 0304 	rsb	r3, r3, #4
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	3328      	adds	r3, #40	@ 0x28
 80020b6:	443b      	add	r3, r7
 80020b8:	f933 2c1c 	ldrsh.w	r2, [r3, #-28]
 80020bc:	4b50      	ldr	r3, [pc, #320]	@ (8002200 <StartMotorTask+0x238>)
 80020be:	841a      	strh	r2, [r3, #32]
      servo_control[4].goal_speed = speed;
 80020c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002200 <StartMotorTask+0x238>)
 80020c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80020c4:	8453      	strh	r3, [r2, #34]	@ 0x22
      servo_control[4].goal_time = time;
 80020c6:	4a4e      	ldr	r2, [pc, #312]	@ (8002200 <StartMotorTask+0x238>)
 80020c8:	8c3b      	ldrh	r3, [r7, #32]
 80020ca:	84d3      	strh	r3, [r2, #38]	@ 0x26

      servo_control[8].goal_acc = acc;
 80020cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002200 <StartMotorTask+0x238>)
 80020ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020d2:	f882 3044 	strb.w	r3, [r2, #68]	@ 0x44
      servo_control[8].goal_position = position[4 - step];
 80020d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80020da:	f1c3 0304 	rsb	r3, r3, #4
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	3328      	adds	r3, #40	@ 0x28
 80020e2:	443b      	add	r3, r7
 80020e4:	f933 2c1c 	ldrsh.w	r2, [r3, #-28]
 80020e8:	4b45      	ldr	r3, [pc, #276]	@ (8002200 <StartMotorTask+0x238>)
 80020ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      servo_control[8].goal_speed = speed;
 80020ee:	4a44      	ldr	r2, [pc, #272]	@ (8002200 <StartMotorTask+0x238>)
 80020f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80020f2:	f8a2 3042 	strh.w	r3, [r2, #66]	@ 0x42
      servo_control[8].goal_time = time;
 80020f6:	4a42      	ldr	r2, [pc, #264]	@ (8002200 <StartMotorTask+0x238>)
 80020f8:	8c3b      	ldrh	r3, [r7, #32]
 80020fa:	f8a2 3046 	strh.w	r3, [r2, #70]	@ 0x46


      servo_control[15].goal_acc = acc;
 80020fe:	4a40      	ldr	r2, [pc, #256]	@ (8002200 <StartMotorTask+0x238>)
 8002100:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002104:	f882 307c 	strb.w	r3, [r2, #124]	@ 0x7c
      servo_control[15].goal_position = position[step];
 8002108:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	3328      	adds	r3, #40	@ 0x28
 8002110:	443b      	add	r3, r7
 8002112:	f933 2c1c 	ldrsh.w	r2, [r3, #-28]
 8002116:	4b3a      	ldr	r3, [pc, #232]	@ (8002200 <StartMotorTask+0x238>)
 8002118:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
      servo_control[15].goal_speed = speed;
 800211c:	4a38      	ldr	r2, [pc, #224]	@ (8002200 <StartMotorTask+0x238>)
 800211e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002120:	f8a2 307a 	strh.w	r3, [r2, #122]	@ 0x7a
      servo_control[15].goal_time = time;
 8002124:	4a36      	ldr	r2, [pc, #216]	@ (8002200 <StartMotorTask+0x238>)
 8002126:	8c3b      	ldrh	r3, [r7, #32]
 8002128:	f8a2 307e 	strh.w	r3, [r2, #126]	@ 0x7e


      servo_control[17].goal_acc = acc;
 800212c:	4a34      	ldr	r2, [pc, #208]	@ (8002200 <StartMotorTask+0x238>)
 800212e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002132:	f882 308c 	strb.w	r3, [r2, #140]	@ 0x8c
      servo_control[17].goal_position = position[4 - step];
 8002136:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800213a:	f1c3 0304 	rsb	r3, r3, #4
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	3328      	adds	r3, #40	@ 0x28
 8002142:	443b      	add	r3, r7
 8002144:	f933 2c1c 	ldrsh.w	r2, [r3, #-28]
 8002148:	4b2d      	ldr	r3, [pc, #180]	@ (8002200 <StartMotorTask+0x238>)
 800214a:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      servo_control[17].goal_speed = speed;
 800214e:	4a2c      	ldr	r2, [pc, #176]	@ (8002200 <StartMotorTask+0x238>)
 8002150:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002152:	f8a2 308a 	strh.w	r3, [r2, #138]	@ 0x8a
      servo_control[17].goal_time = time;
 8002156:	4a2a      	ldr	r2, [pc, #168]	@ (8002200 <StartMotorTask+0x238>)
 8002158:	8c3b      	ldrh	r3, [r7, #32]
 800215a:	f8a2 308e 	strh.w	r3, [r2, #142]	@ 0x8e

      if (STServo_SyncWritePosition(&hservo) != SERVO_OK) {
 800215e:	4821      	ldr	r0, [pc, #132]	@ (80021e4 <StartMotorTask+0x21c>)
 8002160:	f7fe ff2a 	bl	8000fb8 <STServo_SyncWritePosition>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00e      	beq.n	8002188 <StartMotorTask+0x1c0>
        STServo_Error_t err = STServo_GetLastError(&hservo);
 800216a:	481e      	ldr	r0, [pc, #120]	@ (80021e4 <StartMotorTask+0x21c>)
 800216c:	f7ff f99e 	bl	80014ac <STServo_GetLastError>
 8002170:	4603      	mov	r3, r0
 8002172:	77fb      	strb	r3, [r7, #31]
        printf("Servo %u error: %s\n\r", 0xFE, STServo_GetErrorString(err));
 8002174:	7ffb      	ldrb	r3, [r7, #31]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff f9a6 	bl	80014c8 <STServo_GetErrorString>
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	21fe      	movs	r1, #254	@ 0xfe
 8002182:	4820      	ldr	r0, [pc, #128]	@ (8002204 <StartMotorTask+0x23c>)
 8002184:	f012 fb98 	bl	80148b8 <iprintf>
      }

      step = (step + 1) % 5;
 8002188:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	4b1e      	ldr	r3, [pc, #120]	@ (8002208 <StartMotorTask+0x240>)
 8002190:	fb83 1302 	smull	r1, r3, r3, r2
 8002194:	1059      	asrs	r1, r3, #1
 8002196:	17d3      	asrs	r3, r2, #31
 8002198:	1ac9      	subs	r1, r1, r3
 800219a:	460b      	mov	r3, r1
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	1ad1      	subs	r1, r2, r3
 80021a2:	460b      	mov	r3, r1
 80021a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
//    STServo_ReadPosition(&hservo, 2);
//    STServo_ReadPosition(&hservo, 4);
//    STServo_ReadPosition(&hservo, 8);
//    STServo_ReadPosition(&hservo, 15);
//    STServo_ReadPosition(&hservo, 17);
    if (STServo_SyncRead(&hservo) != SERVO_OK) {
 80021a8:	480e      	ldr	r0, [pc, #56]	@ (80021e4 <StartMotorTask+0x21c>)
 80021aa:	f7ff f82b 	bl	8001204 <STServo_SyncRead>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00e      	beq.n	80021d2 <StartMotorTask+0x20a>
      STServo_Error_t err = STServo_GetLastError(&hservo);
 80021b4:	480b      	ldr	r0, [pc, #44]	@ (80021e4 <StartMotorTask+0x21c>)
 80021b6:	f7ff f979 	bl	80014ac <STServo_GetLastError>
 80021ba:	4603      	mov	r3, r0
 80021bc:	77bb      	strb	r3, [r7, #30]
      printf("Servo %u error: %s\n\r", 0xFE, STServo_GetErrorString(err));
 80021be:	7fbb      	ldrb	r3, [r7, #30]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff f981 	bl	80014c8 <STServo_GetErrorString>
 80021c6:	4603      	mov	r3, r0
 80021c8:	461a      	mov	r2, r3
 80021ca:	21fe      	movs	r1, #254	@ 0xfe
 80021cc:	480d      	ldr	r0, [pc, #52]	@ (8002204 <StartMotorTask+0x23c>)
 80021ce:	f012 fb73 	bl	80148b8 <iprintf>
    }
    vTaskDelayUntil(&xWakeTime, pdMS_TO_TICKS(2));
 80021d2:	f107 0318 	add.w	r3, r7, #24
 80021d6:	2102      	movs	r1, #2
 80021d8:	4618      	mov	r0, r3
 80021da:	f00d f937 	bl	800f44c <vTaskDelayUntil>
    if (btn_pressed) {
 80021de:	e743      	b.n	8002068 <StartMotorTask+0xa0>
 80021e0:	2000774c 	.word	0x2000774c
 80021e4:	200002e0 	.word	0x200002e0
 80021e8:	08016958 	.word	0x08016958
 80021ec:	08016970 	.word	0x08016970
 80021f0:	08016988 	.word	0x08016988
 80021f4:	080169a0 	.word	0x080169a0
 80021f8:	080169d0 	.word	0x080169d0
 80021fc:	20006d68 	.word	0x20006d68
 8002200:	200007e0 	.word	0x200007e0
 8002204:	080169b8 	.word	0x080169b8
 8002208:	66666667 	.word	0x66666667

0800220c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08e      	sub	sp, #56	@ 0x38
 8002210:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	60da      	str	r2, [r3, #12]
 8002220:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002222:	4b78      	ldr	r3, [pc, #480]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	4a77      	ldr	r2, [pc, #476]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 8002228:	f043 0304 	orr.w	r3, r3, #4
 800222c:	6313      	str	r3, [r2, #48]	@ 0x30
 800222e:	4b75      	ldr	r3, [pc, #468]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	623b      	str	r3, [r7, #32]
 8002238:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800223a:	4b72      	ldr	r3, [pc, #456]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	4a71      	ldr	r2, [pc, #452]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 8002240:	f043 0320 	orr.w	r3, r3, #32
 8002244:	6313      	str	r3, [r2, #48]	@ 0x30
 8002246:	4b6f      	ldr	r3, [pc, #444]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002252:	4b6c      	ldr	r3, [pc, #432]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	4a6b      	ldr	r2, [pc, #428]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 8002258:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800225c:	6313      	str	r3, [r2, #48]	@ 0x30
 800225e:	4b69      	ldr	r3, [pc, #420]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800226a:	4b66      	ldr	r3, [pc, #408]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	4a65      	ldr	r2, [pc, #404]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 8002270:	f043 0301 	orr.w	r3, r3, #1
 8002274:	6313      	str	r3, [r2, #48]	@ 0x30
 8002276:	4b63      	ldr	r3, [pc, #396]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002282:	4b60      	ldr	r3, [pc, #384]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	4a5f      	ldr	r2, [pc, #380]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 8002288:	f043 0302 	orr.w	r3, r3, #2
 800228c:	6313      	str	r3, [r2, #48]	@ 0x30
 800228e:	4b5d      	ldr	r3, [pc, #372]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800229a:	4b5a      	ldr	r3, [pc, #360]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	4a59      	ldr	r2, [pc, #356]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 80022a0:	f043 0308 	orr.w	r3, r3, #8
 80022a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a6:	4b57      	ldr	r3, [pc, #348]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022b2:	4b54      	ldr	r3, [pc, #336]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	4a53      	ldr	r2, [pc, #332]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 80022b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022be:	4b51      	ldr	r3, [pc, #324]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	4a4d      	ldr	r2, [pc, #308]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 80022d0:	f043 0310 	orr.w	r3, r3, #16
 80022d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d6:	4b4b      	ldr	r3, [pc, #300]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	607b      	str	r3, [r7, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI_IMU_RST_Pin|SPI_IMU_CS_Pin, GPIO_PIN_RESET);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2103      	movs	r1, #3
 80022e6:	4848      	ldr	r0, [pc, #288]	@ (8002408 <MX_GPIO_Init+0x1fc>)
 80022e8:	f003 fcfa 	bl	8005ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_IMU_PS0_WAKE_GPIO_Port, SPI_IMU_PS0_WAKE_Pin, GPIO_PIN_SET);
 80022ec:	2201      	movs	r2, #1
 80022ee:	2104      	movs	r1, #4
 80022f0:	4845      	ldr	r0, [pc, #276]	@ (8002408 <MX_GPIO_Init+0x1fc>)
 80022f2:	f003 fcf5 	bl	8005ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_HS_ULPI_RST_GPIO_Port, USB_OTG_HS_ULPI_RST_Pin, GPIO_PIN_RESET);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2102      	movs	r1, #2
 80022fa:	4844      	ldr	r0, [pc, #272]	@ (800240c <MX_GPIO_Init+0x200>)
 80022fc:	f003 fcf0 	bl	8005ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002300:	2200      	movs	r2, #0
 8002302:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8002306:	4842      	ldr	r0, [pc, #264]	@ (8002410 <MX_GPIO_Init+0x204>)
 8002308:	f003 fcea 	bl	8005ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUT1_GPIO_Port, TEST_OUT1_Pin, GPIO_PIN_RESET);
 800230c:	2200      	movs	r2, #0
 800230e:	2120      	movs	r1, #32
 8002310:	4840      	ldr	r0, [pc, #256]	@ (8002414 <MX_GPIO_Init+0x208>)
 8002312:	f003 fce5 	bl	8005ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002316:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800231c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002320:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800232a:	4619      	mov	r1, r3
 800232c:	4837      	ldr	r0, [pc, #220]	@ (800240c <MX_GPIO_Init+0x200>)
 800232e:	f003 fa1f 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_IMU_RST_Pin SPI_IMU_PS0_WAKE_Pin */
  GPIO_InitStruct.Pin = SPI_IMU_RST_Pin|SPI_IMU_PS0_WAKE_Pin;
 8002332:	2305      	movs	r3, #5
 8002334:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002336:	2301      	movs	r3, #1
 8002338:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002346:	4619      	mov	r1, r3
 8002348:	482f      	ldr	r0, [pc, #188]	@ (8002408 <MX_GPIO_Init+0x1fc>)
 800234a:	f003 fa11 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_IMU_CS_Pin */
  GPIO_InitStruct.Pin = SPI_IMU_CS_Pin;
 800234e:	2302      	movs	r3, #2
 8002350:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002352:	2301      	movs	r3, #1
 8002354:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235a:	2303      	movs	r3, #3
 800235c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI_IMU_CS_GPIO_Port, &GPIO_InitStruct);
 800235e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002362:	4619      	mov	r1, r3
 8002364:	4828      	ldr	r0, [pc, #160]	@ (8002408 <MX_GPIO_Init+0x1fc>)
 8002366:	f003 fa03 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_HS_ULPI_RST_Pin */
  GPIO_InitStruct.Pin = USB_OTG_HS_ULPI_RST_Pin;
 800236a:	2302      	movs	r3, #2
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800236e:	2301      	movs	r3, #1
 8002370:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	2300      	movs	r3, #0
 8002378:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_OTG_HS_ULPI_RST_GPIO_Port, &GPIO_InitStruct);
 800237a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800237e:	4619      	mov	r1, r3
 8002380:	4822      	ldr	r0, [pc, #136]	@ (800240c <MX_GPIO_Init+0x200>)
 8002382:	f003 f9f5 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002386:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238c:	2301      	movs	r3, #1
 800238e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002394:	2300      	movs	r3, #0
 8002396:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002398:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800239c:	4619      	mov	r1, r3
 800239e:	481c      	ldr	r0, [pc, #112]	@ (8002410 <MX_GPIO_Init+0x204>)
 80023a0:	f003 f9e6 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUT1_Pin */
  GPIO_InitStruct.Pin = TEST_OUT1_Pin;
 80023a4:	2320      	movs	r3, #32
 80023a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a8:	2301      	movs	r3, #1
 80023aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b0:	2300      	movs	r3, #0
 80023b2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TEST_OUT1_GPIO_Port, &GPIO_InitStruct);
 80023b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023b8:	4619      	mov	r1, r3
 80023ba:	4816      	ldr	r0, [pc, #88]	@ (8002414 <MX_GPIO_Init+0x208>)
 80023bc:	f003 f9d8 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_IMU_INT_Pin */
  GPIO_InitStruct.Pin = SPI_IMU_INT_Pin;
 80023c0:	2301      	movs	r3, #1
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023c4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80023c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ca:	2301      	movs	r3, #1
 80023cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SPI_IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80023ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023d2:	4619      	mov	r1, r3
 80023d4:	4810      	ldr	r0, [pc, #64]	@ (8002418 <MX_GPIO_Init+0x20c>)
 80023d6:	f003 f9cb 	bl	8005770 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 4, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	2104      	movs	r1, #4
 80023de:	2006      	movs	r0, #6
 80023e0:	f002 fd84 	bl	8004eec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80023e4:	2006      	movs	r0, #6
 80023e6:	f002 fd9d 	bl	8004f24 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2105      	movs	r1, #5
 80023ee:	2028      	movs	r0, #40	@ 0x28
 80023f0:	f002 fd7c 	bl	8004eec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023f4:	2028      	movs	r0, #40	@ 0x28
 80023f6:	f002 fd95 	bl	8004f24 <HAL_NVIC_EnableIRQ>

}
 80023fa:	bf00      	nop
 80023fc:	3738      	adds	r7, #56	@ 0x38
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800
 8002408:	40021400 	.word	0x40021400
 800240c:	40020800 	.word	0x40020800
 8002410:	40020400 	.word	0x40020400
 8002414:	40021800 	.word	0x40021800
 8002418:	40021000 	.word	0x40021000

0800241c <imu_hal_init_gpio>:

/* USER CODE BEGIN 2 */
void imu_hal_init_gpio(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002422:	f107 030c 	add.w	r3, r7, #12
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	609a      	str	r2, [r3, #8]
 800242e:	60da      	str	r2, [r3, #12]
 8002430:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002432:	4b2a      	ldr	r3, [pc, #168]	@ (80024dc <imu_hal_init_gpio+0xc0>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	4a29      	ldr	r2, [pc, #164]	@ (80024dc <imu_hal_init_gpio+0xc0>)
 8002438:	f043 0304 	orr.w	r3, r3, #4
 800243c:	6313      	str	r3, [r2, #48]	@ 0x30
 800243e:	4b27      	ldr	r3, [pc, #156]	@ (80024dc <imu_hal_init_gpio+0xc0>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800244a:	4b24      	ldr	r3, [pc, #144]	@ (80024dc <imu_hal_init_gpio+0xc0>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	4a23      	ldr	r2, [pc, #140]	@ (80024dc <imu_hal_init_gpio+0xc0>)
 8002450:	f043 0320 	orr.w	r3, r3, #32
 8002454:	6313      	str	r3, [r2, #48]	@ 0x30
 8002456:	4b21      	ldr	r3, [pc, #132]	@ (80024dc <imu_hal_init_gpio+0xc0>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	f003 0320 	and.w	r3, r3, #32
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI_IMU_RST_Pin|SPI_IMU_CS_Pin, GPIO_PIN_RESET);
 8002462:	2200      	movs	r2, #0
 8002464:	2103      	movs	r1, #3
 8002466:	481e      	ldr	r0, [pc, #120]	@ (80024e0 <imu_hal_init_gpio+0xc4>)
 8002468:	f003 fc3a 	bl	8005ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_IMU_PS0_WAKE_GPIO_Port, SPI_IMU_PS0_WAKE_Pin, GPIO_PIN_SET);
 800246c:	2201      	movs	r2, #1
 800246e:	2104      	movs	r1, #4
 8002470:	481b      	ldr	r0, [pc, #108]	@ (80024e0 <imu_hal_init_gpio+0xc4>)
 8002472:	f003 fc35 	bl	8005ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SPI_IMU_RST_Pin|SPI_IMU_PS0_WAKE_Pin;
 8002476:	2305      	movs	r3, #5
 8002478:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247a:	2301      	movs	r3, #1
 800247c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002486:	f107 030c 	add.w	r3, r7, #12
 800248a:	4619      	mov	r1, r3
 800248c:	4814      	ldr	r0, [pc, #80]	@ (80024e0 <imu_hal_init_gpio+0xc4>)
 800248e:	f003 f96f 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_IMU_CS_Pin;
 8002492:	2302      	movs	r3, #2
 8002494:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002496:	2301      	movs	r3, #1
 8002498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249e:	2303      	movs	r3, #3
 80024a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80024a2:	f107 030c 	add.w	r3, r7, #12
 80024a6:	4619      	mov	r1, r3
 80024a8:	480d      	ldr	r0, [pc, #52]	@ (80024e0 <imu_hal_init_gpio+0xc4>)
 80024aa:	f003 f961 	bl	8005770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_IMU_INT_Pin;
 80024ae:	2301      	movs	r3, #1
 80024b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80024b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024b8:	2301      	movs	r3, #1
 80024ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI_IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80024bc:	f107 030c 	add.w	r3, r7, #12
 80024c0:	4619      	mov	r1, r3
 80024c2:	4808      	ldr	r0, [pc, #32]	@ (80024e4 <imu_hal_init_gpio+0xc8>)
 80024c4:	f003 f954 	bl	8005770 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 4, 0);
 80024c8:	2200      	movs	r2, #0
 80024ca:	2104      	movs	r1, #4
 80024cc:	2006      	movs	r0, #6
 80024ce:	f002 fd0d 	bl	8004eec <HAL_NVIC_SetPriority>
}
 80024d2:	bf00      	nop
 80024d4:	3720      	adds	r7, #32
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40021400 	.word	0x40021400
 80024e4:	40021000 	.word	0x40021000

080024e8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == SPI_IMU_INT_Pin) {
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d117      	bne.n	8002528 <HAL_GPIO_EXTI_Callback+0x40>
    imu_spi.rx_timestamp = MICRO_SECOND_STAMP();
 80024f8:	4b17      	ldr	r3, [pc, #92]	@ (8002558 <HAL_GPIO_EXTI_Callback+0x70>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fe:	4a17      	ldr	r2, [pc, #92]	@ (800255c <HAL_GPIO_EXTI_Callback+0x74>)
 8002500:	f8c2 3528 	str.w	r3, [r2, #1320]	@ 0x528
    imu_hal_flags |= IMU_INT_SERVICED;
 8002504:	4b16      	ldr	r3, [pc, #88]	@ (8002560 <HAL_GPIO_EXTI_Callback+0x78>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f043 0302 	orr.w	r3, r3, #2
 800250e:	b2da      	uxtb	r2, r3
 8002510:	4b13      	ldr	r3, [pc, #76]	@ (8002560 <HAL_GPIO_EXTI_Callback+0x78>)
 8002512:	701a      	strb	r2, [r3, #0]
    imu_hal_flags &= ~IMU_IN_RESET;
 8002514:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <HAL_GPIO_EXTI_Callback+0x78>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f023 0304 	bic.w	r3, r3, #4
 800251e:	b2da      	uxtb	r2, r3
 8002520:	4b0f      	ldr	r3, [pc, #60]	@ (8002560 <HAL_GPIO_EXTI_Callback+0x78>)
 8002522:	701a      	strb	r2, [r3, #0]

    // Start IMU SPI
    imu_spi_activate();
 8002524:	f000 f93c 	bl	80027a0 <imu_spi_activate>
  }

  if (GPIO_Pin == USER_Btn_Pin) {
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800252e:	d10e      	bne.n	800254e <HAL_GPIO_EXTI_Callback+0x66>
    uint32_t now = HAL_GetTick();
 8002530:	f001 ff4a 	bl	80043c8 <HAL_GetTick>
 8002534:	60f8      	str	r0, [r7, #12]
    // Register button press with debounce
    if (now - last_btn_press_time > BUTTON_DEBOUNCE_DELAY_MS) {
 8002536:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2bc8      	cmp	r3, #200	@ 0xc8
 8002540:	d905      	bls.n	800254e <HAL_GPIO_EXTI_Callback+0x66>
      last_btn_press_time = now;
 8002542:	4a08      	ldr	r2, [pc, #32]	@ (8002564 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6013      	str	r3, [r2, #0]
      btn_pressed = 1;
 8002548:	4b07      	ldr	r3, [pc, #28]	@ (8002568 <HAL_GPIO_EXTI_Callback+0x80>)
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
    }
  }

}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20007700 	.word	0x20007700
 800255c:	20006da0 	.word	0x20006da0
 8002560:	200072e0 	.word	0x200072e0
 8002564:	20006d6c 	.word	0x20006d6c
 8002568:	20006d68 	.word	0x20006d68

0800256c <imu_hal_init_hardware>:
static imu_status_t imu_start_reports(void);


/* Function definitions -------------------------------------------------------*/
static void imu_hal_init_hardware(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  imu_hal_init_timer();
 8002570:	f001 fc24 	bl	8003dbc <imu_hal_init_timer>
  imu_hal_init_gpio();
 8002574:	f7ff ff52 	bl	800241c <imu_hal_init_gpio>
  imu_hal_init_spi();
 8002578:	f001 f87e 	bl	8003678 <imu_hal_init_spi>
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}

08002580 <imu_hal_enable_interrupt>:

static void imu_hal_enable_interrupt(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002584:	2006      	movs	r0, #6
 8002586:	f002 fccd 	bl	8004f24 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800258a:	2033      	movs	r0, #51	@ 0x33
 800258c:	f002 fcca 	bl	8004f24 <HAL_NVIC_EnableIRQ>
}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}

08002594 <imu_hal_disable_interrupt>:

static void imu_hal_disable_interrupt(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(SPI3_IRQn);
 8002598:	2033      	movs	r0, #51	@ 0x33
 800259a:	f002 fcd1 	bl	8004f40 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800259e:	2006      	movs	r0, #6
 80025a0:	f002 fcce 	bl	8004f40 <HAL_NVIC_DisableIRQ>
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <imu_reset_delay>:
 *         indicating that the reset routine has completed and that the BNO08X
 *         is ready for communication." [2] section 5.2.1
 *         IMU_IN_RESET flag reset when INT pin is serviced
 */
static imu_status_t imu_reset_delay(uint32_t us_delay)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  volatile uint32_t now = MICRO_SECOND_STAMP();
 80025b0:	4b14      	ldr	r3, [pc, #80]	@ (8002604 <imu_reset_delay+0x5c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b6:	60bb      	str	r3, [r7, #8]
  uint32_t start = now;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	60fb      	str	r3, [r7, #12]
  while ((now - start) < us_delay) {
 80025bc:	e00c      	b.n	80025d8 <imu_reset_delay+0x30>
    now = MICRO_SECOND_STAMP();
 80025be:	4b11      	ldr	r3, [pc, #68]	@ (8002604 <imu_reset_delay+0x5c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c4:	60bb      	str	r3, [r7, #8]
    if (!(imu_hal_flags & IMU_IN_RESET)) {
 80025c6:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <imu_reset_delay+0x60>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <imu_reset_delay+0x30>
      return IMU_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e00e      	b.n	80025f6 <imu_reset_delay+0x4e>
  while ((now - start) < us_delay) {
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d8ec      	bhi.n	80025be <imu_reset_delay+0x16>
    }
  }

  // boot failed, INT pin never serviced
  imu_error_flags |= IMU_FAILED_TO_BOOT;
 80025e4:	4b09      	ldr	r3, [pc, #36]	@ (800260c <imu_reset_delay+0x64>)
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	4b06      	ldr	r3, [pc, #24]	@ (800260c <imu_reset_delay+0x64>)
 80025f2:	801a      	strh	r2, [r3, #0]
  return IMU_ERROR;
 80025f4:	2301      	movs	r3, #1
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20007700 	.word	0x20007700
 8002608:	200072e0 	.word	0x200072e0
 800260c:	200072e2 	.word	0x200072e2

08002610 <delay>:


static void delay(uint32_t us_delay)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  volatile uint32_t now = MICRO_SECOND_STAMP();
 8002618:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <delay+0x38>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	60bb      	str	r3, [r7, #8]
  uint32_t start = now;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	60fb      	str	r3, [r7, #12]
  while ((now - start) < us_delay) {
 8002624:	e003      	b.n	800262e <delay+0x1e>
      now = MICRO_SECOND_STAMP();
 8002626:	4b08      	ldr	r3, [pc, #32]	@ (8002648 <delay+0x38>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262c:	60bb      	str	r3, [r7, #8]
  while ((now - start) < us_delay) {
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	d8f5      	bhi.n	8002626 <delay+0x16>
  }
}
 800263a:	bf00      	nop
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	20007700 	.word	0x20007700

0800264c <spi_dummy_TransmitReceive>:
 * @brief  imu spi dummy blocking communication
 * @note   We need to establish SCLK in proper initial state.
 *         Do one SPI operation with reset asserted and no CS asserted to get clock sorted.
 */
static void spi_dummy_TransmitReceive(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af02      	add	r7, sp, #8
  uint8_t dummyTx[1];
  uint8_t dummyRx[1];

  memset(dummyTx, 0xAA, sizeof(dummyTx));
 8002652:	23aa      	movs	r3, #170	@ 0xaa
 8002654:	713b      	strb	r3, [r7, #4]
  HAL_SPI_TransmitReceive(&hspi3, dummyTx, dummyRx, sizeof(dummyTx), 2);
 8002656:	463a      	mov	r2, r7
 8002658:	1d39      	adds	r1, r7, #4
 800265a:	2302      	movs	r3, #2
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2301      	movs	r3, #1
 8002660:	4803      	ldr	r0, [pc, #12]	@ (8002670 <spi_dummy_TransmitReceive+0x24>)
 8002662:	f005 fe70 	bl	8008346 <HAL_SPI_TransmitReceive>
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20007648 	.word	0x20007648

08002674 <imu_start_Receive>:
 * @brief  imu spi interrupt start receive helper fn, transmit dummy buffer
 * @param  *rx_buffer Pointer to receive buffer
 * @param  len number of bytes will process
 */
static spi_status_t imu_start_Receive(uint8_t *rx_buffer, uint16_t len)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef retval = HAL_SPI_TransmitReceive_IT(&hspi3,
 8002680:	887b      	ldrh	r3, [r7, #2]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	490a      	ldr	r1, [pc, #40]	@ (80026b0 <imu_start_Receive+0x3c>)
 8002686:	480b      	ldr	r0, [pc, #44]	@ (80026b4 <imu_start_Receive+0x40>)
 8002688:	f006 f87c 	bl	8008784 <HAL_SPI_TransmitReceive_IT>
 800268c:	4603      	mov	r3, r0
 800268e:	73fb      	strb	r3, [r7, #15]
                                                        (uint8_t*)imu_spi.Dummy_TxBuffer,
                                                        rx_buffer,
                                                        len);
  switch(retval) {
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <imu_start_Receive+0x28>
 8002696:	2b02      	cmp	r3, #2
 8002698:	d002      	beq.n	80026a0 <imu_start_Receive+0x2c>
 800269a:	e003      	b.n	80026a4 <imu_start_Receive+0x30>
    case HAL_OK:
      return SPI_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e002      	b.n	80026a6 <imu_start_Receive+0x32>
    case HAL_BUSY:
      return SPI_BUSY;
 80026a0:	2302      	movs	r3, #2
 80026a2:	e000      	b.n	80026a6 <imu_start_Receive+0x32>
    default:
      return SPI_ERROR;
 80026a4:	2301      	movs	r3, #1
  }
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	200071c0 	.word	0x200071c0
 80026b4:	20007648 	.word	0x20007648

080026b8 <imu_start_Transmit>:
 * @brief  imu spi interrupt start transmit helper fn, capture return data to RxBuffer
 * @param  *rx_buffer Pointer to receive buffer
 * @param  len number of bytes will process
 */
static spi_status_t imu_start_Transmit(uint8_t *tx_buffer, uint16_t len)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef retval = HAL_SPI_TransmitReceive_IT(&hspi3,
 80026c4:	887b      	ldrh	r3, [r7, #2]
 80026c6:	4a0b      	ldr	r2, [pc, #44]	@ (80026f4 <imu_start_Transmit+0x3c>)
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	480b      	ldr	r0, [pc, #44]	@ (80026f8 <imu_start_Transmit+0x40>)
 80026cc:	f006 f85a 	bl	8008784 <HAL_SPI_TransmitReceive_IT>
 80026d0:	4603      	mov	r3, r0
 80026d2:	73fb      	strb	r3, [r7, #15]
                                                        tx_buffer,
                                                        (uint8_t*)imu_spi.RxBuffer,
                                                        len);
  switch(retval) {
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <imu_start_Transmit+0x28>
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d002      	beq.n	80026e4 <imu_start_Transmit+0x2c>
 80026de:	e003      	b.n	80026e8 <imu_start_Transmit+0x30>
    case HAL_OK:
      return SPI_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e002      	b.n	80026ea <imu_start_Transmit+0x32>
    case HAL_BUSY:
      return SPI_BUSY;
 80026e4:	2302      	movs	r3, #2
 80026e6:	e000      	b.n	80026ea <imu_start_Transmit+0x32>
    default:
      return SPI_ERROR;
 80026e8:	2301      	movs	r3, #1
  }
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20006da0 	.word	0x20006da0
 80026f8:	20007648 	.word	0x20007648

080026fc <imu_get_payload_length>:
/**
 * @brief Read payload length from shtp header helper fn
 * @retval 16 bit payload length
 */
static uint16_t imu_get_payload_length(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
  uint8_t shtp_len_lsb = imu_spi.RxBuffer[0];
 8002702:	4b14      	ldr	r3, [pc, #80]	@ (8002754 <imu_get_payload_length+0x58>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	71fb      	strb	r3, [r7, #7]
  uint8_t shtp_len_msb = imu_spi.RxBuffer[1];
 8002708:	4b12      	ldr	r3, [pc, #72]	@ (8002754 <imu_get_payload_length+0x58>)
 800270a:	785b      	ldrb	r3, [r3, #1]
 800270c:	71bb      	strb	r3, [r7, #6]
  uint16_t shtp_len_full = ((shtp_len_msb << 8U) | shtp_len_lsb);
 800270e:	79bb      	ldrb	r3, [r7, #6]
 8002710:	b21b      	sxth	r3, r3
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	b21a      	sxth	r2, r3
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	b21b      	sxth	r3, r3
 800271a:	4313      	orrs	r3, r2
 800271c:	b21b      	sxth	r3, r3
 800271e:	80bb      	strh	r3, [r7, #4]
  /*
   *  Check for a failed IMU peripheral
   *  "A length of 65535 (0xFFFF) is reserved because a failed peripheral
   *  can too easily produce 0xFFFF".[3] section 2.2.1
   */
  if (shtp_len_full == 0xFFFFU) {
 8002720:	88bb      	ldrh	r3, [r7, #4]
 8002722:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002726:	4293      	cmp	r3, r2
 8002728:	d109      	bne.n	800273e <imu_get_payload_length+0x42>
    imu_error_flags |= IMU_PERIPHERAL_FAILURE;
 800272a:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <imu_get_payload_length+0x5c>)
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	b29b      	uxth	r3, r3
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	4b08      	ldr	r3, [pc, #32]	@ (8002758 <imu_get_payload_length+0x5c>)
 8002738:	801a      	strh	r2, [r3, #0]
    return 0;
 800273a:	2300      	movs	r3, #0
 800273c:	e004      	b.n	8002748 <imu_get_payload_length+0x4c>

  /* - Required Linear acc + angular vel + gravity vector total 16B << 1024B
     - Hence no need to handle bit 15 (CONT bit)
     - Packet length from bit 0 -> bit 14 - header size
   */
  shtp_len_full &= SHTP_PKT_LEN_MSK;
 800273e:	88bb      	ldrh	r3, [r7, #4]
 8002740:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002744:	80bb      	strh	r3, [r7, #4]
  return shtp_len_full;
 8002746:	88bb      	ldrh	r3, [r7, #4]
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	20006da0 	.word	0x20006da0
 8002758:	200072e2 	.word	0x200072e2

0800275c <imu_read_shtp_pkt>:
 * @brief  Non-blocking read shtp packet helper fn
 * @param  pkt_len packet length word
 * @retval Is spi transmission successful
 */
static void imu_read_shtp_pkt(uint16_t rx_len)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	80fb      	strh	r3, [r7, #6]
  if (imu_start_Receive((uint8_t*)imu_spi.RxBuffer + SHTP_HEADER_SIZE,
 8002766:	4a0c      	ldr	r2, [pc, #48]	@ (8002798 <imu_read_shtp_pkt+0x3c>)
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	3b04      	subs	r3, #4
 800276c:	b29b      	uxth	r3, r3
 800276e:	4619      	mov	r1, r3
 8002770:	4610      	mov	r0, r2
 8002772:	f7ff ff7f 	bl	8002674 <imu_start_Receive>
 8002776:	4603      	mov	r3, r0
 8002778:	2b01      	cmp	r3, #1
 800277a:	d108      	bne.n	800278e <imu_read_shtp_pkt+0x32>
                        rx_len - SHTP_HEADER_SIZE) == SPI_ERROR) {
    imu_error_flags |= IMU_READ_PKT_FAILURE;
 800277c:	4b07      	ldr	r3, [pc, #28]	@ (800279c <imu_read_shtp_pkt+0x40>)
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002786:	b29a      	uxth	r2, r3
 8002788:	4b04      	ldr	r3, [pc, #16]	@ (800279c <imu_read_shtp_pkt+0x40>)
 800278a:	801a      	strh	r2, [r3, #0]
  }

  return;
 800278c:	bf00      	nop
 800278e:	bf00      	nop
}
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20006da4 	.word	0x20006da4
 800279c:	200072e2 	.word	0x200072e2

080027a0 <imu_spi_activate>:

/**
 * @brief Attempt to start a spi operation
 */
void imu_spi_activate(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
  // Return if bus is busy or previous packet still exist
  if (imu_spi.state != SPI_IDLE || imu_spi.RxBuffer_Len > 0) {
 80027a6:	4b41      	ldr	r3, [pc, #260]	@ (80028ac <imu_spi_activate+0x10c>)
 80027a8:	f893 3524 	ldrb.w	r3, [r3, #1316]	@ 0x524
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d175      	bne.n	800289e <imu_spi_activate+0xfe>
 80027b2:	4b3e      	ldr	r3, [pc, #248]	@ (80028ac <imu_spi_activate+0x10c>)
 80027b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d170      	bne.n	800289e <imu_spi_activate+0xfe>
    return;
  }

  // INT is serviced
  if (imu_hal_flags & IMU_INT_SERVICED) {
 80027bc:	4b3c      	ldr	r3, [pc, #240]	@ (80028b0 <imu_spi_activate+0x110>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d06b      	beq.n	80028a2 <imu_spi_activate+0x102>
    imu_hal_flags &= ~IMU_INT_SERVICED;
 80027ca:	4b39      	ldr	r3, [pc, #228]	@ (80028b0 <imu_spi_activate+0x110>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f023 0302 	bic.w	r3, r3, #2
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4b36      	ldr	r3, [pc, #216]	@ (80028b0 <imu_spi_activate+0x110>)
 80027d8:	701a      	strb	r2, [r3, #0]

    /*
     * End IMU host-hub handshakeing per [3] section 3.1
     */
    IMU_CS_SET_LOW();
 80027da:	4b36      	ldr	r3, [pc, #216]	@ (80028b4 <imu_spi_activate+0x114>)
 80027dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027e0:	619a      	str	r2, [r3, #24]
    // Transmit if TxBuffer exist
    if (imu_spi.TxBuffer_Len > 0) {
 80027e2:	4b32      	ldr	r3, [pc, #200]	@ (80028ac <imu_spi_activate+0x10c>)
 80027e4:	f8d3 3520 	ldr.w	r3, [r3, #1312]	@ 0x520
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d038      	beq.n	800285e <imu_spi_activate+0xbe>
      imu_spi.state = SPI_WRITE;
 80027ec:	4b2f      	ldr	r3, [pc, #188]	@ (80028ac <imu_spi_activate+0x10c>)
 80027ee:	2205      	movs	r2, #5
 80027f0:	f883 2524 	strb.w	r2, [r3, #1316]	@ 0x524
      spi_status_t tx_retval = imu_start_Transmit((uint8_t*)imu_spi.TxBuffer, imu_spi.TxBuffer_Len);
 80027f4:	4b2d      	ldr	r3, [pc, #180]	@ (80028ac <imu_spi_activate+0x10c>)
 80027f6:	f8d3 3520 	ldr.w	r3, [r3, #1312]	@ 0x520
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	4619      	mov	r1, r3
 80027fe:	482e      	ldr	r0, [pc, #184]	@ (80028b8 <imu_spi_activate+0x118>)
 8002800:	f7ff ff5a 	bl	80026b8 <imu_start_Transmit>
 8002804:	4603      	mov	r3, r0
 8002806:	71bb      	strb	r3, [r7, #6]
      IMU_WAKE_PS0_SET_HIGH();
 8002808:	4b2a      	ldr	r3, [pc, #168]	@ (80028b4 <imu_spi_activate+0x114>)
 800280a:	2204      	movs	r2, #4
 800280c:	619a      	str	r2, [r3, #24]

      if (tx_retval == SPI_ERROR) {
 800280e:	79bb      	ldrb	r3, [r7, #6]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d114      	bne.n	800283e <imu_spi_activate+0x9e>
        imu_error_flags |= IMU_TRANSMIT_ERROR;
 8002814:	4b29      	ldr	r3, [pc, #164]	@ (80028bc <imu_spi_activate+0x11c>)
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	f043 0308 	orr.w	r3, r3, #8
 800281e:	b29a      	uxth	r2, r3
 8002820:	4b26      	ldr	r3, [pc, #152]	@ (80028bc <imu_spi_activate+0x11c>)
 8002822:	801a      	strh	r2, [r3, #0]
        imu_spi.state = SPI_IDLE;
 8002824:	4b21      	ldr	r3, [pc, #132]	@ (80028ac <imu_spi_activate+0x10c>)
 8002826:	2202      	movs	r2, #2
 8002828:	f883 2524 	strb.w	r2, [r3, #1316]	@ 0x524
        IMU_CS_SET_HIGH();
 800282c:	4b21      	ldr	r3, [pc, #132]	@ (80028b4 <imu_spi_activate+0x114>)
 800282e:	2202      	movs	r2, #2
 8002830:	619a      	str	r2, [r3, #24]
        debugCount0 += 1;
 8002832:	4b23      	ldr	r3, [pc, #140]	@ (80028c0 <imu_spi_activate+0x120>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	3301      	adds	r3, #1
 8002838:	4a21      	ldr	r2, [pc, #132]	@ (80028c0 <imu_spi_activate+0x120>)
 800283a:	6013      	str	r3, [r2, #0]
      }
    }

  }

  return;
 800283c:	e031      	b.n	80028a2 <imu_spi_activate+0x102>
      } else if (tx_retval == SPI_BUSY) {
 800283e:	79bb      	ldrb	r3, [r7, #6]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d12e      	bne.n	80028a2 <imu_spi_activate+0x102>
        imu_spi.state = SPI_IDLE;
 8002844:	4b19      	ldr	r3, [pc, #100]	@ (80028ac <imu_spi_activate+0x10c>)
 8002846:	2202      	movs	r2, #2
 8002848:	f883 2524 	strb.w	r2, [r3, #1316]	@ 0x524
        IMU_CS_SET_HIGH();
 800284c:	4b19      	ldr	r3, [pc, #100]	@ (80028b4 <imu_spi_activate+0x114>)
 800284e:	2202      	movs	r2, #2
 8002850:	619a      	str	r2, [r3, #24]
        debugCount1 += 1;
 8002852:	4b1c      	ldr	r3, [pc, #112]	@ (80028c4 <imu_spi_activate+0x124>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3301      	adds	r3, #1
 8002858:	4a1a      	ldr	r2, [pc, #104]	@ (80028c4 <imu_spi_activate+0x124>)
 800285a:	6013      	str	r3, [r2, #0]
  return;
 800285c:	e021      	b.n	80028a2 <imu_spi_activate+0x102>
      imu_spi.state = SPI_RD_HDR;
 800285e:	4b13      	ldr	r3, [pc, #76]	@ (80028ac <imu_spi_activate+0x10c>)
 8002860:	2203      	movs	r2, #3
 8002862:	f883 2524 	strb.w	r2, [r3, #1316]	@ 0x524
      spi_status_t rx_retval = imu_start_Receive((uint8_t*)imu_spi.RxBuffer, SHTP_HEADER_SIZE);
 8002866:	2104      	movs	r1, #4
 8002868:	4810      	ldr	r0, [pc, #64]	@ (80028ac <imu_spi_activate+0x10c>)
 800286a:	f7ff ff03 	bl	8002674 <imu_start_Receive>
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
      if (rx_retval == SPI_ERROR) {
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d10b      	bne.n	8002890 <imu_spi_activate+0xf0>
        imu_error_flags |= IMU_READ_HEADER_FAILURE;
 8002878:	4b10      	ldr	r3, [pc, #64]	@ (80028bc <imu_spi_activate+0x11c>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	b29b      	uxth	r3, r3
 800287e:	f043 0320 	orr.w	r3, r3, #32
 8002882:	b29a      	uxth	r2, r3
 8002884:	4b0d      	ldr	r3, [pc, #52]	@ (80028bc <imu_spi_activate+0x11c>)
 8002886:	801a      	strh	r2, [r3, #0]
        IMU_CS_SET_HIGH();
 8002888:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <imu_spi_activate+0x114>)
 800288a:	2202      	movs	r2, #2
 800288c:	619a      	str	r2, [r3, #24]
  return;
 800288e:	e008      	b.n	80028a2 <imu_spi_activate+0x102>
      } else if (rx_retval == SPI_BUSY) {
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d105      	bne.n	80028a2 <imu_spi_activate+0x102>
        IMU_CS_SET_HIGH();
 8002896:	4b07      	ldr	r3, [pc, #28]	@ (80028b4 <imu_spi_activate+0x114>)
 8002898:	2202      	movs	r2, #2
 800289a:	619a      	str	r2, [r3, #24]
  return;
 800289c:	e001      	b.n	80028a2 <imu_spi_activate+0x102>
    return;
 800289e:	bf00      	nop
 80028a0:	e000      	b.n	80028a4 <imu_spi_activate+0x104>
  return;
 80028a2:	bf00      	nop
}
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20006da0 	.word	0x20006da0
 80028b0:	200072e0 	.word	0x200072e0
 80028b4:	40021400 	.word	0x40021400
 80028b8:	20007240 	.word	0x20007240
 80028bc:	200072e2 	.word	0x200072e2
 80028c0:	200072e4 	.word	0x200072e4
 80028c4:	200072e8 	.word	0x200072e8

080028c8 <imu_spi_completed>:
/**
 * @brief Handles the end of a spi operation based on SPI state
 * @note  Called in HAL_SPI_TxRxCpltCallback (spi transfer completed)
 */
void imu_spi_completed(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
  // Get avaliable payload length, truncate if too long
  uint16_t rx_len = imu_get_payload_length();
 80028ce:	f7ff ff15 	bl	80026fc <imu_get_payload_length>
 80028d2:	4603      	mov	r3, r0
 80028d4:	80fb      	strh	r3, [r7, #6]
  if (rx_len > sizeof(imu_spi.RxBuffer)) {
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028dc:	d902      	bls.n	80028e4 <imu_spi_completed+0x1c>
    rx_len = sizeof(imu_spi.RxBuffer);
 80028de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028e2:	80fb      	strh	r3, [r7, #6]
  }
  if (rx_len < SHTP_HEADER_SIZE) {
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d809      	bhi.n	80028fe <imu_spi_completed+0x36>
    rx_len = SHTP_HEADER_SIZE;
 80028ea:	2304      	movs	r3, #4
 80028ec:	80fb      	strh	r3, [r7, #6]
    imu_error_flags |= IMU_HEADER_DATA_ERROR;
 80028ee:	4b3d      	ldr	r3, [pc, #244]	@ (80029e4 <imu_spi_completed+0x11c>)
 80028f0:	881b      	ldrh	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f043 0304 	orr.w	r3, r3, #4
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	4b3a      	ldr	r3, [pc, #232]	@ (80029e4 <imu_spi_completed+0x11c>)
 80028fc:	801a      	strh	r2, [r3, #0]
  }

  switch (imu_spi.state) {
 80028fe:	4b3a      	ldr	r3, [pc, #232]	@ (80029e8 <imu_spi_completed+0x120>)
 8002900:	f893 3524 	ldrb.w	r3, [r3, #1316]	@ 0x524
 8002904:	b2db      	uxtb	r3, r3
 8002906:	3b01      	subs	r3, #1
 8002908:	2b04      	cmp	r3, #4
 800290a:	d857      	bhi.n	80029bc <imu_spi_completed+0xf4>
 800290c:	a201      	add	r2, pc, #4	@ (adr r2, 8002914 <imu_spi_completed+0x4c>)
 800290e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002912:	bf00      	nop
 8002914:	08002929 	.word	0x08002929
 8002918:	080029bd 	.word	0x080029bd
 800291c:	08002933 	.word	0x08002933
 8002920:	08002967 	.word	0x08002967
 8002924:	08002983 	.word	0x08002983
    case SPI_DUMMY:
      imu_spi.state = SPI_IDLE;
 8002928:	4b2f      	ldr	r3, [pc, #188]	@ (80029e8 <imu_spi_completed+0x120>)
 800292a:	2202      	movs	r2, #2
 800292c:	f883 2524 	strb.w	r2, [r3, #1316]	@ 0x524
      break;
 8002930:	e054      	b.n	80029dc <imu_spi_completed+0x114>

    case SPI_RD_HDR:
      // If sensor data exist, branch to read body
      if (rx_len > SHTP_HEADER_SIZE) {
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	2b04      	cmp	r3, #4
 8002936:	d908      	bls.n	800294a <imu_spi_completed+0x82>
        imu_spi.state = SPI_RD_BODY;
 8002938:	4b2b      	ldr	r3, [pc, #172]	@ (80029e8 <imu_spi_completed+0x120>)
 800293a:	2204      	movs	r2, #4
 800293c:	f883 2524 	strb.w	r2, [r3, #1316]	@ 0x524
        imu_read_shtp_pkt(rx_len);
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff ff0a 	bl	800275c <imu_read_shtp_pkt>
        IMU_CS_SET_HIGH();
        imu_spi.RxBuffer_Len = 0;
        imu_spi.state = SPI_IDLE;
        imu_spi_activate();
      }
      break;
 8002948:	e048      	b.n	80029dc <imu_spi_completed+0x114>
        IMU_CS_SET_HIGH();
 800294a:	4b28      	ldr	r3, [pc, #160]	@ (80029ec <imu_spi_completed+0x124>)
 800294c:	2202      	movs	r2, #2
 800294e:	619a      	str	r2, [r3, #24]
        imu_spi.RxBuffer_Len = 0;
 8002950:	4b25      	ldr	r3, [pc, #148]	@ (80029e8 <imu_spi_completed+0x120>)
 8002952:	2200      	movs	r2, #0
 8002954:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
        imu_spi.state = SPI_IDLE;
 8002958:	4b23      	ldr	r3, [pc, #140]	@ (80029e8 <imu_spi_completed+0x120>)
 800295a:	2202      	movs	r2, #2
 800295c:	f883 2524 	strb.w	r2, [r3, #1316]	@ 0x524
        imu_spi_activate();
 8002960:	f7ff ff1e 	bl	80027a0 <imu_spi_activate>
      break;
 8002964:	e03a      	b.n	80029dc <imu_spi_completed+0x114>

    case SPI_RD_BODY:
      // Finished reading packet, branch to idle
      IMU_CS_SET_HIGH();
 8002966:	4b21      	ldr	r3, [pc, #132]	@ (80029ec <imu_spi_completed+0x124>)
 8002968:	2202      	movs	r2, #2
 800296a:	619a      	str	r2, [r3, #24]
      imu_spi.RxBuffer_Len = rx_len;
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	4a1e      	ldr	r2, [pc, #120]	@ (80029e8 <imu_spi_completed+0x120>)
 8002970:	f8c2 3400 	str.w	r3, [r2, #1024]	@ 0x400
      imu_spi.state = SPI_IDLE;
 8002974:	4b1c      	ldr	r3, [pc, #112]	@ (80029e8 <imu_spi_completed+0x120>)
 8002976:	2202      	movs	r2, #2
 8002978:	f883 2524 	strb.w	r2, [r3, #1316]	@ 0x524
      imu_spi_activate();
 800297c:	f7ff ff10 	bl	80027a0 <imu_spi_activate>
      break;
 8002980:	e02c      	b.n	80029dc <imu_spi_completed+0x114>

    case SPI_WRITE:
      // Finished reading packet, reset buf length, chip select, branch to idle
      IMU_CS_SET_HIGH();
 8002982:	4b1a      	ldr	r3, [pc, #104]	@ (80029ec <imu_spi_completed+0x124>)
 8002984:	2202      	movs	r2, #2
 8002986:	619a      	str	r2, [r3, #24]
      // After a write operation, rx length cannot be larger than tx length
      if (rx_len > imu_spi.TxBuffer_Len) {
 8002988:	88fa      	ldrh	r2, [r7, #6]
 800298a:	4b17      	ldr	r3, [pc, #92]	@ (80029e8 <imu_spi_completed+0x120>)
 800298c:	f8d3 3520 	ldr.w	r3, [r3, #1312]	@ 0x520
 8002990:	429a      	cmp	r2, r3
 8002992:	d906      	bls.n	80029a2 <imu_spi_completed+0xda>
        imu_spi.RxBuffer_Len = imu_spi.TxBuffer_Len;
 8002994:	4b14      	ldr	r3, [pc, #80]	@ (80029e8 <imu_spi_completed+0x120>)
 8002996:	f8d3 3520 	ldr.w	r3, [r3, #1312]	@ 0x520
 800299a:	4a13      	ldr	r2, [pc, #76]	@ (80029e8 <imu_spi_completed+0x120>)
 800299c:	f8c2 3400 	str.w	r3, [r2, #1024]	@ 0x400
 80029a0:	e003      	b.n	80029aa <imu_spi_completed+0xe2>
      } else {
        imu_spi.RxBuffer_Len = rx_len;
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	4a10      	ldr	r2, [pc, #64]	@ (80029e8 <imu_spi_completed+0x120>)
 80029a6:	f8c2 3400 	str.w	r3, [r2, #1024]	@ 0x400
      }
      imu_spi.TxBuffer_Len = 0;
 80029aa:	4b0f      	ldr	r3, [pc, #60]	@ (80029e8 <imu_spi_completed+0x120>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	f8c3 2520 	str.w	r2, [r3, #1312]	@ 0x520
      imu_spi.state = SPI_IDLE;
 80029b2:	4b0d      	ldr	r3, [pc, #52]	@ (80029e8 <imu_spi_completed+0x120>)
 80029b4:	2202      	movs	r2, #2
 80029b6:	f883 2524 	strb.w	r2, [r3, #1316]	@ 0x524
      break;
 80029ba:	e00f      	b.n	80029dc <imu_spi_completed+0x114>

    default:
      // Should never reach here
      imu_spi.state = SPI_IDLE;
 80029bc:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <imu_spi_completed+0x120>)
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 2524 	strb.w	r2, [r3, #1316]	@ 0x524
      IMU_CS_SET_HIGH();
 80029c4:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <imu_spi_completed+0x124>)
 80029c6:	2202      	movs	r2, #2
 80029c8:	619a      	str	r2, [r3, #24]
      imu_error_flags |= IMU_SPI_COMPLETE_FSM_ERROR;
 80029ca:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <imu_spi_completed+0x11c>)
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	4b03      	ldr	r3, [pc, #12]	@ (80029e4 <imu_spi_completed+0x11c>)
 80029d8:	801a      	strh	r2, [r3, #0]
      break;
 80029da:	bf00      	nop
  }

  return;
 80029dc:	bf00      	nop
}
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	200072e2 	.word	0x200072e2
 80029e8:	20006da0 	.word	0x20006da0
 80029ec:	40021400 	.word	0x40021400

080029f0 <imu_hal_open>:
 * @brief  IMU SH2 fn pointer for sh2_Hal_s (*open)
 * @note   The SH2 interface uses these functions to access the underlying
 *         communications device. Detailed description can be found in "sh2_hal.h"
 */
static int imu_hal_open(sh2_Hal_t *self)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  (void)self;

  if(imu_hal_flags & IMU_HAL_OPENED) {
 80029f8:	4b30      	ldr	r3, [pc, #192]	@ (8002abc <imu_hal_open+0xcc>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <imu_hal_open+0x1c>
    return SH2_ERR;
 8002a06:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0a:	e053      	b.n	8002ab4 <imu_hal_open+0xc4>
  }
  imu_hal_flags |= IMU_HAL_OPENED;
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002abc <imu_hal_open+0xcc>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	4b28      	ldr	r3, [pc, #160]	@ (8002abc <imu_hal_open+0xcc>)
 8002a1a:	701a      	strb	r2, [r3, #0]

  imu_hal_init_hardware();
 8002a1c:	f7ff fda6 	bl	800256c <imu_hal_init_hardware>

  /*
   * Begin startup timing
   * See [2] section 6.5.3, 6.5.4 for timing diagram
   */
  IMU_RST_SET_LOW();
 8002a20:	4b27      	ldr	r3, [pc, #156]	@ (8002ac0 <imu_hal_open+0xd0>)
 8002a22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a26:	619a      	str	r2, [r3, #24]
  // In reset flag will be reseted when INT pin is pulled low.
  imu_hal_flags |= IMU_IN_RESET;
 8002a28:	4b24      	ldr	r3, [pc, #144]	@ (8002abc <imu_hal_open+0xcc>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	f043 0304 	orr.w	r3, r3, #4
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	4b21      	ldr	r3, [pc, #132]	@ (8002abc <imu_hal_open+0xcc>)
 8002a36:	701a      	strb	r2, [r3, #0]
  // Deassert chip select pin
  IMU_CS_SET_HIGH();
 8002a38:	4b21      	ldr	r3, [pc, #132]	@ (8002ac0 <imu_hal_open+0xd0>)
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	619a      	str	r2, [r3, #24]
  imu_spi.RxBuffer_Len = 0;
 8002a3e:	4b21      	ldr	r3, [pc, #132]	@ (8002ac4 <imu_hal_open+0xd4>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  imu_spi.TxBuffer_Len = 0;
 8002a46:	4b1f      	ldr	r3, [pc, #124]	@ (8002ac4 <imu_hal_open+0xd4>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f8c3 2520 	str.w	r2, [r3, #1312]	@ 0x520
  imu_hal_flags &= ~IMU_INT_SERVICED;
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002abc <imu_hal_open+0xcc>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f023 0302 	bic.w	r3, r3, #2
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b18      	ldr	r3, [pc, #96]	@ (8002abc <imu_hal_open+0xcc>)
 8002a5c:	701a      	strb	r2, [r3, #0]

  // Perform blocking dummy operation
  imu_spi.state = SPI_DUMMY;
 8002a5e:	4b19      	ldr	r3, [pc, #100]	@ (8002ac4 <imu_hal_open+0xd4>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2524 	strb.w	r2, [r3, #1316]	@ 0x524
  spi_dummy_TransmitReceive();
 8002a66:	f7ff fdf1 	bl	800264c <spi_dummy_TransmitReceive>
  imu_spi.state = SPI_IDLE;
 8002a6a:	4b16      	ldr	r3, [pc, #88]	@ (8002ac4 <imu_hal_open+0xd4>)
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f883 2524 	strb.w	r2, [r3, #1316]	@ 0x524
  delay(IMU_RESET_DELAY);
 8002a72:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002a76:	f7ff fdcb 	bl	8002610 <delay>

  // To boot in SHTP-SPI mode, must have PS1=1, PS0=1 while imu in reset.
  // PS1 will be set via 3.3v jumper AND PS0_WAKEN sig is set high.
  // PS0 will be repurposed to wake signal after reset
  IMU_WAKE_PS0_SET_HIGH();
 8002a7a:	4b11      	ldr	r3, [pc, #68]	@ (8002ac0 <imu_hal_open+0xd0>)
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	619a      	str	r2, [r3, #24]
  // Leave reset mode
  IMU_RST_SET_HIGH();
 8002a80:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac0 <imu_hal_open+0xd0>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	619a      	str	r2, [r3, #24]

  // Start imu internal initialization
  // Stop the interrupt service routine as INT not reliable at this moment
  imu_hal_disable_interrupt();
 8002a86:	f7ff fd85 	bl	8002594 <imu_hal_disable_interrupt>
  delay(IMU_START_INIT_DELAY);
 8002a8a:	480f      	ldr	r0, [pc, #60]	@ (8002ac8 <imu_hal_open+0xd8>)
 8002a8c:	f7ff fdc0 	bl	8002610 <delay>
  imu_hal_enable_interrupt();
 8002a90:	f7ff fd76 	bl	8002580 <imu_hal_enable_interrupt>

  // Wait for INT pin to be asserted, failed to boot if timed out
  if (imu_reset_delay(IMU_START_RESET_DELAY) != IMU_OK) {
 8002a94:	480d      	ldr	r0, [pc, #52]	@ (8002acc <imu_hal_open+0xdc>)
 8002a96:	f7ff fd87 	bl	80025a8 <imu_reset_delay>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <imu_hal_open+0xbc>
    printf("! IMU FAILURE TO BOOT \n\r");
 8002aa0:	480b      	ldr	r0, [pc, #44]	@ (8002ad0 <imu_hal_open+0xe0>)
 8002aa2:	f011 ff09 	bl	80148b8 <iprintf>
    return SH2_ERR_IO;
 8002aa6:	f06f 0303 	mvn.w	r3, #3
 8002aaa:	e003      	b.n	8002ab4 <imu_hal_open+0xc4>
  }
  /*
   * End startup timing
   */

  printf("IMU BOOT SUCCESS \n\r");
 8002aac:	4809      	ldr	r0, [pc, #36]	@ (8002ad4 <imu_hal_open+0xe4>)
 8002aae:	f011 ff03 	bl	80148b8 <iprintf>
  return SH2_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	200072e0 	.word	0x200072e0
 8002ac0:	40021400 	.word	0x40021400
 8002ac4:	20006da0 	.word	0x20006da0
 8002ac8:	00030d40 	.word	0x00030d40
 8002acc:	001e8480 	.word	0x001e8480
 8002ad0:	080169dc 	.word	0x080169dc
 8002ad4:	080169f8 	.word	0x080169f8

08002ad8 <imu_hal_close>:
 * @brief  IMU SH2 fn pointers for sh2_Hal_s (*close)
 * @note   The SH2 interface uses these functions to access the underlying
 *         communications device. Detailed description can be found in "sh2_hal.h"
 */
static void imu_hal_close(sh2_Hal_t *self)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  (void)self;
  imu_hal_disable_interrupt();
 8002ae0:	f7ff fd58 	bl	8002594 <imu_hal_disable_interrupt>

  imu_spi.state = SPI_INIT;
 8002ae4:	4b18      	ldr	r3, [pc, #96]	@ (8002b48 <imu_hal_close+0x70>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2524 	strb.w	r2, [r3, #1316]	@ 0x524

  // Hold imu in reset
  IMU_RST_SET_LOW();
 8002aec:	4b17      	ldr	r3, [pc, #92]	@ (8002b4c <imu_hal_close+0x74>)
 8002aee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002af2:	619a      	str	r2, [r3, #24]
  IMU_CS_SET_HIGH();
 8002af4:	4b15      	ldr	r3, [pc, #84]	@ (8002b4c <imu_hal_close+0x74>)
 8002af6:	2202      	movs	r2, #2
 8002af8:	619a      	str	r2, [r3, #24]

  // Deinit peripherals
  HAL_SPI_DeInit(&hspi3);
 8002afa:	4815      	ldr	r0, [pc, #84]	@ (8002b50 <imu_hal_close+0x78>)
 8002afc:	f005 fbfb 	bl	80082f6 <HAL_SPI_DeInit>
  __HAL_TIM_DISABLE(&htim2);
 8002b00:	4b14      	ldr	r3, [pc, #80]	@ (8002b54 <imu_hal_close+0x7c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6a1a      	ldr	r2, [r3, #32]
 8002b06:	4b14      	ldr	r3, [pc, #80]	@ (8002b58 <imu_hal_close+0x80>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10f      	bne.n	8002b2e <imu_hal_close+0x56>
 8002b0e:	4b11      	ldr	r3, [pc, #68]	@ (8002b54 <imu_hal_close+0x7c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6a1a      	ldr	r2, [r3, #32]
 8002b14:	f240 4344 	movw	r3, #1092	@ 0x444
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d107      	bne.n	8002b2e <imu_hal_close+0x56>
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b54 <imu_hal_close+0x7c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <imu_hal_close+0x7c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0201 	bic.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

  // close sh2
  imu_hal_flags &= ~IMU_HAL_OPENED;
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <imu_hal_close+0x84>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <imu_hal_close+0x84>)
 8002b3c:	701a      	strb	r2, [r3, #0]
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20006da0 	.word	0x20006da0
 8002b4c:	40021400 	.word	0x40021400
 8002b50:	20007648 	.word	0x20007648
 8002b54:	20007700 	.word	0x20007700
 8002b58:	00111111 	.word	0x00111111
 8002b5c:	200072e0 	.word	0x200072e0

08002b60 <imu_hal_read>:
 * @brief  IMU SH2 fn pointer for sh2_Hal_s (*read)
 * @note   The SH2 interface uses these functions to access the underlying
 *         communications device. Detailed description can be found in "sh2_hal.h"
 */
static int imu_hal_read(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len, uint32_t *t_us)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
  (void)self;
  int retval = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]

  // If there is received data available
  if (imu_spi.RxBuffer_Len > 0) {
 8002b72:	4b19      	ldr	r3, [pc, #100]	@ (8002bd8 <imu_hal_read+0x78>)
 8002b74:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d028      	beq.n	8002bce <imu_hal_read+0x6e>
    // And if the data will fit
    if (len >= imu_spi.RxBuffer_Len) {
 8002b7c:	4b16      	ldr	r3, [pc, #88]	@ (8002bd8 <imu_hal_read+0x78>)
 8002b7e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d315      	bcc.n	8002bb4 <imu_hal_read+0x54>
      // Copy data to the client buffer
      memcpy(pBuffer, (uint8_t*)imu_spi.RxBuffer, (uint32_t)imu_spi.RxBuffer_Len);
 8002b88:	4b13      	ldr	r3, [pc, #76]	@ (8002bd8 <imu_hal_read+0x78>)
 8002b8a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4911      	ldr	r1, [pc, #68]	@ (8002bd8 <imu_hal_read+0x78>)
 8002b92:	68b8      	ldr	r0, [r7, #8]
 8002b94:	f012 f8c5 	bl	8014d22 <memcpy>
      retval = imu_spi.RxBuffer_Len;
 8002b98:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd8 <imu_hal_read+0x78>)
 8002b9a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8002b9e:	617b      	str	r3, [r7, #20]
      // Set timestamp
      *t_us = imu_spi.rx_timestamp;
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <imu_hal_read+0x78>)
 8002ba2:	f8d3 2528 	ldr.w	r2, [r3, #1320]	@ 0x528
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	601a      	str	r2, [r3, #0]
      // Clear buffer len
      imu_spi.RxBuffer_Len = 0;
 8002baa:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd8 <imu_hal_read+0x78>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
 8002bb2:	e006      	b.n	8002bc2 <imu_hal_read+0x62>
    } else {
      // Discard what was read and return error because buffer was too small.
      retval = SH2_ERR_BAD_PARAM;
 8002bb4:	f06f 0301 	mvn.w	r3, #1
 8002bb8:	617b      	str	r3, [r7, #20]
      imu_spi.RxBuffer_Len = 0;
 8002bba:	4b07      	ldr	r3, [pc, #28]	@ (8002bd8 <imu_hal_read+0x78>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    }

    // Now that rxBuf is empty, activate SPI to check write task
    imu_hal_disable_interrupt();
 8002bc2:	f7ff fce7 	bl	8002594 <imu_hal_disable_interrupt>
    imu_spi_activate();
 8002bc6:	f7ff fdeb 	bl	80027a0 <imu_spi_activate>
    imu_hal_enable_interrupt();
 8002bca:	f7ff fcd9 	bl	8002580 <imu_hal_enable_interrupt>
  }

  return retval;
 8002bce:	697b      	ldr	r3, [r7, #20]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20006da0 	.word	0x20006da0

08002bdc <imu_hal_write>:
 * @brief  IMU SH2 fn pointer for sh2_Hal_s (*write)
 * @note   The SH2 interface uses these functions to access the underlying
 *         communications device. Detailed description can be found in "sh2_hal.h"
 */
static int imu_hal_write(sh2_Hal_t *self, uint8_t *pBuffer, unsigned len)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  int retval = SH2_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]

  // Assert parameters
  if ((self == 0) || (len > sizeof(imu_spi.TxBuffer)) || ((len > 0) && (pBuffer == 0))) {
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <imu_hal_write+0x28>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b80      	cmp	r3, #128	@ 0x80
 8002bf6:	d805      	bhi.n	8002c04 <imu_hal_write+0x28>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <imu_hal_write+0x2e>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <imu_hal_write+0x2e>
    return SH2_ERR_BAD_PARAM;
 8002c04:	f06f 0301 	mvn.w	r3, #1
 8002c08:	e01d      	b.n	8002c46 <imu_hal_write+0x6a>
  }

  // If tx is occupied, return 0 to try again later
  if (imu_spi.TxBuffer_Len != 0) {
 8002c0a:	4b11      	ldr	r3, [pc, #68]	@ (8002c50 <imu_hal_write+0x74>)
 8002c0c:	f8d3 3520 	ldr.w	r3, [r3, #1312]	@ 0x520
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d004      	beq.n	8002c1e <imu_hal_write+0x42>
    IMU_WAKE_PS0_SET_HIGH();
 8002c14:	4b0f      	ldr	r3, [pc, #60]	@ (8002c54 <imu_hal_write+0x78>)
 8002c16:	2204      	movs	r2, #4
 8002c18:	619a      	str	r2, [r3, #24]
    return 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e013      	b.n	8002c46 <imu_hal_write+0x6a>
  }

  // Copy data to tx buffer
  memcpy((uint8_t*)imu_spi.TxBuffer, pBuffer, len);
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	480d      	ldr	r0, [pc, #52]	@ (8002c58 <imu_hal_write+0x7c>)
 8002c24:	f012 f87d 	bl	8014d22 <memcpy>
  imu_spi.TxBuffer_Len = len;
 8002c28:	4a09      	ldr	r2, [pc, #36]	@ (8002c50 <imu_hal_write+0x74>)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8c2 3520 	str.w	r3, [r2, #1312]	@ 0x520
  retval = len;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	617b      	str	r3, [r7, #20]

  /*
   * Start IMU host-hub handshakeing per [3] section 3.1
   * Start IMU wake up
   */
  imu_hal_disable_interrupt();
 8002c34:	f7ff fcae 	bl	8002594 <imu_hal_disable_interrupt>
  IMU_WAKE_PS0_SET_LOW();
 8002c38:	4b06      	ldr	r3, [pc, #24]	@ (8002c54 <imu_hal_write+0x78>)
 8002c3a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002c3e:	619a      	str	r2, [r3, #24]
  imu_hal_enable_interrupt();
 8002c40:	f7ff fc9e 	bl	8002580 <imu_hal_enable_interrupt>

  return retval;
 8002c44:	697b      	ldr	r3, [r7, #20]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20006da0 	.word	0x20006da0
 8002c54:	40021400 	.word	0x40021400
 8002c58:	20007240 	.word	0x20007240

08002c5c <imu_hal_get_time>:
 * @brief  IMU SH2 fn pointer for sh2_Hal_s (*getTimeUs)
 * @note   The SH2 interface uses these functions to access the underlying
 *         communications device. Detailed description can be found in "sh2_hal.h"
 */
static uint32_t imu_hal_get_time(sh2_Hal_t *self)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  (void)self;
  return MICRO_SECOND_STAMP();
 8002c64:	4b04      	ldr	r3, [pc, #16]	@ (8002c78 <imu_hal_get_time+0x1c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20007700 	.word	0x20007700

08002c7c <imu_get_hal>:

/**
 * @brief  IMU interface to SH-2 middleware
 */
static sh2_Hal_t *imu_get_hal(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  // Assign fn addresses
  imu_hal.open = imu_hal_open;
 8002c80:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <imu_get_hal+0x30>)
 8002c82:	4a0b      	ldr	r2, [pc, #44]	@ (8002cb0 <imu_get_hal+0x34>)
 8002c84:	601a      	str	r2, [r3, #0]
  imu_hal.close = imu_hal_close;
 8002c86:	4b09      	ldr	r3, [pc, #36]	@ (8002cac <imu_get_hal+0x30>)
 8002c88:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb4 <imu_get_hal+0x38>)
 8002c8a:	605a      	str	r2, [r3, #4]
  imu_hal.read = imu_hal_read;
 8002c8c:	4b07      	ldr	r3, [pc, #28]	@ (8002cac <imu_get_hal+0x30>)
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb8 <imu_get_hal+0x3c>)
 8002c90:	609a      	str	r2, [r3, #8]
  imu_hal.write = imu_hal_write;
 8002c92:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <imu_get_hal+0x30>)
 8002c94:	4a09      	ldr	r2, [pc, #36]	@ (8002cbc <imu_get_hal+0x40>)
 8002c96:	60da      	str	r2, [r3, #12]
  imu_hal.getTimeUs = imu_hal_get_time;
 8002c98:	4b04      	ldr	r3, [pc, #16]	@ (8002cac <imu_get_hal+0x30>)
 8002c9a:	4a09      	ldr	r2, [pc, #36]	@ (8002cc0 <imu_get_hal+0x44>)
 8002c9c:	611a      	str	r2, [r3, #16]

  return &imu_hal;
 8002c9e:	4b03      	ldr	r3, [pc, #12]	@ (8002cac <imu_get_hal+0x30>)
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20006d70 	.word	0x20006d70
 8002cb0:	080029f1 	.word	0x080029f1
 8002cb4:	08002ad9 	.word	0x08002ad9
 8002cb8:	08002b61 	.word	0x08002b61
 8002cbc:	08002bdd 	.word	0x08002bdd
 8002cc0:	08002c5d 	.word	0x08002c5d
 8002cc4:	00000000 	.word	0x00000000

08002cc8 <sh2_eventHanlder>:

/**
 * @brief  sh2 non-sensor event callback handler definition
 */
static void sh2_eventHanlder(void *cookie, sh2_AsyncEvent_t *pEvt)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  (void)cookie;
  switch (pEvt->eventId) {
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d012      	beq.n	8002d00 <sh2_eventHanlder+0x38>
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d842      	bhi.n	8002d64 <sh2_eventHanlder+0x9c>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <sh2_eventHanlder+0x20>
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d023      	beq.n	8002d2e <sh2_eventHanlder+0x66>
        printf("[shtp event] UNKNOWN (%u)\n\r", pEvt->shtpEvent);
      }
      break;
    }
  }
}
 8002ce6:	e03d      	b.n	8002d64 <sh2_eventHanlder+0x9c>
      imu_hal_flags |= IMU_RESET_OCCURRED;
 8002ce8:	4b23      	ldr	r3, [pc, #140]	@ (8002d78 <sh2_eventHanlder+0xb0>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	f043 0308 	orr.w	r3, r3, #8
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	4b20      	ldr	r3, [pc, #128]	@ (8002d78 <sh2_eventHanlder+0xb0>)
 8002cf6:	701a      	strb	r2, [r3, #0]
      printf("sensor reset occurred \n\r");
 8002cf8:	4820      	ldr	r0, [pc, #128]	@ (8002d7c <sh2_eventHanlder+0xb4>)
 8002cfa:	f011 fddd 	bl	80148b8 <iprintf>
      break;
 8002cfe:	e031      	b.n	8002d64 <sh2_eventHanlder+0x9c>
             pEvt->sh2SensorConfigResp.sensorId,
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	791b      	ldrb	r3, [r3, #4]
      printf("sensor 0x%02X accepted %lu us (%.1f Hz)\n\r",
 8002d04:	4619      	mov	r1, r3
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	691a      	ldr	r2, [r3, #16]
             1e6 / (float)pEvt->sh2SensorConfigResp.sensorConfig.reportInterval_us);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	ee07 3a90 	vmov	s15, r3
 8002d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d16:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
      printf("sensor 0x%02X accepted %lu us (%.1f Hz)\n\r",
 8002d1a:	ed9f 5b15 	vldr	d5, [pc, #84]	@ 8002d70 <sh2_eventHanlder+0xa8>
 8002d1e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002d22:	ed8d 7b00 	vstr	d7, [sp]
 8002d26:	4816      	ldr	r0, [pc, #88]	@ (8002d80 <sh2_eventHanlder+0xb8>)
 8002d28:	f011 fdc6 	bl	80148b8 <iprintf>
      break;
 8002d2c:	e01a      	b.n	8002d64 <sh2_eventHanlder+0x9c>
      uint8_t arr_max =  sizeof(shtp_event_name) / sizeof(shtp_event_name[1]);
 8002d2e:	2308      	movs	r3, #8
 8002d30:	73fb      	strb	r3, [r7, #15]
      if (pEvt->shtpEvent < arr_max) {
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	791b      	ldrb	r3, [r3, #4]
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d90c      	bls.n	8002d56 <sh2_eventHanlder+0x8e>
              shtp_event_name[pEvt->shtpEvent],
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	791b      	ldrb	r3, [r3, #4]
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b10      	ldr	r3, [pc, #64]	@ (8002d84 <sh2_eventHanlder+0xbc>)
 8002d44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
              pEvt->shtpEvent);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	791b      	ldrb	r3, [r3, #4]
        printf("[shtp event] %s (%u) \n\r",
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	480e      	ldr	r0, [pc, #56]	@ (8002d88 <sh2_eventHanlder+0xc0>)
 8002d50:	f011 fdb2 	bl	80148b8 <iprintf>
      break;
 8002d54:	e005      	b.n	8002d62 <sh2_eventHanlder+0x9a>
        printf("[shtp event] UNKNOWN (%u)\n\r", pEvt->shtpEvent);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	791b      	ldrb	r3, [r3, #4]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	480b      	ldr	r0, [pc, #44]	@ (8002d8c <sh2_eventHanlder+0xc4>)
 8002d5e:	f011 fdab 	bl	80148b8 <iprintf>
      break;
 8002d62:	bf00      	nop
}
 8002d64:	bf00      	nop
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	f3af 8000 	nop.w
 8002d70:	00000000 	.word	0x00000000
 8002d74:	412e8480 	.word	0x412e8480
 8002d78:	200072e0 	.word	0x200072e0
 8002d7c:	08016a0c 	.word	0x08016a0c
 8002d80:	08016a28 	.word	0x08016a28
 8002d84:	08016e0c 	.word	0x08016e0c
 8002d88:	08016a54 	.word	0x08016a54
 8002d8c:	08016a6c 	.word	0x08016a6c

08002d90 <imu_dataHandler>:

/**
 * @brief  IMU sensor data event callback handler definition
 */
static void imu_dataHandler(void * cookie, sh2_SensorEvent_t *pEvent)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b096      	sub	sp, #88	@ 0x58
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  (void)cookie;
  sh2_SensorValue_t value;

  if (sh2_decodeSensorEvent(&value, pEvent) != SH2_OK) {
 8002d9a:	f107 0308 	add.w	r3, r7, #8
 8002d9e:	6839      	ldr	r1, [r7, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f00e ffb1 	bl	8011d08 <sh2_decodeSensorEvent>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <imu_dataHandler+0x2e>
    imu_error_flags |= IMU_DECODE_SENSOR_EVENT_ERROR;
 8002dac:	4b18      	ldr	r3, [pc, #96]	@ (8002e10 <imu_dataHandler+0x80>)
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	4b15      	ldr	r3, [pc, #84]	@ (8002e10 <imu_dataHandler+0x80>)
 8002dba:	801a      	strh	r2, [r3, #0]
 8002dbc:	e024      	b.n	8002e08 <imu_dataHandler+0x78>
    return;
  }

  switch (value.sensorId) {
 8002dbe:	7a3b      	ldrb	r3, [r7, #8]
 8002dc0:	2b06      	cmp	r3, #6
 8002dc2:	d017      	beq.n	8002df4 <imu_dataHandler+0x64>
 8002dc4:	2b06      	cmp	r3, #6
 8002dc6:	dc1e      	bgt.n	8002e06 <imu_dataHandler+0x76>
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d00a      	beq.n	8002de2 <imu_dataHandler+0x52>
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d11a      	bne.n	8002e06 <imu_dataHandler+0x76>
    case SH2_LINEAR_ACCELERATION:
      imu_acc = value;
 8002dd0:	4b10      	ldr	r3, [pc, #64]	@ (8002e14 <imu_dataHandler+0x84>)
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f107 0308 	add.w	r3, r7, #8
 8002dd8:	2250      	movs	r2, #80	@ 0x50
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f011 ffa1 	bl	8014d22 <memcpy>
      break;
 8002de0:	e012      	b.n	8002e08 <imu_dataHandler+0x78>
    case SH2_GYROSCOPE_CALIBRATED:
      imu_gyro = value;
 8002de2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e18 <imu_dataHandler+0x88>)
 8002de4:	4618      	mov	r0, r3
 8002de6:	f107 0308 	add.w	r3, r7, #8
 8002dea:	2250      	movs	r2, #80	@ 0x50
 8002dec:	4619      	mov	r1, r3
 8002dee:	f011 ff98 	bl	8014d22 <memcpy>
      break;
 8002df2:	e009      	b.n	8002e08 <imu_dataHandler+0x78>
    case SH2_GRAVITY:
      imu_grav = value;
 8002df4:	4b09      	ldr	r3, [pc, #36]	@ (8002e1c <imu_dataHandler+0x8c>)
 8002df6:	4618      	mov	r0, r3
 8002df8:	f107 0308 	add.w	r3, r7, #8
 8002dfc:	2250      	movs	r2, #80	@ 0x50
 8002dfe:	4619      	mov	r1, r3
 8002e00:	f011 ff8f 	bl	8014d22 <memcpy>
      break;
 8002e04:	e000      	b.n	8002e08 <imu_dataHandler+0x78>
    default:
      break;
 8002e06:	bf00      	nop
  }
}
 8002e08:	3758      	adds	r7, #88	@ 0x58
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	200072e2 	.word	0x200072e2
 8002e14:	20007340 	.word	0x20007340
 8002e18:	20007390 	.word	0x20007390
 8002e1c:	200073e0 	.word	0x200073e0

08002e20 <imu_report_sensorIds>:

/**
 * @brief Read product ids with version info from the hub.
 */
static void imu_report_sensorIds(void)
{
 8002e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af04      	add	r7, sp, #16
  int status;

  memset(&prodIds, 0, sizeof(prodIds));
 8002e26:	2254      	movs	r2, #84	@ 0x54
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4826      	ldr	r0, [pc, #152]	@ (8002ec4 <imu_report_sensorIds+0xa4>)
 8002e2c:	f011 fe8c 	bl	8014b48 <memset>
  status = sh2_getProdIds(&prodIds);
 8002e30:	4824      	ldr	r0, [pc, #144]	@ (8002ec4 <imu_report_sensorIds+0xa4>)
 8002e32:	f00e ff1b 	bl	8011c6c <sh2_getProdIds>
 8002e36:	6038      	str	r0, [r7, #0]

  if (status < 0) {
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	da03      	bge.n	8002e46 <imu_report_sensorIds+0x26>
    printf("Error from sh2_getProdIds.\n\r");
 8002e3e:	4822      	ldr	r0, [pc, #136]	@ (8002ec8 <imu_report_sensorIds+0xa8>)
 8002e40:	f011 fd3a 	bl	80148b8 <iprintf>
    return;
 8002e44:	e03a      	b.n	8002ebc <imu_report_sensorIds+0x9c>
  }

  // Report the results
  for (int n = 0; n < prodIds.numEntries; n++) {
 8002e46:	2300      	movs	r3, #0
 8002e48:	607b      	str	r3, [r7, #4]
 8002e4a:	e030      	b.n	8002eae <imu_report_sensorIds+0x8e>
    printf("IMU Part %ld : Version %d.%d.%d Build %ld Reset Cause %d \n\r",
 8002e4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec4 <imu_report_sensorIds+0xa4>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	4413      	add	r3, r2
 8002e54:	3304      	adds	r3, #4
 8002e56:	6819      	ldr	r1, [r3, #0]
           prodIds.entry[n].swPartNumber,
           prodIds.entry[n].swVersionMajor, prodIds.entry[n].swVersionMinor,
 8002e58:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec4 <imu_report_sensorIds+0xa4>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	4413      	add	r3, r2
 8002e60:	3301      	adds	r3, #1
 8002e62:	781b      	ldrb	r3, [r3, #0]
    printf("IMU Part %ld : Version %d.%d.%d Build %ld Reset Cause %d \n\r",
 8002e64:	461d      	mov	r5, r3
           prodIds.entry[n].swVersionMajor, prodIds.entry[n].swVersionMinor,
 8002e66:	4a17      	ldr	r2, [pc, #92]	@ (8002ec4 <imu_report_sensorIds+0xa4>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	4413      	add	r3, r2
 8002e6e:	3302      	adds	r3, #2
 8002e70:	781b      	ldrb	r3, [r3, #0]
    printf("IMU Part %ld : Version %d.%d.%d Build %ld Reset Cause %d \n\r",
 8002e72:	461e      	mov	r6, r3
           prodIds.entry[n].swVersionPatch, prodIds.entry[n].swBuildNumber,
 8002e74:	4a13      	ldr	r2, [pc, #76]	@ (8002ec4 <imu_report_sensorIds+0xa4>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	4413      	add	r3, r2
 8002e7c:	330c      	adds	r3, #12
 8002e7e:	881b      	ldrh	r3, [r3, #0]
    printf("IMU Part %ld : Version %d.%d.%d Build %ld Reset Cause %d \n\r",
 8002e80:	461c      	mov	r4, r3
 8002e82:	4a10      	ldr	r2, [pc, #64]	@ (8002ec4 <imu_report_sensorIds+0xa4>)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	4413      	add	r3, r2
 8002e8a:	3308      	adds	r3, #8
 8002e8c:	681b      	ldr	r3, [r3, #0]
           prodIds.entry[n].resetCause);
 8002e8e:	480d      	ldr	r0, [pc, #52]	@ (8002ec4 <imu_report_sensorIds+0xa4>)
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	0112      	lsls	r2, r2, #4
 8002e94:	4402      	add	r2, r0
 8002e96:	7812      	ldrb	r2, [r2, #0]
    printf("IMU Part %ld : Version %d.%d.%d Build %ld Reset Cause %d \n\r",
 8002e98:	9202      	str	r2, [sp, #8]
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	9400      	str	r4, [sp, #0]
 8002e9e:	4633      	mov	r3, r6
 8002ea0:	462a      	mov	r2, r5
 8002ea2:	480a      	ldr	r0, [pc, #40]	@ (8002ecc <imu_report_sensorIds+0xac>)
 8002ea4:	f011 fd08 	bl	80148b8 <iprintf>
  for (int n = 0; n < prodIds.numEntries; n++) {
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	607b      	str	r3, [r7, #4]
 8002eae:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <imu_report_sensorIds+0xa4>)
 8002eb0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	dbc7      	blt.n	8002e4c <imu_report_sensorIds+0x2c>
  }
}
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	200072ec 	.word	0x200072ec
 8002ec8:	08016a88 	.word	0x08016a88
 8002ecc:	08016aa8 	.word	0x08016aa8

08002ed0 <imu_start_reports>:
 * @brief Configure imu to generate periodic reports
 * @note Each entry of sensorConfig[] represents one sensor to be configured in the loop
 * @retval Is imu operation successful
 */
static imu_status_t imu_start_reports(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
      { SH2_GEOMAGNETIC_ROTATION_VECTOR, {.reportInterval_us = 0} },
      { SH2_ROTATION_VECTOR,             {.reportInterval_us = 0} },
      { SH2_ARVR_STABILIZED_RV,          {.reportInterval_us = 0} },
  };

  for (uint8_t n = 0; n < ARRAY_LEN(sensorConfig); n++) {
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	71fb      	strb	r3, [r7, #7]
 8002eda:	e042      	b.n	8002f62 <imu_start_reports+0x92>
    int sensorId = sensorConfig[n].sensorId;
 8002edc:	79fa      	ldrb	r2, [r7, #7]
 8002ede:	4925      	ldr	r1, [pc, #148]	@ (8002f74 <imu_start_reports+0xa4>)
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	440b      	add	r3, r1
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	603b      	str	r3, [r7, #0]
    if (sh2_setSensorConfig(sensorId, &sensorConfig[n].config) != SH2_OK) {
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	b2d8      	uxtb	r0, r3
 8002ef2:	79fa      	ldrb	r2, [r7, #7]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4a1d      	ldr	r2, [pc, #116]	@ (8002f74 <imu_start_reports+0xa4>)
 8002efe:	4413      	add	r3, r2
 8002f00:	3304      	adds	r3, #4
 8002f02:	4619      	mov	r1, r3
 8002f04:	f00e fed6 	bl	8011cb4 <sh2_setSensorConfig>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d026      	beq.n	8002f5c <imu_start_reports+0x8c>
      if (sensorConfig[n].config.reportInterval_us != 0) {
 8002f0e:	79fa      	ldrb	r2, [r7, #7]
 8002f10:	4918      	ldr	r1, [pc, #96]	@ (8002f74 <imu_start_reports+0xa4>)
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00d      	beq.n	8002f40 <imu_start_reports+0x70>
        printf("Error while enabling sensor %d\n\r", sensorId);
 8002f24:	6839      	ldr	r1, [r7, #0]
 8002f26:	4814      	ldr	r0, [pc, #80]	@ (8002f78 <imu_start_reports+0xa8>)
 8002f28:	f011 fcc6 	bl	80148b8 <iprintf>
        imu_error_flags |= IMU_SENSOR_ENABLE_FAILURE;
 8002f2c:	4b13      	ldr	r3, [pc, #76]	@ (8002f7c <imu_start_reports+0xac>)
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	4b10      	ldr	r3, [pc, #64]	@ (8002f7c <imu_start_reports+0xac>)
 8002f3a:	801a      	strh	r2, [r3, #0]
        return IMU_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e014      	b.n	8002f6a <imu_start_reports+0x9a>
      } else {
        printf("Error while disabling sensor %d\n\r", sensorId);
 8002f40:	6839      	ldr	r1, [r7, #0]
 8002f42:	480f      	ldr	r0, [pc, #60]	@ (8002f80 <imu_start_reports+0xb0>)
 8002f44:	f011 fcb8 	bl	80148b8 <iprintf>
        imu_error_flags |= IMU_SENSOR_DISABLE_FAILURE;
 8002f48:	4b0c      	ldr	r3, [pc, #48]	@ (8002f7c <imu_start_reports+0xac>)
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <imu_start_reports+0xac>)
 8002f56:	801a      	strh	r2, [r3, #0]
        return IMU_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e006      	b.n	8002f6a <imu_start_reports+0x9a>
  for (uint8_t n = 0; n < ARRAY_LEN(sensorConfig); n++) {
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	71fb      	strb	r3, [r7, #7]
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d9b9      	bls.n	8002edc <imu_start_reports+0xc>
      }
    }
  }

  return IMU_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000000 	.word	0x20000000
 8002f78:	08016ae4 	.word	0x08016ae4
 8002f7c:	200072e2 	.word	0x200072e2
 8002f80:	08016b08 	.word	0x08016b08

08002f84 <imu_sys_init>:
/**
 * @brief  IMU initialzation fn
 * @retval Is imu operation successful
 */
imu_status_t imu_sys_init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
  // Open SH2 interface and register SH2 events
  if (sh2_open(imu_get_hal(), sh2_eventHanlder, NULL) != SH2_OK) {
 8002f8a:	f7ff fe77 	bl	8002c7c <imu_get_hal>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2200      	movs	r2, #0
 8002f92:	4914      	ldr	r1, [pc, #80]	@ (8002fe4 <imu_sys_init+0x60>)
 8002f94:	4618      	mov	r0, r3
 8002f96:	f00e fda5 	bl	8011ae4 <sh2_open>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d009      	beq.n	8002fb4 <imu_sys_init+0x30>
    imu_error_flags |= IMU_SH2_FAILED_TO_OPEN;
 8002fa0:	4b11      	ldr	r3, [pc, #68]	@ (8002fe8 <imu_sys_init+0x64>)
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	f043 0310 	orr.w	r3, r3, #16
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe8 <imu_sys_init+0x64>)
 8002fae:	801a      	strh	r2, [r3, #0]
    return IMU_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e012      	b.n	8002fda <imu_sys_init+0x56>
  }


  // Register sensor data events
  sh2_setSensorCallback(imu_dataHandler, NULL);
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	480d      	ldr	r0, [pc, #52]	@ (8002fec <imu_sys_init+0x68>)
 8002fb8:	f00e fe42 	bl	8011c40 <sh2_setSensorCallback>
  imu_status_t retval = imu_start_reports();
 8002fbc:	f7ff ff88 	bl	8002ed0 <imu_start_reports>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	71fb      	strb	r3, [r7, #7]

  // Get product ids
  imu_report_sensorIds();
 8002fc4:	f7ff ff2c 	bl	8002e20 <imu_report_sensorIds>

  // Reset imu reseted flag
  imu_hal_flags &= ~IMU_RESET_OCCURRED;
 8002fc8:	4b09      	ldr	r3, [pc, #36]	@ (8002ff0 <imu_sys_init+0x6c>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	f023 0308 	bic.w	r3, r3, #8
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	4b06      	ldr	r3, [pc, #24]	@ (8002ff0 <imu_sys_init+0x6c>)
 8002fd6:	701a      	strb	r2, [r3, #0]

  // Start sensor reports
  return retval;
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	08002cc9 	.word	0x08002cc9
 8002fe8:	200072e2 	.word	0x200072e2
 8002fec:	08002d91 	.word	0x08002d91
 8002ff0:	200072e0 	.word	0x200072e0

08002ff4 <imu_service>:
 * @brief  IMU service helper fn
 * @note   Must be called at freq > BNO085 report interval to keep data flowing.
 * @retval Is imu operation successful
 */
imu_status_t imu_service(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  // Reconfigure the imu if reset occured
  if (imu_hal_flags & IMU_RESET_OCCURRED) {
 8002ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8003030 <imu_service+0x3c>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00e      	beq.n	8003024 <imu_service+0x30>
    if (imu_start_reports() != IMU_OK) {
 8003006:	f7ff ff63 	bl	8002ed0 <imu_start_reports>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <imu_service+0x20>
      return IMU_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e00a      	b.n	800302a <imu_service+0x36>
    }
    imu_hal_flags &= ~IMU_RESET_OCCURRED;
 8003014:	4b06      	ldr	r3, [pc, #24]	@ (8003030 <imu_service+0x3c>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	f023 0308 	bic.w	r3, r3, #8
 800301e:	b2da      	uxtb	r2, r3
 8003020:	4b03      	ldr	r3, [pc, #12]	@ (8003030 <imu_service+0x3c>)
 8003022:	701a      	strb	r2, [r3, #0]
  }

  sh2_service();
 8003024:	f00e fdf8 	bl	8011c18 <sh2_service>
  return IMU_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	200072e0 	.word	0x200072e0

08003034 <SCB_EnableICache>:
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003038:	f3bf 8f4f 	dsb	sy
}
 800303c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800303e:	f3bf 8f6f 	isb	sy
}
 8003042:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8003044:	4b0d      	ldr	r3, [pc, #52]	@ (800307c <SCB_EnableICache+0x48>)
 8003046:	2200      	movs	r2, #0
 8003048:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800304c:	f3bf 8f4f 	dsb	sy
}
 8003050:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003052:	f3bf 8f6f 	isb	sy
}
 8003056:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003058:	4b08      	ldr	r3, [pc, #32]	@ (800307c <SCB_EnableICache+0x48>)
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	4a07      	ldr	r2, [pc, #28]	@ (800307c <SCB_EnableICache+0x48>)
 800305e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003062:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003064:	f3bf 8f4f 	dsb	sy
}
 8003068:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800306a:	f3bf 8f6f 	isb	sy
}
 800306e:	bf00      	nop
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <SCB_InvalidateICache>:
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003084:	f3bf 8f4f 	dsb	sy
}
 8003088:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800308a:	f3bf 8f6f 	isb	sy
}
 800308e:	bf00      	nop
    SCB->ICIALLU = 0UL;
 8003090:	4b07      	ldr	r3, [pc, #28]	@ (80030b0 <SCB_InvalidateICache+0x30>)
 8003092:	2200      	movs	r2, #0
 8003094:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003098:	f3bf 8f4f 	dsb	sy
}
 800309c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800309e:	f3bf 8f6f 	isb	sy
}
 80030a2:	bf00      	nop
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <SCB_EnableDCache>:
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80030ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003138 <SCB_EnableDCache+0x84>)
 80030bc:	2200      	movs	r2, #0
 80030be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80030c2:	f3bf 8f4f 	dsb	sy
}
 80030c6:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80030c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003138 <SCB_EnableDCache+0x84>)
 80030ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030ce:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	0b5b      	lsrs	r3, r3, #13
 80030d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80030d8:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	08db      	lsrs	r3, r3, #3
 80030de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030e2:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	015a      	lsls	r2, r3, #5
 80030e8:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80030ec:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80030f2:	4911      	ldr	r1, [pc, #68]	@ (8003138 <SCB_EnableDCache+0x84>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1e5a      	subs	r2, r3, #1
 80030fe:	60ba      	str	r2, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ef      	bne.n	80030e4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e5a      	subs	r2, r3, #1
 8003108:	60fa      	str	r2, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1e5      	bne.n	80030da <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800310e:	f3bf 8f4f 	dsb	sy
}
 8003112:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8003114:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <SCB_EnableDCache+0x84>)
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	4a07      	ldr	r2, [pc, #28]	@ (8003138 <SCB_EnableDCache+0x84>)
 800311a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800311e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8003120:	f3bf 8f4f 	dsb	sy
}
 8003124:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003126:	f3bf 8f6f 	isb	sy
}
 800312a:	bf00      	nop
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <SCB_InvalidateDCache>:
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8003142:	4b1b      	ldr	r3, [pc, #108]	@ (80031b0 <SCB_InvalidateDCache+0x74>)
 8003144:	2200      	movs	r2, #0
 8003146:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800314a:	f3bf 8f4f 	dsb	sy
}
 800314e:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003150:	4b17      	ldr	r3, [pc, #92]	@ (80031b0 <SCB_InvalidateDCache+0x74>)
 8003152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003156:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	0b5b      	lsrs	r3, r3, #13
 800315c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003160:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	08db      	lsrs	r3, r3, #3
 8003166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800316a:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8003174:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800317a:	490d      	ldr	r1, [pc, #52]	@ (80031b0 <SCB_InvalidateDCache+0x74>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	1e5a      	subs	r2, r3, #1
 8003186:	60ba      	str	r2, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1ef      	bne.n	800316c <SCB_InvalidateDCache+0x30>
    } while(sets-- != 0U);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1e5a      	subs	r2, r3, #1
 8003190:	60fa      	str	r2, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e5      	bne.n	8003162 <SCB_InvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8003196:	f3bf 8f4f 	dsb	sy
}
 800319a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800319c:	f3bf 8f6f 	isb	sy
}
 80031a0:	bf00      	nop
}
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  SCB_InvalidateICache();
 80031ba:	f7ff ff61 	bl	8003080 <SCB_InvalidateICache>
  SCB_InvalidateDCache();
 80031be:	f7ff ffbd 	bl	800313c <SCB_InvalidateDCache>
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80031c2:	f7ff ff37 	bl	8003034 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80031c6:	f7ff ff75 	bl	80030b4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031ca:	f001 f8d3 	bl	8004374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031ce:	f000 f831 	bl	8003234 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  // Implement eeprom recovery later
  sys_error_flags = 0;
 80031d2:	4b14      	ldr	r3, [pc, #80]	@ (8003224 <main+0x70>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031d8:	f7ff f818 	bl	800220c <MX_GPIO_Init>
  MX_DMA_Init();
 80031dc:	f7fe fd62 	bl	8001ca4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80031e0:	f000 fe84 	bl	8003eec <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80031e4:	f000 fe52 	bl	8003e8c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80031e8:	f000 feb0 	bl	8003f4c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n\n\n======================================== \n\rSTM32F7 Peripherals Initialized\n\r");
 80031ec:	480e      	ldr	r0, [pc, #56]	@ (8003228 <main+0x74>)
 80031ee:	f011 fb63 	bl	80148b8 <iprintf>
  reset_cause_t reset_cause = reset_cause_get();
 80031f2:	f000 f893 	bl	800331c <reset_cause_get>
 80031f6:	4603      	mov	r3, r0
 80031f8:	71fb      	strb	r3, [r7, #7]
  printf("The system reset cause is \"%s\"\n\r", reset_cause_get_name(reset_cause));
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 f8df 	bl	80033c0 <reset_cause_get_name>
 8003202:	4603      	mov	r3, r0
 8003204:	4619      	mov	r1, r3
 8003206:	4809      	ldr	r0, [pc, #36]	@ (800322c <main+0x78>)
 8003208:	f011 fb56 	bl	80148b8 <iprintf>
  printf("Start osKernel Init \n\r");
 800320c:	4808      	ldr	r0, [pc, #32]	@ (8003230 <main+0x7c>)
 800320e:	f011 fb53 	bl	80148b8 <iprintf>
  //  MX_IWDG_Init();
  //  MX_USB_DEVICE_Init();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8003212:	f00a f973 	bl	800d4fc <osKernelInitialize>
  MX_FREERTOS_Init();
 8003216:	f7fe fde5 	bl	8001de4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800321a:	f00a f9a3 	bl	800d564 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800321e:	bf00      	nop
 8003220:	e7fd      	b.n	800321e <main+0x6a>
 8003222:	bf00      	nop
 8003224:	20000974 	.word	0x20000974
 8003228:	08016ba0 	.word	0x08016ba0
 800322c:	08016bf4 	.word	0x08016bf4
 8003230:	08016c18 	.word	0x08016c18

08003234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b094      	sub	sp, #80	@ 0x50
 8003238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800323a:	f107 031c 	add.w	r3, r7, #28
 800323e:	2234      	movs	r2, #52	@ 0x34
 8003240:	2100      	movs	r1, #0
 8003242:	4618      	mov	r0, r3
 8003244:	f011 fc80 	bl	8014b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003248:	f107 0308 	add.w	r3, r7, #8
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003258:	f003 fe14 	bl	8006e84 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	4b2d      	ldr	r3, [pc, #180]	@ (8003314 <SystemClock_Config+0xe0>)
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	4a2c      	ldr	r2, [pc, #176]	@ (8003314 <SystemClock_Config+0xe0>)
 8003262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003266:	6413      	str	r3, [r2, #64]	@ 0x40
 8003268:	4b2a      	ldr	r3, [pc, #168]	@ (8003314 <SystemClock_Config+0xe0>)
 800326a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003274:	4b28      	ldr	r3, [pc, #160]	@ (8003318 <SystemClock_Config+0xe4>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a27      	ldr	r2, [pc, #156]	@ (8003318 <SystemClock_Config+0xe4>)
 800327a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	4b25      	ldr	r3, [pc, #148]	@ (8003318 <SystemClock_Config+0xe4>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800328c:	2309      	movs	r3, #9
 800328e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003290:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8003294:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003296:	2301      	movs	r3, #1
 8003298:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800329a:	2302      	movs	r3, #2
 800329c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800329e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80032a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80032a4:	2308      	movs	r3, #8
 80032a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80032a8:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80032ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032ae:	2302      	movs	r3, #2
 80032b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80032b2:	2309      	movs	r3, #9
 80032b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80032b6:	2302      	movs	r3, #2
 80032b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032ba:	f107 031c 	add.w	r3, r7, #28
 80032be:	4618      	mov	r0, r3
 80032c0:	f003 fe40 	bl	8006f44 <HAL_RCC_OscConfig>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80032ca:	f000 f8db 	bl	8003484 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80032ce:	f003 fde9 	bl	8006ea4 <HAL_PWREx_EnableOverDrive>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80032d8:	f000 f8d4 	bl	8003484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032dc:	230f      	movs	r3, #15
 80032de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032e0:	2302      	movs	r3, #2
 80032e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032e4:	2300      	movs	r3, #0
 80032e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80032ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80032f4:	f107 0308 	add.w	r3, r7, #8
 80032f8:	2107      	movs	r1, #7
 80032fa:	4618      	mov	r0, r3
 80032fc:	f004 f8d0 	bl	80074a0 <HAL_RCC_ClockConfig>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003306:	f000 f8bd 	bl	8003484 <Error_Handler>
  }
}
 800330a:	bf00      	nop
 800330c:	3750      	adds	r7, #80	@ 0x50
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40023800 	.word	0x40023800
 8003318:	40007000 	.word	0x40007000

0800331c <reset_cause_get>:
/**
  * @brief   Obtain the STM32 system reset cause
  * @return  The system reset cause
  */
reset_cause_t reset_cause_get(void)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
  reset_cause_t reset_cause;

  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) {
 8003322:	4b26      	ldr	r3, [pc, #152]	@ (80033bc <reset_cause_get+0xa0>)
 8003324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003326:	2b00      	cmp	r3, #0
 8003328:	da02      	bge.n	8003330 <reset_cause_get+0x14>
    reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 800332a:	2301      	movs	r3, #1
 800332c:	71fb      	strb	r3, [r7, #7]
 800332e:	e037      	b.n	80033a0 <reset_cause_get+0x84>
  }
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) {
 8003330:	4b22      	ldr	r3, [pc, #136]	@ (80033bc <reset_cause_get+0xa0>)
 8003332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003334:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <reset_cause_get+0x26>
    reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 800333c:	2302      	movs	r3, #2
 800333e:	71fb      	strb	r3, [r7, #7]
 8003340:	e02e      	b.n	80033a0 <reset_cause_get+0x84>
  }
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) {
 8003342:	4b1e      	ldr	r3, [pc, #120]	@ (80033bc <reset_cause_get+0xa0>)
 8003344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003346:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <reset_cause_get+0x38>
    reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800334e:	2303      	movs	r3, #3
 8003350:	71fb      	strb	r3, [r7, #7]
 8003352:	e025      	b.n	80033a0 <reset_cause_get+0x84>
  }
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) {
 8003354:	4b19      	ldr	r3, [pc, #100]	@ (80033bc <reset_cause_get+0xa0>)
 8003356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <reset_cause_get+0x4a>
    // This reset is induced by calling the ARM CMSIS NVIC_SystemReset() function
    reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 8003360:	2304      	movs	r3, #4
 8003362:	71fb      	strb	r3, [r7, #7]
 8003364:	e01c      	b.n	80033a0 <reset_cause_get+0x84>
  }
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) {
 8003366:	4b15      	ldr	r3, [pc, #84]	@ (80033bc <reset_cause_get+0xa0>)
 8003368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800336a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <reset_cause_get+0x5c>
    reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8003372:	2305      	movs	r3, #5
 8003374:	71fb      	strb	r3, [r7, #7]
 8003376:	e013      	b.n	80033a0 <reset_cause_get+0x84>
  }
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) {
 8003378:	4b10      	ldr	r3, [pc, #64]	@ (80033bc <reset_cause_get+0xa0>)
 800337a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800337c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <reset_cause_get+0x6e>
    reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8003384:	2306      	movs	r3, #6
 8003386:	71fb      	strb	r3, [r7, #7]
 8003388:	e00a      	b.n	80033a0 <reset_cause_get+0x84>
  }
  else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) {
 800338a:	4b0c      	ldr	r3, [pc, #48]	@ (80033bc <reset_cause_get+0xa0>)
 800338c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800338e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <reset_cause_get+0x80>
    reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 8003396:	2307      	movs	r3, #7
 8003398:	71fb      	strb	r3, [r7, #7]
 800339a:	e001      	b.n	80033a0 <reset_cause_get+0x84>
  }
  else {
    reset_cause = RESET_CAUSE_UNKNOWN;
 800339c:	2300      	movs	r3, #0
 800339e:	71fb      	strb	r3, [r7, #7]
  }

  // Clear all the reset flags or else they will remain set during future
  // resets until system power is fully removed.
  __HAL_RCC_CLEAR_RESET_FLAGS();
 80033a0:	4b06      	ldr	r3, [pc, #24]	@ (80033bc <reset_cause_get+0xa0>)
 80033a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a4:	4a05      	ldr	r2, [pc, #20]	@ (80033bc <reset_cause_get+0xa0>)
 80033a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033aa:	6753      	str	r3, [r2, #116]	@ 0x74

  return reset_cause;
 80033ac:	79fb      	ldrb	r3, [r7, #7]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800

080033c0 <reset_cause_get_name>:
  *           from a reset cause type
  * @param    reset_cause The previously-obtained system reset cause
  * @return   A null-terminated ASCII name string describing the system reset cause
  */
const char* reset_cause_get_name(reset_cause_t reset_cause)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	71fb      	strb	r3, [r7, #7]
  const char *reset_cause_name = "TBD";
 80033ca:	4b1c      	ldr	r3, [pc, #112]	@ (800343c <reset_cause_get_name+0x7c>)
 80033cc:	60fb      	str	r3, [r7, #12]

  switch (reset_cause) {
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	2b07      	cmp	r3, #7
 80033d2:	d82b      	bhi.n	800342c <reset_cause_get_name+0x6c>
 80033d4:	a201      	add	r2, pc, #4	@ (adr r2, 80033dc <reset_cause_get_name+0x1c>)
 80033d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033da:	bf00      	nop
 80033dc:	080033fd 	.word	0x080033fd
 80033e0:	08003403 	.word	0x08003403
 80033e4:	08003409 	.word	0x08003409
 80033e8:	0800340f 	.word	0x0800340f
 80033ec:	08003415 	.word	0x08003415
 80033f0:	0800341b 	.word	0x0800341b
 80033f4:	08003421 	.word	0x08003421
 80033f8:	08003427 	.word	0x08003427
    case RESET_CAUSE_UNKNOWN:
      reset_cause_name = "UNKNOWN";
 80033fc:	4b10      	ldr	r3, [pc, #64]	@ (8003440 <reset_cause_get_name+0x80>)
 80033fe:	60fb      	str	r3, [r7, #12]
      break;
 8003400:	e014      	b.n	800342c <reset_cause_get_name+0x6c>
    case RESET_CAUSE_LOW_POWER_RESET:
      reset_cause_name = "LOW_POWER_RESET";
 8003402:	4b10      	ldr	r3, [pc, #64]	@ (8003444 <reset_cause_get_name+0x84>)
 8003404:	60fb      	str	r3, [r7, #12]
      break;
 8003406:	e011      	b.n	800342c <reset_cause_get_name+0x6c>
    case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
      reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8003408:	4b0f      	ldr	r3, [pc, #60]	@ (8003448 <reset_cause_get_name+0x88>)
 800340a:	60fb      	str	r3, [r7, #12]
      break;
 800340c:	e00e      	b.n	800342c <reset_cause_get_name+0x6c>
    case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
      reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 800340e:	4b0f      	ldr	r3, [pc, #60]	@ (800344c <reset_cause_get_name+0x8c>)
 8003410:	60fb      	str	r3, [r7, #12]
      break;
 8003412:	e00b      	b.n	800342c <reset_cause_get_name+0x6c>
    case RESET_CAUSE_SOFTWARE_RESET:
      reset_cause_name = "SOFTWARE_RESET";
 8003414:	4b0e      	ldr	r3, [pc, #56]	@ (8003450 <reset_cause_get_name+0x90>)
 8003416:	60fb      	str	r3, [r7, #12]
      break;
 8003418:	e008      	b.n	800342c <reset_cause_get_name+0x6c>
    case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
      reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 800341a:	4b0e      	ldr	r3, [pc, #56]	@ (8003454 <reset_cause_get_name+0x94>)
 800341c:	60fb      	str	r3, [r7, #12]
      break;
 800341e:	e005      	b.n	800342c <reset_cause_get_name+0x6c>
    case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
      reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8003420:	4b0d      	ldr	r3, [pc, #52]	@ (8003458 <reset_cause_get_name+0x98>)
 8003422:	60fb      	str	r3, [r7, #12]
      break;
 8003424:	e002      	b.n	800342c <reset_cause_get_name+0x6c>
    case RESET_CAUSE_BROWNOUT_RESET:
      reset_cause_name = "BROWNOUT_RESET (BOR)";
 8003426:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <reset_cause_get_name+0x9c>)
 8003428:	60fb      	str	r3, [r7, #12]
      break;
 800342a:	bf00      	nop
  }

  return reset_cause_name;
 800342c:	68fb      	ldr	r3, [r7, #12]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	08016c30 	.word	0x08016c30
 8003440:	08016c34 	.word	0x08016c34
 8003444:	08016c3c 	.word	0x08016c3c
 8003448:	08016c4c 	.word	0x08016c4c
 800344c:	08016c64 	.word	0x08016c64
 8003450:	08016c80 	.word	0x08016c80
 8003454:	08016c90 	.word	0x08016c90
 8003458:	08016cc0 	.word	0x08016cc0
 800345c:	08016cdc 	.word	0x08016cdc

08003460 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a04      	ldr	r2, [pc, #16]	@ (8003480 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d101      	bne.n	8003476 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003472:	f000 ff95 	bl	80043a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	40001000 	.word	0x40001000

08003484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  RoboSoccer_errorHandler();
 8003488:	f7fe fc32 	bl	8001cf0 <RoboSoccer_errorHandler>
  while (1)
 800348c:	bf00      	nop
 800348e:	e7fd      	b.n	800348c <Error_Handler+0x8>

08003490 <_write>:

/**
  * @brief  Enable use of C lib printf debug through UART3 ring buffer non-blocking
  */
int _write(int file, char *ptr, int len)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  (void)file;
  for (int i = 0; i < len; i++) {
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	e021      	b.n	80034e6 <_write+0x56>
    uint16_t next = (tx_head + 1) % PRINTF_TX_BUFFER_SIZE;
 80034a2:	4b27      	ldr	r3, [pc, #156]	@ (8003540 <_write+0xb0>)
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3301      	adds	r3, #1
 80034aa:	425a      	negs	r2, r3
 80034ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034b4:	bf58      	it	pl
 80034b6:	4253      	negpl	r3, r2
 80034b8:	827b      	strh	r3, [r7, #18]
    while (next == tx_tail); // Wait if buffer full
 80034ba:	bf00      	nop
 80034bc:	4b21      	ldr	r3, [pc, #132]	@ (8003544 <_write+0xb4>)
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	8a7a      	ldrh	r2, [r7, #18]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d0f9      	beq.n	80034bc <_write+0x2c>
    tx_ring_buf[tx_head] = ptr[i];
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	4413      	add	r3, r2
 80034ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003540 <_write+0xb0>)
 80034d0:	8812      	ldrh	r2, [r2, #0]
 80034d2:	b292      	uxth	r2, r2
 80034d4:	7819      	ldrb	r1, [r3, #0]
 80034d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003548 <_write+0xb8>)
 80034d8:	5499      	strb	r1, [r3, r2]
    tx_head = next;
 80034da:	4a19      	ldr	r2, [pc, #100]	@ (8003540 <_write+0xb0>)
 80034dc:	8a7b      	ldrh	r3, [r7, #18]
 80034de:	8013      	strh	r3, [r2, #0]
  for (int i = 0; i < len; i++) {
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	3301      	adds	r3, #1
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	dbd9      	blt.n	80034a2 <_write+0x12>
  }

  if (!tx_busy) {
 80034ee:	4b17      	ldr	r3, [pc, #92]	@ (800354c <_write+0xbc>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d11e      	bne.n	8003536 <_write+0xa6>
    tx_busy = 1;
 80034f8:	4b14      	ldr	r3, [pc, #80]	@ (800354c <_write+0xbc>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	701a      	strb	r2, [r3, #0]
    uint8_t byte = tx_ring_buf[tx_tail];
 80034fe:	4b11      	ldr	r3, [pc, #68]	@ (8003544 <_write+0xb4>)
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b29b      	uxth	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	4b10      	ldr	r3, [pc, #64]	@ (8003548 <_write+0xb8>)
 8003508:	5c9b      	ldrb	r3, [r3, r2]
 800350a:	747b      	strb	r3, [r7, #17]
    tx_tail = (tx_tail + 1) % PRINTF_TX_BUFFER_SIZE;
 800350c:	4b0d      	ldr	r3, [pc, #52]	@ (8003544 <_write+0xb4>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	3301      	adds	r3, #1
 8003514:	425a      	negs	r2, r3
 8003516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800351e:	bf58      	it	pl
 8003520:	4253      	negpl	r3, r2
 8003522:	b29a      	uxth	r2, r3
 8003524:	4b07      	ldr	r3, [pc, #28]	@ (8003544 <_write+0xb4>)
 8003526:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit_IT(&huart3, &byte, 1);
 8003528:	f107 0311 	add.w	r3, r7, #17
 800352c:	2201      	movs	r2, #1
 800352e:	4619      	mov	r1, r3
 8003530:	4807      	ldr	r0, [pc, #28]	@ (8003550 <_write+0xc0>)
 8003532:	f006 fb43 	bl	8009bbc <HAL_UART_Transmit_IT>
  }

  return len;
 8003536:	687b      	ldr	r3, [r7, #4]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	20007640 	.word	0x20007640
 8003544:	20007642 	.word	0x20007642
 8003548:	20007440 	.word	0x20007440
 800354c:	20007644 	.word	0x20007644
 8003550:	200077d4 	.word	0x200077d4

08003554 <HAL_SPI_MspInit>:
  /* USER CODE END SPI3_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	@ 0x28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355c:	f107 0314 	add.w	r3, r7, #20
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a29      	ldr	r2, [pc, #164]	@ (8003618 <HAL_SPI_MspInit+0xc4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d14c      	bne.n	8003610 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003576:	4b29      	ldr	r3, [pc, #164]	@ (800361c <HAL_SPI_MspInit+0xc8>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	4a28      	ldr	r2, [pc, #160]	@ (800361c <HAL_SPI_MspInit+0xc8>)
 800357c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003580:	6413      	str	r3, [r2, #64]	@ 0x40
 8003582:	4b26      	ldr	r3, [pc, #152]	@ (800361c <HAL_SPI_MspInit+0xc8>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800358e:	4b23      	ldr	r3, [pc, #140]	@ (800361c <HAL_SPI_MspInit+0xc8>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003592:	4a22      	ldr	r2, [pc, #136]	@ (800361c <HAL_SPI_MspInit+0xc8>)
 8003594:	f043 0302 	orr.w	r3, r3, #2
 8003598:	6313      	str	r3, [r2, #48]	@ 0x30
 800359a:	4b20      	ldr	r3, [pc, #128]	@ (800361c <HAL_SPI_MspInit+0xc8>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a6:	4b1d      	ldr	r3, [pc, #116]	@ (800361c <HAL_SPI_MspInit+0xc8>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035aa:	4a1c      	ldr	r2, [pc, #112]	@ (800361c <HAL_SPI_MspInit+0xc8>)
 80035ac:	f043 0304 	orr.w	r3, r3, #4
 80035b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035b2:	4b1a      	ldr	r3, [pc, #104]	@ (800361c <HAL_SPI_MspInit+0xc8>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = SPI_IMU_MOSI_Pin;
 80035be:	2304      	movs	r3, #4
 80035c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ca:	2303      	movs	r3, #3
 80035cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80035ce:	2307      	movs	r3, #7
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPI_IMU_MOSI_GPIO_Port, &GPIO_InitStruct);
 80035d2:	f107 0314 	add.w	r3, r7, #20
 80035d6:	4619      	mov	r1, r3
 80035d8:	4811      	ldr	r0, [pc, #68]	@ (8003620 <HAL_SPI_MspInit+0xcc>)
 80035da:	f002 f8c9 	bl	8005770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_IMU_CLK_Pin|SPI_IMU_MISO_Pin;
 80035de:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80035e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e4:	2302      	movs	r3, #2
 80035e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ec:	2303      	movs	r3, #3
 80035ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035f0:	2306      	movs	r3, #6
 80035f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	4619      	mov	r1, r3
 80035fa:	480a      	ldr	r0, [pc, #40]	@ (8003624 <HAL_SPI_MspInit+0xd0>)
 80035fc:	f002 f8b8 	bl	8005770 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 4, 0);
 8003600:	2200      	movs	r2, #0
 8003602:	2104      	movs	r1, #4
 8003604:	2033      	movs	r0, #51	@ 0x33
 8003606:	f001 fc71 	bl	8004eec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800360a:	2033      	movs	r0, #51	@ 0x33
 800360c:	f001 fc8a 	bl	8004f24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003610:	bf00      	nop
 8003612:	3728      	adds	r7, #40	@ 0x28
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40003c00 	.word	0x40003c00
 800361c:	40023800 	.word	0x40023800
 8003620:	40020400 	.word	0x40020400
 8003624:	40020800 	.word	0x40020800

08003628 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI3)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a0c      	ldr	r2, [pc, #48]	@ (8003668 <HAL_SPI_MspDeInit+0x40>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d111      	bne.n	800365e <HAL_SPI_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 800363a:	4b0c      	ldr	r3, [pc, #48]	@ (800366c <HAL_SPI_MspDeInit+0x44>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	4a0b      	ldr	r2, [pc, #44]	@ (800366c <HAL_SPI_MspDeInit+0x44>)
 8003640:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003644:	6413      	str	r3, [r2, #64]	@ 0x40
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    HAL_GPIO_DeInit(SPI_IMU_MOSI_GPIO_Port, SPI_IMU_MOSI_Pin);
 8003646:	2104      	movs	r1, #4
 8003648:	4809      	ldr	r0, [pc, #36]	@ (8003670 <HAL_SPI_MspDeInit+0x48>)
 800364a:	f002 fa3d 	bl	8005ac8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOC, SPI_IMU_CLK_Pin|SPI_IMU_MISO_Pin);
 800364e:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8003652:	4808      	ldr	r0, [pc, #32]	@ (8003674 <HAL_SPI_MspDeInit+0x4c>)
 8003654:	f002 fa38 	bl	8005ac8 <HAL_GPIO_DeInit>

    /* SPI3 interrupt Deinit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 8003658:	2033      	movs	r0, #51	@ 0x33
 800365a:	f001 fc71 	bl	8004f40 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40003c00 	.word	0x40003c00
 800366c:	40023800 	.word	0x40023800
 8003670:	40020400 	.word	0x40020400
 8003674:	40020800 	.word	0x40020800

08003678 <imu_hal_init_spi>:

/* USER CODE BEGIN 1 */
void imu_hal_init_spi(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_SPI2_CLK_ENABLE();
 800367e:	4b42      	ldr	r3, [pc, #264]	@ (8003788 <imu_hal_init_spi+0x110>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	4a41      	ldr	r2, [pc, #260]	@ (8003788 <imu_hal_init_spi+0x110>)
 8003684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003688:	6413      	str	r3, [r2, #64]	@ 0x40
 800368a:	4b3f      	ldr	r3, [pc, #252]	@ (8003788 <imu_hal_init_spi+0x110>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003696:	4b3c      	ldr	r3, [pc, #240]	@ (8003788 <imu_hal_init_spi+0x110>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369a:	4a3b      	ldr	r2, [pc, #236]	@ (8003788 <imu_hal_init_spi+0x110>)
 800369c:	f043 0304 	orr.w	r3, r3, #4
 80036a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036a2:	4b39      	ldr	r3, [pc, #228]	@ (8003788 <imu_hal_init_spi+0x110>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	607b      	str	r3, [r7, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ae:	4b36      	ldr	r3, [pc, #216]	@ (8003788 <imu_hal_init_spi+0x110>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b2:	4a35      	ldr	r2, [pc, #212]	@ (8003788 <imu_hal_init_spi+0x110>)
 80036b4:	f043 0302 	orr.w	r3, r3, #2
 80036b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ba:	4b33      	ldr	r3, [pc, #204]	@ (8003788 <imu_hal_init_spi+0x110>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	683b      	ldr	r3, [r7, #0]
  /**SPI2 GPIO Configuration
  PC2     ------> SPI2_MISO
  PC3     ------> SPI2_MOSI
  PB10     ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = SPI_IMU_MISO_Pin|SPI_IMU_MOSI_Pin;
 80036c6:	f640 0304 	movw	r3, #2052	@ 0x804
 80036ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036cc:	2302      	movs	r3, #2
 80036ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d4:	2303      	movs	r3, #3
 80036d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036d8:	2305      	movs	r3, #5
 80036da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036dc:	f107 030c 	add.w	r3, r7, #12
 80036e0:	4619      	mov	r1, r3
 80036e2:	482a      	ldr	r0, [pc, #168]	@ (800378c <imu_hal_init_spi+0x114>)
 80036e4:	f002 f844 	bl	8005770 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SPI_IMU_CLK_Pin;
 80036e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ee:	2302      	movs	r3, #2
 80036f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f6:	2303      	movs	r3, #3
 80036f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036fa:	2305      	movs	r3, #5
 80036fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_IMU_CLK_GPIO_Port, &GPIO_InitStruct);
 80036fe:	f107 030c 	add.w	r3, r7, #12
 8003702:	4619      	mov	r1, r3
 8003704:	4821      	ldr	r0, [pc, #132]	@ (800378c <imu_hal_init_spi+0x114>)
 8003706:	f002 f833 	bl	8005770 <HAL_GPIO_Init>

  hspi3.Instance = SPI3;
 800370a:	4b21      	ldr	r3, [pc, #132]	@ (8003790 <imu_hal_init_spi+0x118>)
 800370c:	4a21      	ldr	r2, [pc, #132]	@ (8003794 <imu_hal_init_spi+0x11c>)
 800370e:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003710:	4b1f      	ldr	r3, [pc, #124]	@ (8003790 <imu_hal_init_spi+0x118>)
 8003712:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003716:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003718:	4b1d      	ldr	r3, [pc, #116]	@ (8003790 <imu_hal_init_spi+0x118>)
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800371e:	4b1c      	ldr	r3, [pc, #112]	@ (8003790 <imu_hal_init_spi+0x118>)
 8003720:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003724:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003726:	4b1a      	ldr	r3, [pc, #104]	@ (8003790 <imu_hal_init_spi+0x118>)
 8003728:	2202      	movs	r2, #2
 800372a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800372c:	4b18      	ldr	r3, [pc, #96]	@ (8003790 <imu_hal_init_spi+0x118>)
 800372e:	2201      	movs	r2, #1
 8003730:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003732:	4b17      	ldr	r3, [pc, #92]	@ (8003790 <imu_hal_init_spi+0x118>)
 8003734:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003738:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800373a:	4b15      	ldr	r3, [pc, #84]	@ (8003790 <imu_hal_init_spi+0x118>)
 800373c:	2220      	movs	r2, #32
 800373e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003740:	4b13      	ldr	r3, [pc, #76]	@ (8003790 <imu_hal_init_spi+0x118>)
 8003742:	2200      	movs	r2, #0
 8003744:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003746:	4b12      	ldr	r3, [pc, #72]	@ (8003790 <imu_hal_init_spi+0x118>)
 8003748:	2200      	movs	r2, #0
 800374a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800374c:	4b10      	ldr	r3, [pc, #64]	@ (8003790 <imu_hal_init_spi+0x118>)
 800374e:	2200      	movs	r2, #0
 8003750:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8003752:	4b0f      	ldr	r3, [pc, #60]	@ (8003790 <imu_hal_init_spi+0x118>)
 8003754:	2207      	movs	r2, #7
 8003756:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003758:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <imu_hal_init_spi+0x118>)
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800375e:	4b0c      	ldr	r3, [pc, #48]	@ (8003790 <imu_hal_init_spi+0x118>)
 8003760:	2200      	movs	r2, #0
 8003762:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003764:	480a      	ldr	r0, [pc, #40]	@ (8003790 <imu_hal_init_spi+0x118>)
 8003766:	f004 fd1b 	bl	80081a0 <HAL_SPI_Init>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <imu_hal_init_spi+0xfc>
  {
   Error_Handler();
 8003770:	f7ff fe88 	bl	8003484 <Error_Handler>
  }

  HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8003774:	2200      	movs	r2, #0
 8003776:	2105      	movs	r1, #5
 8003778:	2033      	movs	r0, #51	@ 0x33
 800377a:	f001 fbb7 	bl	8004eec <HAL_NVIC_SetPriority>
}
 800377e:	bf00      	nop
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40023800 	.word	0x40023800
 800378c:	40020800 	.word	0x40020800
 8003790:	20007648 	.word	0x20007648
 8003794:	40003c00 	.word	0x40003c00

08003798 <HAL_SPI_TxRxCpltCallback>:



void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI3) {
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a07      	ldr	r2, [pc, #28]	@ (80037c4 <HAL_SPI_TxRxCpltCallback+0x2c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d108      	bne.n	80037bc <HAL_SPI_TxRxCpltCallback+0x24>
    if (imu_hal_flags & IMU_HAL_OPENED) {
 80037aa:	4b07      	ldr	r3, [pc, #28]	@ (80037c8 <HAL_SPI_TxRxCpltCallback+0x30>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_SPI_TxRxCpltCallback+0x24>
      imu_spi_completed();
 80037b8:	f7ff f886 	bl	80028c8 <imu_spi_completed>
    }
  }

}
 80037bc:	bf00      	nop
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40003c00 	.word	0x40003c00
 80037c8:	200072e0 	.word	0x200072e0

080037cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80037d2:	4b11      	ldr	r3, [pc, #68]	@ (8003818 <HAL_MspInit+0x4c>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d6:	4a10      	ldr	r2, [pc, #64]	@ (8003818 <HAL_MspInit+0x4c>)
 80037d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80037de:	4b0e      	ldr	r3, [pc, #56]	@ (8003818 <HAL_MspInit+0x4c>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e6:	607b      	str	r3, [r7, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003818 <HAL_MspInit+0x4c>)
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003818 <HAL_MspInit+0x4c>)
 80037f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037f6:	4b08      	ldr	r3, [pc, #32]	@ (8003818 <HAL_MspInit+0x4c>)
 80037f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003802:	2200      	movs	r2, #0
 8003804:	210f      	movs	r1, #15
 8003806:	f06f 0001 	mvn.w	r0, #1
 800380a:	f001 fb6f 	bl	8004eec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800

0800381c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08e      	sub	sp, #56	@ 0x38
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800382c:	4b33      	ldr	r3, [pc, #204]	@ (80038fc <HAL_InitTick+0xe0>)
 800382e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003830:	4a32      	ldr	r2, [pc, #200]	@ (80038fc <HAL_InitTick+0xe0>)
 8003832:	f043 0310 	orr.w	r3, r3, #16
 8003836:	6413      	str	r3, [r2, #64]	@ 0x40
 8003838:	4b30      	ldr	r3, [pc, #192]	@ (80038fc <HAL_InitTick+0xe0>)
 800383a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003844:	f107 0210 	add.w	r2, r7, #16
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	4611      	mov	r1, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f004 f84c 	bl	80078ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385a:	2b00      	cmp	r3, #0
 800385c:	d103      	bne.n	8003866 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800385e:	f004 f81d 	bl	800789c <HAL_RCC_GetPCLK1Freq>
 8003862:	6378      	str	r0, [r7, #52]	@ 0x34
 8003864:	e004      	b.n	8003870 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003866:	f004 f819 	bl	800789c <HAL_RCC_GetPCLK1Freq>
 800386a:	4603      	mov	r3, r0
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003872:	4a23      	ldr	r2, [pc, #140]	@ (8003900 <HAL_InitTick+0xe4>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	0c9b      	lsrs	r3, r3, #18
 800387a:	3b01      	subs	r3, #1
 800387c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800387e:	4b21      	ldr	r3, [pc, #132]	@ (8003904 <HAL_InitTick+0xe8>)
 8003880:	4a21      	ldr	r2, [pc, #132]	@ (8003908 <HAL_InitTick+0xec>)
 8003882:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003884:	4b1f      	ldr	r3, [pc, #124]	@ (8003904 <HAL_InitTick+0xe8>)
 8003886:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800388a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800388c:	4a1d      	ldr	r2, [pc, #116]	@ (8003904 <HAL_InitTick+0xe8>)
 800388e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003890:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003892:	4b1c      	ldr	r3, [pc, #112]	@ (8003904 <HAL_InitTick+0xe8>)
 8003894:	2200      	movs	r2, #0
 8003896:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003898:	4b1a      	ldr	r3, [pc, #104]	@ (8003904 <HAL_InitTick+0xe8>)
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800389e:	4b19      	ldr	r3, [pc, #100]	@ (8003904 <HAL_InitTick+0xe8>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80038a4:	4817      	ldr	r0, [pc, #92]	@ (8003904 <HAL_InitTick+0xe8>)
 80038a6:	f005 fc15 	bl	80090d4 <HAL_TIM_Base_Init>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80038b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d11b      	bne.n	80038f0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80038b8:	4812      	ldr	r0, [pc, #72]	@ (8003904 <HAL_InitTick+0xe8>)
 80038ba:	f005 fcd3 	bl	8009264 <HAL_TIM_Base_Start_IT>
 80038be:	4603      	mov	r3, r0
 80038c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80038c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d111      	bne.n	80038f0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038cc:	2036      	movs	r0, #54	@ 0x36
 80038ce:	f001 fb29 	bl	8004f24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b0f      	cmp	r3, #15
 80038d6:	d808      	bhi.n	80038ea <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80038d8:	2200      	movs	r2, #0
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	2036      	movs	r0, #54	@ 0x36
 80038de:	f001 fb05 	bl	8004eec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038e2:	4a0a      	ldr	r2, [pc, #40]	@ (800390c <HAL_InitTick+0xf0>)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	e002      	b.n	80038f0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80038f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3738      	adds	r7, #56	@ 0x38
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40023800 	.word	0x40023800
 8003900:	431bde83 	.word	0x431bde83
 8003904:	200076ac 	.word	0x200076ac
 8003908:	40001000 	.word	0x40001000
 800390c:	200000e4 	.word	0x200000e4

08003910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003914:	bf00      	nop
 8003916:	e7fd      	b.n	8003914 <NMI_Handler+0x4>

08003918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  uint32_t HFSR = SCB->HFSR;
 800391e:	4b10      	ldr	r3, [pc, #64]	@ (8003960 <HardFault_Handler+0x48>)
 8003920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003922:	607b      	str	r3, [r7, #4]

  if (HFSR & SCB_HFSR_VECTTBL_Msk) {
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <HardFault_Handler+0x26>
    hard_fault_flags |= VECTOR_TABLE_READ_FAULT;
 800392e:	4b0d      	ldr	r3, [pc, #52]	@ (8003964 <HardFault_Handler+0x4c>)
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	b29b      	uxth	r3, r3
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	4b0a      	ldr	r3, [pc, #40]	@ (8003964 <HardFault_Handler+0x4c>)
 800393c:	801a      	strh	r2, [r3, #0]
  }
  if (HFSR & SCB_HFSR_FORCED_Msk) {
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HardFault_Handler+0x42>
    hard_fault_flags |= FORCED_HARD_FAULT;
 8003948:	4b06      	ldr	r3, [pc, #24]	@ (8003964 <HardFault_Handler+0x4c>)
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	b29b      	uxth	r3, r3
 800394e:	f043 0302 	orr.w	r3, r3, #2
 8003952:	b29a      	uxth	r2, r3
 8003954:	4b03      	ldr	r3, [pc, #12]	@ (8003964 <HardFault_Handler+0x4c>)
 8003956:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003958:	bf00      	nop
 800395a:	bf00      	nop
 800395c:	e7fd      	b.n	800395a <HardFault_Handler+0x42>
 800395e:	bf00      	nop
 8003960:	e000ed00 	.word	0xe000ed00
 8003964:	200076f8 	.word	0x200076f8

08003968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  uint8_t MMFSR = (uint8_t)(SCB->CFSR & 0xFF);
 800396e:	4b16      	ldr	r3, [pc, #88]	@ (80039c8 <MemManage_Handler+0x60>)
 8003970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003972:	71fb      	strb	r3, [r7, #7]
  uint32_t CFSR = SCB->CFSR;
 8003974:	4b14      	ldr	r3, [pc, #80]	@ (80039c8 <MemManage_Handler+0x60>)
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	603b      	str	r3, [r7, #0]

  if (MMFSR & SCB_CFSR_IACCVIOL_Msk) {
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <MemManage_Handler+0x2c>
    hard_fault_flags |= INSTRUCTION_ACCESS_VIOLATION;
 8003984:	4b11      	ldr	r3, [pc, #68]	@ (80039cc <MemManage_Handler+0x64>)
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	f043 0304 	orr.w	r3, r3, #4
 800398e:	b29a      	uxth	r2, r3
 8003990:	4b0e      	ldr	r3, [pc, #56]	@ (80039cc <MemManage_Handler+0x64>)
 8003992:	801a      	strh	r2, [r3, #0]
  }
  if (MMFSR & SCB_CFSR_DACCVIOL_Msk) {
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <MemManage_Handler+0x46>
    hard_fault_flags |= DATA_ACCESS_VIOLATION;
 800399e:	4b0b      	ldr	r3, [pc, #44]	@ (80039cc <MemManage_Handler+0x64>)
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	f043 0308 	orr.w	r3, r3, #8
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	4b08      	ldr	r3, [pc, #32]	@ (80039cc <MemManage_Handler+0x64>)
 80039ac:	801a      	strh	r2, [r3, #0]
  }
  if (CFSR & SCB_CFSR_MMARVALID_Msk) {
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d004      	beq.n	80039c2 <MemManage_Handler+0x5a>
    mem_access_error_addr = SCB->MMFAR;
 80039b8:	4b03      	ldr	r3, [pc, #12]	@ (80039c8 <MemManage_Handler+0x60>)
 80039ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039bc:	4a04      	ldr	r2, [pc, #16]	@ (80039d0 <MemManage_Handler+0x68>)
 80039be:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	e7fd      	b.n	80039c2 <MemManage_Handler+0x5a>
 80039c6:	bf00      	nop
 80039c8:	e000ed00 	.word	0xe000ed00
 80039cc:	200076f8 	.word	0x200076f8
 80039d0:	200000dc 	.word	0x200000dc

080039d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  uint32_t CFSR = SCB->CFSR;
 80039da:	4b1b      	ldr	r3, [pc, #108]	@ (8003a48 <BusFault_Handler+0x74>)
 80039dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039de:	607b      	str	r3, [r7, #4]

  if (CFSR & SCB_CFSR_IBUSERR_Msk) {
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d007      	beq.n	80039fa <BusFault_Handler+0x26>
    hard_fault_flags |= INSTRUCTION_BUS_ERROR;
 80039ea:	4b18      	ldr	r3, [pc, #96]	@ (8003a4c <BusFault_Handler+0x78>)
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f043 0310 	orr.w	r3, r3, #16
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	4b15      	ldr	r3, [pc, #84]	@ (8003a4c <BusFault_Handler+0x78>)
 80039f8:	801a      	strh	r2, [r3, #0]
  }
  if (CFSR & SCB_CFSR_PRECISERR_Msk) {
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d007      	beq.n	8003a14 <BusFault_Handler+0x40>
    hard_fault_flags |= PRECISE_DATA_BUS_ERROR;
 8003a04:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <BusFault_Handler+0x78>)
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	f043 0320 	orr.w	r3, r3, #32
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	4b0e      	ldr	r3, [pc, #56]	@ (8003a4c <BusFault_Handler+0x78>)
 8003a12:	801a      	strh	r2, [r3, #0]
  }
  if (CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d007      	beq.n	8003a2e <BusFault_Handler+0x5a>
    hard_fault_flags |= IMPRECISE_DATA_BUS_ERROR;
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a4c <BusFault_Handler+0x78>)
 8003a20:	881b      	ldrh	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	4b08      	ldr	r3, [pc, #32]	@ (8003a4c <BusFault_Handler+0x78>)
 8003a2c:	801a      	strh	r2, [r3, #0]
  }
  if (CFSR & SCB_CFSR_BFARVALID_Msk) {
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d004      	beq.n	8003a42 <BusFault_Handler+0x6e>
    bus_error_addr = SCB->BFAR;
 8003a38:	4b03      	ldr	r3, [pc, #12]	@ (8003a48 <BusFault_Handler+0x74>)
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3c:	4a04      	ldr	r2, [pc, #16]	@ (8003a50 <BusFault_Handler+0x7c>)
 8003a3e:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a40:	bf00      	nop
 8003a42:	bf00      	nop
 8003a44:	e7fd      	b.n	8003a42 <BusFault_Handler+0x6e>
 8003a46:	bf00      	nop
 8003a48:	e000ed00 	.word	0xe000ed00
 8003a4c:	200076f8 	.word	0x200076f8
 8003a50:	200000d8 	.word	0x200000d8

08003a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  uint32_t CFSR = SCB->CFSR;
 8003a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003b04 <UsageFault_Handler+0xb0>)
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a5e:	607b      	str	r3, [r7, #4]

  if (CFSR & SCB_CFSR_UNDEFINSTR_Msk) {
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d007      	beq.n	8003a7a <UsageFault_Handler+0x26>
    hard_fault_flags |= UNDEFINED_INSTRUCTION_ERROR;
 8003a6a:	4b27      	ldr	r3, [pc, #156]	@ (8003b08 <UsageFault_Handler+0xb4>)
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	4b24      	ldr	r3, [pc, #144]	@ (8003b08 <UsageFault_Handler+0xb4>)
 8003a78:	801a      	strh	r2, [r3, #0]
  }
  if (CFSR & SCB_CFSR_INVSTATE_Msk) {
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d007      	beq.n	8003a94 <UsageFault_Handler+0x40>
    hard_fault_flags |= INVALID_STATE_ERROR;
 8003a84:	4b20      	ldr	r3, [pc, #128]	@ (8003b08 <UsageFault_Handler+0xb4>)
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	4b1d      	ldr	r3, [pc, #116]	@ (8003b08 <UsageFault_Handler+0xb4>)
 8003a92:	801a      	strh	r2, [r3, #0]
  }
  if (CFSR & SCB_CFSR_INVPC_Msk) {
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <UsageFault_Handler+0x5a>
    hard_fault_flags |= INVALID_PC_LOAD;
 8003a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003b08 <UsageFault_Handler+0xb4>)
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	4b17      	ldr	r3, [pc, #92]	@ (8003b08 <UsageFault_Handler+0xb4>)
 8003aac:	801a      	strh	r2, [r3, #0]
  }
  if (CFSR & SCB_CFSR_NOCP_Msk) {
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <UsageFault_Handler+0x74>
    hard_fault_flags |= NO_PROCESSOR;
 8003ab8:	4b13      	ldr	r3, [pc, #76]	@ (8003b08 <UsageFault_Handler+0xb4>)
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	4b10      	ldr	r3, [pc, #64]	@ (8003b08 <UsageFault_Handler+0xb4>)
 8003ac6:	801a      	strh	r2, [r3, #0]
  }
  if (CFSR & SCB_CFSR_UNALIGNED_Msk) {
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d007      	beq.n	8003ae2 <UsageFault_Handler+0x8e>
    hard_fault_flags |= UNALIGNED_ACCESS;
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8003b08 <UsageFault_Handler+0xb4>)
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	4b0a      	ldr	r3, [pc, #40]	@ (8003b08 <UsageFault_Handler+0xb4>)
 8003ae0:	801a      	strh	r2, [r3, #0]
  }
  if (CFSR & SCB_CFSR_DIVBYZERO_Msk) {
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <UsageFault_Handler+0xaa>
    hard_fault_flags |= DIVISION_BY_ZERO;
 8003aec:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <UsageFault_Handler+0xb4>)
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	4b03      	ldr	r3, [pc, #12]	@ (8003b08 <UsageFault_Handler+0xb4>)
 8003afa:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	e7fd      	b.n	8003afe <UsageFault_Handler+0xaa>
 8003b02:	bf00      	nop
 8003b04:	e000ed00 	.word	0xe000ed00
 8003b08:	200076f8 	.word	0x200076f8

08003b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI_IMU_INT_Pin);
 8003b1e:	2001      	movs	r0, #1
 8003b20:	f002 f912 	bl	8005d48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003b24:	bf00      	nop
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  // Idel line interrupt
  STServo_ReadFromISR(&hservo);
 8003b2c:	4803      	ldr	r0, [pc, #12]	@ (8003b3c <USART1_IRQHandler+0x14>)
 8003b2e:	f7fc ffaf 	bl	8000a90 <STServo_ReadFromISR>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b32:	4803      	ldr	r0, [pc, #12]	@ (8003b40 <USART1_IRQHandler+0x18>)
 8003b34:	f006 f8e4 	bl	8009d00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b38:	bf00      	nop
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	200002e0 	.word	0x200002e0
 8003b40:	2000774c 	.word	0x2000774c

08003b44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003b48:	4802      	ldr	r0, [pc, #8]	@ (8003b54 <USART3_IRQHandler+0x10>)
 8003b4a:	f006 f8d9 	bl	8009d00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	200077d4 	.word	0x200077d4

08003b58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8003b5c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003b60:	f002 f8f2 	bl	8005d48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b64:	bf00      	nop
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8003b6c:	4802      	ldr	r0, [pc, #8]	@ (8003b78 <SPI3_IRQHandler+0x10>)
 8003b6e:	f004 feb3 	bl	80088d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20007648 	.word	0x20007648

08003b7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b80:	4802      	ldr	r0, [pc, #8]	@ (8003b8c <TIM6_DAC_IRQHandler+0x10>)
 8003b82:	f005 fbe7 	bl	8009354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	200076ac 	.word	0x200076ac

08003b90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b94:	4802      	ldr	r0, [pc, #8]	@ (8003ba0 <DMA2_Stream0_IRQHandler+0x10>)
 8003b96:	f001 fb81 	bl	800529c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	200008d0 	.word	0x200008d0

08003ba4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003ba8:	4802      	ldr	r0, [pc, #8]	@ (8003bb4 <DMA2_Stream2_IRQHandler+0x10>)
 8003baa:	f001 fb77 	bl	800529c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	200078e4 	.word	0x200078e4

08003bb8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003bbc:	4802      	ldr	r0, [pc, #8]	@ (8003bc8 <USART6_IRQHandler+0x10>)
 8003bbe:	f006 f89f 	bl	8009d00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	2000785c 	.word	0x2000785c

08003bcc <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003bd0:	4802      	ldr	r0, [pc, #8]	@ (8003bdc <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8003bd2:	f002 f8e1 	bl	8005d98 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8003bd6:	bf00      	nop
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	2000d3f8 	.word	0x2000d3f8

08003be0 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003be4:	4802      	ldr	r0, [pc, #8]	@ (8003bf0 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8003be6:	f002 f8d7 	bl	8005d98 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	2000d3f8 	.word	0x2000d3f8

08003bf4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003bf8:	4802      	ldr	r0, [pc, #8]	@ (8003c04 <OTG_HS_IRQHandler+0x10>)
 8003bfa:	f002 f8cd 	bl	8005d98 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	2000d3f8 	.word	0x2000d3f8

08003c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return 1;
 8003c0c:	2301      	movs	r3, #1
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <_kill>:

int _kill(int pid, int sig)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c22:	f011 f851 	bl	8014cc8 <__errno>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2216      	movs	r2, #22
 8003c2a:	601a      	str	r2, [r3, #0]
  return -1;
 8003c2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <_exit>:

void _exit (int status)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c40:	f04f 31ff 	mov.w	r1, #4294967295
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff ffe7 	bl	8003c18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c4a:	bf00      	nop
 8003c4c:	e7fd      	b.n	8003c4a <_exit+0x12>

08003c4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	e00a      	b.n	8003c76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c60:	f3af 8000 	nop.w
 8003c64:	4601      	mov	r1, r0
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	60ba      	str	r2, [r7, #8]
 8003c6c:	b2ca      	uxtb	r2, r1
 8003c6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	3301      	adds	r3, #1
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	dbf0      	blt.n	8003c60 <_read+0x12>
  }

  return len;
 8003c7e:	687b      	ldr	r3, [r7, #4]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003cb0:	605a      	str	r2, [r3, #4]
  return 0;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <_isatty>:

int _isatty(int file)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cc8:	2301      	movs	r3, #1
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b085      	sub	sp, #20
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	60f8      	str	r0, [r7, #12]
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cf8:	4a14      	ldr	r2, [pc, #80]	@ (8003d4c <_sbrk+0x5c>)
 8003cfa:	4b15      	ldr	r3, [pc, #84]	@ (8003d50 <_sbrk+0x60>)
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d04:	4b13      	ldr	r3, [pc, #76]	@ (8003d54 <_sbrk+0x64>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d102      	bne.n	8003d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d0c:	4b11      	ldr	r3, [pc, #68]	@ (8003d54 <_sbrk+0x64>)
 8003d0e:	4a12      	ldr	r2, [pc, #72]	@ (8003d58 <_sbrk+0x68>)
 8003d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d12:	4b10      	ldr	r3, [pc, #64]	@ (8003d54 <_sbrk+0x64>)
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4413      	add	r3, r2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d207      	bcs.n	8003d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d20:	f010 ffd2 	bl	8014cc8 <__errno>
 8003d24:	4603      	mov	r3, r0
 8003d26:	220c      	movs	r2, #12
 8003d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2e:	e009      	b.n	8003d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d30:	4b08      	ldr	r3, [pc, #32]	@ (8003d54 <_sbrk+0x64>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d36:	4b07      	ldr	r3, [pc, #28]	@ (8003d54 <_sbrk+0x64>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	4a05      	ldr	r2, [pc, #20]	@ (8003d54 <_sbrk+0x64>)
 8003d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d42:	68fb      	ldr	r3, [r7, #12]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20080000 	.word	0x20080000
 8003d50:	00000400 	.word	0x00000400
 8003d54:	200076fc 	.word	0x200076fc
 8003d58:	2000da28 	.word	0x2000da28

08003d5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d60:	4b06      	ldr	r3, [pc, #24]	@ (8003d7c <SystemInit+0x20>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d66:	4a05      	ldr	r2, [pc, #20]	@ (8003d7c <SystemInit+0x20>)
 8003d68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM2_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d90:	d10b      	bne.n	8003daa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d92:	4b09      	ldr	r3, [pc, #36]	@ (8003db8 <HAL_TIM_Base_MspInit+0x38>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d96:	4a08      	ldr	r2, [pc, #32]	@ (8003db8 <HAL_TIM_Base_MspInit+0x38>)
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d9e:	4b06      	ldr	r3, [pc, #24]	@ (8003db8 <HAL_TIM_Base_MspInit+0x38>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003daa:	bf00      	nop
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800

08003dbc <imu_hal_init_timer>:
  }
}

/* USER CODE BEGIN 1 */
void imu_hal_init_timer(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8003e80 <imu_hal_init_timer+0xc4>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	4a2e      	ldr	r2, [pc, #184]	@ (8003e80 <imu_hal_init_timer+0xc4>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dce:	4b2c      	ldr	r3, [pc, #176]	@ (8003e80 <imu_hal_init_timer+0xc4>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dda:	f107 0310 	add.w	r3, r7, #16
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	605a      	str	r2, [r3, #4]
 8003de4:	609a      	str	r2, [r3, #8]
 8003de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	605a      	str	r2, [r3, #4]
 8003df0:	609a      	str	r2, [r3, #8]
  /*
   * For microsecond timing we need to generate 1Mhz square wave,
   * Timer 2 uses APB1 clock, PCLK = 54Mhz, APB1 timer clock frequency = 108Mhz
   * Precaler = (APB1 timer clock frequency / 1Mhz) - 1 = 107
   */
  htim2.Instance = TIM2;
 8003df2:	4b24      	ldr	r3, [pc, #144]	@ (8003e84 <imu_hal_init_timer+0xc8>)
 8003df4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003df8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (uint32_t)(( (HAL_RCC_GetPCLK1Freq() * 2) / 1000000) - 1);
 8003dfa:	f003 fd4f 	bl	800789c <HAL_RCC_GetPCLK1Freq>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	4a21      	ldr	r2, [pc, #132]	@ (8003e88 <imu_hal_init_timer+0xcc>)
 8003e04:	fba2 2303 	umull	r2, r3, r2, r3
 8003e08:	0c9b      	lsrs	r3, r3, #18
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e84 <imu_hal_init_timer+0xc8>)
 8003e0e:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e10:	4b1c      	ldr	r3, [pc, #112]	@ (8003e84 <imu_hal_init_timer+0xc8>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8003e16:	4b1b      	ldr	r3, [pc, #108]	@ (8003e84 <imu_hal_init_timer+0xc8>)
 8003e18:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e1e:	4b19      	ldr	r3, [pc, #100]	@ (8003e84 <imu_hal_init_timer+0xc8>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e24:	4b17      	ldr	r3, [pc, #92]	@ (8003e84 <imu_hal_init_timer+0xc8>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e2a:	4816      	ldr	r0, [pc, #88]	@ (8003e84 <imu_hal_init_timer+0xc8>)
 8003e2c:	f005 f952 	bl	80090d4 <HAL_TIM_Base_Init>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <imu_hal_init_timer+0x7e>
  {
    Error_Handler();
 8003e36:	f7ff fb25 	bl	8003484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e40:	f107 0310 	add.w	r3, r7, #16
 8003e44:	4619      	mov	r1, r3
 8003e46:	480f      	ldr	r0, [pc, #60]	@ (8003e84 <imu_hal_init_timer+0xc8>)
 8003e48:	f005 fb8c 	bl	8009564 <HAL_TIM_ConfigClockSource>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <imu_hal_init_timer+0x9a>
  {
    Error_Handler();
 8003e52:	f7ff fb17 	bl	8003484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e56:	2300      	movs	r3, #0
 8003e58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e5e:	1d3b      	adds	r3, r7, #4
 8003e60:	4619      	mov	r1, r3
 8003e62:	4808      	ldr	r0, [pc, #32]	@ (8003e84 <imu_hal_init_timer+0xc8>)
 8003e64:	f005 fdb0 	bl	80099c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <imu_hal_init_timer+0xb6>
  {
    Error_Handler();
 8003e6e:	f7ff fb09 	bl	8003484 <Error_Handler>
  }

  HAL_TIM_Base_Start(&htim2);
 8003e72:	4804      	ldr	r0, [pc, #16]	@ (8003e84 <imu_hal_init_timer+0xc8>)
 8003e74:	f005 f986 	bl	8009184 <HAL_TIM_Base_Start>
}
 8003e78:	bf00      	nop
 8003e7a:	3720      	adds	r7, #32
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40023800 	.word	0x40023800
 8003e84:	20007700 	.word	0x20007700
 8003e88:	431bde83 	.word	0x431bde83

08003e8c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e90:	4b13      	ldr	r3, [pc, #76]	@ (8003ee0 <MX_USART1_UART_Init+0x54>)
 8003e92:	4a14      	ldr	r2, [pc, #80]	@ (8003ee4 <MX_USART1_UART_Init+0x58>)
 8003e94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8003e96:	4b12      	ldr	r3, [pc, #72]	@ (8003ee0 <MX_USART1_UART_Init+0x54>)
 8003e98:	4a13      	ldr	r2, [pc, #76]	@ (8003ee8 <MX_USART1_UART_Init+0x5c>)
 8003e9a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e9c:	4b10      	ldr	r3, [pc, #64]	@ (8003ee0 <MX_USART1_UART_Init+0x54>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee0 <MX_USART1_UART_Init+0x54>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <MX_USART1_UART_Init+0x54>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003eae:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee0 <MX_USART1_UART_Init+0x54>)
 8003eb0:	220c      	movs	r2, #12
 8003eb2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee0 <MX_USART1_UART_Init+0x54>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003eba:	4b09      	ldr	r3, [pc, #36]	@ (8003ee0 <MX_USART1_UART_Init+0x54>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ec0:	4b07      	ldr	r3, [pc, #28]	@ (8003ee0 <MX_USART1_UART_Init+0x54>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ec6:	4b06      	ldr	r3, [pc, #24]	@ (8003ee0 <MX_USART1_UART_Init+0x54>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ecc:	4804      	ldr	r0, [pc, #16]	@ (8003ee0 <MX_USART1_UART_Init+0x54>)
 8003ece:	f005 fe27 	bl	8009b20 <HAL_UART_Init>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8003ed8:	f7ff fad4 	bl	8003484 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003edc:	bf00      	nop
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	2000774c 	.word	0x2000774c
 8003ee4:	40011000 	.word	0x40011000
 8003ee8:	000f4240 	.word	0x000f4240

08003eec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003ef0:	4b14      	ldr	r3, [pc, #80]	@ (8003f44 <MX_USART3_UART_Init+0x58>)
 8003ef2:	4a15      	ldr	r2, [pc, #84]	@ (8003f48 <MX_USART3_UART_Init+0x5c>)
 8003ef4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003ef6:	4b13      	ldr	r3, [pc, #76]	@ (8003f44 <MX_USART3_UART_Init+0x58>)
 8003ef8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003efc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003efe:	4b11      	ldr	r3, [pc, #68]	@ (8003f44 <MX_USART3_UART_Init+0x58>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003f04:	4b0f      	ldr	r3, [pc, #60]	@ (8003f44 <MX_USART3_UART_Init+0x58>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003f44 <MX_USART3_UART_Init+0x58>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003f10:	4b0c      	ldr	r3, [pc, #48]	@ (8003f44 <MX_USART3_UART_Init+0x58>)
 8003f12:	220c      	movs	r2, #12
 8003f14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f16:	4b0b      	ldr	r3, [pc, #44]	@ (8003f44 <MX_USART3_UART_Init+0x58>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f1c:	4b09      	ldr	r3, [pc, #36]	@ (8003f44 <MX_USART3_UART_Init+0x58>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f22:	4b08      	ldr	r3, [pc, #32]	@ (8003f44 <MX_USART3_UART_Init+0x58>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f28:	4b06      	ldr	r3, [pc, #24]	@ (8003f44 <MX_USART3_UART_Init+0x58>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003f2e:	4805      	ldr	r0, [pc, #20]	@ (8003f44 <MX_USART3_UART_Init+0x58>)
 8003f30:	f005 fdf6 	bl	8009b20 <HAL_UART_Init>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003f3a:	f7ff faa3 	bl	8003484 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	200077d4 	.word	0x200077d4
 8003f48:	40004800 	.word	0x40004800

08003f4c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003f50:	4b14      	ldr	r3, [pc, #80]	@ (8003fa4 <MX_USART6_UART_Init+0x58>)
 8003f52:	4a15      	ldr	r2, [pc, #84]	@ (8003fa8 <MX_USART6_UART_Init+0x5c>)
 8003f54:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003f56:	4b13      	ldr	r3, [pc, #76]	@ (8003fa4 <MX_USART6_UART_Init+0x58>)
 8003f58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003f5c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003f5e:	4b11      	ldr	r3, [pc, #68]	@ (8003fa4 <MX_USART6_UART_Init+0x58>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003f64:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa4 <MX_USART6_UART_Init+0x58>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa4 <MX_USART6_UART_Init+0x58>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003f70:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa4 <MX_USART6_UART_Init+0x58>)
 8003f72:	220c      	movs	r2, #12
 8003f74:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f76:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa4 <MX_USART6_UART_Init+0x58>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f7c:	4b09      	ldr	r3, [pc, #36]	@ (8003fa4 <MX_USART6_UART_Init+0x58>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f82:	4b08      	ldr	r3, [pc, #32]	@ (8003fa4 <MX_USART6_UART_Init+0x58>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f88:	4b06      	ldr	r3, [pc, #24]	@ (8003fa4 <MX_USART6_UART_Init+0x58>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003f8e:	4805      	ldr	r0, [pc, #20]	@ (8003fa4 <MX_USART6_UART_Init+0x58>)
 8003f90:	f005 fdc6 	bl	8009b20 <HAL_UART_Init>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8003f9a:	f7ff fa73 	bl	8003484 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	2000785c 	.word	0x2000785c
 8003fa8:	40011400 	.word	0x40011400

08003fac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b0b2      	sub	sp, #200	@ 0xc8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	609a      	str	r2, [r3, #8]
 8003fc0:	60da      	str	r2, [r3, #12]
 8003fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fc8:	2290      	movs	r2, #144	@ 0x90
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f010 fdbb 	bl	8014b48 <memset>
  if(uartHandle->Instance==USART1)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a88      	ldr	r2, [pc, #544]	@ (80041f8 <HAL_UART_MspInit+0x24c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d174      	bne.n	80040c6 <HAL_UART_MspInit+0x11a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003fdc:	2340      	movs	r3, #64	@ 0x40
 8003fde:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fe4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f003 fcb1 	bl	8007950 <HAL_RCCEx_PeriphCLKConfig>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003ff4:	f7ff fa46 	bl	8003484 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ff8:	4b80      	ldr	r3, [pc, #512]	@ (80041fc <HAL_UART_MspInit+0x250>)
 8003ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffc:	4a7f      	ldr	r2, [pc, #508]	@ (80041fc <HAL_UART_MspInit+0x250>)
 8003ffe:	f043 0310 	orr.w	r3, r3, #16
 8004002:	6453      	str	r3, [r2, #68]	@ 0x44
 8004004:	4b7d      	ldr	r3, [pc, #500]	@ (80041fc <HAL_UART_MspInit+0x250>)
 8004006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	623b      	str	r3, [r7, #32]
 800400e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004010:	4b7a      	ldr	r3, [pc, #488]	@ (80041fc <HAL_UART_MspInit+0x250>)
 8004012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004014:	4a79      	ldr	r2, [pc, #484]	@ (80041fc <HAL_UART_MspInit+0x250>)
 8004016:	f043 0301 	orr.w	r3, r3, #1
 800401a:	6313      	str	r3, [r2, #48]	@ 0x30
 800401c:	4b77      	ldr	r3, [pc, #476]	@ (80041fc <HAL_UART_MspInit+0x250>)
 800401e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	61fb      	str	r3, [r7, #28]
 8004026:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = MOTOR_TX_Pin|MOTOR_RX_Pin;
 8004028:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800402c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004030:	2302      	movs	r3, #2
 8004032:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004036:	2300      	movs	r3, #0
 8004038:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800403c:	2303      	movs	r3, #3
 800403e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004042:	2307      	movs	r3, #7
 8004044:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004048:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800404c:	4619      	mov	r1, r3
 800404e:	486c      	ldr	r0, [pc, #432]	@ (8004200 <HAL_UART_MspInit+0x254>)
 8004050:	f001 fb8e 	bl	8005770 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004054:	4b6b      	ldr	r3, [pc, #428]	@ (8004204 <HAL_UART_MspInit+0x258>)
 8004056:	4a6c      	ldr	r2, [pc, #432]	@ (8004208 <HAL_UART_MspInit+0x25c>)
 8004058:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800405a:	4b6a      	ldr	r3, [pc, #424]	@ (8004204 <HAL_UART_MspInit+0x258>)
 800405c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004060:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004062:	4b68      	ldr	r3, [pc, #416]	@ (8004204 <HAL_UART_MspInit+0x258>)
 8004064:	2200      	movs	r2, #0
 8004066:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004068:	4b66      	ldr	r3, [pc, #408]	@ (8004204 <HAL_UART_MspInit+0x258>)
 800406a:	2200      	movs	r2, #0
 800406c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800406e:	4b65      	ldr	r3, [pc, #404]	@ (8004204 <HAL_UART_MspInit+0x258>)
 8004070:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004074:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004076:	4b63      	ldr	r3, [pc, #396]	@ (8004204 <HAL_UART_MspInit+0x258>)
 8004078:	2200      	movs	r2, #0
 800407a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800407c:	4b61      	ldr	r3, [pc, #388]	@ (8004204 <HAL_UART_MspInit+0x258>)
 800407e:	2200      	movs	r2, #0
 8004080:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8004082:	4b60      	ldr	r3, [pc, #384]	@ (8004204 <HAL_UART_MspInit+0x258>)
 8004084:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004088:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800408a:	4b5e      	ldr	r3, [pc, #376]	@ (8004204 <HAL_UART_MspInit+0x258>)
 800408c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004090:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004092:	4b5c      	ldr	r3, [pc, #368]	@ (8004204 <HAL_UART_MspInit+0x258>)
 8004094:	2200      	movs	r2, #0
 8004096:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004098:	485a      	ldr	r0, [pc, #360]	@ (8004204 <HAL_UART_MspInit+0x258>)
 800409a:	f000 ff5f 	bl	8004f5c <HAL_DMA_Init>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 80040a4:	f7ff f9ee 	bl	8003484 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a56      	ldr	r2, [pc, #344]	@ (8004204 <HAL_UART_MspInit+0x258>)
 80040ac:	675a      	str	r2, [r3, #116]	@ 0x74
 80040ae:	4a55      	ldr	r2, [pc, #340]	@ (8004204 <HAL_UART_MspInit+0x258>)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80040b4:	2200      	movs	r2, #0
 80040b6:	2106      	movs	r1, #6
 80040b8:	2025      	movs	r0, #37	@ 0x25
 80040ba:	f000 ff17 	bl	8004eec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80040be:	2025      	movs	r0, #37	@ 0x25
 80040c0:	f000 ff30 	bl	8004f24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80040c4:	e093      	b.n	80041ee <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART3)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a50      	ldr	r2, [pc, #320]	@ (800420c <HAL_UART_MspInit+0x260>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d145      	bne.n	800415c <HAL_UART_MspInit+0x1b0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80040d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040d4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80040d6:	2300      	movs	r3, #0
 80040d8:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040de:	4618      	mov	r0, r3
 80040e0:	f003 fc36 	bl	8007950 <HAL_RCCEx_PeriphCLKConfig>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <HAL_UART_MspInit+0x142>
      Error_Handler();
 80040ea:	f7ff f9cb 	bl	8003484 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80040ee:	4b43      	ldr	r3, [pc, #268]	@ (80041fc <HAL_UART_MspInit+0x250>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f2:	4a42      	ldr	r2, [pc, #264]	@ (80041fc <HAL_UART_MspInit+0x250>)
 80040f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80040fa:	4b40      	ldr	r3, [pc, #256]	@ (80041fc <HAL_UART_MspInit+0x250>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004106:	4b3d      	ldr	r3, [pc, #244]	@ (80041fc <HAL_UART_MspInit+0x250>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410a:	4a3c      	ldr	r2, [pc, #240]	@ (80041fc <HAL_UART_MspInit+0x250>)
 800410c:	f043 0308 	orr.w	r3, r3, #8
 8004110:	6313      	str	r3, [r2, #48]	@ 0x30
 8004112:	4b3a      	ldr	r3, [pc, #232]	@ (80041fc <HAL_UART_MspInit+0x250>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	617b      	str	r3, [r7, #20]
 800411c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800411e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004122:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004126:	2302      	movs	r3, #2
 8004128:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412c:	2300      	movs	r3, #0
 800412e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004132:	2303      	movs	r3, #3
 8004134:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004138:	2307      	movs	r3, #7
 800413a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800413e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8004142:	4619      	mov	r1, r3
 8004144:	4832      	ldr	r0, [pc, #200]	@ (8004210 <HAL_UART_MspInit+0x264>)
 8004146:	f001 fb13 	bl	8005770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 800414a:	2200      	movs	r2, #0
 800414c:	2108      	movs	r1, #8
 800414e:	2027      	movs	r0, #39	@ 0x27
 8004150:	f000 fecc 	bl	8004eec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004154:	2027      	movs	r0, #39	@ 0x27
 8004156:	f000 fee5 	bl	8004f24 <HAL_NVIC_EnableIRQ>
}
 800415a:	e048      	b.n	80041ee <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART6)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a2c      	ldr	r2, [pc, #176]	@ (8004214 <HAL_UART_MspInit+0x268>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d143      	bne.n	80041ee <HAL_UART_MspInit+0x242>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004166:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800416a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800416c:	2300      	movs	r3, #0
 800416e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004170:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004174:	4618      	mov	r0, r3
 8004176:	f003 fbeb 	bl	8007950 <HAL_RCCEx_PeriphCLKConfig>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <HAL_UART_MspInit+0x1d8>
      Error_Handler();
 8004180:	f7ff f980 	bl	8003484 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004184:	4b1d      	ldr	r3, [pc, #116]	@ (80041fc <HAL_UART_MspInit+0x250>)
 8004186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004188:	4a1c      	ldr	r2, [pc, #112]	@ (80041fc <HAL_UART_MspInit+0x250>)
 800418a:	f043 0320 	orr.w	r3, r3, #32
 800418e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004190:	4b1a      	ldr	r3, [pc, #104]	@ (80041fc <HAL_UART_MspInit+0x250>)
 8004192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800419c:	4b17      	ldr	r3, [pc, #92]	@ (80041fc <HAL_UART_MspInit+0x250>)
 800419e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a0:	4a16      	ldr	r2, [pc, #88]	@ (80041fc <HAL_UART_MspInit+0x250>)
 80041a2:	f043 0304 	orr.w	r3, r3, #4
 80041a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80041a8:	4b14      	ldr	r3, [pc, #80]	@ (80041fc <HAL_UART_MspInit+0x250>)
 80041aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WIFI_RX_Pin|WIFI_TX_Pin;
 80041b4:	23c0      	movs	r3, #192	@ 0xc0
 80041b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ba:	2302      	movs	r3, #2
 80041bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c0:	2300      	movs	r3, #0
 80041c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041c6:	2303      	movs	r3, #3
 80041c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80041cc:	2308      	movs	r3, #8
 80041ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041d2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80041d6:	4619      	mov	r1, r3
 80041d8:	480f      	ldr	r0, [pc, #60]	@ (8004218 <HAL_UART_MspInit+0x26c>)
 80041da:	f001 fac9 	bl	8005770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80041de:	2200      	movs	r2, #0
 80041e0:	2105      	movs	r1, #5
 80041e2:	2047      	movs	r0, #71	@ 0x47
 80041e4:	f000 fe82 	bl	8004eec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80041e8:	2047      	movs	r0, #71	@ 0x47
 80041ea:	f000 fe9b 	bl	8004f24 <HAL_NVIC_EnableIRQ>
}
 80041ee:	bf00      	nop
 80041f0:	37c8      	adds	r7, #200	@ 0xc8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40011000 	.word	0x40011000
 80041fc:	40023800 	.word	0x40023800
 8004200:	40020000 	.word	0x40020000
 8004204:	200078e4 	.word	0x200078e4
 8004208:	40026440 	.word	0x40026440
 800420c:	40004800 	.word	0x40004800
 8004210:	40020c00 	.word	0x40020c00
 8004214:	40011400 	.word	0x40011400
 8004218:	40020800 	.word	0x40020800

0800421c <HAL_UART_TxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  // Called when printf finished
  if (huart->Instance == USART3) {
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1d      	ldr	r2, [pc, #116]	@ (80042a0 <HAL_UART_TxCpltCallback+0x84>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d127      	bne.n	800427e <HAL_UART_TxCpltCallback+0x62>
    if (tx_tail != tx_head) {
 800422e:	4b1d      	ldr	r3, [pc, #116]	@ (80042a4 <HAL_UART_TxCpltCallback+0x88>)
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29a      	uxth	r2, r3
 8004234:	4b1c      	ldr	r3, [pc, #112]	@ (80042a8 <HAL_UART_TxCpltCallback+0x8c>)
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b29b      	uxth	r3, r3
 800423a:	429a      	cmp	r2, r3
 800423c:	d01c      	beq.n	8004278 <HAL_UART_TxCpltCallback+0x5c>
      uint8_t byte = tx_ring_buf[tx_tail];
 800423e:	4b19      	ldr	r3, [pc, #100]	@ (80042a4 <HAL_UART_TxCpltCallback+0x88>)
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	b29b      	uxth	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	4b19      	ldr	r3, [pc, #100]	@ (80042ac <HAL_UART_TxCpltCallback+0x90>)
 8004248:	5c9b      	ldrb	r3, [r3, r2]
 800424a:	73fb      	strb	r3, [r7, #15]
      tx_tail = (tx_tail + 1) % PRINTF_TX_BUFFER_SIZE;
 800424c:	4b15      	ldr	r3, [pc, #84]	@ (80042a4 <HAL_UART_TxCpltCallback+0x88>)
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	3301      	adds	r3, #1
 8004254:	425a      	negs	r2, r3
 8004256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800425e:	bf58      	it	pl
 8004260:	4253      	negpl	r3, r2
 8004262:	b29a      	uxth	r2, r3
 8004264:	4b0f      	ldr	r3, [pc, #60]	@ (80042a4 <HAL_UART_TxCpltCallback+0x88>)
 8004266:	801a      	strh	r2, [r3, #0]
      HAL_UART_Transmit_IT(&huart3, &byte, 1);
 8004268:	f107 030f 	add.w	r3, r7, #15
 800426c:	2201      	movs	r2, #1
 800426e:	4619      	mov	r1, r3
 8004270:	480f      	ldr	r0, [pc, #60]	@ (80042b0 <HAL_UART_TxCpltCallback+0x94>)
 8004272:	f005 fca3 	bl	8009bbc <HAL_UART_Transmit_IT>
 8004276:	e002      	b.n	800427e <HAL_UART_TxCpltCallback+0x62>
    } else {
      tx_busy = 0;
 8004278:	4b0e      	ldr	r3, [pc, #56]	@ (80042b4 <HAL_UART_TxCpltCallback+0x98>)
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
    }
  }


  // Called when motor transmit finished
  if (huart->Instance == hservo.huart->Instance) {
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	4b0d      	ldr	r3, [pc, #52]	@ (80042b8 <HAL_UART_TxCpltCallback+0x9c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d104      	bne.n	8004296 <HAL_UART_TxCpltCallback+0x7a>
    osSemaphoreRelease(hservo.txDone);
 800428c:	4b0a      	ldr	r3, [pc, #40]	@ (80042b8 <HAL_UART_TxCpltCallback+0x9c>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	4618      	mov	r0, r3
 8004292:	f009 fb97 	bl	800d9c4 <osSemaphoreRelease>
  }
}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40004800 	.word	0x40004800
 80042a4:	20007642 	.word	0x20007642
 80042a8:	20007640 	.word	0x20007640
 80042ac:	20007440 	.word	0x20007440
 80042b0:	200077d4 	.word	0x200077d4
 80042b4:	20007644 	.word	0x20007644
 80042b8:	200002e0 	.word	0x200002e0

080042bc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == hservo.huart->Instance) {
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4b05      	ldr	r3, [pc, #20]	@ (80042e0 <HAL_UART_RxCpltCallback+0x24>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d102      	bne.n	80042d8 <HAL_UART_RxCpltCallback+0x1c>
    STServo_ReadFromISR(&hservo);
 80042d2:	4803      	ldr	r0, [pc, #12]	@ (80042e0 <HAL_UART_RxCpltCallback+0x24>)
 80042d4:	f7fc fbdc 	bl	8000a90 <STServo_ReadFromISR>
  }
}
 80042d8:	bf00      	nop
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	200002e0 	.word	0x200002e0

080042e4 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  if (huart->Instance == hservo.huart->Instance) {
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	4b05      	ldr	r3, [pc, #20]	@ (8004308 <HAL_UART_RxHalfCpltCallback+0x24>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d102      	bne.n	8004300 <HAL_UART_RxHalfCpltCallback+0x1c>
    STServo_ReadFromISR(&hservo);
 80042fa:	4803      	ldr	r0, [pc, #12]	@ (8004308 <HAL_UART_RxHalfCpltCallback+0x24>)
 80042fc:	f7fc fbc8 	bl	8000a90 <STServo_ReadFromISR>
  }
}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	200002e0 	.word	0x200002e0

0800430c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  return;
 8004314:	bf00      	nop
}
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004320:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004358 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004324:	f7ff fd1a 	bl	8003d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004328:	480c      	ldr	r0, [pc, #48]	@ (800435c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800432a:	490d      	ldr	r1, [pc, #52]	@ (8004360 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800432c:	4a0d      	ldr	r2, [pc, #52]	@ (8004364 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800432e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004330:	e002      	b.n	8004338 <LoopCopyDataInit>

08004332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004336:	3304      	adds	r3, #4

08004338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800433a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800433c:	d3f9      	bcc.n	8004332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800433e:	4a0a      	ldr	r2, [pc, #40]	@ (8004368 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004340:	4c0a      	ldr	r4, [pc, #40]	@ (800436c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004344:	e001      	b.n	800434a <LoopFillZerobss>

08004346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004348:	3204      	adds	r2, #4

0800434a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800434a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800434c:	d3fb      	bcc.n	8004346 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800434e:	f010 fcc1 	bl	8014cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004352:	f7fe ff2f 	bl	80031b4 <main>
  bx  lr    
 8004356:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004358:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800435c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004360:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8004364:	08017254 	.word	0x08017254
  ldr r2, =_sbss
 8004368:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 800436c:	2000da24 	.word	0x2000da24

08004370 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004370:	e7fe      	b.n	8004370 <ADC_IRQHandler>
	...

08004374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004378:	4b08      	ldr	r3, [pc, #32]	@ (800439c <HAL_Init+0x28>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a07      	ldr	r2, [pc, #28]	@ (800439c <HAL_Init+0x28>)
 800437e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004384:	2003      	movs	r0, #3
 8004386:	f000 fda6 	bl	8004ed6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800438a:	200f      	movs	r0, #15
 800438c:	f7ff fa46 	bl	800381c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004390:	f7ff fa1c 	bl	80037cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40023c00 	.word	0x40023c00

080043a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043a4:	4b06      	ldr	r3, [pc, #24]	@ (80043c0 <HAL_IncTick+0x20>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <HAL_IncTick+0x24>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4413      	add	r3, r2
 80043b0:	4a04      	ldr	r2, [pc, #16]	@ (80043c4 <HAL_IncTick+0x24>)
 80043b2:	6013      	str	r3, [r2, #0]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	200000e8 	.word	0x200000e8
 80043c4:	20007944 	.word	0x20007944

080043c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return uwTick;
 80043cc:	4b03      	ldr	r3, [pc, #12]	@ (80043dc <HAL_GetTick+0x14>)
 80043ce:	681b      	ldr	r3, [r3, #0]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20007944 	.word	0x20007944

080043e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043e8:	f7ff ffee 	bl	80043c8 <HAL_GetTick>
 80043ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f8:	d005      	beq.n	8004406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004424 <HAL_Delay+0x44>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004406:	bf00      	nop
 8004408:	f7ff ffde 	bl	80043c8 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	429a      	cmp	r2, r3
 8004416:	d8f7      	bhi.n	8004408 <HAL_Delay+0x28>
  {
  }
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	200000e8 	.word	0x200000e8

08004428 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e031      	b.n	80044a2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d109      	bne.n	800445a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fd f8f8 	bl	800163c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	d116      	bne.n	8004494 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800446a:	4b10      	ldr	r3, [pc, #64]	@ (80044ac <HAL_ADC_Init+0x84>)
 800446c:	4013      	ands	r3, r2
 800446e:	f043 0202 	orr.w	r2, r3, #2
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fae0 	bl	8004a3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	f023 0303 	bic.w	r3, r3, #3
 800448a:	f043 0201 	orr.w	r2, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	641a      	str	r2, [r3, #64]	@ 0x40
 8004492:	e001      	b.n	8004498 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	ffffeefd 	.word	0xffffeefd

080044b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044bc:	2300      	movs	r3, #0
 80044be:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d101      	bne.n	80044d2 <HAL_ADC_Start_DMA+0x22>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e0d6      	b.n	8004680 <HAL_ADC_Start_DMA+0x1d0>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d018      	beq.n	800451a <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80044f8:	4b63      	ldr	r3, [pc, #396]	@ (8004688 <HAL_ADC_Start_DMA+0x1d8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a63      	ldr	r2, [pc, #396]	@ (800468c <HAL_ADC_Start_DMA+0x1dc>)
 80044fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004502:	0c9a      	lsrs	r2, r3, #18
 8004504:	4613      	mov	r3, r2
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	4413      	add	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 800450c:	e002      	b.n	8004514 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	3b01      	subs	r3, #1
 8004512:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f9      	bne.n	800450e <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b01      	cmp	r3, #1
 8004526:	f040 809e 	bne.w	8004666 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800452e:	4b58      	ldr	r3, [pc, #352]	@ (8004690 <HAL_ADC_Start_DMA+0x1e0>)
 8004530:	4013      	ands	r3, r2
 8004532:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004544:	2b00      	cmp	r3, #0
 8004546:	d007      	beq.n	8004558 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004550:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004564:	d106      	bne.n	8004574 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456a:	f023 0206 	bic.w	r2, r3, #6
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	645a      	str	r2, [r3, #68]	@ 0x44
 8004572:	e002      	b.n	800457a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004586:	4a43      	ldr	r2, [pc, #268]	@ (8004694 <HAL_ADC_Start_DMA+0x1e4>)
 8004588:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458e:	4a42      	ldr	r2, [pc, #264]	@ (8004698 <HAL_ADC_Start_DMA+0x1e8>)
 8004590:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004596:	4a41      	ldr	r2, [pc, #260]	@ (800469c <HAL_ADC_Start_DMA+0x1ec>)
 8004598:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80045a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80045b2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045c2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	334c      	adds	r3, #76	@ 0x4c
 80045ce:	4619      	mov	r1, r3
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f000 fd70 	bl	80050b8 <HAL_DMA_Start_IT>
 80045d8:	4603      	mov	r3, r0
 80045da:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80045dc:	4b30      	ldr	r3, [pc, #192]	@ (80046a0 <HAL_ADC_Start_DMA+0x1f0>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 031f 	and.w	r3, r3, #31
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10f      	bne.n	8004608 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d143      	bne.n	800467e <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689a      	ldr	r2, [r3, #8]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004604:	609a      	str	r2, [r3, #8]
 8004606:	e03a      	b.n	800467e <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a25      	ldr	r2, [pc, #148]	@ (80046a4 <HAL_ADC_Start_DMA+0x1f4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d10e      	bne.n	8004630 <HAL_ADC_Start_DMA+0x180>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d107      	bne.n	8004630 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800462e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004630:	4b1b      	ldr	r3, [pc, #108]	@ (80046a0 <HAL_ADC_Start_DMA+0x1f0>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 0310 	and.w	r3, r3, #16
 8004638:	2b00      	cmp	r3, #0
 800463a:	d120      	bne.n	800467e <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a19      	ldr	r2, [pc, #100]	@ (80046a8 <HAL_ADC_Start_DMA+0x1f8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d11b      	bne.n	800467e <HAL_ADC_Start_DMA+0x1ce>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d114      	bne.n	800467e <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004662:	609a      	str	r2, [r3, #8]
 8004664:	e00b      	b.n	800467e <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466a:	f043 0210 	orr.w	r2, r3, #16
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004676:	f043 0201 	orr.w	r2, r3, #1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 800467e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	200000e0 	.word	0x200000e0
 800468c:	431bde83 	.word	0x431bde83
 8004690:	fffff8fe 	.word	0xfffff8fe
 8004694:	08004c31 	.word	0x08004c31
 8004698:	08004ceb 	.word	0x08004ceb
 800469c:	08004d07 	.word	0x08004d07
 80046a0:	40012300 	.word	0x40012300
 80046a4:	40012000 	.word	0x40012000
 80046a8:	40012200 	.word	0x40012200

080046ac <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_ADC_Stop_DMA+0x1a>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e046      	b.n	8004754 <HAL_ADC_Stop_DMA+0xa8>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0201 	bic.w	r2, r2, #1
 80046dc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d12e      	bne.n	800474a <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046fa:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004700:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d10f      	bne.n	800472a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fd32 	bl	8005178 <HAL_DMA_Abort>
 8004714:	4603      	mov	r3, r0
 8004716:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8004738:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800473e:	4b07      	ldr	r3, [pc, #28]	@ (800475c <HAL_ADC_Stop_DMA+0xb0>)
 8004740:	4013      	ands	r3, r2
 8004742:	f043 0201 	orr.w	r2, r3, #1
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004752:	7bfb      	ldrb	r3, [r7, #15]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	ffffeefe 	.word	0xffffeefe

08004760 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x1c>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e13a      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x292>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b09      	cmp	r3, #9
 80047b2:	d93a      	bls.n	800482a <HAL_ADC_ConfigChannel+0xa2>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80047bc:	d035      	beq.n	800482a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68d9      	ldr	r1, [r3, #12]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	461a      	mov	r2, r3
 80047cc:	4613      	mov	r3, r2
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	4413      	add	r3, r2
 80047d2:	3b1e      	subs	r3, #30
 80047d4:	2207      	movs	r2, #7
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	43da      	mvns	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	400a      	ands	r2, r1
 80047e2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a8f      	ldr	r2, [pc, #572]	@ (8004a28 <HAL_ADC_ConfigChannel+0x2a0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d10a      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68d9      	ldr	r1, [r3, #12]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	061a      	lsls	r2, r3, #24
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004802:	e039      	b.n	8004878 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68d9      	ldr	r1, [r3, #12]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	b29b      	uxth	r3, r3
 8004814:	4618      	mov	r0, r3
 8004816:	4603      	mov	r3, r0
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	4403      	add	r3, r0
 800481c:	3b1e      	subs	r3, #30
 800481e:	409a      	lsls	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004828:	e026      	b.n	8004878 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6919      	ldr	r1, [r3, #16]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	b29b      	uxth	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	4613      	mov	r3, r2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4413      	add	r3, r2
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	2207      	movs	r2, #7
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	43da      	mvns	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	400a      	ands	r2, r1
 8004850:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6919      	ldr	r1, [r3, #16]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	4618      	mov	r0, r3
 8004864:	4603      	mov	r3, r0
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	4403      	add	r3, r0
 800486a:	f003 031f 	and.w	r3, r3, #31
 800486e:	409a      	lsls	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b06      	cmp	r3, #6
 800487e:	d824      	bhi.n	80048ca <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	3b05      	subs	r3, #5
 8004892:	221f      	movs	r2, #31
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43da      	mvns	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	400a      	ands	r2, r1
 80048a0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	4618      	mov	r0, r3
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	3b05      	subs	r3, #5
 80048bc:	fa00 f203 	lsl.w	r2, r0, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80048c8:	e04c      	b.n	8004964 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b0c      	cmp	r3, #12
 80048d0:	d824      	bhi.n	800491c <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	4613      	mov	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	3b23      	subs	r3, #35	@ 0x23
 80048e4:	221f      	movs	r2, #31
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43da      	mvns	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	400a      	ands	r2, r1
 80048f2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	4618      	mov	r0, r3
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	3b23      	subs	r3, #35	@ 0x23
 800490e:	fa00 f203 	lsl.w	r2, r0, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	631a      	str	r2, [r3, #48]	@ 0x30
 800491a:	e023      	b.n	8004964 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	3b41      	subs	r3, #65	@ 0x41
 800492e:	221f      	movs	r2, #31
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	43da      	mvns	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	400a      	ands	r2, r1
 800493c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	b29b      	uxth	r3, r3
 800494a:	4618      	mov	r0, r3
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	3b41      	subs	r3, #65	@ 0x41
 8004958:	fa00 f203 	lsl.w	r2, r0, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a30      	ldr	r2, [pc, #192]	@ (8004a2c <HAL_ADC_ConfigChannel+0x2a4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d10a      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x1fc>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004976:	d105      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004978:	4b2d      	ldr	r3, [pc, #180]	@ (8004a30 <HAL_ADC_ConfigChannel+0x2a8>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a30 <HAL_ADC_ConfigChannel+0x2a8>)
 800497e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004982:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a28      	ldr	r2, [pc, #160]	@ (8004a2c <HAL_ADC_ConfigChannel+0x2a4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d10f      	bne.n	80049ae <HAL_ADC_ConfigChannel+0x226>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b12      	cmp	r3, #18
 8004994:	d10b      	bne.n	80049ae <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004996:	4b26      	ldr	r3, [pc, #152]	@ (8004a30 <HAL_ADC_ConfigChannel+0x2a8>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	4a25      	ldr	r2, [pc, #148]	@ (8004a30 <HAL_ADC_ConfigChannel+0x2a8>)
 800499c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80049a0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80049a2:	4b23      	ldr	r3, [pc, #140]	@ (8004a30 <HAL_ADC_ConfigChannel+0x2a8>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	4a22      	ldr	r2, [pc, #136]	@ (8004a30 <HAL_ADC_ConfigChannel+0x2a8>)
 80049a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80049ac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a2c <HAL_ADC_ConfigChannel+0x2a4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d12b      	bne.n	8004a10 <HAL_ADC_ConfigChannel+0x288>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004a28 <HAL_ADC_ConfigChannel+0x2a0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d003      	beq.n	80049ca <HAL_ADC_ConfigChannel+0x242>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b11      	cmp	r3, #17
 80049c8:	d122      	bne.n	8004a10 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80049ca:	4b19      	ldr	r3, [pc, #100]	@ (8004a30 <HAL_ADC_ConfigChannel+0x2a8>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4a18      	ldr	r2, [pc, #96]	@ (8004a30 <HAL_ADC_ConfigChannel+0x2a8>)
 80049d0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80049d4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80049d6:	4b16      	ldr	r3, [pc, #88]	@ (8004a30 <HAL_ADC_ConfigChannel+0x2a8>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	4a15      	ldr	r2, [pc, #84]	@ (8004a30 <HAL_ADC_ConfigChannel+0x2a8>)
 80049dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049e0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a10      	ldr	r2, [pc, #64]	@ (8004a28 <HAL_ADC_ConfigChannel+0x2a0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d111      	bne.n	8004a10 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80049ec:	4b11      	ldr	r3, [pc, #68]	@ (8004a34 <HAL_ADC_ConfigChannel+0x2ac>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a11      	ldr	r2, [pc, #68]	@ (8004a38 <HAL_ADC_ConfigChannel+0x2b0>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	0c9a      	lsrs	r2, r3, #18
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004a02:	e002      	b.n	8004a0a <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f9      	bne.n	8004a04 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	10000012 	.word	0x10000012
 8004a2c:	40012000 	.word	0x40012000
 8004a30:	40012300 	.word	0x40012300
 8004a34:	200000e0 	.word	0x200000e0
 8004a38:	431bde83 	.word	0x431bde83

08004a3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004a44:	4b78      	ldr	r3, [pc, #480]	@ (8004c28 <ADC_Init+0x1ec>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	4a77      	ldr	r2, [pc, #476]	@ (8004c28 <ADC_Init+0x1ec>)
 8004a4a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004a4e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004a50:	4b75      	ldr	r3, [pc, #468]	@ (8004c28 <ADC_Init+0x1ec>)
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	4973      	ldr	r1, [pc, #460]	@ (8004c28 <ADC_Init+0x1ec>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6859      	ldr	r1, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	021a      	lsls	r2, r3, #8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004a90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6859      	ldr	r1, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ab2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6899      	ldr	r1, [r3, #8]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aca:	4a58      	ldr	r2, [pc, #352]	@ (8004c2c <ADC_Init+0x1f0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d022      	beq.n	8004b16 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ade:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6899      	ldr	r1, [r3, #8]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004b00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6899      	ldr	r1, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	609a      	str	r2, [r3, #8]
 8004b14:	e00f      	b.n	8004b36 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004b34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0202 	bic.w	r2, r2, #2
 8004b44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6899      	ldr	r1, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	005a      	lsls	r2, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01b      	beq.n	8004b9c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004b82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6859      	ldr	r1, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	035a      	lsls	r2, r3, #13
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	e007      	b.n	8004bac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004baa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004bba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	051a      	lsls	r2, r3, #20
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004be0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6899      	ldr	r1, [r3, #8]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004bee:	025a      	lsls	r2, r3, #9
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6899      	ldr	r1, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	029a      	lsls	r2, r3, #10
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	609a      	str	r2, [r3, #8]
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	40012300 	.word	0x40012300
 8004c2c:	0f000001 	.word	0x0f000001

08004c30 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d13c      	bne.n	8004cc4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d12b      	bne.n	8004cbc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d127      	bne.n	8004cbc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c72:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d006      	beq.n	8004c88 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d119      	bne.n	8004cbc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f022 0220 	bic.w	r2, r2, #32
 8004c96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d105      	bne.n	8004cbc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb4:	f043 0201 	orr.w	r2, r3, #1
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f7fc fd31 	bl	8001724 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004cc2:	e00e      	b.n	8004ce2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc8:	f003 0310 	and.w	r3, r3, #16
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f7ff fd4f 	bl	8004774 <HAL_ADC_ErrorCallback>
}
 8004cd6:	e004      	b.n	8004ce2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	4798      	blx	r3
}
 8004ce2:	bf00      	nop
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f7ff fd31 	bl	8004760 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cfe:	bf00      	nop
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d12:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2240      	movs	r2, #64	@ 0x40
 8004d18:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1e:	f043 0204 	orr.w	r2, r3, #4
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f7ff fd24 	bl	8004774 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d2c:	bf00      	nop
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <__NVIC_SetPriorityGrouping>:
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d44:	4b0b      	ldr	r3, [pc, #44]	@ (8004d74 <__NVIC_SetPriorityGrouping+0x40>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d50:	4013      	ands	r3, r2
 8004d52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d5c:	4b06      	ldr	r3, [pc, #24]	@ (8004d78 <__NVIC_SetPriorityGrouping+0x44>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d62:	4a04      	ldr	r2, [pc, #16]	@ (8004d74 <__NVIC_SetPriorityGrouping+0x40>)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	60d3      	str	r3, [r2, #12]
}
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	e000ed00 	.word	0xe000ed00
 8004d78:	05fa0000 	.word	0x05fa0000

08004d7c <__NVIC_GetPriorityGrouping>:
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d80:	4b04      	ldr	r3, [pc, #16]	@ (8004d94 <__NVIC_GetPriorityGrouping+0x18>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	0a1b      	lsrs	r3, r3, #8
 8004d86:	f003 0307 	and.w	r3, r3, #7
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	e000ed00 	.word	0xe000ed00

08004d98 <__NVIC_EnableIRQ>:
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	4603      	mov	r3, r0
 8004da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	db0b      	blt.n	8004dc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	f003 021f 	and.w	r2, r3, #31
 8004db0:	4907      	ldr	r1, [pc, #28]	@ (8004dd0 <__NVIC_EnableIRQ+0x38>)
 8004db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	2001      	movs	r0, #1
 8004dba:	fa00 f202 	lsl.w	r2, r0, r2
 8004dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	e000e100 	.word	0xe000e100

08004dd4 <__NVIC_DisableIRQ>:
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	4603      	mov	r3, r0
 8004ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	db12      	blt.n	8004e0c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	f003 021f 	and.w	r2, r3, #31
 8004dec:	490a      	ldr	r1, [pc, #40]	@ (8004e18 <__NVIC_DisableIRQ+0x44>)
 8004dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	2001      	movs	r0, #1
 8004df6:	fa00 f202 	lsl.w	r2, r0, r2
 8004dfa:	3320      	adds	r3, #32
 8004dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004e00:	f3bf 8f4f 	dsb	sy
}
 8004e04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004e06:	f3bf 8f6f 	isb	sy
}
 8004e0a:	bf00      	nop
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	e000e100 	.word	0xe000e100

08004e1c <__NVIC_SetPriority>:
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	4603      	mov	r3, r0
 8004e24:	6039      	str	r1, [r7, #0]
 8004e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	db0a      	blt.n	8004e46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	b2da      	uxtb	r2, r3
 8004e34:	490c      	ldr	r1, [pc, #48]	@ (8004e68 <__NVIC_SetPriority+0x4c>)
 8004e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e3a:	0112      	lsls	r2, r2, #4
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	440b      	add	r3, r1
 8004e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004e44:	e00a      	b.n	8004e5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	4908      	ldr	r1, [pc, #32]	@ (8004e6c <__NVIC_SetPriority+0x50>)
 8004e4c:	79fb      	ldrb	r3, [r7, #7]
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	3b04      	subs	r3, #4
 8004e54:	0112      	lsls	r2, r2, #4
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	440b      	add	r3, r1
 8004e5a:	761a      	strb	r2, [r3, #24]
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	e000e100 	.word	0xe000e100
 8004e6c:	e000ed00 	.word	0xe000ed00

08004e70 <NVIC_EncodePriority>:
{
 8004e70:	b480      	push	{r7}
 8004e72:	b089      	sub	sp, #36	@ 0x24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	f1c3 0307 	rsb	r3, r3, #7
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	bf28      	it	cs
 8004e8e:	2304      	movcs	r3, #4
 8004e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	3304      	adds	r3, #4
 8004e96:	2b06      	cmp	r3, #6
 8004e98:	d902      	bls.n	8004ea0 <NVIC_EncodePriority+0x30>
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	3b03      	subs	r3, #3
 8004e9e:	e000      	b.n	8004ea2 <NVIC_EncodePriority+0x32>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	43da      	mvns	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	401a      	ands	r2, r3
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec2:	43d9      	mvns	r1, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ec8:	4313      	orrs	r3, r2
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3724      	adds	r7, #36	@ 0x24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7ff ff28 	bl	8004d34 <__NVIC_SetPriorityGrouping>
}
 8004ee4:	bf00      	nop
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004efe:	f7ff ff3d 	bl	8004d7c <__NVIC_GetPriorityGrouping>
 8004f02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	6978      	ldr	r0, [r7, #20]
 8004f0a:	f7ff ffb1 	bl	8004e70 <NVIC_EncodePriority>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f14:	4611      	mov	r1, r2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff ff80 	bl	8004e1c <__NVIC_SetPriority>
}
 8004f1c:	bf00      	nop
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff ff30 	bl	8004d98 <__NVIC_EnableIRQ>
}
 8004f38:	bf00      	nop
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff ff40 	bl	8004dd4 <__NVIC_DisableIRQ>
}
 8004f54:	bf00      	nop
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f68:	f7ff fa2e 	bl	80043c8 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e099      	b.n	80050ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0201 	bic.w	r2, r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f98:	e00f      	b.n	8004fba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f9a:	f7ff fa15 	bl	80043c8 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b05      	cmp	r3, #5
 8004fa6:	d908      	bls.n	8004fba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2220      	movs	r2, #32
 8004fac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2203      	movs	r2, #3
 8004fb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e078      	b.n	80050ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e8      	bne.n	8004f9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4b38      	ldr	r3, [pc, #224]	@ (80050b4 <HAL_DMA_Init+0x158>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ffe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005010:	2b04      	cmp	r3, #4
 8005012:	d107      	bne.n	8005024 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501c:	4313      	orrs	r3, r2
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f023 0307 	bic.w	r3, r3, #7
 800503a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504a:	2b04      	cmp	r3, #4
 800504c:	d117      	bne.n	800507e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00e      	beq.n	800507e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fb09 	bl	8005678 <DMA_CheckFifoParam>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d008      	beq.n	800507e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2240      	movs	r2, #64	@ 0x40
 8005070:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800507a:	2301      	movs	r3, #1
 800507c:	e016      	b.n	80050ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fac0 	bl	800560c <DMA_CalcBaseAndBitshift>
 800508c:	4603      	mov	r3, r0
 800508e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005094:	223f      	movs	r2, #63	@ 0x3f
 8005096:	409a      	lsls	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	e010803f 	.word	0xe010803f

080050b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d101      	bne.n	80050de <HAL_DMA_Start_IT+0x26>
 80050da:	2302      	movs	r3, #2
 80050dc:	e048      	b.n	8005170 <HAL_DMA_Start_IT+0xb8>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d137      	bne.n	8005162 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 fa52 	bl	80055b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005110:	223f      	movs	r2, #63	@ 0x3f
 8005112:	409a      	lsls	r2, r3
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0216 	orr.w	r2, r2, #22
 8005126:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695a      	ldr	r2, [r3, #20]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005136:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	d007      	beq.n	8005150 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0208 	orr.w	r2, r2, #8
 800514e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	e005      	b.n	800516e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800516a:	2302      	movs	r3, #2
 800516c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800516e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005184:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005186:	f7ff f91f 	bl	80043c8 <HAL_GetTick>
 800518a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d008      	beq.n	80051aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2280      	movs	r2, #128	@ 0x80
 800519c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e052      	b.n	8005250 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0216 	bic.w	r2, r2, #22
 80051b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695a      	ldr	r2, [r3, #20]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d103      	bne.n	80051da <HAL_DMA_Abort+0x62>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d007      	beq.n	80051ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0208 	bic.w	r2, r2, #8
 80051e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0201 	bic.w	r2, r2, #1
 80051f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051fa:	e013      	b.n	8005224 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051fc:	f7ff f8e4 	bl	80043c8 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b05      	cmp	r3, #5
 8005208:	d90c      	bls.n	8005224 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2220      	movs	r2, #32
 800520e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2203      	movs	r2, #3
 8005214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e015      	b.n	8005250 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e4      	bne.n	80051fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005236:	223f      	movs	r2, #63	@ 0x3f
 8005238:	409a      	lsls	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d004      	beq.n	8005276 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2280      	movs	r2, #128	@ 0x80
 8005270:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e00c      	b.n	8005290 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2205      	movs	r2, #5
 800527a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0201 	bic.w	r2, r2, #1
 800528c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80052a8:	4b8e      	ldr	r3, [pc, #568]	@ (80054e4 <HAL_DMA_IRQHandler+0x248>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a8e      	ldr	r2, [pc, #568]	@ (80054e8 <HAL_DMA_IRQHandler+0x24c>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	0a9b      	lsrs	r3, r3, #10
 80052b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c6:	2208      	movs	r2, #8
 80052c8:	409a      	lsls	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4013      	ands	r3, r2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01a      	beq.n	8005308 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d013      	beq.n	8005308 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0204 	bic.w	r2, r2, #4
 80052ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052f4:	2208      	movs	r2, #8
 80052f6:	409a      	lsls	r2, r3
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005300:	f043 0201 	orr.w	r2, r3, #1
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800530c:	2201      	movs	r2, #1
 800530e:	409a      	lsls	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4013      	ands	r3, r2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d012      	beq.n	800533e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00b      	beq.n	800533e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800532a:	2201      	movs	r2, #1
 800532c:	409a      	lsls	r2, r3
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005336:	f043 0202 	orr.w	r2, r3, #2
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005342:	2204      	movs	r2, #4
 8005344:	409a      	lsls	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d012      	beq.n	8005374 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00b      	beq.n	8005374 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005360:	2204      	movs	r2, #4
 8005362:	409a      	lsls	r2, r3
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536c:	f043 0204 	orr.w	r2, r3, #4
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005378:	2210      	movs	r2, #16
 800537a:	409a      	lsls	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4013      	ands	r3, r2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d043      	beq.n	800540c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d03c      	beq.n	800540c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005396:	2210      	movs	r2, #16
 8005398:	409a      	lsls	r2, r3
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d018      	beq.n	80053de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d108      	bne.n	80053cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d024      	beq.n	800540c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	4798      	blx	r3
 80053ca:	e01f      	b.n	800540c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d01b      	beq.n	800540c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	4798      	blx	r3
 80053dc:	e016      	b.n	800540c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d107      	bne.n	80053fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0208 	bic.w	r2, r2, #8
 80053fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005410:	2220      	movs	r2, #32
 8005412:	409a      	lsls	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4013      	ands	r3, r2
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 808f 	beq.w	800553c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 8087 	beq.w	800553c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005432:	2220      	movs	r2, #32
 8005434:	409a      	lsls	r2, r3
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b05      	cmp	r3, #5
 8005444:	d136      	bne.n	80054b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0216 	bic.w	r2, r2, #22
 8005454:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695a      	ldr	r2, [r3, #20]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005464:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	d103      	bne.n	8005476 <HAL_DMA_IRQHandler+0x1da>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0208 	bic.w	r2, r2, #8
 8005484:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800548a:	223f      	movs	r2, #63	@ 0x3f
 800548c:	409a      	lsls	r2, r3
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d07e      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	4798      	blx	r3
        }
        return;
 80054b2:	e079      	b.n	80055a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d01d      	beq.n	80054fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10d      	bne.n	80054ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d031      	beq.n	800553c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	4798      	blx	r3
 80054e0:	e02c      	b.n	800553c <HAL_DMA_IRQHandler+0x2a0>
 80054e2:	bf00      	nop
 80054e4:	200000e0 	.word	0x200000e0
 80054e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d023      	beq.n	800553c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	4798      	blx	r3
 80054fc:	e01e      	b.n	800553c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10f      	bne.n	800552c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0210 	bic.w	r2, r2, #16
 800551a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005540:	2b00      	cmp	r3, #0
 8005542:	d032      	beq.n	80055aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d022      	beq.n	8005596 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2205      	movs	r2, #5
 8005554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0201 	bic.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	3301      	adds	r3, #1
 800556c:	60bb      	str	r3, [r7, #8]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	429a      	cmp	r2, r3
 8005572:	d307      	bcc.n	8005584 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f2      	bne.n	8005568 <HAL_DMA_IRQHandler+0x2cc>
 8005582:	e000      	b.n	8005586 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005584:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	4798      	blx	r3
 80055a6:	e000      	b.n	80055aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80055a8:	bf00      	nop
    }
  }
}
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80055cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2b40      	cmp	r3, #64	@ 0x40
 80055dc:	d108      	bne.n	80055f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80055ee:	e007      	b.n	8005600 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	60da      	str	r2, [r3, #12]
}
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	3b10      	subs	r3, #16
 800561c:	4a13      	ldr	r2, [pc, #76]	@ (800566c <DMA_CalcBaseAndBitshift+0x60>)
 800561e:	fba2 2303 	umull	r2, r3, r2, r3
 8005622:	091b      	lsrs	r3, r3, #4
 8005624:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005626:	4a12      	ldr	r2, [pc, #72]	@ (8005670 <DMA_CalcBaseAndBitshift+0x64>)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b03      	cmp	r3, #3
 8005638:	d908      	bls.n	800564c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	4b0c      	ldr	r3, [pc, #48]	@ (8005674 <DMA_CalcBaseAndBitshift+0x68>)
 8005642:	4013      	ands	r3, r2
 8005644:	1d1a      	adds	r2, r3, #4
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	659a      	str	r2, [r3, #88]	@ 0x58
 800564a:	e006      	b.n	800565a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	4b08      	ldr	r3, [pc, #32]	@ (8005674 <DMA_CalcBaseAndBitshift+0x68>)
 8005654:	4013      	ands	r3, r2
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	aaaaaaab 	.word	0xaaaaaaab
 8005670:	08016e44 	.word	0x08016e44
 8005674:	fffffc00 	.word	0xfffffc00

08005678 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005688:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d11f      	bne.n	80056d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b03      	cmp	r3, #3
 8005696:	d856      	bhi.n	8005746 <DMA_CheckFifoParam+0xce>
 8005698:	a201      	add	r2, pc, #4	@ (adr r2, 80056a0 <DMA_CheckFifoParam+0x28>)
 800569a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569e:	bf00      	nop
 80056a0:	080056b1 	.word	0x080056b1
 80056a4:	080056c3 	.word	0x080056c3
 80056a8:	080056b1 	.word	0x080056b1
 80056ac:	08005747 	.word	0x08005747
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d046      	beq.n	800574a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056c0:	e043      	b.n	800574a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056ca:	d140      	bne.n	800574e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056d0:	e03d      	b.n	800574e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056da:	d121      	bne.n	8005720 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d837      	bhi.n	8005752 <DMA_CheckFifoParam+0xda>
 80056e2:	a201      	add	r2, pc, #4	@ (adr r2, 80056e8 <DMA_CheckFifoParam+0x70>)
 80056e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e8:	080056f9 	.word	0x080056f9
 80056ec:	080056ff 	.word	0x080056ff
 80056f0:	080056f9 	.word	0x080056f9
 80056f4:	08005711 	.word	0x08005711
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
      break;
 80056fc:	e030      	b.n	8005760 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005702:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d025      	beq.n	8005756 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800570e:	e022      	b.n	8005756 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005714:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005718:	d11f      	bne.n	800575a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800571e:	e01c      	b.n	800575a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d903      	bls.n	800572e <DMA_CheckFifoParam+0xb6>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b03      	cmp	r3, #3
 800572a:	d003      	beq.n	8005734 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800572c:	e018      	b.n	8005760 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	73fb      	strb	r3, [r7, #15]
      break;
 8005732:	e015      	b.n	8005760 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005738:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00e      	beq.n	800575e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	73fb      	strb	r3, [r7, #15]
      break;
 8005744:	e00b      	b.n	800575e <DMA_CheckFifoParam+0xe6>
      break;
 8005746:	bf00      	nop
 8005748:	e00a      	b.n	8005760 <DMA_CheckFifoParam+0xe8>
      break;
 800574a:	bf00      	nop
 800574c:	e008      	b.n	8005760 <DMA_CheckFifoParam+0xe8>
      break;
 800574e:	bf00      	nop
 8005750:	e006      	b.n	8005760 <DMA_CheckFifoParam+0xe8>
      break;
 8005752:	bf00      	nop
 8005754:	e004      	b.n	8005760 <DMA_CheckFifoParam+0xe8>
      break;
 8005756:	bf00      	nop
 8005758:	e002      	b.n	8005760 <DMA_CheckFifoParam+0xe8>
      break;   
 800575a:	bf00      	nop
 800575c:	e000      	b.n	8005760 <DMA_CheckFifoParam+0xe8>
      break;
 800575e:	bf00      	nop
    }
  } 
  
  return status; 
 8005760:	7bfb      	ldrb	r3, [r7, #15]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop

08005770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005770:	b480      	push	{r7}
 8005772:	b089      	sub	sp, #36	@ 0x24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800577a:	2300      	movs	r3, #0
 800577c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005782:	2300      	movs	r3, #0
 8005784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005786:	2300      	movs	r3, #0
 8005788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800578a:	2300      	movs	r3, #0
 800578c:	61fb      	str	r3, [r7, #28]
 800578e:	e175      	b.n	8005a7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005790:	2201      	movs	r2, #1
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	fa02 f303 	lsl.w	r3, r2, r3
 8005798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4013      	ands	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	f040 8164 	bne.w	8005a76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d005      	beq.n	80057c6 <HAL_GPIO_Init+0x56>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f003 0303 	and.w	r3, r3, #3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d130      	bne.n	8005828 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	2203      	movs	r2, #3
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	43db      	mvns	r3, r3
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	4013      	ands	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	69ba      	ldr	r2, [r7, #24]
 80057f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057fc:	2201      	movs	r2, #1
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	fa02 f303 	lsl.w	r3, r2, r3
 8005804:	43db      	mvns	r3, r3
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	4013      	ands	r3, r2
 800580a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	091b      	lsrs	r3, r3, #4
 8005812:	f003 0201 	and.w	r2, r3, #1
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	4313      	orrs	r3, r2
 8005820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f003 0303 	and.w	r3, r3, #3
 8005830:	2b03      	cmp	r3, #3
 8005832:	d017      	beq.n	8005864 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	2203      	movs	r2, #3
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	43db      	mvns	r3, r3
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	4013      	ands	r3, r2
 800584a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	4313      	orrs	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f003 0303 	and.w	r3, r3, #3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d123      	bne.n	80058b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	08da      	lsrs	r2, r3, #3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3208      	adds	r2, #8
 8005878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800587c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	220f      	movs	r2, #15
 8005888:	fa02 f303 	lsl.w	r3, r2, r3
 800588c:	43db      	mvns	r3, r3
 800588e:	69ba      	ldr	r2, [r7, #24]
 8005890:	4013      	ands	r3, r2
 8005892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	691a      	ldr	r2, [r3, #16]
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	08da      	lsrs	r2, r3, #3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3208      	adds	r2, #8
 80058b2:	69b9      	ldr	r1, [r7, #24]
 80058b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	005b      	lsls	r3, r3, #1
 80058c2:	2203      	movs	r2, #3
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	43db      	mvns	r3, r3
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	4013      	ands	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f003 0203 	and.w	r2, r3, #3
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 80be 	beq.w	8005a76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058fa:	4b66      	ldr	r3, [pc, #408]	@ (8005a94 <HAL_GPIO_Init+0x324>)
 80058fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058fe:	4a65      	ldr	r2, [pc, #404]	@ (8005a94 <HAL_GPIO_Init+0x324>)
 8005900:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005904:	6453      	str	r3, [r2, #68]	@ 0x44
 8005906:	4b63      	ldr	r3, [pc, #396]	@ (8005a94 <HAL_GPIO_Init+0x324>)
 8005908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005912:	4a61      	ldr	r2, [pc, #388]	@ (8005a98 <HAL_GPIO_Init+0x328>)
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	089b      	lsrs	r3, r3, #2
 8005918:	3302      	adds	r3, #2
 800591a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800591e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	220f      	movs	r2, #15
 800592a:	fa02 f303 	lsl.w	r3, r2, r3
 800592e:	43db      	mvns	r3, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4013      	ands	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a58      	ldr	r2, [pc, #352]	@ (8005a9c <HAL_GPIO_Init+0x32c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d037      	beq.n	80059ae <HAL_GPIO_Init+0x23e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a57      	ldr	r2, [pc, #348]	@ (8005aa0 <HAL_GPIO_Init+0x330>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d031      	beq.n	80059aa <HAL_GPIO_Init+0x23a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a56      	ldr	r2, [pc, #344]	@ (8005aa4 <HAL_GPIO_Init+0x334>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d02b      	beq.n	80059a6 <HAL_GPIO_Init+0x236>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a55      	ldr	r2, [pc, #340]	@ (8005aa8 <HAL_GPIO_Init+0x338>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d025      	beq.n	80059a2 <HAL_GPIO_Init+0x232>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a54      	ldr	r2, [pc, #336]	@ (8005aac <HAL_GPIO_Init+0x33c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d01f      	beq.n	800599e <HAL_GPIO_Init+0x22e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a53      	ldr	r2, [pc, #332]	@ (8005ab0 <HAL_GPIO_Init+0x340>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d019      	beq.n	800599a <HAL_GPIO_Init+0x22a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a52      	ldr	r2, [pc, #328]	@ (8005ab4 <HAL_GPIO_Init+0x344>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <HAL_GPIO_Init+0x226>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a51      	ldr	r2, [pc, #324]	@ (8005ab8 <HAL_GPIO_Init+0x348>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d00d      	beq.n	8005992 <HAL_GPIO_Init+0x222>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a50      	ldr	r2, [pc, #320]	@ (8005abc <HAL_GPIO_Init+0x34c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d007      	beq.n	800598e <HAL_GPIO_Init+0x21e>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a4f      	ldr	r2, [pc, #316]	@ (8005ac0 <HAL_GPIO_Init+0x350>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d101      	bne.n	800598a <HAL_GPIO_Init+0x21a>
 8005986:	2309      	movs	r3, #9
 8005988:	e012      	b.n	80059b0 <HAL_GPIO_Init+0x240>
 800598a:	230a      	movs	r3, #10
 800598c:	e010      	b.n	80059b0 <HAL_GPIO_Init+0x240>
 800598e:	2308      	movs	r3, #8
 8005990:	e00e      	b.n	80059b0 <HAL_GPIO_Init+0x240>
 8005992:	2307      	movs	r3, #7
 8005994:	e00c      	b.n	80059b0 <HAL_GPIO_Init+0x240>
 8005996:	2306      	movs	r3, #6
 8005998:	e00a      	b.n	80059b0 <HAL_GPIO_Init+0x240>
 800599a:	2305      	movs	r3, #5
 800599c:	e008      	b.n	80059b0 <HAL_GPIO_Init+0x240>
 800599e:	2304      	movs	r3, #4
 80059a0:	e006      	b.n	80059b0 <HAL_GPIO_Init+0x240>
 80059a2:	2303      	movs	r3, #3
 80059a4:	e004      	b.n	80059b0 <HAL_GPIO_Init+0x240>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e002      	b.n	80059b0 <HAL_GPIO_Init+0x240>
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <HAL_GPIO_Init+0x240>
 80059ae:	2300      	movs	r3, #0
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	f002 0203 	and.w	r2, r2, #3
 80059b6:	0092      	lsls	r2, r2, #2
 80059b8:	4093      	lsls	r3, r2
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	4313      	orrs	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80059c0:	4935      	ldr	r1, [pc, #212]	@ (8005a98 <HAL_GPIO_Init+0x328>)
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	089b      	lsrs	r3, r3, #2
 80059c6:	3302      	adds	r3, #2
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059ce:	4b3d      	ldr	r3, [pc, #244]	@ (8005ac4 <HAL_GPIO_Init+0x354>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	43db      	mvns	r3, r3
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	4013      	ands	r3, r2
 80059dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059f2:	4a34      	ldr	r2, [pc, #208]	@ (8005ac4 <HAL_GPIO_Init+0x354>)
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059f8:	4b32      	ldr	r3, [pc, #200]	@ (8005ac4 <HAL_GPIO_Init+0x354>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	43db      	mvns	r3, r3
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	4013      	ands	r3, r2
 8005a06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a1c:	4a29      	ldr	r2, [pc, #164]	@ (8005ac4 <HAL_GPIO_Init+0x354>)
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a22:	4b28      	ldr	r3, [pc, #160]	@ (8005ac4 <HAL_GPIO_Init+0x354>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	43db      	mvns	r3, r3
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	4013      	ands	r3, r2
 8005a30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a46:	4a1f      	ldr	r2, [pc, #124]	@ (8005ac4 <HAL_GPIO_Init+0x354>)
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ac4 <HAL_GPIO_Init+0x354>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	43db      	mvns	r3, r3
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	4013      	ands	r3, r2
 8005a5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a70:	4a14      	ldr	r2, [pc, #80]	@ (8005ac4 <HAL_GPIO_Init+0x354>)
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	61fb      	str	r3, [r7, #28]
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	2b0f      	cmp	r3, #15
 8005a80:	f67f ae86 	bls.w	8005790 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	3724      	adds	r7, #36	@ 0x24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	40023800 	.word	0x40023800
 8005a98:	40013800 	.word	0x40013800
 8005a9c:	40020000 	.word	0x40020000
 8005aa0:	40020400 	.word	0x40020400
 8005aa4:	40020800 	.word	0x40020800
 8005aa8:	40020c00 	.word	0x40020c00
 8005aac:	40021000 	.word	0x40021000
 8005ab0:	40021400 	.word	0x40021400
 8005ab4:	40021800 	.word	0x40021800
 8005ab8:	40021c00 	.word	0x40021c00
 8005abc:	40022000 	.word	0x40022000
 8005ac0:	40022400 	.word	0x40022400
 8005ac4:	40013c00 	.word	0x40013c00

08005ac8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	e0d9      	b.n	8005c98 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	4013      	ands	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	f040 80c9 	bne.w	8005c92 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005b00:	4a6b      	ldr	r2, [pc, #428]	@ (8005cb0 <HAL_GPIO_DeInit+0x1e8>)
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	089b      	lsrs	r3, r3, #2
 8005b06:	3302      	adds	r3, #2
 8005b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b0c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f003 0303 	and.w	r3, r3, #3
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	220f      	movs	r2, #15
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a63      	ldr	r2, [pc, #396]	@ (8005cb4 <HAL_GPIO_DeInit+0x1ec>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d037      	beq.n	8005b9a <HAL_GPIO_DeInit+0xd2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a62      	ldr	r2, [pc, #392]	@ (8005cb8 <HAL_GPIO_DeInit+0x1f0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d031      	beq.n	8005b96 <HAL_GPIO_DeInit+0xce>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a61      	ldr	r2, [pc, #388]	@ (8005cbc <HAL_GPIO_DeInit+0x1f4>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d02b      	beq.n	8005b92 <HAL_GPIO_DeInit+0xca>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a60      	ldr	r2, [pc, #384]	@ (8005cc0 <HAL_GPIO_DeInit+0x1f8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d025      	beq.n	8005b8e <HAL_GPIO_DeInit+0xc6>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a5f      	ldr	r2, [pc, #380]	@ (8005cc4 <HAL_GPIO_DeInit+0x1fc>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d01f      	beq.n	8005b8a <HAL_GPIO_DeInit+0xc2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a5e      	ldr	r2, [pc, #376]	@ (8005cc8 <HAL_GPIO_DeInit+0x200>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d019      	beq.n	8005b86 <HAL_GPIO_DeInit+0xbe>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a5d      	ldr	r2, [pc, #372]	@ (8005ccc <HAL_GPIO_DeInit+0x204>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <HAL_GPIO_DeInit+0xba>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a5c      	ldr	r2, [pc, #368]	@ (8005cd0 <HAL_GPIO_DeInit+0x208>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00d      	beq.n	8005b7e <HAL_GPIO_DeInit+0xb6>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a5b      	ldr	r2, [pc, #364]	@ (8005cd4 <HAL_GPIO_DeInit+0x20c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d007      	beq.n	8005b7a <HAL_GPIO_DeInit+0xb2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a5a      	ldr	r2, [pc, #360]	@ (8005cd8 <HAL_GPIO_DeInit+0x210>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d101      	bne.n	8005b76 <HAL_GPIO_DeInit+0xae>
 8005b72:	2309      	movs	r3, #9
 8005b74:	e012      	b.n	8005b9c <HAL_GPIO_DeInit+0xd4>
 8005b76:	230a      	movs	r3, #10
 8005b78:	e010      	b.n	8005b9c <HAL_GPIO_DeInit+0xd4>
 8005b7a:	2308      	movs	r3, #8
 8005b7c:	e00e      	b.n	8005b9c <HAL_GPIO_DeInit+0xd4>
 8005b7e:	2307      	movs	r3, #7
 8005b80:	e00c      	b.n	8005b9c <HAL_GPIO_DeInit+0xd4>
 8005b82:	2306      	movs	r3, #6
 8005b84:	e00a      	b.n	8005b9c <HAL_GPIO_DeInit+0xd4>
 8005b86:	2305      	movs	r3, #5
 8005b88:	e008      	b.n	8005b9c <HAL_GPIO_DeInit+0xd4>
 8005b8a:	2304      	movs	r3, #4
 8005b8c:	e006      	b.n	8005b9c <HAL_GPIO_DeInit+0xd4>
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e004      	b.n	8005b9c <HAL_GPIO_DeInit+0xd4>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e002      	b.n	8005b9c <HAL_GPIO_DeInit+0xd4>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <HAL_GPIO_DeInit+0xd4>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	f002 0203 	and.w	r2, r2, #3
 8005ba2:	0092      	lsls	r2, r2, #2
 8005ba4:	4093      	lsls	r3, r2
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d132      	bne.n	8005c12 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005bac:	4b4b      	ldr	r3, [pc, #300]	@ (8005cdc <HAL_GPIO_DeInit+0x214>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	4949      	ldr	r1, [pc, #292]	@ (8005cdc <HAL_GPIO_DeInit+0x214>)
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005bba:	4b48      	ldr	r3, [pc, #288]	@ (8005cdc <HAL_GPIO_DeInit+0x214>)
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	4946      	ldr	r1, [pc, #280]	@ (8005cdc <HAL_GPIO_DeInit+0x214>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005bc8:	4b44      	ldr	r3, [pc, #272]	@ (8005cdc <HAL_GPIO_DeInit+0x214>)
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	43db      	mvns	r3, r3
 8005bd0:	4942      	ldr	r1, [pc, #264]	@ (8005cdc <HAL_GPIO_DeInit+0x214>)
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005bd6:	4b41      	ldr	r3, [pc, #260]	@ (8005cdc <HAL_GPIO_DeInit+0x214>)
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	493f      	ldr	r1, [pc, #252]	@ (8005cdc <HAL_GPIO_DeInit+0x214>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	220f      	movs	r2, #15
 8005bee:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005bf4:	4a2e      	ldr	r2, [pc, #184]	@ (8005cb0 <HAL_GPIO_DeInit+0x1e8>)
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	089b      	lsrs	r3, r3, #2
 8005bfa:	3302      	adds	r3, #2
 8005bfc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	43da      	mvns	r2, r3
 8005c04:	482a      	ldr	r0, [pc, #168]	@ (8005cb0 <HAL_GPIO_DeInit+0x1e8>)
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	089b      	lsrs	r3, r3, #2
 8005c0a:	400a      	ands	r2, r1
 8005c0c:	3302      	adds	r3, #2
 8005c0e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	2103      	movs	r1, #3
 8005c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c20:	43db      	mvns	r3, r3
 8005c22:	401a      	ands	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	08da      	lsrs	r2, r3, #3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3208      	adds	r2, #8
 8005c30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	220f      	movs	r2, #15
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	43db      	mvns	r3, r3
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	08d2      	lsrs	r2, r2, #3
 8005c48:	4019      	ands	r1, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3208      	adds	r2, #8
 8005c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	2103      	movs	r1, #3
 8005c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c60:	43db      	mvns	r3, r3
 8005c62:	401a      	ands	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	fa01 f303 	lsl.w	r3, r1, r3
 8005c74:	43db      	mvns	r3, r3
 8005c76:	401a      	ands	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	2103      	movs	r1, #3
 8005c86:	fa01 f303 	lsl.w	r3, r1, r3
 8005c8a:	43db      	mvns	r3, r3
 8005c8c:	401a      	ands	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	3301      	adds	r3, #1
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	2b0f      	cmp	r3, #15
 8005c9c:	f67f af22 	bls.w	8005ae4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005ca0:	bf00      	nop
 8005ca2:	bf00      	nop
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40013800 	.word	0x40013800
 8005cb4:	40020000 	.word	0x40020000
 8005cb8:	40020400 	.word	0x40020400
 8005cbc:	40020800 	.word	0x40020800
 8005cc0:	40020c00 	.word	0x40020c00
 8005cc4:	40021000 	.word	0x40021000
 8005cc8:	40021400 	.word	0x40021400
 8005ccc:	40021800 	.word	0x40021800
 8005cd0:	40021c00 	.word	0x40021c00
 8005cd4:	40022000 	.word	0x40022000
 8005cd8:	40022400 	.word	0x40022400
 8005cdc:	40013c00 	.word	0x40013c00

08005ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	807b      	strh	r3, [r7, #2]
 8005cec:	4613      	mov	r3, r2
 8005cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cf0:	787b      	ldrb	r3, [r7, #1]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cf6:	887a      	ldrh	r2, [r7, #2]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005cfc:	e003      	b.n	8005d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005cfe:	887b      	ldrh	r3, [r7, #2]
 8005d00:	041a      	lsls	r2, r3, #16
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	619a      	str	r2, [r3, #24]
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b085      	sub	sp, #20
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d24:	887a      	ldrh	r2, [r7, #2]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	041a      	lsls	r2, r3, #16
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	43d9      	mvns	r1, r3
 8005d30:	887b      	ldrh	r3, [r7, #2]
 8005d32:	400b      	ands	r3, r1
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	619a      	str	r2, [r3, #24]
}
 8005d3a:	bf00      	nop
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
	...

08005d48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005d52:	4b08      	ldr	r3, [pc, #32]	@ (8005d74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	88fb      	ldrh	r3, [r7, #6]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d006      	beq.n	8005d6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d5e:	4a05      	ldr	r2, [pc, #20]	@ (8005d74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d64:	88fb      	ldrh	r3, [r7, #6]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fc fbbe 	bl	80024e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d6c:	bf00      	nop
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	40013c00 	.word	0x40013c00

08005d78 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005d88:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005d98:	b590      	push	{r4, r7, lr}
 8005d9a:	b08d      	sub	sp, #52	@ 0x34
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f006 f915 	bl	800bfde <USB_GetMode>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f040 84b9 	bne.w	800672e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f006 f879 	bl	800beb8 <USB_ReadInterrupts>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 84af 	beq.w	800672c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	0a1b      	lsrs	r3, r3, #8
 8005dd8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f006 f866 	bl	800beb8 <USB_ReadInterrupts>
 8005dec:	4603      	mov	r3, r0
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d107      	bne.n	8005e06 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695a      	ldr	r2, [r3, #20]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f002 0202 	and.w	r2, r2, #2
 8005e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f006 f854 	bl	800beb8 <USB_ReadInterrupts>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f003 0310 	and.w	r3, r3, #16
 8005e16:	2b10      	cmp	r3, #16
 8005e18:	d161      	bne.n	8005ede <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	699a      	ldr	r2, [r3, #24]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0210 	bic.w	r2, r2, #16
 8005e28:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	f003 020f 	and.w	r2, r3, #15
 8005e36:	4613      	mov	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	4413      	add	r3, r2
 8005e46:	3304      	adds	r3, #4
 8005e48:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005e50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e54:	d124      	bne.n	8005ea0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d035      	beq.n	8005ece <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	091b      	lsrs	r3, r3, #4
 8005e6a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	6a38      	ldr	r0, [r7, #32]
 8005e76:	f005 fecd 	bl	800bc14 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	091b      	lsrs	r3, r3, #4
 8005e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e86:	441a      	add	r2, r3
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	695a      	ldr	r2, [r3, #20]
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	091b      	lsrs	r3, r3, #4
 8005e94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e98:	441a      	add	r2, r3
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	615a      	str	r2, [r3, #20]
 8005e9e:	e016      	b.n	8005ece <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005ea6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005eaa:	d110      	bne.n	8005ece <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005eb2:	2208      	movs	r2, #8
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	6a38      	ldr	r0, [r7, #32]
 8005eb8:	f005 feac 	bl	800bc14 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	695a      	ldr	r2, [r3, #20]
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	091b      	lsrs	r3, r3, #4
 8005ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ec8:	441a      	add	r2, r3
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	699a      	ldr	r2, [r3, #24]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f042 0210 	orr.w	r2, r2, #16
 8005edc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f005 ffe8 	bl	800beb8 <USB_ReadInterrupts>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005eee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005ef2:	f040 80a7 	bne.w	8006044 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f005 ffed 	bl	800bede <USB_ReadDevAllOutEpInterrupt>
 8005f04:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005f06:	e099      	b.n	800603c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 808e 	beq.w	8006030 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f006 f811 	bl	800bf46 <USB_ReadDevOutEPInterrupt>
 8005f24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00c      	beq.n	8005f4a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	2301      	movs	r3, #1
 8005f40:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005f42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fe6f 	bl	8006c28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f003 0308 	and.w	r3, r3, #8
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00c      	beq.n	8005f6e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f60:	461a      	mov	r2, r3
 8005f62:	2308      	movs	r3, #8
 8005f64:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005f66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 ff45 	bl	8006df8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f003 0310 	and.w	r3, r3, #16
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d008      	beq.n	8005f8a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f84:	461a      	mov	r2, r3
 8005f86:	2310      	movs	r3, #16
 8005f88:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d030      	beq.n	8005ff6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f9c:	2b80      	cmp	r3, #128	@ 0x80
 8005f9e:	d109      	bne.n	8005fb4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005fb2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	78db      	ldrb	r3, [r3, #3]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d108      	bne.n	8005fe4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f00d fd0a 	bl	80139f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f003 0320 	and.w	r3, r3, #32
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d008      	beq.n	8006012 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800600c:	461a      	mov	r2, r3
 800600e:	2320      	movs	r3, #32
 8006010:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d009      	beq.n	8006030 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800601c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006028:	461a      	mov	r2, r3
 800602a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800602e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006032:	3301      	adds	r3, #1
 8006034:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006038:	085b      	lsrs	r3, r3, #1
 800603a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800603c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603e:	2b00      	cmp	r3, #0
 8006040:	f47f af62 	bne.w	8005f08 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4618      	mov	r0, r3
 800604a:	f005 ff35 	bl	800beb8 <USB_ReadInterrupts>
 800604e:	4603      	mov	r3, r0
 8006050:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006054:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006058:	f040 80db 	bne.w	8006212 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4618      	mov	r0, r3
 8006062:	f005 ff56 	bl	800bf12 <USB_ReadDevAllInEpInterrupt>
 8006066:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800606c:	e0cd      	b.n	800620a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800606e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 80c2 	beq.w	80061fe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	4611      	mov	r1, r2
 8006084:	4618      	mov	r0, r3
 8006086:	f005 ff7c 	bl	800bf82 <USB_ReadDevInEPInterrupt>
 800608a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b00      	cmp	r3, #0
 8006094:	d057      	beq.n	8006146 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	f003 030f 	and.w	r3, r3, #15
 800609c:	2201      	movs	r2, #1
 800609e:	fa02 f303 	lsl.w	r3, r2, r3
 80060a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	43db      	mvns	r3, r3
 80060b0:	69f9      	ldr	r1, [r7, #28]
 80060b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060b6:	4013      	ands	r3, r2
 80060b8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060c6:	461a      	mov	r2, r3
 80060c8:	2301      	movs	r3, #1
 80060ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	799b      	ldrb	r3, [r3, #6]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d132      	bne.n	800613a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d8:	4613      	mov	r3, r2
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	4413      	add	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	440b      	add	r3, r1
 80060e2:	3320      	adds	r3, #32
 80060e4:	6819      	ldr	r1, [r3, #0]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ea:	4613      	mov	r3, r2
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4403      	add	r3, r0
 80060f4:	331c      	adds	r3, #28
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4419      	add	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060fe:	4613      	mov	r3, r2
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4403      	add	r3, r0
 8006108:	3320      	adds	r3, #32
 800610a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800610c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610e:	2b00      	cmp	r3, #0
 8006110:	d113      	bne.n	800613a <HAL_PCD_IRQHandler+0x3a2>
 8006112:	6879      	ldr	r1, [r7, #4]
 8006114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006116:	4613      	mov	r3, r2
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	4413      	add	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	440b      	add	r3, r1
 8006120:	3324      	adds	r3, #36	@ 0x24
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d108      	bne.n	800613a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6818      	ldr	r0, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006132:	461a      	mov	r2, r3
 8006134:	2101      	movs	r1, #1
 8006136:	f005 ff85 	bl	800c044 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	b2db      	uxtb	r3, r3
 800613e:	4619      	mov	r1, r3
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f00d fbd5 	bl	80138f0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f003 0308 	and.w	r3, r3, #8
 800614c:	2b00      	cmp	r3, #0
 800614e:	d008      	beq.n	8006162 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800615c:	461a      	mov	r2, r3
 800615e:	2308      	movs	r3, #8
 8006160:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f003 0310 	and.w	r3, r3, #16
 8006168:	2b00      	cmp	r3, #0
 800616a:	d008      	beq.n	800617e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800616c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006178:	461a      	mov	r2, r3
 800617a:	2310      	movs	r3, #16
 800617c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006184:	2b00      	cmp	r3, #0
 8006186:	d008      	beq.n	800619a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006194:	461a      	mov	r2, r3
 8006196:	2340      	movs	r3, #64	@ 0x40
 8006198:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d023      	beq.n	80061ec <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80061a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061a6:	6a38      	ldr	r0, [r7, #32]
 80061a8:	f005 f8c8 	bl	800b33c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80061ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ae:	4613      	mov	r3, r2
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	3310      	adds	r3, #16
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	4413      	add	r3, r2
 80061bc:	3304      	adds	r3, #4
 80061be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	78db      	ldrb	r3, [r3, #3]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d108      	bne.n	80061da <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2200      	movs	r2, #0
 80061cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80061ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f00d fc21 	bl	8013a1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e6:	461a      	mov	r2, r3
 80061e8:	2302      	movs	r3, #2
 80061ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80061f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fc88 	bl	8006b0e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80061fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006200:	3301      	adds	r3, #1
 8006202:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006206:	085b      	lsrs	r3, r3, #1
 8006208:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800620a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620c:	2b00      	cmp	r3, #0
 800620e:	f47f af2e 	bne.w	800606e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4618      	mov	r0, r3
 8006218:	f005 fe4e 	bl	800beb8 <USB_ReadInterrupts>
 800621c:	4603      	mov	r3, r0
 800621e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006222:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006226:	d122      	bne.n	800626e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	69fa      	ldr	r2, [r7, #28]
 8006232:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006236:	f023 0301 	bic.w	r3, r3, #1
 800623a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006242:	2b01      	cmp	r3, #1
 8006244:	d108      	bne.n	8006258 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800624e:	2100      	movs	r1, #0
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f00d fd03 	bl	8013c5c <HAL_PCDEx_LPM_Callback>
 8006256:	e002      	b.n	800625e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f00d fbbf 	bl	80139dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	695a      	ldr	r2, [r3, #20]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800626c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f005 fe20 	bl	800beb8 <USB_ReadInterrupts>
 8006278:	4603      	mov	r3, r0
 800627a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800627e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006282:	d112      	bne.n	80062aa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b01      	cmp	r3, #1
 8006292:	d102      	bne.n	800629a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f00d fb7b 	bl	8013990 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695a      	ldr	r2, [r3, #20]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80062a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f005 fe02 	bl	800beb8 <USB_ReadInterrupts>
 80062b4:	4603      	mov	r3, r0
 80062b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062be:	d121      	bne.n	8006304 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	695a      	ldr	r2, [r3, #20]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80062ce:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d111      	bne.n	80062fe <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e8:	089b      	lsrs	r3, r3, #2
 80062ea:	f003 020f 	and.w	r2, r3, #15
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80062f4:	2101      	movs	r1, #1
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f00d fcb0 	bl	8013c5c <HAL_PCDEx_LPM_Callback>
 80062fc:	e002      	b.n	8006304 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f00d fb46 	bl	8013990 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4618      	mov	r0, r3
 800630a:	f005 fdd5 	bl	800beb8 <USB_ReadInterrupts>
 800630e:	4603      	mov	r3, r0
 8006310:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006314:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006318:	f040 80b7 	bne.w	800648a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800632a:	f023 0301 	bic.w	r3, r3, #1
 800632e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2110      	movs	r1, #16
 8006336:	4618      	mov	r0, r3
 8006338:	f005 f800 	bl	800b33c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800633c:	2300      	movs	r3, #0
 800633e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006340:	e046      	b.n	80063d0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	4413      	add	r3, r2
 800634a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800634e:	461a      	mov	r2, r3
 8006350:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006354:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006366:	0151      	lsls	r1, r2, #5
 8006368:	69fa      	ldr	r2, [r7, #28]
 800636a:	440a      	add	r2, r1
 800636c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006370:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006374:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	4413      	add	r3, r2
 800637e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006382:	461a      	mov	r2, r3
 8006384:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006388:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800638a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800639a:	0151      	lsls	r1, r2, #5
 800639c:	69fa      	ldr	r2, [r7, #28]
 800639e:	440a      	add	r2, r1
 80063a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80063a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80063aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063ba:	0151      	lsls	r1, r2, #5
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	440a      	add	r2, r1
 80063c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80063c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063cc:	3301      	adds	r3, #1
 80063ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	791b      	ldrb	r3, [r3, #4]
 80063d4:	461a      	mov	r2, r3
 80063d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d8:	4293      	cmp	r3, r2
 80063da:	d3b2      	bcc.n	8006342 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	69fa      	ldr	r2, [r7, #28]
 80063e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063ea:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80063ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	7bdb      	ldrb	r3, [r3, #15]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d016      	beq.n	8006426 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006408:	f043 030b 	orr.w	r3, r3, #11
 800640c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006418:	69fa      	ldr	r2, [r7, #28]
 800641a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800641e:	f043 030b 	orr.w	r3, r3, #11
 8006422:	6453      	str	r3, [r2, #68]	@ 0x44
 8006424:	e015      	b.n	8006452 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800642c:	695a      	ldr	r2, [r3, #20]
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006434:	4619      	mov	r1, r3
 8006436:	f242 032b 	movw	r3, #8235	@ 0x202b
 800643a:	4313      	orrs	r3, r2
 800643c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	69fa      	ldr	r2, [r7, #28]
 8006448:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800644c:	f043 030b 	orr.w	r3, r3, #11
 8006450:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69fa      	ldr	r2, [r7, #28]
 800645c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006460:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006464:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006474:	461a      	mov	r2, r3
 8006476:	f005 fde5 	bl	800c044 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	695a      	ldr	r2, [r3, #20]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006488:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4618      	mov	r0, r3
 8006490:	f005 fd12 	bl	800beb8 <USB_ReadInterrupts>
 8006494:	4603      	mov	r3, r0
 8006496:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800649a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800649e:	d123      	bne.n	80064e8 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f005 fda9 	bl	800bffc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f004 ff76 	bl	800b3a0 <USB_GetDevSpeed>
 80064b4:	4603      	mov	r3, r0
 80064b6:	461a      	mov	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681c      	ldr	r4, [r3, #0]
 80064c0:	f001 f9e0 	bl	8007884 <HAL_RCC_GetHCLKFreq>
 80064c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80064ca:	461a      	mov	r2, r3
 80064cc:	4620      	mov	r0, r4
 80064ce:	f004 fe93 	bl	800b1f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f00d fa34 	bl	8013940 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	695a      	ldr	r2, [r3, #20]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80064e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f005 fce3 	bl	800beb8 <USB_ReadInterrupts>
 80064f2:	4603      	mov	r3, r0
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d10a      	bne.n	8006512 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f00d fa11 	bl	8013924 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695a      	ldr	r2, [r3, #20]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f002 0208 	and.w	r2, r2, #8
 8006510:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4618      	mov	r0, r3
 8006518:	f005 fcce 	bl	800beb8 <USB_ReadInterrupts>
 800651c:	4603      	mov	r3, r0
 800651e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006522:	2b80      	cmp	r3, #128	@ 0x80
 8006524:	d123      	bne.n	800656e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006532:	2301      	movs	r3, #1
 8006534:	627b      	str	r3, [r7, #36]	@ 0x24
 8006536:	e014      	b.n	8006562 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800653c:	4613      	mov	r3, r2
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	4413      	add	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	440b      	add	r3, r1
 8006546:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d105      	bne.n	800655c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006552:	b2db      	uxtb	r3, r3
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 faa8 	bl	8006aac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800655c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655e:	3301      	adds	r3, #1
 8006560:	627b      	str	r3, [r7, #36]	@ 0x24
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	791b      	ldrb	r3, [r3, #4]
 8006566:	461a      	mov	r2, r3
 8006568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656a:	4293      	cmp	r3, r2
 800656c:	d3e4      	bcc.n	8006538 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4618      	mov	r0, r3
 8006574:	f005 fca0 	bl	800beb8 <USB_ReadInterrupts>
 8006578:	4603      	mov	r3, r0
 800657a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800657e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006582:	d13c      	bne.n	80065fe <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006584:	2301      	movs	r3, #1
 8006586:	627b      	str	r3, [r7, #36]	@ 0x24
 8006588:	e02b      	b.n	80065e2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800659e:	4613      	mov	r3, r2
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	3318      	adds	r3, #24
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d115      	bne.n	80065dc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80065b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	da12      	bge.n	80065dc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ba:	4613      	mov	r3, r2
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	4413      	add	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	440b      	add	r3, r1
 80065c4:	3317      	adds	r3, #23
 80065c6:	2201      	movs	r2, #1
 80065c8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fa68 	bl	8006aac <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80065dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065de:	3301      	adds	r3, #1
 80065e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	791b      	ldrb	r3, [r3, #4]
 80065e6:	461a      	mov	r2, r3
 80065e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d3cd      	bcc.n	800658a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	695a      	ldr	r2, [r3, #20]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80065fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4618      	mov	r0, r3
 8006604:	f005 fc58 	bl	800beb8 <USB_ReadInterrupts>
 8006608:	4603      	mov	r3, r0
 800660a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800660e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006612:	d156      	bne.n	80066c2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006614:	2301      	movs	r3, #1
 8006616:	627b      	str	r3, [r7, #36]	@ 0x24
 8006618:	e045      	b.n	80066a6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800661a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800662a:	6879      	ldr	r1, [r7, #4]
 800662c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800662e:	4613      	mov	r3, r2
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	4413      	add	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	440b      	add	r3, r1
 8006638:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d12e      	bne.n	80066a0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006642:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006644:	2b00      	cmp	r3, #0
 8006646:	da2b      	bge.n	80066a0 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	0c1a      	lsrs	r2, r3, #16
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006652:	4053      	eors	r3, r2
 8006654:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006658:	2b00      	cmp	r3, #0
 800665a:	d121      	bne.n	80066a0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006660:	4613      	mov	r3, r2
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	4413      	add	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	440b      	add	r3, r1
 800666a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800666e:	2201      	movs	r2, #1
 8006670:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10a      	bne.n	80066a0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	69fa      	ldr	r2, [r7, #28]
 8006694:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006698:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800669c:	6053      	str	r3, [r2, #4]
            break;
 800669e:	e008      	b.n	80066b2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a2:	3301      	adds	r3, #1
 80066a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	791b      	ldrb	r3, [r3, #4]
 80066aa:	461a      	mov	r2, r3
 80066ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d3b3      	bcc.n	800661a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695a      	ldr	r2, [r3, #20]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80066c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f005 fbf6 	bl	800beb8 <USB_ReadInterrupts>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80066d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066d6:	d10a      	bne.n	80066ee <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f00d f9b1 	bl	8013a40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	695a      	ldr	r2, [r3, #20]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80066ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f005 fbe0 	bl	800beb8 <USB_ReadInterrupts>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f003 0304 	and.w	r3, r3, #4
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d115      	bne.n	800672e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f00d f9a1 	bl	8013a5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6859      	ldr	r1, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]
 800672a:	e000      	b.n	800672e <HAL_PCD_IRQHandler+0x996>
      return;
 800672c:	bf00      	nop
    }
  }
}
 800672e:	3734      	adds	r7, #52	@ 0x34
 8006730:	46bd      	mov	sp, r7
 8006732:	bd90      	pop	{r4, r7, pc}

08006734 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006746:	2b01      	cmp	r3, #1
 8006748:	d101      	bne.n	800674e <HAL_PCD_SetAddress+0x1a>
 800674a:	2302      	movs	r3, #2
 800674c:	e012      	b.n	8006774 <HAL_PCD_SetAddress+0x40>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	78fa      	ldrb	r2, [r7, #3]
 800675a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	78fa      	ldrb	r2, [r7, #3]
 8006762:	4611      	mov	r1, r2
 8006764:	4618      	mov	r0, r3
 8006766:	f005 fb81 	bl	800be6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	4608      	mov	r0, r1
 8006786:	4611      	mov	r1, r2
 8006788:	461a      	mov	r2, r3
 800678a:	4603      	mov	r3, r0
 800678c:	70fb      	strb	r3, [r7, #3]
 800678e:	460b      	mov	r3, r1
 8006790:	803b      	strh	r3, [r7, #0]
 8006792:	4613      	mov	r3, r2
 8006794:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800679a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	da0f      	bge.n	80067c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067a2:	78fb      	ldrb	r3, [r7, #3]
 80067a4:	f003 020f 	and.w	r2, r3, #15
 80067a8:	4613      	mov	r3, r2
 80067aa:	00db      	lsls	r3, r3, #3
 80067ac:	4413      	add	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	3310      	adds	r3, #16
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	4413      	add	r3, r2
 80067b6:	3304      	adds	r3, #4
 80067b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	705a      	strb	r2, [r3, #1]
 80067c0:	e00f      	b.n	80067e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067c2:	78fb      	ldrb	r3, [r7, #3]
 80067c4:	f003 020f 	and.w	r2, r3, #15
 80067c8:	4613      	mov	r3, r2
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	4413      	add	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	4413      	add	r3, r2
 80067d8:	3304      	adds	r3, #4
 80067da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80067e2:	78fb      	ldrb	r3, [r7, #3]
 80067e4:	f003 030f 	and.w	r3, r3, #15
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80067ee:	883b      	ldrh	r3, [r7, #0]
 80067f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	78ba      	ldrb	r2, [r7, #2]
 80067fc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	785b      	ldrb	r3, [r3, #1]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d004      	beq.n	8006810 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006810:	78bb      	ldrb	r3, [r7, #2]
 8006812:	2b02      	cmp	r3, #2
 8006814:	d102      	bne.n	800681c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006822:	2b01      	cmp	r3, #1
 8006824:	d101      	bne.n	800682a <HAL_PCD_EP_Open+0xae>
 8006826:	2302      	movs	r3, #2
 8006828:	e00e      	b.n	8006848 <HAL_PCD_EP_Open+0xcc>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68f9      	ldr	r1, [r7, #12]
 8006838:	4618      	mov	r0, r3
 800683a:	f004 fdd7 	bl	800b3ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006846:	7afb      	ldrb	r3, [r7, #11]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	607a      	str	r2, [r7, #4]
 800685a:	603b      	str	r3, [r7, #0]
 800685c:	460b      	mov	r3, r1
 800685e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006860:	7afb      	ldrb	r3, [r7, #11]
 8006862:	f003 020f 	and.w	r2, r3, #15
 8006866:	4613      	mov	r3, r2
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	4413      	add	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4413      	add	r3, r2
 8006876:	3304      	adds	r3, #4
 8006878:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	2200      	movs	r2, #0
 800688a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	2200      	movs	r2, #0
 8006890:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006892:	7afb      	ldrb	r3, [r7, #11]
 8006894:	f003 030f 	and.w	r3, r3, #15
 8006898:	b2da      	uxtb	r2, r3
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	799b      	ldrb	r3, [r3, #6]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d102      	bne.n	80068ac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6818      	ldr	r0, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	799b      	ldrb	r3, [r3, #6]
 80068b4:	461a      	mov	r2, r3
 80068b6:	6979      	ldr	r1, [r7, #20]
 80068b8:	f004 fe20 	bl	800b4fc <USB_EPStartXfer>

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b086      	sub	sp, #24
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	607a      	str	r2, [r7, #4]
 80068d0:	603b      	str	r3, [r7, #0]
 80068d2:	460b      	mov	r3, r1
 80068d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068d6:	7afb      	ldrb	r3, [r7, #11]
 80068d8:	f003 020f 	and.w	r2, r3, #15
 80068dc:	4613      	mov	r3, r2
 80068de:	00db      	lsls	r3, r3, #3
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	3310      	adds	r3, #16
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	3304      	adds	r3, #4
 80068ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2200      	movs	r2, #0
 80068fe:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	2201      	movs	r2, #1
 8006904:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006906:	7afb      	ldrb	r3, [r7, #11]
 8006908:	f003 030f 	and.w	r3, r3, #15
 800690c:	b2da      	uxtb	r2, r3
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	799b      	ldrb	r3, [r3, #6]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d102      	bne.n	8006920 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6818      	ldr	r0, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	799b      	ldrb	r3, [r3, #6]
 8006928:	461a      	mov	r2, r3
 800692a:	6979      	ldr	r1, [r7, #20]
 800692c:	f004 fde6 	bl	800b4fc <USB_EPStartXfer>

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	460b      	mov	r3, r1
 8006944:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006946:	78fb      	ldrb	r3, [r7, #3]
 8006948:	f003 030f 	and.w	r3, r3, #15
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	7912      	ldrb	r2, [r2, #4]
 8006950:	4293      	cmp	r3, r2
 8006952:	d901      	bls.n	8006958 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e04f      	b.n	80069f8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800695c:	2b00      	cmp	r3, #0
 800695e:	da0f      	bge.n	8006980 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	f003 020f 	and.w	r2, r3, #15
 8006966:	4613      	mov	r3, r2
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	3310      	adds	r3, #16
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	4413      	add	r3, r2
 8006974:	3304      	adds	r3, #4
 8006976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	705a      	strb	r2, [r3, #1]
 800697e:	e00d      	b.n	800699c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006980:	78fa      	ldrb	r2, [r7, #3]
 8006982:	4613      	mov	r3, r2
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	4413      	add	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	4413      	add	r3, r2
 8006992:	3304      	adds	r3, #4
 8006994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2201      	movs	r2, #1
 80069a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069a2:	78fb      	ldrb	r3, [r7, #3]
 80069a4:	f003 030f 	and.w	r3, r3, #15
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_PCD_EP_SetStall+0x82>
 80069b8:	2302      	movs	r3, #2
 80069ba:	e01d      	b.n	80069f8 <HAL_PCD_EP_SetStall+0xbe>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68f9      	ldr	r1, [r7, #12]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f005 f97a 	bl	800bcc4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	f003 030f 	and.w	r3, r3, #15
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d109      	bne.n	80069ee <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	7999      	ldrb	r1, [r3, #6]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80069e8:	461a      	mov	r2, r3
 80069ea:	f005 fb2b 	bl	800c044 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	f003 030f 	and.w	r3, r3, #15
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	7912      	ldrb	r2, [r2, #4]
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d901      	bls.n	8006a1e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e042      	b.n	8006aa4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	da0f      	bge.n	8006a46 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a26:	78fb      	ldrb	r3, [r7, #3]
 8006a28:	f003 020f 	and.w	r2, r3, #15
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	4413      	add	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	3310      	adds	r3, #16
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	4413      	add	r3, r2
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2201      	movs	r2, #1
 8006a42:	705a      	strb	r2, [r3, #1]
 8006a44:	e00f      	b.n	8006a66 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a46:	78fb      	ldrb	r3, [r7, #3]
 8006a48:	f003 020f 	and.w	r2, r3, #15
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a6c:	78fb      	ldrb	r3, [r7, #3]
 8006a6e:	f003 030f 	and.w	r3, r3, #15
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d101      	bne.n	8006a86 <HAL_PCD_EP_ClrStall+0x86>
 8006a82:	2302      	movs	r3, #2
 8006a84:	e00e      	b.n	8006aa4 <HAL_PCD_EP_ClrStall+0xa4>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68f9      	ldr	r1, [r7, #12]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f005 f983 	bl	800bda0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006ab8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	da0c      	bge.n	8006ada <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ac0:	78fb      	ldrb	r3, [r7, #3]
 8006ac2:	f003 020f 	and.w	r2, r3, #15
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	4413      	add	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	3310      	adds	r3, #16
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	e00c      	b.n	8006af4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	f003 020f 	and.w	r2, r3, #15
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	4413      	add	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	4413      	add	r3, r2
 8006af0:	3304      	adds	r3, #4
 8006af2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68f9      	ldr	r1, [r7, #12]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f004 ffa2 	bl	800ba44 <USB_EPStopXfer>
 8006b00:	4603      	mov	r3, r0
 8006b02:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006b04:	7afb      	ldrb	r3, [r7, #11]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b08a      	sub	sp, #40	@ 0x28
 8006b12:	af02      	add	r7, sp, #8
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	4613      	mov	r3, r2
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	4413      	add	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	3310      	adds	r3, #16
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	4413      	add	r3, r2
 8006b32:	3304      	adds	r3, #4
 8006b34:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	695a      	ldr	r2, [r3, #20]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d901      	bls.n	8006b46 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e06b      	b.n	8006c1e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	691a      	ldr	r2, [r3, #16]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	69fa      	ldr	r2, [r7, #28]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d902      	bls.n	8006b62 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	3303      	adds	r3, #3
 8006b66:	089b      	lsrs	r3, r3, #2
 8006b68:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b6a:	e02a      	b.n	8006bc2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	691a      	ldr	r2, [r3, #16]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	69fa      	ldr	r2, [r7, #28]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d902      	bls.n	8006b88 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	3303      	adds	r3, #3
 8006b8c:	089b      	lsrs	r3, r3, #2
 8006b8e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68d9      	ldr	r1, [r3, #12]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	6978      	ldr	r0, [r7, #20]
 8006ba6:	f004 fff7 	bl	800bb98 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	441a      	add	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	695a      	ldr	r2, [r3, #20]
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	441a      	add	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d809      	bhi.n	8006bec <PCD_WriteEmptyTxFifo+0xde>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	695a      	ldr	r2, [r3, #20]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d203      	bcs.n	8006bec <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1bf      	bne.n	8006b6c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	691a      	ldr	r2, [r3, #16]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d811      	bhi.n	8006c1c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	f003 030f 	and.w	r3, r3, #15
 8006bfe:	2201      	movs	r2, #1
 8006c00:	fa02 f303 	lsl.w	r3, r2, r3
 8006c04:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	43db      	mvns	r3, r3
 8006c12:	6939      	ldr	r1, [r7, #16]
 8006c14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c18:	4013      	ands	r3, r2
 8006c1a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3720      	adds	r7, #32
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b088      	sub	sp, #32
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	333c      	adds	r3, #60	@ 0x3c
 8006c40:	3304      	adds	r3, #4
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	799b      	ldrb	r3, [r3, #6]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d17b      	bne.n	8006d56 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f003 0308 	and.w	r3, r3, #8
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d015      	beq.n	8006c94 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	4a61      	ldr	r2, [pc, #388]	@ (8006df0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	f240 80b9 	bls.w	8006de4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 80b3 	beq.w	8006de4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c90:	6093      	str	r3, [r2, #8]
 8006c92:	e0a7      	b.n	8006de4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f003 0320 	and.w	r3, r3, #32
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d009      	beq.n	8006cb2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	015a      	lsls	r2, r3, #5
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006caa:	461a      	mov	r2, r3
 8006cac:	2320      	movs	r3, #32
 8006cae:	6093      	str	r3, [r2, #8]
 8006cb0:	e098      	b.n	8006de4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f040 8093 	bne.w	8006de4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8006df0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d90f      	bls.n	8006ce6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00a      	beq.n	8006ce6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cdc:	461a      	mov	r2, r3
 8006cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ce2:	6093      	str	r3, [r2, #8]
 8006ce4:	e07e      	b.n	8006de4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	4413      	add	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a1a      	ldr	r2, [r3, #32]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	0159      	lsls	r1, r3, #5
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	440b      	add	r3, r1
 8006d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d12:	1ad2      	subs	r2, r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d114      	bne.n	8006d48 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d109      	bne.n	8006d3a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6818      	ldr	r0, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006d30:	461a      	mov	r2, r3
 8006d32:	2101      	movs	r1, #1
 8006d34:	f005 f986 	bl	800c044 <USB_EP0_OutStart>
 8006d38:	e006      	b.n	8006d48 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	441a      	add	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f00c fdb3 	bl	80138ba <HAL_PCD_DataOutStageCallback>
 8006d54:	e046      	b.n	8006de4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	4a26      	ldr	r2, [pc, #152]	@ (8006df4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d124      	bne.n	8006da8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00a      	beq.n	8006d7e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d74:	461a      	mov	r2, r3
 8006d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d7a:	6093      	str	r3, [r2, #8]
 8006d7c:	e032      	b.n	8006de4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f003 0320 	and.w	r3, r3, #32
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d008      	beq.n	8006d9a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d94:	461a      	mov	r2, r3
 8006d96:	2320      	movs	r3, #32
 8006d98:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f00c fd8a 	bl	80138ba <HAL_PCD_DataOutStageCallback>
 8006da6:	e01d      	b.n	8006de4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d114      	bne.n	8006dd8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	4613      	mov	r3, r2
 8006db4:	00db      	lsls	r3, r3, #3
 8006db6:	4413      	add	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	440b      	add	r3, r1
 8006dbc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d108      	bne.n	8006dd8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	f005 f936 	bl	800c044 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f00c fd6b 	bl	80138ba <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3720      	adds	r7, #32
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	4f54300a 	.word	0x4f54300a
 8006df4:	4f54310a 	.word	0x4f54310a

08006df8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	333c      	adds	r3, #60	@ 0x3c
 8006e10:	3304      	adds	r3, #4
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4a15      	ldr	r2, [pc, #84]	@ (8006e80 <PCD_EP_OutSetupPacket_int+0x88>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d90e      	bls.n	8006e4c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d009      	beq.n	8006e4c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e44:	461a      	mov	r2, r3
 8006e46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e4a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f00c fd22 	bl	8013896 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4a0a      	ldr	r2, [pc, #40]	@ (8006e80 <PCD_EP_OutSetupPacket_int+0x88>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d90c      	bls.n	8006e74 <PCD_EP_OutSetupPacket_int+0x7c>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	799b      	ldrb	r3, [r3, #6]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d108      	bne.n	8006e74 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	2101      	movs	r1, #1
 8006e70:	f005 f8e8 	bl	800c044 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	4f54300a 	.word	0x4f54300a

08006e84 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006e84:	b480      	push	{r7}
 8006e86:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e88:	4b05      	ldr	r3, [pc, #20]	@ (8006ea0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a04      	ldr	r2, [pc, #16]	@ (8006ea0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e92:	6013      	str	r3, [r2, #0]
}
 8006e94:	bf00      	nop
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	40007000 	.word	0x40007000

08006ea4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006eae:	4b23      	ldr	r3, [pc, #140]	@ (8006f3c <HAL_PWREx_EnableOverDrive+0x98>)
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb2:	4a22      	ldr	r2, [pc, #136]	@ (8006f3c <HAL_PWREx_EnableOverDrive+0x98>)
 8006eb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006eba:	4b20      	ldr	r3, [pc, #128]	@ (8006f3c <HAL_PWREx_EnableOverDrive+0x98>)
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ec2:	603b      	str	r3, [r7, #0]
 8006ec4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8006f40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a1d      	ldr	r2, [pc, #116]	@ (8006f40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ed0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ed2:	f7fd fa79 	bl	80043c8 <HAL_GetTick>
 8006ed6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006ed8:	e009      	b.n	8006eee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006eda:	f7fd fa75 	bl	80043c8 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ee8:	d901      	bls.n	8006eee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e022      	b.n	8006f34 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006eee:	4b14      	ldr	r3, [pc, #80]	@ (8006f40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ef6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006efa:	d1ee      	bne.n	8006eda <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006efc:	4b10      	ldr	r3, [pc, #64]	@ (8006f40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a0f      	ldr	r2, [pc, #60]	@ (8006f40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f08:	f7fd fa5e 	bl	80043c8 <HAL_GetTick>
 8006f0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f0e:	e009      	b.n	8006f24 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f10:	f7fd fa5a 	bl	80043c8 <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f1e:	d901      	bls.n	8006f24 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e007      	b.n	8006f34 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f24:	4b06      	ldr	r3, [pc, #24]	@ (8006f40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f30:	d1ee      	bne.n	8006f10 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	40007000 	.word	0x40007000

08006f44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e29b      	b.n	8007492 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 8087 	beq.w	8007076 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f68:	4b96      	ldr	r3, [pc, #600]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f003 030c 	and.w	r3, r3, #12
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	d00c      	beq.n	8006f8e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f74:	4b93      	ldr	r3, [pc, #588]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f003 030c 	and.w	r3, r3, #12
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d112      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x62>
 8006f80:	4b90      	ldr	r3, [pc, #576]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f8c:	d10b      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f8e:	4b8d      	ldr	r3, [pc, #564]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d06c      	beq.n	8007074 <HAL_RCC_OscConfig+0x130>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d168      	bne.n	8007074 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e275      	b.n	8007492 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fae:	d106      	bne.n	8006fbe <HAL_RCC_OscConfig+0x7a>
 8006fb0:	4b84      	ldr	r3, [pc, #528]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a83      	ldr	r2, [pc, #524]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8006fb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fba:	6013      	str	r3, [r2, #0]
 8006fbc:	e02e      	b.n	800701c <HAL_RCC_OscConfig+0xd8>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10c      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x9c>
 8006fc6:	4b7f      	ldr	r3, [pc, #508]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a7e      	ldr	r2, [pc, #504]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8006fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	4b7c      	ldr	r3, [pc, #496]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a7b      	ldr	r2, [pc, #492]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8006fd8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	e01d      	b.n	800701c <HAL_RCC_OscConfig+0xd8>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006fe8:	d10c      	bne.n	8007004 <HAL_RCC_OscConfig+0xc0>
 8006fea:	4b76      	ldr	r3, [pc, #472]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a75      	ldr	r2, [pc, #468]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8006ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	4b73      	ldr	r3, [pc, #460]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a72      	ldr	r2, [pc, #456]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8006ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	e00b      	b.n	800701c <HAL_RCC_OscConfig+0xd8>
 8007004:	4b6f      	ldr	r3, [pc, #444]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a6e      	ldr	r2, [pc, #440]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 800700a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	4b6c      	ldr	r3, [pc, #432]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a6b      	ldr	r2, [pc, #428]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8007016:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800701a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d013      	beq.n	800704c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007024:	f7fd f9d0 	bl	80043c8 <HAL_GetTick>
 8007028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800702c:	f7fd f9cc 	bl	80043c8 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b64      	cmp	r3, #100	@ 0x64
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e229      	b.n	8007492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800703e:	4b61      	ldr	r3, [pc, #388]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0f0      	beq.n	800702c <HAL_RCC_OscConfig+0xe8>
 800704a:	e014      	b.n	8007076 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800704c:	f7fd f9bc 	bl	80043c8 <HAL_GetTick>
 8007050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007052:	e008      	b.n	8007066 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007054:	f7fd f9b8 	bl	80043c8 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b64      	cmp	r3, #100	@ 0x64
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e215      	b.n	8007492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007066:	4b57      	ldr	r3, [pc, #348]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1f0      	bne.n	8007054 <HAL_RCC_OscConfig+0x110>
 8007072:	e000      	b.n	8007076 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d069      	beq.n	8007156 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007082:	4b50      	ldr	r3, [pc, #320]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 030c 	and.w	r3, r3, #12
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00b      	beq.n	80070a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800708e:	4b4d      	ldr	r3, [pc, #308]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f003 030c 	and.w	r3, r3, #12
 8007096:	2b08      	cmp	r3, #8
 8007098:	d11c      	bne.n	80070d4 <HAL_RCC_OscConfig+0x190>
 800709a:	4b4a      	ldr	r3, [pc, #296]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d116      	bne.n	80070d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070a6:	4b47      	ldr	r3, [pc, #284]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d005      	beq.n	80070be <HAL_RCC_OscConfig+0x17a>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d001      	beq.n	80070be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e1e9      	b.n	8007492 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070be:	4b41      	ldr	r3, [pc, #260]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	493d      	ldr	r1, [pc, #244]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070d2:	e040      	b.n	8007156 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d023      	beq.n	8007124 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070dc:	4b39      	ldr	r3, [pc, #228]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a38      	ldr	r2, [pc, #224]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 80070e2:	f043 0301 	orr.w	r3, r3, #1
 80070e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e8:	f7fd f96e 	bl	80043c8 <HAL_GetTick>
 80070ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ee:	e008      	b.n	8007102 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070f0:	f7fd f96a 	bl	80043c8 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d901      	bls.n	8007102 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e1c7      	b.n	8007492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007102:	4b30      	ldr	r3, [pc, #192]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d0f0      	beq.n	80070f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800710e:	4b2d      	ldr	r3, [pc, #180]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	00db      	lsls	r3, r3, #3
 800711c:	4929      	ldr	r1, [pc, #164]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 800711e:	4313      	orrs	r3, r2
 8007120:	600b      	str	r3, [r1, #0]
 8007122:	e018      	b.n	8007156 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007124:	4b27      	ldr	r3, [pc, #156]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a26      	ldr	r2, [pc, #152]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 800712a:	f023 0301 	bic.w	r3, r3, #1
 800712e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007130:	f7fd f94a 	bl	80043c8 <HAL_GetTick>
 8007134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007136:	e008      	b.n	800714a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007138:	f7fd f946 	bl	80043c8 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e1a3      	b.n	8007492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800714a:	4b1e      	ldr	r3, [pc, #120]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1f0      	bne.n	8007138 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 0308 	and.w	r3, r3, #8
 800715e:	2b00      	cmp	r3, #0
 8007160:	d038      	beq.n	80071d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d019      	beq.n	800719e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800716a:	4b16      	ldr	r3, [pc, #88]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 800716c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800716e:	4a15      	ldr	r2, [pc, #84]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8007170:	f043 0301 	orr.w	r3, r3, #1
 8007174:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007176:	f7fd f927 	bl	80043c8 <HAL_GetTick>
 800717a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800717c:	e008      	b.n	8007190 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800717e:	f7fd f923 	bl	80043c8 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	2b02      	cmp	r3, #2
 800718a:	d901      	bls.n	8007190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e180      	b.n	8007492 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007190:	4b0c      	ldr	r3, [pc, #48]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 8007192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0f0      	beq.n	800717e <HAL_RCC_OscConfig+0x23a>
 800719c:	e01a      	b.n	80071d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800719e:	4b09      	ldr	r3, [pc, #36]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 80071a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071a2:	4a08      	ldr	r2, [pc, #32]	@ (80071c4 <HAL_RCC_OscConfig+0x280>)
 80071a4:	f023 0301 	bic.w	r3, r3, #1
 80071a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071aa:	f7fd f90d 	bl	80043c8 <HAL_GetTick>
 80071ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071b0:	e00a      	b.n	80071c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071b2:	f7fd f909 	bl	80043c8 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d903      	bls.n	80071c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e166      	b.n	8007492 <HAL_RCC_OscConfig+0x54e>
 80071c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071c8:	4b92      	ldr	r3, [pc, #584]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 80071ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1ee      	bne.n	80071b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0304 	and.w	r3, r3, #4
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 80a4 	beq.w	800732a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071e2:	4b8c      	ldr	r3, [pc, #560]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 80071e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10d      	bne.n	800720a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80071ee:	4b89      	ldr	r3, [pc, #548]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 80071f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f2:	4a88      	ldr	r2, [pc, #544]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 80071f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80071fa:	4b86      	ldr	r3, [pc, #536]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 80071fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007202:	60bb      	str	r3, [r7, #8]
 8007204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007206:	2301      	movs	r3, #1
 8007208:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800720a:	4b83      	ldr	r3, [pc, #524]	@ (8007418 <HAL_RCC_OscConfig+0x4d4>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007212:	2b00      	cmp	r3, #0
 8007214:	d118      	bne.n	8007248 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007216:	4b80      	ldr	r3, [pc, #512]	@ (8007418 <HAL_RCC_OscConfig+0x4d4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a7f      	ldr	r2, [pc, #508]	@ (8007418 <HAL_RCC_OscConfig+0x4d4>)
 800721c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007222:	f7fd f8d1 	bl	80043c8 <HAL_GetTick>
 8007226:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007228:	e008      	b.n	800723c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800722a:	f7fd f8cd 	bl	80043c8 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b64      	cmp	r3, #100	@ 0x64
 8007236:	d901      	bls.n	800723c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e12a      	b.n	8007492 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800723c:	4b76      	ldr	r3, [pc, #472]	@ (8007418 <HAL_RCC_OscConfig+0x4d4>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0f0      	beq.n	800722a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d106      	bne.n	800725e <HAL_RCC_OscConfig+0x31a>
 8007250:	4b70      	ldr	r3, [pc, #448]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 8007252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007254:	4a6f      	ldr	r2, [pc, #444]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 8007256:	f043 0301 	orr.w	r3, r3, #1
 800725a:	6713      	str	r3, [r2, #112]	@ 0x70
 800725c:	e02d      	b.n	80072ba <HAL_RCC_OscConfig+0x376>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10c      	bne.n	8007280 <HAL_RCC_OscConfig+0x33c>
 8007266:	4b6b      	ldr	r3, [pc, #428]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 8007268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800726a:	4a6a      	ldr	r2, [pc, #424]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 800726c:	f023 0301 	bic.w	r3, r3, #1
 8007270:	6713      	str	r3, [r2, #112]	@ 0x70
 8007272:	4b68      	ldr	r3, [pc, #416]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 8007274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007276:	4a67      	ldr	r2, [pc, #412]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 8007278:	f023 0304 	bic.w	r3, r3, #4
 800727c:	6713      	str	r3, [r2, #112]	@ 0x70
 800727e:	e01c      	b.n	80072ba <HAL_RCC_OscConfig+0x376>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	2b05      	cmp	r3, #5
 8007286:	d10c      	bne.n	80072a2 <HAL_RCC_OscConfig+0x35e>
 8007288:	4b62      	ldr	r3, [pc, #392]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 800728a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800728c:	4a61      	ldr	r2, [pc, #388]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 800728e:	f043 0304 	orr.w	r3, r3, #4
 8007292:	6713      	str	r3, [r2, #112]	@ 0x70
 8007294:	4b5f      	ldr	r3, [pc, #380]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 8007296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007298:	4a5e      	ldr	r2, [pc, #376]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 800729a:	f043 0301 	orr.w	r3, r3, #1
 800729e:	6713      	str	r3, [r2, #112]	@ 0x70
 80072a0:	e00b      	b.n	80072ba <HAL_RCC_OscConfig+0x376>
 80072a2:	4b5c      	ldr	r3, [pc, #368]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072a6:	4a5b      	ldr	r2, [pc, #364]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 80072a8:	f023 0301 	bic.w	r3, r3, #1
 80072ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80072ae:	4b59      	ldr	r3, [pc, #356]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 80072b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b2:	4a58      	ldr	r2, [pc, #352]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 80072b4:	f023 0304 	bic.w	r3, r3, #4
 80072b8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d015      	beq.n	80072ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072c2:	f7fd f881 	bl	80043c8 <HAL_GetTick>
 80072c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072c8:	e00a      	b.n	80072e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ca:	f7fd f87d 	bl	80043c8 <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072d8:	4293      	cmp	r3, r2
 80072da:	d901      	bls.n	80072e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	e0d8      	b.n	8007492 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e0:	4b4c      	ldr	r3, [pc, #304]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 80072e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d0ee      	beq.n	80072ca <HAL_RCC_OscConfig+0x386>
 80072ec:	e014      	b.n	8007318 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ee:	f7fd f86b 	bl	80043c8 <HAL_GetTick>
 80072f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072f4:	e00a      	b.n	800730c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072f6:	f7fd f867 	bl	80043c8 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007304:	4293      	cmp	r3, r2
 8007306:	d901      	bls.n	800730c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e0c2      	b.n	8007492 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800730c:	4b41      	ldr	r3, [pc, #260]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 800730e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007310:	f003 0302 	and.w	r3, r3, #2
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1ee      	bne.n	80072f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007318:	7dfb      	ldrb	r3, [r7, #23]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d105      	bne.n	800732a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800731e:	4b3d      	ldr	r3, [pc, #244]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 8007320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007322:	4a3c      	ldr	r2, [pc, #240]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 8007324:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007328:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 80ae 	beq.w	8007490 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007334:	4b37      	ldr	r3, [pc, #220]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f003 030c 	and.w	r3, r3, #12
 800733c:	2b08      	cmp	r3, #8
 800733e:	d06d      	beq.n	800741c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	2b02      	cmp	r3, #2
 8007346:	d14b      	bne.n	80073e0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007348:	4b32      	ldr	r3, [pc, #200]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a31      	ldr	r2, [pc, #196]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 800734e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007354:	f7fd f838 	bl	80043c8 <HAL_GetTick>
 8007358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800735a:	e008      	b.n	800736e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800735c:	f7fd f834 	bl	80043c8 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b02      	cmp	r3, #2
 8007368:	d901      	bls.n	800736e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e091      	b.n	8007492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800736e:	4b29      	ldr	r3, [pc, #164]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1f0      	bne.n	800735c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	69da      	ldr	r2, [r3, #28]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	431a      	orrs	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007388:	019b      	lsls	r3, r3, #6
 800738a:	431a      	orrs	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007390:	085b      	lsrs	r3, r3, #1
 8007392:	3b01      	subs	r3, #1
 8007394:	041b      	lsls	r3, r3, #16
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739c:	061b      	lsls	r3, r3, #24
 800739e:	431a      	orrs	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073a4:	071b      	lsls	r3, r3, #28
 80073a6:	491b      	ldr	r1, [pc, #108]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073ac:	4b19      	ldr	r3, [pc, #100]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a18      	ldr	r2, [pc, #96]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 80073b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b8:	f7fd f806 	bl	80043c8 <HAL_GetTick>
 80073bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073be:	e008      	b.n	80073d2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073c0:	f7fd f802 	bl	80043c8 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e05f      	b.n	8007492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073d2:	4b10      	ldr	r3, [pc, #64]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0f0      	beq.n	80073c0 <HAL_RCC_OscConfig+0x47c>
 80073de:	e057      	b.n	8007490 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a0b      	ldr	r2, [pc, #44]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 80073e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80073ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ec:	f7fc ffec 	bl	80043c8 <HAL_GetTick>
 80073f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073f2:	e008      	b.n	8007406 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073f4:	f7fc ffe8 	bl	80043c8 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e045      	b.n	8007492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007406:	4b03      	ldr	r3, [pc, #12]	@ (8007414 <HAL_RCC_OscConfig+0x4d0>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1f0      	bne.n	80073f4 <HAL_RCC_OscConfig+0x4b0>
 8007412:	e03d      	b.n	8007490 <HAL_RCC_OscConfig+0x54c>
 8007414:	40023800 	.word	0x40023800
 8007418:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800741c:	4b1f      	ldr	r3, [pc, #124]	@ (800749c <HAL_RCC_OscConfig+0x558>)
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d030      	beq.n	800748c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007434:	429a      	cmp	r2, r3
 8007436:	d129      	bne.n	800748c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007442:	429a      	cmp	r2, r3
 8007444:	d122      	bne.n	800748c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800744c:	4013      	ands	r3, r2
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007452:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007454:	4293      	cmp	r3, r2
 8007456:	d119      	bne.n	800748c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007462:	085b      	lsrs	r3, r3, #1
 8007464:	3b01      	subs	r3, #1
 8007466:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007468:	429a      	cmp	r2, r3
 800746a:	d10f      	bne.n	800748c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007476:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007478:	429a      	cmp	r2, r3
 800747a:	d107      	bne.n	800748c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007486:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007488:	429a      	cmp	r2, r3
 800748a:	d001      	beq.n	8007490 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e000      	b.n	8007492 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3718      	adds	r7, #24
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	40023800 	.word	0x40023800

080074a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e0d0      	b.n	800765a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80074b8:	4b6a      	ldr	r3, [pc, #424]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 030f 	and.w	r3, r3, #15
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d910      	bls.n	80074e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074c6:	4b67      	ldr	r3, [pc, #412]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f023 020f 	bic.w	r2, r3, #15
 80074ce:	4965      	ldr	r1, [pc, #404]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074d6:	4b63      	ldr	r3, [pc, #396]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d001      	beq.n	80074e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e0b8      	b.n	800765a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0302 	and.w	r3, r3, #2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d020      	beq.n	8007536 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0304 	and.w	r3, r3, #4
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d005      	beq.n	800750c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007500:	4b59      	ldr	r3, [pc, #356]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	4a58      	ldr	r2, [pc, #352]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 8007506:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800750a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0308 	and.w	r3, r3, #8
 8007514:	2b00      	cmp	r3, #0
 8007516:	d005      	beq.n	8007524 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007518:	4b53      	ldr	r3, [pc, #332]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	4a52      	ldr	r2, [pc, #328]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 800751e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007522:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007524:	4b50      	ldr	r3, [pc, #320]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	494d      	ldr	r1, [pc, #308]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 8007532:	4313      	orrs	r3, r2
 8007534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d040      	beq.n	80075c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	2b01      	cmp	r3, #1
 8007548:	d107      	bne.n	800755a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800754a:	4b47      	ldr	r3, [pc, #284]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d115      	bne.n	8007582 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e07f      	b.n	800765a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	2b02      	cmp	r3, #2
 8007560:	d107      	bne.n	8007572 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007562:	4b41      	ldr	r3, [pc, #260]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d109      	bne.n	8007582 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e073      	b.n	800765a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007572:	4b3d      	ldr	r3, [pc, #244]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e06b      	b.n	800765a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007582:	4b39      	ldr	r3, [pc, #228]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f023 0203 	bic.w	r2, r3, #3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	4936      	ldr	r1, [pc, #216]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 8007590:	4313      	orrs	r3, r2
 8007592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007594:	f7fc ff18 	bl	80043c8 <HAL_GetTick>
 8007598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800759a:	e00a      	b.n	80075b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800759c:	f7fc ff14 	bl	80043c8 <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d901      	bls.n	80075b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e053      	b.n	800765a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075b2:	4b2d      	ldr	r3, [pc, #180]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 020c 	and.w	r2, r3, #12
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d1eb      	bne.n	800759c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075c4:	4b27      	ldr	r3, [pc, #156]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 030f 	and.w	r3, r3, #15
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d210      	bcs.n	80075f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075d2:	4b24      	ldr	r3, [pc, #144]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f023 020f 	bic.w	r2, r3, #15
 80075da:	4922      	ldr	r1, [pc, #136]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	4313      	orrs	r3, r2
 80075e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075e2:	4b20      	ldr	r3, [pc, #128]	@ (8007664 <HAL_RCC_ClockConfig+0x1c4>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 030f 	and.w	r3, r3, #15
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d001      	beq.n	80075f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e032      	b.n	800765a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0304 	and.w	r3, r3, #4
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d008      	beq.n	8007612 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007600:	4b19      	ldr	r3, [pc, #100]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	4916      	ldr	r1, [pc, #88]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 800760e:	4313      	orrs	r3, r2
 8007610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0308 	and.w	r3, r3, #8
 800761a:	2b00      	cmp	r3, #0
 800761c:	d009      	beq.n	8007632 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800761e:	4b12      	ldr	r3, [pc, #72]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	490e      	ldr	r1, [pc, #56]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 800762e:	4313      	orrs	r3, r2
 8007630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007632:	f000 f821 	bl	8007678 <HAL_RCC_GetSysClockFreq>
 8007636:	4602      	mov	r2, r0
 8007638:	4b0b      	ldr	r3, [pc, #44]	@ (8007668 <HAL_RCC_ClockConfig+0x1c8>)
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	091b      	lsrs	r3, r3, #4
 800763e:	f003 030f 	and.w	r3, r3, #15
 8007642:	490a      	ldr	r1, [pc, #40]	@ (800766c <HAL_RCC_ClockConfig+0x1cc>)
 8007644:	5ccb      	ldrb	r3, [r1, r3]
 8007646:	fa22 f303 	lsr.w	r3, r2, r3
 800764a:	4a09      	ldr	r2, [pc, #36]	@ (8007670 <HAL_RCC_ClockConfig+0x1d0>)
 800764c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800764e:	4b09      	ldr	r3, [pc, #36]	@ (8007674 <HAL_RCC_ClockConfig+0x1d4>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4618      	mov	r0, r3
 8007654:	f7fc f8e2 	bl	800381c <HAL_InitTick>

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	40023c00 	.word	0x40023c00
 8007668:	40023800 	.word	0x40023800
 800766c:	08016e2c 	.word	0x08016e2c
 8007670:	200000e0 	.word	0x200000e0
 8007674:	200000e4 	.word	0x200000e4

08007678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800767c:	b094      	sub	sp, #80	@ 0x50
 800767e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	647b      	str	r3, [r7, #68]	@ 0x44
 8007684:	2300      	movs	r3, #0
 8007686:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007688:	2300      	movs	r3, #0
 800768a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800768c:	2300      	movs	r3, #0
 800768e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007690:	4b79      	ldr	r3, [pc, #484]	@ (8007878 <HAL_RCC_GetSysClockFreq+0x200>)
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f003 030c 	and.w	r3, r3, #12
 8007698:	2b08      	cmp	r3, #8
 800769a:	d00d      	beq.n	80076b8 <HAL_RCC_GetSysClockFreq+0x40>
 800769c:	2b08      	cmp	r3, #8
 800769e:	f200 80e1 	bhi.w	8007864 <HAL_RCC_GetSysClockFreq+0x1ec>
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <HAL_RCC_GetSysClockFreq+0x34>
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d003      	beq.n	80076b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80076aa:	e0db      	b.n	8007864 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076ac:	4b73      	ldr	r3, [pc, #460]	@ (800787c <HAL_RCC_GetSysClockFreq+0x204>)
 80076ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80076b0:	e0db      	b.n	800786a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076b2:	4b73      	ldr	r3, [pc, #460]	@ (8007880 <HAL_RCC_GetSysClockFreq+0x208>)
 80076b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80076b6:	e0d8      	b.n	800786a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076b8:	4b6f      	ldr	r3, [pc, #444]	@ (8007878 <HAL_RCC_GetSysClockFreq+0x200>)
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80076c2:	4b6d      	ldr	r3, [pc, #436]	@ (8007878 <HAL_RCC_GetSysClockFreq+0x200>)
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d063      	beq.n	8007796 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076ce:	4b6a      	ldr	r3, [pc, #424]	@ (8007878 <HAL_RCC_GetSysClockFreq+0x200>)
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	099b      	lsrs	r3, r3, #6
 80076d4:	2200      	movs	r2, #0
 80076d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80076da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80076e2:	2300      	movs	r3, #0
 80076e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80076ea:	4622      	mov	r2, r4
 80076ec:	462b      	mov	r3, r5
 80076ee:	f04f 0000 	mov.w	r0, #0
 80076f2:	f04f 0100 	mov.w	r1, #0
 80076f6:	0159      	lsls	r1, r3, #5
 80076f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076fc:	0150      	lsls	r0, r2, #5
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	4621      	mov	r1, r4
 8007704:	1a51      	subs	r1, r2, r1
 8007706:	6139      	str	r1, [r7, #16]
 8007708:	4629      	mov	r1, r5
 800770a:	eb63 0301 	sbc.w	r3, r3, r1
 800770e:	617b      	str	r3, [r7, #20]
 8007710:	f04f 0200 	mov.w	r2, #0
 8007714:	f04f 0300 	mov.w	r3, #0
 8007718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800771c:	4659      	mov	r1, fp
 800771e:	018b      	lsls	r3, r1, #6
 8007720:	4651      	mov	r1, sl
 8007722:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007726:	4651      	mov	r1, sl
 8007728:	018a      	lsls	r2, r1, #6
 800772a:	4651      	mov	r1, sl
 800772c:	ebb2 0801 	subs.w	r8, r2, r1
 8007730:	4659      	mov	r1, fp
 8007732:	eb63 0901 	sbc.w	r9, r3, r1
 8007736:	f04f 0200 	mov.w	r2, #0
 800773a:	f04f 0300 	mov.w	r3, #0
 800773e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800774a:	4690      	mov	r8, r2
 800774c:	4699      	mov	r9, r3
 800774e:	4623      	mov	r3, r4
 8007750:	eb18 0303 	adds.w	r3, r8, r3
 8007754:	60bb      	str	r3, [r7, #8]
 8007756:	462b      	mov	r3, r5
 8007758:	eb49 0303 	adc.w	r3, r9, r3
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	f04f 0200 	mov.w	r2, #0
 8007762:	f04f 0300 	mov.w	r3, #0
 8007766:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800776a:	4629      	mov	r1, r5
 800776c:	024b      	lsls	r3, r1, #9
 800776e:	4621      	mov	r1, r4
 8007770:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007774:	4621      	mov	r1, r4
 8007776:	024a      	lsls	r2, r1, #9
 8007778:	4610      	mov	r0, r2
 800777a:	4619      	mov	r1, r3
 800777c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800777e:	2200      	movs	r2, #0
 8007780:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007782:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007784:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007788:	f7f8 fdb2 	bl	80002f0 <__aeabi_uldivmod>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4613      	mov	r3, r2
 8007792:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007794:	e058      	b.n	8007848 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007796:	4b38      	ldr	r3, [pc, #224]	@ (8007878 <HAL_RCC_GetSysClockFreq+0x200>)
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	099b      	lsrs	r3, r3, #6
 800779c:	2200      	movs	r2, #0
 800779e:	4618      	mov	r0, r3
 80077a0:	4611      	mov	r1, r2
 80077a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80077a6:	623b      	str	r3, [r7, #32]
 80077a8:	2300      	movs	r3, #0
 80077aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80077ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80077b0:	4642      	mov	r2, r8
 80077b2:	464b      	mov	r3, r9
 80077b4:	f04f 0000 	mov.w	r0, #0
 80077b8:	f04f 0100 	mov.w	r1, #0
 80077bc:	0159      	lsls	r1, r3, #5
 80077be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077c2:	0150      	lsls	r0, r2, #5
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4641      	mov	r1, r8
 80077ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80077ce:	4649      	mov	r1, r9
 80077d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80077d4:	f04f 0200 	mov.w	r2, #0
 80077d8:	f04f 0300 	mov.w	r3, #0
 80077dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80077e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80077e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80077e8:	ebb2 040a 	subs.w	r4, r2, sl
 80077ec:	eb63 050b 	sbc.w	r5, r3, fp
 80077f0:	f04f 0200 	mov.w	r2, #0
 80077f4:	f04f 0300 	mov.w	r3, #0
 80077f8:	00eb      	lsls	r3, r5, #3
 80077fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077fe:	00e2      	lsls	r2, r4, #3
 8007800:	4614      	mov	r4, r2
 8007802:	461d      	mov	r5, r3
 8007804:	4643      	mov	r3, r8
 8007806:	18e3      	adds	r3, r4, r3
 8007808:	603b      	str	r3, [r7, #0]
 800780a:	464b      	mov	r3, r9
 800780c:	eb45 0303 	adc.w	r3, r5, r3
 8007810:	607b      	str	r3, [r7, #4]
 8007812:	f04f 0200 	mov.w	r2, #0
 8007816:	f04f 0300 	mov.w	r3, #0
 800781a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800781e:	4629      	mov	r1, r5
 8007820:	028b      	lsls	r3, r1, #10
 8007822:	4621      	mov	r1, r4
 8007824:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007828:	4621      	mov	r1, r4
 800782a:	028a      	lsls	r2, r1, #10
 800782c:	4610      	mov	r0, r2
 800782e:	4619      	mov	r1, r3
 8007830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007832:	2200      	movs	r2, #0
 8007834:	61bb      	str	r3, [r7, #24]
 8007836:	61fa      	str	r2, [r7, #28]
 8007838:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800783c:	f7f8 fd58 	bl	80002f0 <__aeabi_uldivmod>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4613      	mov	r3, r2
 8007846:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007848:	4b0b      	ldr	r3, [pc, #44]	@ (8007878 <HAL_RCC_GetSysClockFreq+0x200>)
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	0c1b      	lsrs	r3, r3, #16
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	3301      	adds	r3, #1
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007858:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800785a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800785c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007860:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007862:	e002      	b.n	800786a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007864:	4b05      	ldr	r3, [pc, #20]	@ (800787c <HAL_RCC_GetSysClockFreq+0x204>)
 8007866:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800786a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800786c:	4618      	mov	r0, r3
 800786e:	3750      	adds	r7, #80	@ 0x50
 8007870:	46bd      	mov	sp, r7
 8007872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007876:	bf00      	nop
 8007878:	40023800 	.word	0x40023800
 800787c:	00f42400 	.word	0x00f42400
 8007880:	007a1200 	.word	0x007a1200

08007884 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007884:	b480      	push	{r7}
 8007886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007888:	4b03      	ldr	r3, [pc, #12]	@ (8007898 <HAL_RCC_GetHCLKFreq+0x14>)
 800788a:	681b      	ldr	r3, [r3, #0]
}
 800788c:	4618      	mov	r0, r3
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	200000e0 	.word	0x200000e0

0800789c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80078a0:	f7ff fff0 	bl	8007884 <HAL_RCC_GetHCLKFreq>
 80078a4:	4602      	mov	r2, r0
 80078a6:	4b05      	ldr	r3, [pc, #20]	@ (80078bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	0a9b      	lsrs	r3, r3, #10
 80078ac:	f003 0307 	and.w	r3, r3, #7
 80078b0:	4903      	ldr	r1, [pc, #12]	@ (80078c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078b2:	5ccb      	ldrb	r3, [r1, r3]
 80078b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	40023800 	.word	0x40023800
 80078c0:	08016e3c 	.word	0x08016e3c

080078c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80078c8:	f7ff ffdc 	bl	8007884 <HAL_RCC_GetHCLKFreq>
 80078cc:	4602      	mov	r2, r0
 80078ce:	4b05      	ldr	r3, [pc, #20]	@ (80078e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	0b5b      	lsrs	r3, r3, #13
 80078d4:	f003 0307 	and.w	r3, r3, #7
 80078d8:	4903      	ldr	r1, [pc, #12]	@ (80078e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80078da:	5ccb      	ldrb	r3, [r1, r3]
 80078dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	40023800 	.word	0x40023800
 80078e8:	08016e3c 	.word	0x08016e3c

080078ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	220f      	movs	r2, #15
 80078fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80078fc:	4b12      	ldr	r3, [pc, #72]	@ (8007948 <HAL_RCC_GetClockConfig+0x5c>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f003 0203 	and.w	r2, r3, #3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007908:	4b0f      	ldr	r3, [pc, #60]	@ (8007948 <HAL_RCC_GetClockConfig+0x5c>)
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007914:	4b0c      	ldr	r3, [pc, #48]	@ (8007948 <HAL_RCC_GetClockConfig+0x5c>)
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007920:	4b09      	ldr	r3, [pc, #36]	@ (8007948 <HAL_RCC_GetClockConfig+0x5c>)
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	08db      	lsrs	r3, r3, #3
 8007926:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800792e:	4b07      	ldr	r3, [pc, #28]	@ (800794c <HAL_RCC_GetClockConfig+0x60>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 020f 	and.w	r2, r3, #15
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	601a      	str	r2, [r3, #0]
}
 800793a:	bf00      	nop
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	40023800 	.word	0x40023800
 800794c:	40023c00 	.word	0x40023c00

08007950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b088      	sub	sp, #32
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007958:	2300      	movs	r3, #0
 800795a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007964:	2300      	movs	r3, #0
 8007966:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007968:	2300      	movs	r3, #0
 800796a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0301 	and.w	r3, r3, #1
 8007974:	2b00      	cmp	r3, #0
 8007976:	d012      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007978:	4b69      	ldr	r3, [pc, #420]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	4a68      	ldr	r2, [pc, #416]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800797e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007982:	6093      	str	r3, [r2, #8]
 8007984:	4b66      	ldr	r3, [pc, #408]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800798c:	4964      	ldr	r1, [pc, #400]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800798e:	4313      	orrs	r3, r2
 8007990:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800799a:	2301      	movs	r3, #1
 800799c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d017      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079aa:	4b5d      	ldr	r3, [pc, #372]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079b0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079b8:	4959      	ldr	r1, [pc, #356]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ba:	4313      	orrs	r3, r2
 80079bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079c8:	d101      	bne.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80079ca:	2301      	movs	r3, #1
 80079cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80079d6:	2301      	movs	r3, #1
 80079d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d017      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80079e6:	4b4e      	ldr	r3, [pc, #312]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079ec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f4:	494a      	ldr	r1, [pc, #296]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a04:	d101      	bne.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007a06:	2301      	movs	r3, #1
 8007a08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007a12:	2301      	movs	r3, #1
 8007a14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007a22:	2301      	movs	r3, #1
 8007a24:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0320 	and.w	r3, r3, #32
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 808b 	beq.w	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a34:	4b3a      	ldr	r3, [pc, #232]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a38:	4a39      	ldr	r2, [pc, #228]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a40:	4b37      	ldr	r3, [pc, #220]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a48:	60bb      	str	r3, [r7, #8]
 8007a4a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a4c:	4b35      	ldr	r3, [pc, #212]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a34      	ldr	r2, [pc, #208]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a58:	f7fc fcb6 	bl	80043c8 <HAL_GetTick>
 8007a5c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a5e:	e008      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a60:	f7fc fcb2 	bl	80043c8 <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	2b64      	cmp	r3, #100	@ 0x64
 8007a6c:	d901      	bls.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e38f      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a72:	4b2c      	ldr	r3, [pc, #176]	@ (8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d0f0      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a7e:	4b28      	ldr	r3, [pc, #160]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a86:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d035      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d02e      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a9c:	4b20      	ldr	r3, [pc, #128]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aa4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ab0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ab8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007abc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007abe:	4a18      	ldr	r2, [pc, #96]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007ac4:	4b16      	ldr	r3, [pc, #88]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d114      	bne.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad0:	f7fc fc7a 	bl	80043c8 <HAL_GetTick>
 8007ad4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ad6:	e00a      	b.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ad8:	f7fc fc76 	bl	80043c8 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d901      	bls.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e351      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007aee:	4b0c      	ldr	r3, [pc, #48]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d0ee      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007afe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b06:	d111      	bne.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007b08:	4b05      	ldr	r3, [pc, #20]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007b14:	4b04      	ldr	r3, [pc, #16]	@ (8007b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007b16:	400b      	ands	r3, r1
 8007b18:	4901      	ldr	r1, [pc, #4]	@ (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	608b      	str	r3, [r1, #8]
 8007b1e:	e00b      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007b20:	40023800 	.word	0x40023800
 8007b24:	40007000 	.word	0x40007000
 8007b28:	0ffffcff 	.word	0x0ffffcff
 8007b2c:	4bac      	ldr	r3, [pc, #688]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	4aab      	ldr	r2, [pc, #684]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b32:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007b36:	6093      	str	r3, [r2, #8]
 8007b38:	4ba9      	ldr	r3, [pc, #676]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b3a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b44:	49a6      	ldr	r1, [pc, #664]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 0310 	and.w	r3, r3, #16
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d010      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b56:	4ba2      	ldr	r3, [pc, #648]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b5c:	4aa0      	ldr	r2, [pc, #640]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007b66:	4b9e      	ldr	r3, [pc, #632]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b68:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b70:	499b      	ldr	r1, [pc, #620]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00a      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b84:	4b96      	ldr	r3, [pc, #600]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b8a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b92:	4993      	ldr	r1, [pc, #588]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00a      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ba6:	4b8e      	ldr	r3, [pc, #568]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bb4:	498a      	ldr	r1, [pc, #552]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00a      	beq.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007bc8:	4b85      	ldr	r3, [pc, #532]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bd6:	4982      	ldr	r1, [pc, #520]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00a      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bea:	4b7d      	ldr	r3, [pc, #500]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bf0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bf8:	4979      	ldr	r1, [pc, #484]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00a      	beq.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c0c:	4b74      	ldr	r3, [pc, #464]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c12:	f023 0203 	bic.w	r2, r3, #3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c1a:	4971      	ldr	r1, [pc, #452]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c2e:	4b6c      	ldr	r3, [pc, #432]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c34:	f023 020c 	bic.w	r2, r3, #12
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c3c:	4968      	ldr	r1, [pc, #416]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00a      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c50:	4b63      	ldr	r3, [pc, #396]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c56:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c5e:	4960      	ldr	r1, [pc, #384]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c60:	4313      	orrs	r3, r2
 8007c62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00a      	beq.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c72:	4b5b      	ldr	r3, [pc, #364]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c78:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c80:	4957      	ldr	r1, [pc, #348]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00a      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c94:	4b52      	ldr	r3, [pc, #328]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca2:	494f      	ldr	r1, [pc, #316]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00a      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cbc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cc4:	4946      	ldr	r1, [pc, #280]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00a      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007cd8:	4b41      	ldr	r3, [pc, #260]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cde:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ce6:	493e      	ldr	r1, [pc, #248]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00a      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007cfa:	4b39      	ldr	r3, [pc, #228]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d08:	4935      	ldr	r1, [pc, #212]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00a      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d1c:	4b30      	ldr	r3, [pc, #192]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d22:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d2a:	492d      	ldr	r1, [pc, #180]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d011      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007d3e:	4b28      	ldr	r3, [pc, #160]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d44:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d4c:	4924      	ldr	r1, [pc, #144]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d58:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d5c:	d101      	bne.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0308 	and.w	r3, r3, #8
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00a      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d7e:	4b18      	ldr	r3, [pc, #96]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d84:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d8c:	4914      	ldr	r1, [pc, #80]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00b      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007da0:	4b0f      	ldr	r3, [pc, #60]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007db0:	490b      	ldr	r1, [pc, #44]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007db2:	4313      	orrs	r3, r2
 8007db4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00f      	beq.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007dc4:	4b06      	ldr	r3, [pc, #24]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dca:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dd4:	4902      	ldr	r1, [pc, #8]	@ (8007de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007ddc:	e002      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007dde:	bf00      	nop
 8007de0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00b      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007df0:	4b8a      	ldr	r3, [pc, #552]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007df6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e00:	4986      	ldr	r1, [pc, #536]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00b      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007e14:	4b81      	ldr	r3, [pc, #516]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e1a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e24:	497d      	ldr	r1, [pc, #500]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d006      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 80d6 	beq.w	8007fec <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e40:	4b76      	ldr	r3, [pc, #472]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a75      	ldr	r2, [pc, #468]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e4c:	f7fc fabc 	bl	80043c8 <HAL_GetTick>
 8007e50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e52:	e008      	b.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e54:	f7fc fab8 	bl	80043c8 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b64      	cmp	r3, #100	@ 0x64
 8007e60:	d901      	bls.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e195      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e66:	4b6d      	ldr	r3, [pc, #436]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1f0      	bne.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d021      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d11d      	bne.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e86:	4b65      	ldr	r3, [pc, #404]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e8c:	0c1b      	lsrs	r3, r3, #16
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e94:	4b61      	ldr	r3, [pc, #388]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e9a:	0e1b      	lsrs	r3, r3, #24
 8007e9c:	f003 030f 	and.w	r3, r3, #15
 8007ea0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	019a      	lsls	r2, r3, #6
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	041b      	lsls	r3, r3, #16
 8007eac:	431a      	orrs	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	061b      	lsls	r3, r3, #24
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	071b      	lsls	r3, r3, #28
 8007eba:	4958      	ldr	r1, [pc, #352]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d004      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ed2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ed6:	d00a      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d02e      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007eec:	d129      	bne.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007eee:	4b4b      	ldr	r3, [pc, #300]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ef4:	0c1b      	lsrs	r3, r3, #16
 8007ef6:	f003 0303 	and.w	r3, r3, #3
 8007efa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007efc:	4b47      	ldr	r3, [pc, #284]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f02:	0f1b      	lsrs	r3, r3, #28
 8007f04:	f003 0307 	and.w	r3, r3, #7
 8007f08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	019a      	lsls	r2, r3, #6
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	041b      	lsls	r3, r3, #16
 8007f14:	431a      	orrs	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	061b      	lsls	r3, r3, #24
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	071b      	lsls	r3, r3, #28
 8007f22:	493e      	ldr	r1, [pc, #248]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007f2a:	4b3c      	ldr	r3, [pc, #240]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f30:	f023 021f 	bic.w	r2, r3, #31
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	4938      	ldr	r1, [pc, #224]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d01d      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f4e:	4b33      	ldr	r3, [pc, #204]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f54:	0e1b      	lsrs	r3, r3, #24
 8007f56:	f003 030f 	and.w	r3, r3, #15
 8007f5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f5c:	4b2f      	ldr	r3, [pc, #188]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f62:	0f1b      	lsrs	r3, r3, #28
 8007f64:	f003 0307 	and.w	r3, r3, #7
 8007f68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	019a      	lsls	r2, r3, #6
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	041b      	lsls	r3, r3, #16
 8007f76:	431a      	orrs	r2, r3
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	061b      	lsls	r3, r3, #24
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	071b      	lsls	r3, r3, #28
 8007f82:	4926      	ldr	r1, [pc, #152]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d011      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	019a      	lsls	r2, r3, #6
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	041b      	lsls	r3, r3, #16
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	061b      	lsls	r3, r3, #24
 8007faa:	431a      	orrs	r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	071b      	lsls	r3, r3, #28
 8007fb2:	491a      	ldr	r1, [pc, #104]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007fba:	4b18      	ldr	r3, [pc, #96]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a17      	ldr	r2, [pc, #92]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fc6:	f7fc f9ff 	bl	80043c8 <HAL_GetTick>
 8007fca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fcc:	e008      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007fce:	f7fc f9fb 	bl	80043c8 <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	2b64      	cmp	r3, #100	@ 0x64
 8007fda:	d901      	bls.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	e0d8      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d0f0      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	f040 80ce 	bne.w	8008190 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007ff4:	4b09      	ldr	r3, [pc, #36]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a08      	ldr	r2, [pc, #32]	@ (800801c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ffa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008000:	f7fc f9e2 	bl	80043c8 <HAL_GetTick>
 8008004:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008006:	e00b      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008008:	f7fc f9de 	bl	80043c8 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	2b64      	cmp	r3, #100	@ 0x64
 8008014:	d904      	bls.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e0bb      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800801a:	bf00      	nop
 800801c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008020:	4b5e      	ldr	r3, [pc, #376]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008028:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800802c:	d0ec      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800803e:	2b00      	cmp	r3, #0
 8008040:	d009      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800804a:	2b00      	cmp	r3, #0
 800804c:	d02e      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008052:	2b00      	cmp	r3, #0
 8008054:	d12a      	bne.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008056:	4b51      	ldr	r3, [pc, #324]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800805c:	0c1b      	lsrs	r3, r3, #16
 800805e:	f003 0303 	and.w	r3, r3, #3
 8008062:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008064:	4b4d      	ldr	r3, [pc, #308]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800806a:	0f1b      	lsrs	r3, r3, #28
 800806c:	f003 0307 	and.w	r3, r3, #7
 8008070:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	019a      	lsls	r2, r3, #6
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	041b      	lsls	r3, r3, #16
 800807c:	431a      	orrs	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	061b      	lsls	r3, r3, #24
 8008084:	431a      	orrs	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	071b      	lsls	r3, r3, #28
 800808a:	4944      	ldr	r1, [pc, #272]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800808c:	4313      	orrs	r3, r2
 800808e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008092:	4b42      	ldr	r3, [pc, #264]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008094:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008098:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080a0:	3b01      	subs	r3, #1
 80080a2:	021b      	lsls	r3, r3, #8
 80080a4:	493d      	ldr	r1, [pc, #244]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d022      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080c0:	d11d      	bne.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080c2:	4b36      	ldr	r3, [pc, #216]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080c8:	0e1b      	lsrs	r3, r3, #24
 80080ca:	f003 030f 	and.w	r3, r3, #15
 80080ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80080d0:	4b32      	ldr	r3, [pc, #200]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080d6:	0f1b      	lsrs	r3, r3, #28
 80080d8:	f003 0307 	and.w	r3, r3, #7
 80080dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	695b      	ldr	r3, [r3, #20]
 80080e2:	019a      	lsls	r2, r3, #6
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	041b      	lsls	r3, r3, #16
 80080ea:	431a      	orrs	r2, r3
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	061b      	lsls	r3, r3, #24
 80080f0:	431a      	orrs	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	071b      	lsls	r3, r3, #28
 80080f6:	4929      	ldr	r1, [pc, #164]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080f8:	4313      	orrs	r3, r2
 80080fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0308 	and.w	r3, r3, #8
 8008106:	2b00      	cmp	r3, #0
 8008108:	d028      	beq.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800810a:	4b24      	ldr	r3, [pc, #144]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800810c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008110:	0e1b      	lsrs	r3, r3, #24
 8008112:	f003 030f 	and.w	r3, r3, #15
 8008116:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008118:	4b20      	ldr	r3, [pc, #128]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800811a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800811e:	0c1b      	lsrs	r3, r3, #16
 8008120:	f003 0303 	and.w	r3, r3, #3
 8008124:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	019a      	lsls	r2, r3, #6
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	041b      	lsls	r3, r3, #16
 8008130:	431a      	orrs	r2, r3
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	061b      	lsls	r3, r3, #24
 8008136:	431a      	orrs	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	071b      	lsls	r3, r3, #28
 800813e:	4917      	ldr	r1, [pc, #92]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008140:	4313      	orrs	r3, r2
 8008142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008146:	4b15      	ldr	r3, [pc, #84]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008148:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800814c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008154:	4911      	ldr	r1, [pc, #68]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008156:	4313      	orrs	r3, r2
 8008158:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800815c:	4b0f      	ldr	r3, [pc, #60]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a0e      	ldr	r2, [pc, #56]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008162:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008166:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008168:	f7fc f92e 	bl	80043c8 <HAL_GetTick>
 800816c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800816e:	e008      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008170:	f7fc f92a 	bl	80043c8 <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	2b64      	cmp	r3, #100	@ 0x64
 800817c:	d901      	bls.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e007      	b.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008182:	4b06      	ldr	r3, [pc, #24]	@ (800819c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800818a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800818e:	d1ef      	bne.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3720      	adds	r7, #32
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	40023800 	.word	0x40023800

080081a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e09d      	b.n	80082ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d108      	bne.n	80081cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081c2:	d009      	beq.n	80081d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	61da      	str	r2, [r3, #28]
 80081ca:	e005      	b.n	80081d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d106      	bne.n	80081f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7fb f9ae 	bl	8003554 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2202      	movs	r2, #2
 80081fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800820e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008218:	d902      	bls.n	8008220 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800821a:	2300      	movs	r3, #0
 800821c:	60fb      	str	r3, [r7, #12]
 800821e:	e002      	b.n	8008226 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008220:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008224:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800822e:	d007      	beq.n	8008240 <HAL_SPI_Init+0xa0>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008238:	d002      	beq.n	8008240 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008250:	431a      	orrs	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	431a      	orrs	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	431a      	orrs	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800826e:	431a      	orrs	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	69db      	ldr	r3, [r3, #28]
 8008274:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008278:	431a      	orrs	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008282:	ea42 0103 	orr.w	r1, r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800828a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	430a      	orrs	r2, r1
 8008294:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	0c1b      	lsrs	r3, r3, #16
 800829c:	f003 0204 	and.w	r2, r3, #4
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a4:	f003 0310 	and.w	r3, r3, #16
 80082a8:	431a      	orrs	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ae:	f003 0308 	and.w	r3, r3, #8
 80082b2:	431a      	orrs	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80082bc:	ea42 0103 	orr.w	r1, r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	69da      	ldr	r2, [r3, #28]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80082dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b082      	sub	sp, #8
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e01a      	b.n	800833e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2202      	movs	r2, #2
 800830c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800831e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7fb f981 	bl	8003628 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b08a      	sub	sp, #40	@ 0x28
 800834a:	af00      	add	r7, sp, #0
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	607a      	str	r2, [r7, #4]
 8008352:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008354:	2301      	movs	r3, #1
 8008356:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008358:	f7fc f836 	bl	80043c8 <HAL_GetTick>
 800835c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008364:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800836c:	887b      	ldrh	r3, [r7, #2]
 800836e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008370:	887b      	ldrh	r3, [r7, #2]
 8008372:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008374:	7ffb      	ldrb	r3, [r7, #31]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d00c      	beq.n	8008394 <HAL_SPI_TransmitReceive+0x4e>
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008380:	d106      	bne.n	8008390 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d102      	bne.n	8008390 <HAL_SPI_TransmitReceive+0x4a>
 800838a:	7ffb      	ldrb	r3, [r7, #31]
 800838c:	2b04      	cmp	r3, #4
 800838e:	d001      	beq.n	8008394 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008390:	2302      	movs	r3, #2
 8008392:	e1f3      	b.n	800877c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d005      	beq.n	80083a6 <HAL_SPI_TransmitReceive+0x60>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <HAL_SPI_TransmitReceive+0x60>
 80083a0:	887b      	ldrh	r3, [r7, #2]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e1e8      	b.n	800877c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d101      	bne.n	80083b8 <HAL_SPI_TransmitReceive+0x72>
 80083b4:	2302      	movs	r3, #2
 80083b6:	e1e1      	b.n	800877c <HAL_SPI_TransmitReceive+0x436>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	d003      	beq.n	80083d4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2205      	movs	r2, #5
 80083d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	887a      	ldrh	r2, [r7, #2]
 80083e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	887a      	ldrh	r2, [r7, #2]
 80083ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	887a      	ldrh	r2, [r7, #2]
 80083fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	887a      	ldrh	r2, [r7, #2]
 8008400:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008416:	d802      	bhi.n	800841e <HAL_SPI_TransmitReceive+0xd8>
 8008418:	8abb      	ldrh	r3, [r7, #20]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d908      	bls.n	8008430 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800842c:	605a      	str	r2, [r3, #4]
 800842e:	e007      	b.n	8008440 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800843e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800844a:	2b40      	cmp	r3, #64	@ 0x40
 800844c:	d007      	beq.n	800845e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800845c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008466:	f240 8083 	bls.w	8008570 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d002      	beq.n	8008478 <HAL_SPI_TransmitReceive+0x132>
 8008472:	8afb      	ldrh	r3, [r7, #22]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d16f      	bne.n	8008558 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800847c:	881a      	ldrh	r2, [r3, #0]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008488:	1c9a      	adds	r2, r3, #2
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008492:	b29b      	uxth	r3, r3
 8008494:	3b01      	subs	r3, #1
 8008496:	b29a      	uxth	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800849c:	e05c      	b.n	8008558 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f003 0302 	and.w	r3, r3, #2
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d11b      	bne.n	80084e4 <HAL_SPI_TransmitReceive+0x19e>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d016      	beq.n	80084e4 <HAL_SPI_TransmitReceive+0x19e>
 80084b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d113      	bne.n	80084e4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c0:	881a      	ldrh	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084cc:	1c9a      	adds	r2, r3, #2
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	3b01      	subs	r3, #1
 80084da:	b29a      	uxth	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084e0:	2300      	movs	r3, #0
 80084e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f003 0301 	and.w	r3, r3, #1
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d11c      	bne.n	800852c <HAL_SPI_TransmitReceive+0x1e6>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d016      	beq.n	800852c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68da      	ldr	r2, [r3, #12]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008508:	b292      	uxth	r2, r2
 800850a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008510:	1c9a      	adds	r2, r3, #2
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800851c:	b29b      	uxth	r3, r3
 800851e:	3b01      	subs	r3, #1
 8008520:	b29a      	uxth	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008528:	2301      	movs	r3, #1
 800852a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800852c:	f7fb ff4c 	bl	80043c8 <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008538:	429a      	cmp	r2, r3
 800853a:	d80d      	bhi.n	8008558 <HAL_SPI_TransmitReceive+0x212>
 800853c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008542:	d009      	beq.n	8008558 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	e111      	b.n	800877c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800855c:	b29b      	uxth	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d19d      	bne.n	800849e <HAL_SPI_TransmitReceive+0x158>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008568:	b29b      	uxth	r3, r3
 800856a:	2b00      	cmp	r3, #0
 800856c:	d197      	bne.n	800849e <HAL_SPI_TransmitReceive+0x158>
 800856e:	e0e5      	b.n	800873c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d003      	beq.n	8008580 <HAL_SPI_TransmitReceive+0x23a>
 8008578:	8afb      	ldrh	r3, [r7, #22]
 800857a:	2b01      	cmp	r3, #1
 800857c:	f040 80d1 	bne.w	8008722 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008584:	b29b      	uxth	r3, r3
 8008586:	2b01      	cmp	r3, #1
 8008588:	d912      	bls.n	80085b0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800858e:	881a      	ldrh	r2, [r3, #0]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859a:	1c9a      	adds	r2, r3, #2
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	3b02      	subs	r3, #2
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80085ae:	e0b8      	b.n	8008722 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	330c      	adds	r3, #12
 80085ba:	7812      	ldrb	r2, [r2, #0]
 80085bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	3b01      	subs	r3, #1
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085d6:	e0a4      	b.n	8008722 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d134      	bne.n	8008650 <HAL_SPI_TransmitReceive+0x30a>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d02f      	beq.n	8008650 <HAL_SPI_TransmitReceive+0x30a>
 80085f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d12c      	bne.n	8008650 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d912      	bls.n	8008626 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008604:	881a      	ldrh	r2, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008610:	1c9a      	adds	r2, r3, #2
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800861a:	b29b      	uxth	r3, r3
 800861c:	3b02      	subs	r3, #2
 800861e:	b29a      	uxth	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008624:	e012      	b.n	800864c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	330c      	adds	r3, #12
 8008630:	7812      	ldrb	r2, [r2, #0]
 8008632:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008638:	1c5a      	adds	r2, r3, #1
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008642:	b29b      	uxth	r3, r3
 8008644:	3b01      	subs	r3, #1
 8008646:	b29a      	uxth	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800864c:	2300      	movs	r3, #0
 800864e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f003 0301 	and.w	r3, r3, #1
 800865a:	2b01      	cmp	r3, #1
 800865c:	d148      	bne.n	80086f0 <HAL_SPI_TransmitReceive+0x3aa>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008664:	b29b      	uxth	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d042      	beq.n	80086f0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008670:	b29b      	uxth	r3, r3
 8008672:	2b01      	cmp	r3, #1
 8008674:	d923      	bls.n	80086be <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68da      	ldr	r2, [r3, #12]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008680:	b292      	uxth	r2, r2
 8008682:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008688:	1c9a      	adds	r2, r3, #2
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008694:	b29b      	uxth	r3, r3
 8008696:	3b02      	subs	r3, #2
 8008698:	b29a      	uxth	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d81f      	bhi.n	80086ec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	685a      	ldr	r2, [r3, #4]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80086ba:	605a      	str	r2, [r3, #4]
 80086bc:	e016      	b.n	80086ec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f103 020c 	add.w	r2, r3, #12
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ca:	7812      	ldrb	r2, [r2, #0]
 80086cc:	b2d2      	uxtb	r2, r2
 80086ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d4:	1c5a      	adds	r2, r3, #1
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	3b01      	subs	r3, #1
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80086ec:	2301      	movs	r3, #1
 80086ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80086f0:	f7fb fe6a 	bl	80043c8 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	6a3b      	ldr	r3, [r7, #32]
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d803      	bhi.n	8008708 <HAL_SPI_TransmitReceive+0x3c2>
 8008700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008706:	d102      	bne.n	800870e <HAL_SPI_TransmitReceive+0x3c8>
 8008708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870a:	2b00      	cmp	r3, #0
 800870c:	d109      	bne.n	8008722 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e02c      	b.n	800877c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008726:	b29b      	uxth	r3, r3
 8008728:	2b00      	cmp	r3, #0
 800872a:	f47f af55 	bne.w	80085d8 <HAL_SPI_TransmitReceive+0x292>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008734:	b29b      	uxth	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	f47f af4e 	bne.w	80085d8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800873c:	6a3a      	ldr	r2, [r7, #32]
 800873e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 fc1b 	bl	8008f7c <SPI_EndRxTxTransaction>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d008      	beq.n	800875e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2220      	movs	r2, #32
 8008750:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e00e      	b.n	800877c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800877a:	2300      	movs	r3, #0
  }
}
 800877c:	4618      	mov	r0, r3
 800877e:	3728      	adds	r7, #40	@ 0x28
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8008784:	b480      	push	{r7}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
 8008790:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008798:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80087a0:	7dfb      	ldrb	r3, [r7, #23]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d00c      	beq.n	80087c0 <HAL_SPI_TransmitReceive_IT+0x3c>
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80087ac:	d106      	bne.n	80087bc <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d102      	bne.n	80087bc <HAL_SPI_TransmitReceive_IT+0x38>
 80087b6:	7dfb      	ldrb	r3, [r7, #23]
 80087b8:	2b04      	cmp	r3, #4
 80087ba:	d001      	beq.n	80087c0 <HAL_SPI_TransmitReceive_IT+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80087bc:	2302      	movs	r3, #2
 80087be:	e07d      	b.n	80088bc <HAL_SPI_TransmitReceive_IT+0x138>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d005      	beq.n	80087d2 <HAL_SPI_TransmitReceive_IT+0x4e>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <HAL_SPI_TransmitReceive_IT+0x4e>
 80087cc:	887b      	ldrh	r3, [r7, #2]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d101      	bne.n	80087d6 <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e072      	b.n	80088bc <HAL_SPI_TransmitReceive_IT+0x138>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d101      	bne.n	80087e4 <HAL_SPI_TransmitReceive_IT+0x60>
 80087e0:	2302      	movs	r3, #2
 80087e2:	e06b      	b.n	80088bc <HAL_SPI_TransmitReceive_IT+0x138>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b04      	cmp	r3, #4
 80087f6:	d003      	beq.n	8008800 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2205      	movs	r2, #5
 80087fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	887a      	ldrh	r2, [r7, #2]
 8008810:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	887a      	ldrh	r2, [r7, #2]
 8008816:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	887a      	ldrh	r2, [r7, #2]
 8008822:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	887a      	ldrh	r2, [r7, #2]
 800882a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008836:	d906      	bls.n	8008846 <HAL_SPI_TransmitReceive_IT+0xc2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	4a23      	ldr	r2, [pc, #140]	@ (80088c8 <HAL_SPI_TransmitReceive_IT+0x144>)
 800883c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	4a22      	ldr	r2, [pc, #136]	@ (80088cc <HAL_SPI_TransmitReceive_IT+0x148>)
 8008842:	651a      	str	r2, [r3, #80]	@ 0x50
 8008844:	e005      	b.n	8008852 <HAL_SPI_TransmitReceive_IT+0xce>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	4a21      	ldr	r2, [pc, #132]	@ (80088d0 <HAL_SPI_TransmitReceive_IT+0x14c>)
 800884a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4a21      	ldr	r2, [pc, #132]	@ (80088d4 <HAL_SPI_TransmitReceive_IT+0x150>)
 8008850:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800885a:	d802      	bhi.n	8008862 <HAL_SPI_TransmitReceive_IT+0xde>
 800885c:	887b      	ldrh	r3, [r7, #2]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d908      	bls.n	8008874 <HAL_SPI_TransmitReceive_IT+0xf0>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008870:	605a      	str	r2, [r3, #4]
 8008872:	e007      	b.n	8008884 <HAL_SPI_TransmitReceive_IT+0x100>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685a      	ldr	r2, [r3, #4]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008882:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800888e:	2b40      	cmp	r3, #64	@ 0x40
 8008890:	d007      	beq.n	80088a2 <HAL_SPI_TransmitReceive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088a0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	685a      	ldr	r2, [r3, #4]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 80088b8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	371c      	adds	r7, #28
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	08008c7b 	.word	0x08008c7b
 80088cc:	08008ce1 	.word	0x08008ce1
 80088d0:	08008b2b 	.word	0x08008b2b
 80088d4:	08008be9 	.word	0x08008be9

080088d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	099b      	lsrs	r3, r3, #6
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d10f      	bne.n	800891c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00a      	beq.n	800891c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	099b      	lsrs	r3, r3, #6
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	d004      	beq.n	800891c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	4798      	blx	r3
    return;
 800891a:	e0d7      	b.n	8008acc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	085b      	lsrs	r3, r3, #1
 8008920:	f003 0301 	and.w	r3, r3, #1
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00a      	beq.n	800893e <HAL_SPI_IRQHandler+0x66>
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	09db      	lsrs	r3, r3, #7
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	2b00      	cmp	r3, #0
 8008932:	d004      	beq.n	800893e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	4798      	blx	r3
    return;
 800893c:	e0c6      	b.n	8008acc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800893e:	69bb      	ldr	r3, [r7, #24]
 8008940:	095b      	lsrs	r3, r3, #5
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10c      	bne.n	8008964 <HAL_SPI_IRQHandler+0x8c>
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	099b      	lsrs	r3, r3, #6
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b00      	cmp	r3, #0
 8008954:	d106      	bne.n	8008964 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	0a1b      	lsrs	r3, r3, #8
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	2b00      	cmp	r3, #0
 8008960:	f000 80b4 	beq.w	8008acc <HAL_SPI_IRQHandler+0x1f4>
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	095b      	lsrs	r3, r3, #5
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 80ad 	beq.w	8008acc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	099b      	lsrs	r3, r3, #6
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	d023      	beq.n	80089c6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b03      	cmp	r3, #3
 8008988:	d011      	beq.n	80089ae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800898e:	f043 0204 	orr.w	r2, r3, #4
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008996:	2300      	movs	r3, #0
 8008998:	617b      	str	r3, [r7, #20]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	617b      	str	r3, [r7, #20]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	617b      	str	r3, [r7, #20]
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	e00b      	b.n	80089c6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089ae:	2300      	movs	r3, #0
 80089b0:	613b      	str	r3, [r7, #16]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	613b      	str	r3, [r7, #16]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	613b      	str	r3, [r7, #16]
 80089c2:	693b      	ldr	r3, [r7, #16]
        return;
 80089c4:	e082      	b.n	8008acc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	095b      	lsrs	r3, r3, #5
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d014      	beq.n	80089fc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089d6:	f043 0201 	orr.w	r2, r3, #1
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80089de:	2300      	movs	r3, #0
 80089e0:	60fb      	str	r3, [r7, #12]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	60fb      	str	r3, [r7, #12]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	0a1b      	lsrs	r3, r3, #8
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00c      	beq.n	8008a22 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a0c:	f043 0208 	orr.w	r2, r3, #8
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008a14:	2300      	movs	r3, #0
 8008a16:	60bb      	str	r3, [r7, #8]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	60bb      	str	r3, [r7, #8]
 8008a20:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d04f      	beq.n	8008aca <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008a38:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	f003 0302 	and.w	r3, r3, #2
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d104      	bne.n	8008a56 <HAL_SPI_IRQHandler+0x17e>
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d034      	beq.n	8008ac0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f022 0203 	bic.w	r2, r2, #3
 8008a64:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d011      	beq.n	8008a92 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a72:	4a18      	ldr	r2, [pc, #96]	@ (8008ad4 <HAL_SPI_IRQHandler+0x1fc>)
 8008a74:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fc fbec 	bl	8005258 <HAL_DMA_Abort_IT>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d005      	beq.n	8008a92 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d016      	beq.n	8008ac8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8008ad4 <HAL_SPI_IRQHandler+0x1fc>)
 8008aa0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fc fbd6 	bl	8005258 <HAL_DMA_Abort_IT>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00a      	beq.n	8008ac8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ab6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8008abe:	e003      	b.n	8008ac8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f813 	bl	8008aec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008ac6:	e000      	b.n	8008aca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008ac8:	bf00      	nop
    return;
 8008aca:	bf00      	nop
  }
}
 8008acc:	3720      	adds	r7, #32
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	08008b01 	.word	0x08008b01

08008ad8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b0c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f7ff ffe5 	bl	8008aec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008b22:	bf00      	nop
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b082      	sub	sp, #8
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d923      	bls.n	8008b86 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68da      	ldr	r2, [r3, #12]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b48:	b292      	uxth	r2, r2
 8008b4a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b50:	1c9a      	adds	r2, r3, #2
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount -= 2U;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	3b02      	subs	r3, #2
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    if (hspi->RxXferCount == 1U)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d11f      	bne.n	8008bb4 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008b82:	605a      	str	r2, [r3, #4]
 8008b84:	e016      	b.n	8008bb4 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f103 020c 	add.w	r2, r3, #12
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b92:	7812      	ldrb	r2, [r2, #0]
 8008b94:	b2d2      	uxtb	r2, r2
 8008b96:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b9c:	1c5a      	adds	r2, r3, #1
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->RxXferCount--;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	3b01      	subs	r3, #1
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10f      	bne.n	8008be0 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	685a      	ldr	r2, [r3, #4]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008bce:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d102      	bne.n	8008be0 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fa38 	bl	8009050 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008be0:	bf00      	nop
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d912      	bls.n	8008c20 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bfe:	881a      	ldrh	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0a:	1c9a      	adds	r2, r3, #2
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount -= 2U;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	3b02      	subs	r3, #2
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008c1e:	e012      	b.n	8008c46 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	330c      	adds	r3, #12
 8008c2a:	7812      	ldrb	r2, [r2, #0]
 8008c2c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c32:	1c5a      	adds	r2, r3, #1
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	639a      	str	r2, [r3, #56]	@ 0x38
    hspi->TxXferCount--;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d110      	bne.n	8008c72 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c5e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d102      	bne.n	8008c72 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f9ef 	bl	8009050 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b082      	sub	sp, #8
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68da      	ldr	r2, [r3, #12]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c8c:	b292      	uxth	r2, r2
 8008c8e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c94:	1c9a      	adds	r2, r3, #2
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount--;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  if (hspi->RxXferCount == 0U)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10f      	bne.n	8008cd8 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cc6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d102      	bne.n	8008cd8 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f9bc 	bl	8009050 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008cd8:	bf00      	nop
 8008cda:	3708      	adds	r7, #8
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cec:	881a      	ldrh	r2, [r3, #0]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf8:	1c9a      	adds	r2, r3, #2
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	3b01      	subs	r3, #1
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d110      	bne.n	8008d38 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008d24:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d102      	bne.n	8008d38 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f98c 	bl	8009050 <SPI_CloseRxTx_ISR>
    }
  }
}
 8008d38:	bf00      	nop
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b088      	sub	sp, #32
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	603b      	str	r3, [r7, #0]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d50:	f7fb fb3a 	bl	80043c8 <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d58:	1a9b      	subs	r3, r3, r2
 8008d5a:	683a      	ldr	r2, [r7, #0]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d60:	f7fb fb32 	bl	80043c8 <HAL_GetTick>
 8008d64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d66:	4b39      	ldr	r3, [pc, #228]	@ (8008e4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	015b      	lsls	r3, r3, #5
 8008d6c:	0d1b      	lsrs	r3, r3, #20
 8008d6e:	69fa      	ldr	r2, [r7, #28]
 8008d70:	fb02 f303 	mul.w	r3, r2, r3
 8008d74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d76:	e055      	b.n	8008e24 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7e:	d051      	beq.n	8008e24 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d80:	f7fb fb22 	bl	80043c8 <HAL_GetTick>
 8008d84:	4602      	mov	r2, r0
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	69fa      	ldr	r2, [r7, #28]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d902      	bls.n	8008d96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d13d      	bne.n	8008e12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008da4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008dae:	d111      	bne.n	8008dd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008db8:	d004      	beq.n	8008dc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dc2:	d107      	bne.n	8008dd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008dd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ddc:	d10f      	bne.n	8008dfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008dfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2201      	movs	r2, #1
 8008e02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e018      	b.n	8008e44 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d102      	bne.n	8008e1e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	61fb      	str	r3, [r7, #28]
 8008e1c:	e002      	b.n	8008e24 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	689a      	ldr	r2, [r3, #8]
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	bf0c      	ite	eq
 8008e34:	2301      	moveq	r3, #1
 8008e36:	2300      	movne	r3, #0
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	79fb      	ldrb	r3, [r7, #7]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d19a      	bne.n	8008d78 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3720      	adds	r7, #32
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	200000e0 	.word	0x200000e0

08008e50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b08a      	sub	sp, #40	@ 0x28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
 8008e5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008e62:	f7fb fab1 	bl	80043c8 <HAL_GetTick>
 8008e66:	4602      	mov	r2, r0
 8008e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6a:	1a9b      	subs	r3, r3, r2
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	4413      	add	r3, r2
 8008e70:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008e72:	f7fb faa9 	bl	80043c8 <HAL_GetTick>
 8008e76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	330c      	adds	r3, #12
 8008e7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008e80:	4b3d      	ldr	r3, [pc, #244]	@ (8008f78 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	4613      	mov	r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	4413      	add	r3, r2
 8008e8a:	00da      	lsls	r2, r3, #3
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	0d1b      	lsrs	r3, r3, #20
 8008e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e92:	fb02 f303 	mul.w	r3, r2, r3
 8008e96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008e98:	e061      	b.n	8008f5e <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008ea0:	d107      	bne.n	8008eb2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d104      	bne.n	8008eb2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb8:	d051      	beq.n	8008f5e <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008eba:	f7fb fa85 	bl	80043c8 <HAL_GetTick>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d902      	bls.n	8008ed0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d13d      	bne.n	8008f4c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008ede:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ee8:	d111      	bne.n	8008f0e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ef2:	d004      	beq.n	8008efe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008efc:	d107      	bne.n	8008f0e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f16:	d10f      	bne.n	8008f38 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f26:	601a      	str	r2, [r3, #0]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e011      	b.n	8008f70 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d102      	bne.n	8008f58 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f56:	e002      	b.n	8008f5e <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689a      	ldr	r2, [r3, #8]
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	4013      	ands	r3, r2
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d195      	bne.n	8008e9a <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3728      	adds	r7, #40	@ 0x28
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	200000e0 	.word	0x200000e0

08008f7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b088      	sub	sp, #32
 8008f80:	af02      	add	r7, sp, #8
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	9300      	str	r3, [sp, #0]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f7ff ff5b 	bl	8008e50 <SPI_WaitFifoStateUntilTimeout>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d007      	beq.n	8008fb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fa4:	f043 0220 	orr.w	r2, r3, #32
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008fac:	2303      	movs	r3, #3
 8008fae:	e046      	b.n	800903e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008fb0:	4b25      	ldr	r3, [pc, #148]	@ (8009048 <SPI_EndRxTxTransaction+0xcc>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a25      	ldr	r2, [pc, #148]	@ (800904c <SPI_EndRxTxTransaction+0xd0>)
 8008fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fba:	0d5b      	lsrs	r3, r3, #21
 8008fbc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008fc0:	fb02 f303 	mul.w	r3, r2, r3
 8008fc4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fce:	d112      	bne.n	8008ff6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2180      	movs	r1, #128	@ 0x80
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f7ff feb0 	bl	8008d40 <SPI_WaitFlagStateUntilTimeout>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d016      	beq.n	8009014 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fea:	f043 0220 	orr.w	r2, r3, #32
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e023      	b.n	800903e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00a      	beq.n	8009012 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	3b01      	subs	r3, #1
 8009000:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800900c:	2b80      	cmp	r3, #128	@ 0x80
 800900e:	d0f2      	beq.n	8008ff6 <SPI_EndRxTxTransaction+0x7a>
 8009010:	e000      	b.n	8009014 <SPI_EndRxTxTransaction+0x98>
        break;
 8009012:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2200      	movs	r2, #0
 800901c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f7ff ff15 	bl	8008e50 <SPI_WaitFifoStateUntilTimeout>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d007      	beq.n	800903c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009030:	f043 0220 	orr.w	r2, r3, #32
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e000      	b.n	800903e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3718      	adds	r7, #24
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	200000e0 	.word	0x200000e0
 800904c:	165e9f81 	.word	0x165e9f81

08009050 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009058:	f7fb f9b6 	bl	80043c8 <HAL_GetTick>
 800905c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	685a      	ldr	r2, [r3, #4]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f022 0220 	bic.w	r2, r2, #32
 800906c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	2164      	movs	r1, #100	@ 0x64
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7ff ff82 	bl	8008f7c <SPI_EndRxTxTransaction>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d005      	beq.n	800908a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009082:	f043 0220 	orr.w	r2, r3, #32
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	661a      	str	r2, [r3, #96]	@ 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800908e:	2b00      	cmp	r3, #0
 8009090:	d115      	bne.n	80090be <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b04      	cmp	r3, #4
 800909c:	d107      	bne.n	80090ae <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7ff fd16 	bl	8008ad8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80090ac:	e00e      	b.n	80090cc <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7fa fb6e 	bl	8003798 <HAL_SPI_TxRxCpltCallback>
}
 80090bc:	e006      	b.n	80090cc <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7ff fd10 	bl	8008aec <HAL_SPI_ErrorCallback>
}
 80090cc:	bf00      	nop
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e049      	b.n	800917a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d106      	bne.n	8009100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7fa fe40 	bl	8003d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2202      	movs	r2, #2
 8009104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	3304      	adds	r3, #4
 8009110:	4619      	mov	r1, r3
 8009112:	4610      	mov	r0, r2
 8009114:	f000 fb18 	bl	8009748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
	...

08009184 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b01      	cmp	r3, #1
 8009196:	d001      	beq.n	800919c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	e04c      	b.n	8009236 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2202      	movs	r2, #2
 80091a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a26      	ldr	r2, [pc, #152]	@ (8009244 <HAL_TIM_Base_Start+0xc0>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d022      	beq.n	80091f4 <HAL_TIM_Base_Start+0x70>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091b6:	d01d      	beq.n	80091f4 <HAL_TIM_Base_Start+0x70>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a22      	ldr	r2, [pc, #136]	@ (8009248 <HAL_TIM_Base_Start+0xc4>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d018      	beq.n	80091f4 <HAL_TIM_Base_Start+0x70>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a21      	ldr	r2, [pc, #132]	@ (800924c <HAL_TIM_Base_Start+0xc8>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d013      	beq.n	80091f4 <HAL_TIM_Base_Start+0x70>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a1f      	ldr	r2, [pc, #124]	@ (8009250 <HAL_TIM_Base_Start+0xcc>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d00e      	beq.n	80091f4 <HAL_TIM_Base_Start+0x70>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a1e      	ldr	r2, [pc, #120]	@ (8009254 <HAL_TIM_Base_Start+0xd0>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d009      	beq.n	80091f4 <HAL_TIM_Base_Start+0x70>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a1c      	ldr	r2, [pc, #112]	@ (8009258 <HAL_TIM_Base_Start+0xd4>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d004      	beq.n	80091f4 <HAL_TIM_Base_Start+0x70>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a1b      	ldr	r2, [pc, #108]	@ (800925c <HAL_TIM_Base_Start+0xd8>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d115      	bne.n	8009220 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	689a      	ldr	r2, [r3, #8]
 80091fa:	4b19      	ldr	r3, [pc, #100]	@ (8009260 <HAL_TIM_Base_Start+0xdc>)
 80091fc:	4013      	ands	r3, r2
 80091fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2b06      	cmp	r3, #6
 8009204:	d015      	beq.n	8009232 <HAL_TIM_Base_Start+0xae>
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800920c:	d011      	beq.n	8009232 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f042 0201 	orr.w	r2, r2, #1
 800921c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800921e:	e008      	b.n	8009232 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f042 0201 	orr.w	r2, r2, #1
 800922e:	601a      	str	r2, [r3, #0]
 8009230:	e000      	b.n	8009234 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009232:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	40010000 	.word	0x40010000
 8009248:	40000400 	.word	0x40000400
 800924c:	40000800 	.word	0x40000800
 8009250:	40000c00 	.word	0x40000c00
 8009254:	40010400 	.word	0x40010400
 8009258:	40014000 	.word	0x40014000
 800925c:	40001800 	.word	0x40001800
 8009260:	00010007 	.word	0x00010007

08009264 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009272:	b2db      	uxtb	r3, r3
 8009274:	2b01      	cmp	r3, #1
 8009276:	d001      	beq.n	800927c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e054      	b.n	8009326 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2202      	movs	r2, #2
 8009280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f042 0201 	orr.w	r2, r2, #1
 8009292:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a26      	ldr	r2, [pc, #152]	@ (8009334 <HAL_TIM_Base_Start_IT+0xd0>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d022      	beq.n	80092e4 <HAL_TIM_Base_Start_IT+0x80>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092a6:	d01d      	beq.n	80092e4 <HAL_TIM_Base_Start_IT+0x80>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a22      	ldr	r2, [pc, #136]	@ (8009338 <HAL_TIM_Base_Start_IT+0xd4>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d018      	beq.n	80092e4 <HAL_TIM_Base_Start_IT+0x80>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a21      	ldr	r2, [pc, #132]	@ (800933c <HAL_TIM_Base_Start_IT+0xd8>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d013      	beq.n	80092e4 <HAL_TIM_Base_Start_IT+0x80>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a1f      	ldr	r2, [pc, #124]	@ (8009340 <HAL_TIM_Base_Start_IT+0xdc>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d00e      	beq.n	80092e4 <HAL_TIM_Base_Start_IT+0x80>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a1e      	ldr	r2, [pc, #120]	@ (8009344 <HAL_TIM_Base_Start_IT+0xe0>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d009      	beq.n	80092e4 <HAL_TIM_Base_Start_IT+0x80>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a1c      	ldr	r2, [pc, #112]	@ (8009348 <HAL_TIM_Base_Start_IT+0xe4>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d004      	beq.n	80092e4 <HAL_TIM_Base_Start_IT+0x80>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a1b      	ldr	r2, [pc, #108]	@ (800934c <HAL_TIM_Base_Start_IT+0xe8>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d115      	bne.n	8009310 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	689a      	ldr	r2, [r3, #8]
 80092ea:	4b19      	ldr	r3, [pc, #100]	@ (8009350 <HAL_TIM_Base_Start_IT+0xec>)
 80092ec:	4013      	ands	r3, r2
 80092ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2b06      	cmp	r3, #6
 80092f4:	d015      	beq.n	8009322 <HAL_TIM_Base_Start_IT+0xbe>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092fc:	d011      	beq.n	8009322 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f042 0201 	orr.w	r2, r2, #1
 800930c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800930e:	e008      	b.n	8009322 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f042 0201 	orr.w	r2, r2, #1
 800931e:	601a      	str	r2, [r3, #0]
 8009320:	e000      	b.n	8009324 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009322:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009324:	2300      	movs	r3, #0
}
 8009326:	4618      	mov	r0, r3
 8009328:	3714      	adds	r7, #20
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	40010000 	.word	0x40010000
 8009338:	40000400 	.word	0x40000400
 800933c:	40000800 	.word	0x40000800
 8009340:	40000c00 	.word	0x40000c00
 8009344:	40010400 	.word	0x40010400
 8009348:	40014000 	.word	0x40014000
 800934c:	40001800 	.word	0x40001800
 8009350:	00010007 	.word	0x00010007

08009354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	f003 0302 	and.w	r3, r3, #2
 8009372:	2b00      	cmp	r3, #0
 8009374:	d020      	beq.n	80093b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f003 0302 	and.w	r3, r3, #2
 800937c:	2b00      	cmp	r3, #0
 800937e:	d01b      	beq.n	80093b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f06f 0202 	mvn.w	r2, #2
 8009388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2201      	movs	r2, #1
 800938e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	f003 0303 	and.w	r3, r3, #3
 800939a:	2b00      	cmp	r3, #0
 800939c:	d003      	beq.n	80093a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f9b4 	bl	800970c <HAL_TIM_IC_CaptureCallback>
 80093a4:	e005      	b.n	80093b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f9a6 	bl	80096f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f9b7 	bl	8009720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	f003 0304 	and.w	r3, r3, #4
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d020      	beq.n	8009404 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d01b      	beq.n	8009404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f06f 0204 	mvn.w	r2, #4
 80093d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2202      	movs	r2, #2
 80093da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d003      	beq.n	80093f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f98e 	bl	800970c <HAL_TIM_IC_CaptureCallback>
 80093f0:	e005      	b.n	80093fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f980 	bl	80096f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f991 	bl	8009720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f003 0308 	and.w	r3, r3, #8
 800940a:	2b00      	cmp	r3, #0
 800940c:	d020      	beq.n	8009450 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f003 0308 	and.w	r3, r3, #8
 8009414:	2b00      	cmp	r3, #0
 8009416:	d01b      	beq.n	8009450 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f06f 0208 	mvn.w	r2, #8
 8009420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2204      	movs	r2, #4
 8009426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	f003 0303 	and.w	r3, r3, #3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f968 	bl	800970c <HAL_TIM_IC_CaptureCallback>
 800943c:	e005      	b.n	800944a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f95a 	bl	80096f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f96b 	bl	8009720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f003 0310 	and.w	r3, r3, #16
 8009456:	2b00      	cmp	r3, #0
 8009458:	d020      	beq.n	800949c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f003 0310 	and.w	r3, r3, #16
 8009460:	2b00      	cmp	r3, #0
 8009462:	d01b      	beq.n	800949c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f06f 0210 	mvn.w	r2, #16
 800946c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2208      	movs	r2, #8
 8009472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f942 	bl	800970c <HAL_TIM_IC_CaptureCallback>
 8009488:	e005      	b.n	8009496 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f934 	bl	80096f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f945 	bl	8009720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	f003 0301 	and.w	r3, r3, #1
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00c      	beq.n	80094c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d007      	beq.n	80094c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f06f 0201 	mvn.w	r2, #1
 80094b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7f9 ffd0 	bl	8003460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d104      	bne.n	80094d4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00c      	beq.n	80094ee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d007      	beq.n	80094ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80094e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fb05 	bl	8009af8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00c      	beq.n	8009512 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d007      	beq.n	8009512 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800950a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fafd 	bl	8009b0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00c      	beq.n	8009536 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009522:	2b00      	cmp	r3, #0
 8009524:	d007      	beq.n	8009536 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800952e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f8ff 	bl	8009734 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f003 0320 	and.w	r3, r3, #32
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00c      	beq.n	800955a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f003 0320 	and.w	r3, r3, #32
 8009546:	2b00      	cmp	r3, #0
 8009548:	d007      	beq.n	800955a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f06f 0220 	mvn.w	r2, #32
 8009552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fac5 	bl	8009ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800955a:	bf00      	nop
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
	...

08009564 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009578:	2b01      	cmp	r3, #1
 800957a:	d101      	bne.n	8009580 <HAL_TIM_ConfigClockSource+0x1c>
 800957c:	2302      	movs	r3, #2
 800957e:	e0b4      	b.n	80096ea <HAL_TIM_ConfigClockSource+0x186>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2202      	movs	r2, #2
 800958c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	4b56      	ldr	r3, [pc, #344]	@ (80096f4 <HAL_TIM_ConfigClockSource+0x190>)
 800959c:	4013      	ands	r3, r2
 800959e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80095a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095b8:	d03e      	beq.n	8009638 <HAL_TIM_ConfigClockSource+0xd4>
 80095ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095be:	f200 8087 	bhi.w	80096d0 <HAL_TIM_ConfigClockSource+0x16c>
 80095c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095c6:	f000 8086 	beq.w	80096d6 <HAL_TIM_ConfigClockSource+0x172>
 80095ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095ce:	d87f      	bhi.n	80096d0 <HAL_TIM_ConfigClockSource+0x16c>
 80095d0:	2b70      	cmp	r3, #112	@ 0x70
 80095d2:	d01a      	beq.n	800960a <HAL_TIM_ConfigClockSource+0xa6>
 80095d4:	2b70      	cmp	r3, #112	@ 0x70
 80095d6:	d87b      	bhi.n	80096d0 <HAL_TIM_ConfigClockSource+0x16c>
 80095d8:	2b60      	cmp	r3, #96	@ 0x60
 80095da:	d050      	beq.n	800967e <HAL_TIM_ConfigClockSource+0x11a>
 80095dc:	2b60      	cmp	r3, #96	@ 0x60
 80095de:	d877      	bhi.n	80096d0 <HAL_TIM_ConfigClockSource+0x16c>
 80095e0:	2b50      	cmp	r3, #80	@ 0x50
 80095e2:	d03c      	beq.n	800965e <HAL_TIM_ConfigClockSource+0xfa>
 80095e4:	2b50      	cmp	r3, #80	@ 0x50
 80095e6:	d873      	bhi.n	80096d0 <HAL_TIM_ConfigClockSource+0x16c>
 80095e8:	2b40      	cmp	r3, #64	@ 0x40
 80095ea:	d058      	beq.n	800969e <HAL_TIM_ConfigClockSource+0x13a>
 80095ec:	2b40      	cmp	r3, #64	@ 0x40
 80095ee:	d86f      	bhi.n	80096d0 <HAL_TIM_ConfigClockSource+0x16c>
 80095f0:	2b30      	cmp	r3, #48	@ 0x30
 80095f2:	d064      	beq.n	80096be <HAL_TIM_ConfigClockSource+0x15a>
 80095f4:	2b30      	cmp	r3, #48	@ 0x30
 80095f6:	d86b      	bhi.n	80096d0 <HAL_TIM_ConfigClockSource+0x16c>
 80095f8:	2b20      	cmp	r3, #32
 80095fa:	d060      	beq.n	80096be <HAL_TIM_ConfigClockSource+0x15a>
 80095fc:	2b20      	cmp	r3, #32
 80095fe:	d867      	bhi.n	80096d0 <HAL_TIM_ConfigClockSource+0x16c>
 8009600:	2b00      	cmp	r3, #0
 8009602:	d05c      	beq.n	80096be <HAL_TIM_ConfigClockSource+0x15a>
 8009604:	2b10      	cmp	r3, #16
 8009606:	d05a      	beq.n	80096be <HAL_TIM_ConfigClockSource+0x15a>
 8009608:	e062      	b.n	80096d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800961a:	f000 f9b5 	bl	8009988 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800962c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	609a      	str	r2, [r3, #8]
      break;
 8009636:	e04f      	b.n	80096d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009648:	f000 f99e 	bl	8009988 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	689a      	ldr	r2, [r3, #8]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800965a:	609a      	str	r2, [r3, #8]
      break;
 800965c:	e03c      	b.n	80096d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800966a:	461a      	mov	r2, r3
 800966c:	f000 f912 	bl	8009894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2150      	movs	r1, #80	@ 0x50
 8009676:	4618      	mov	r0, r3
 8009678:	f000 f96b 	bl	8009952 <TIM_ITRx_SetConfig>
      break;
 800967c:	e02c      	b.n	80096d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800968a:	461a      	mov	r2, r3
 800968c:	f000 f931 	bl	80098f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2160      	movs	r1, #96	@ 0x60
 8009696:	4618      	mov	r0, r3
 8009698:	f000 f95b 	bl	8009952 <TIM_ITRx_SetConfig>
      break;
 800969c:	e01c      	b.n	80096d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096aa:	461a      	mov	r2, r3
 80096ac:	f000 f8f2 	bl	8009894 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2140      	movs	r1, #64	@ 0x40
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 f94b 	bl	8009952 <TIM_ITRx_SetConfig>
      break;
 80096bc:	e00c      	b.n	80096d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4619      	mov	r1, r3
 80096c8:	4610      	mov	r0, r2
 80096ca:	f000 f942 	bl	8009952 <TIM_ITRx_SetConfig>
      break;
 80096ce:	e003      	b.n	80096d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	73fb      	strb	r3, [r7, #15]
      break;
 80096d4:	e000      	b.n	80096d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80096d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	fffeff88 	.word	0xfffeff88

080096f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a43      	ldr	r2, [pc, #268]	@ (8009868 <TIM_Base_SetConfig+0x120>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d013      	beq.n	8009788 <TIM_Base_SetConfig+0x40>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009766:	d00f      	beq.n	8009788 <TIM_Base_SetConfig+0x40>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a40      	ldr	r2, [pc, #256]	@ (800986c <TIM_Base_SetConfig+0x124>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d00b      	beq.n	8009788 <TIM_Base_SetConfig+0x40>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a3f      	ldr	r2, [pc, #252]	@ (8009870 <TIM_Base_SetConfig+0x128>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d007      	beq.n	8009788 <TIM_Base_SetConfig+0x40>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a3e      	ldr	r2, [pc, #248]	@ (8009874 <TIM_Base_SetConfig+0x12c>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d003      	beq.n	8009788 <TIM_Base_SetConfig+0x40>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a3d      	ldr	r2, [pc, #244]	@ (8009878 <TIM_Base_SetConfig+0x130>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d108      	bne.n	800979a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800978e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	4313      	orrs	r3, r2
 8009798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a32      	ldr	r2, [pc, #200]	@ (8009868 <TIM_Base_SetConfig+0x120>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d02b      	beq.n	80097fa <TIM_Base_SetConfig+0xb2>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097a8:	d027      	beq.n	80097fa <TIM_Base_SetConfig+0xb2>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a2f      	ldr	r2, [pc, #188]	@ (800986c <TIM_Base_SetConfig+0x124>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d023      	beq.n	80097fa <TIM_Base_SetConfig+0xb2>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a2e      	ldr	r2, [pc, #184]	@ (8009870 <TIM_Base_SetConfig+0x128>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d01f      	beq.n	80097fa <TIM_Base_SetConfig+0xb2>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a2d      	ldr	r2, [pc, #180]	@ (8009874 <TIM_Base_SetConfig+0x12c>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d01b      	beq.n	80097fa <TIM_Base_SetConfig+0xb2>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a2c      	ldr	r2, [pc, #176]	@ (8009878 <TIM_Base_SetConfig+0x130>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d017      	beq.n	80097fa <TIM_Base_SetConfig+0xb2>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a2b      	ldr	r2, [pc, #172]	@ (800987c <TIM_Base_SetConfig+0x134>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d013      	beq.n	80097fa <TIM_Base_SetConfig+0xb2>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a2a      	ldr	r2, [pc, #168]	@ (8009880 <TIM_Base_SetConfig+0x138>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d00f      	beq.n	80097fa <TIM_Base_SetConfig+0xb2>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a29      	ldr	r2, [pc, #164]	@ (8009884 <TIM_Base_SetConfig+0x13c>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d00b      	beq.n	80097fa <TIM_Base_SetConfig+0xb2>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a28      	ldr	r2, [pc, #160]	@ (8009888 <TIM_Base_SetConfig+0x140>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d007      	beq.n	80097fa <TIM_Base_SetConfig+0xb2>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a27      	ldr	r2, [pc, #156]	@ (800988c <TIM_Base_SetConfig+0x144>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d003      	beq.n	80097fa <TIM_Base_SetConfig+0xb2>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a26      	ldr	r2, [pc, #152]	@ (8009890 <TIM_Base_SetConfig+0x148>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d108      	bne.n	800980c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	4313      	orrs	r3, r2
 800980a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	695b      	ldr	r3, [r3, #20]
 8009816:	4313      	orrs	r3, r2
 8009818:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	689a      	ldr	r2, [r3, #8]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a0e      	ldr	r2, [pc, #56]	@ (8009868 <TIM_Base_SetConfig+0x120>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d003      	beq.n	800983a <TIM_Base_SetConfig+0xf2>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a10      	ldr	r2, [pc, #64]	@ (8009878 <TIM_Base_SetConfig+0x130>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d103      	bne.n	8009842 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	691a      	ldr	r2, [r3, #16]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f043 0204 	orr.w	r2, r3, #4
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	601a      	str	r2, [r3, #0]
}
 800985a:	bf00      	nop
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	40010000 	.word	0x40010000
 800986c:	40000400 	.word	0x40000400
 8009870:	40000800 	.word	0x40000800
 8009874:	40000c00 	.word	0x40000c00
 8009878:	40010400 	.word	0x40010400
 800987c:	40014000 	.word	0x40014000
 8009880:	40014400 	.word	0x40014400
 8009884:	40014800 	.word	0x40014800
 8009888:	40001800 	.word	0x40001800
 800988c:	40001c00 	.word	0x40001c00
 8009890:	40002000 	.word	0x40002000

08009894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009894:	b480      	push	{r7}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6a1b      	ldr	r3, [r3, #32]
 80098a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	f023 0201 	bic.w	r2, r3, #1
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80098be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	011b      	lsls	r3, r3, #4
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f023 030a 	bic.w	r3, r3, #10
 80098d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	697a      	ldr	r2, [r7, #20]
 80098e4:	621a      	str	r2, [r3, #32]
}
 80098e6:	bf00      	nop
 80098e8:	371c      	adds	r7, #28
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr

080098f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098f2:	b480      	push	{r7}
 80098f4:	b087      	sub	sp, #28
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	60f8      	str	r0, [r7, #12]
 80098fa:	60b9      	str	r1, [r7, #8]
 80098fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6a1b      	ldr	r3, [r3, #32]
 8009908:	f023 0210 	bic.w	r2, r3, #16
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800991c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	031b      	lsls	r3, r3, #12
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	4313      	orrs	r3, r2
 8009926:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800992e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	011b      	lsls	r3, r3, #4
 8009934:	697a      	ldr	r2, [r7, #20]
 8009936:	4313      	orrs	r3, r2
 8009938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	621a      	str	r2, [r3, #32]
}
 8009946:	bf00      	nop
 8009948:	371c      	adds	r7, #28
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr

08009952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009952:	b480      	push	{r7}
 8009954:	b085      	sub	sp, #20
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800996a:	683a      	ldr	r2, [r7, #0]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4313      	orrs	r3, r2
 8009970:	f043 0307 	orr.w	r3, r3, #7
 8009974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	609a      	str	r2, [r3, #8]
}
 800997c:	bf00      	nop
 800997e:	3714      	adds	r7, #20
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	4770      	bx	lr

08009988 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009988:	b480      	push	{r7}
 800998a:	b087      	sub	sp, #28
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
 8009994:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80099a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	021a      	lsls	r2, r3, #8
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	431a      	orrs	r2, r3
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	697a      	ldr	r2, [r7, #20]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	609a      	str	r2, [r3, #8]
}
 80099bc:	bf00      	nop
 80099be:	371c      	adds	r7, #28
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d101      	bne.n	80099e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099dc:	2302      	movs	r3, #2
 80099de:	e06d      	b.n	8009abc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2202      	movs	r2, #2
 80099ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a30      	ldr	r2, [pc, #192]	@ (8009ac8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d004      	beq.n	8009a14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a2f      	ldr	r2, [pc, #188]	@ (8009acc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d108      	bne.n	8009a26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009a1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	68fa      	ldr	r2, [r7, #12]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a20      	ldr	r2, [pc, #128]	@ (8009ac8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d022      	beq.n	8009a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a52:	d01d      	beq.n	8009a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a1d      	ldr	r2, [pc, #116]	@ (8009ad0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d018      	beq.n	8009a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a1c      	ldr	r2, [pc, #112]	@ (8009ad4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d013      	beq.n	8009a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8009ad8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d00e      	beq.n	8009a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a15      	ldr	r2, [pc, #84]	@ (8009acc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d009      	beq.n	8009a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a16      	ldr	r2, [pc, #88]	@ (8009adc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d004      	beq.n	8009a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a15      	ldr	r2, [pc, #84]	@ (8009ae0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d10c      	bne.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	68ba      	ldr	r2, [r7, #8]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2201      	movs	r2, #1
 8009aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3714      	adds	r7, #20
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr
 8009ac8:	40010000 	.word	0x40010000
 8009acc:	40010400 	.word	0x40010400
 8009ad0:	40000400 	.word	0x40000400
 8009ad4:	40000800 	.word	0x40000800
 8009ad8:	40000c00 	.word	0x40000c00
 8009adc:	40014000 	.word	0x40014000
 8009ae0:	40001800 	.word	0x40001800

08009ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d101      	bne.n	8009b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e040      	b.n	8009bb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d106      	bne.n	8009b48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7fa fa32 	bl	8003fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2224      	movs	r2, #36	@ 0x24
 8009b4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f022 0201 	bic.w	r2, r2, #1
 8009b5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d002      	beq.n	8009b6c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fe46 	bl	800a7f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fbdf 	bl	800a330 <UART_SetConfig>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d101      	bne.n	8009b7c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e01b      	b.n	8009bb4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689a      	ldr	r2, [r3, #8]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f042 0201 	orr.w	r2, r2, #1
 8009baa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fec5 	bl	800a93c <UART_CheckIdleState>
 8009bb2:	4603      	mov	r3, r0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b08b      	sub	sp, #44	@ 0x2c
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009bce:	2b20      	cmp	r3, #32
 8009bd0:	d147      	bne.n	8009c62 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d002      	beq.n	8009bde <HAL_UART_Transmit_IT+0x22>
 8009bd8:	88fb      	ldrh	r3, [r7, #6]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e040      	b.n	8009c64 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	88fa      	ldrh	r2, [r7, #6]
 8009bec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	88fa      	ldrh	r2, [r7, #6]
 8009bf4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2221      	movs	r2, #33	@ 0x21
 8009c0a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c14:	d107      	bne.n	8009c26 <HAL_UART_Transmit_IT+0x6a>
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d103      	bne.n	8009c26 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	4a13      	ldr	r2, [pc, #76]	@ (8009c70 <HAL_UART_Transmit_IT+0xb4>)
 8009c22:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009c24:	e002      	b.n	8009c2c <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	4a12      	ldr	r2, [pc, #72]	@ (8009c74 <HAL_UART_Transmit_IT+0xb8>)
 8009c2a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	e853 3f00 	ldrex	r3, [r3]
 8009c38:	613b      	str	r3, [r7, #16]
   return(result);
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	461a      	mov	r2, r3
 8009c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4a:	623b      	str	r3, [r7, #32]
 8009c4c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4e:	69f9      	ldr	r1, [r7, #28]
 8009c50:	6a3a      	ldr	r2, [r7, #32]
 8009c52:	e841 2300 	strex	r3, r2, [r1]
 8009c56:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1e6      	bne.n	8009c2c <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	e000      	b.n	8009c64 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8009c62:	2302      	movs	r3, #2
  }
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	372c      	adds	r7, #44	@ 0x2c
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	0800b0e5 	.word	0x0800b0e5
 8009c74:	0800b02f 	.word	0x0800b02f

08009c78 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b08a      	sub	sp, #40	@ 0x28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	4613      	mov	r3, r2
 8009c84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c8c:	2b20      	cmp	r3, #32
 8009c8e:	d132      	bne.n	8009cf6 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d002      	beq.n	8009c9c <HAL_UART_Receive_DMA+0x24>
 8009c96:	88fb      	ldrh	r3, [r7, #6]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d101      	bne.n	8009ca0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e02b      	b.n	8009cf8 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d018      	beq.n	8009ce6 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	e853 3f00 	ldrex	r3, [r3]
 8009cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd2:	623b      	str	r3, [r7, #32]
 8009cd4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd6:	69f9      	ldr	r1, [r7, #28]
 8009cd8:	6a3a      	ldr	r2, [r7, #32]
 8009cda:	e841 2300 	strex	r3, r2, [r1]
 8009cde:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1e6      	bne.n	8009cb4 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009ce6:	88fb      	ldrh	r3, [r7, #6]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	68b9      	ldr	r1, [r7, #8]
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f000 ff3b 	bl	800ab68 <UART_Start_Receive_DMA>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	e000      	b.n	8009cf8 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009cf6:	2302      	movs	r3, #2
  }
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3728      	adds	r7, #40	@ 0x28
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b0ba      	sub	sp, #232	@ 0xe8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	69db      	ldr	r3, [r3, #28]
 8009d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009d26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009d2a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009d2e:	4013      	ands	r3, r2
 8009d30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009d34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d115      	bne.n	8009d68 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d40:	f003 0320 	and.w	r3, r3, #32
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00f      	beq.n	8009d68 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d4c:	f003 0320 	and.w	r3, r3, #32
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d009      	beq.n	8009d68 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 82c6 	beq.w	800a2ea <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	4798      	blx	r3
      }
      return;
 8009d66:	e2c0      	b.n	800a2ea <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009d68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 8117 	beq.w	8009fa0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d106      	bne.n	8009d8c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009d7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009d82:	4b85      	ldr	r3, [pc, #532]	@ (8009f98 <HAL_UART_IRQHandler+0x298>)
 8009d84:	4013      	ands	r3, r2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f000 810a 	beq.w	8009fa0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d90:	f003 0301 	and.w	r3, r3, #1
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d011      	beq.n	8009dbc <HAL_UART_IRQHandler+0xbc>
 8009d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00b      	beq.n	8009dbc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2201      	movs	r2, #1
 8009daa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009db2:	f043 0201 	orr.w	r2, r3, #1
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dc0:	f003 0302 	and.w	r3, r3, #2
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d011      	beq.n	8009dec <HAL_UART_IRQHandler+0xec>
 8009dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dcc:	f003 0301 	and.w	r3, r3, #1
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00b      	beq.n	8009dec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2202      	movs	r2, #2
 8009dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009de2:	f043 0204 	orr.w	r2, r3, #4
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009df0:	f003 0304 	and.w	r3, r3, #4
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d011      	beq.n	8009e1c <HAL_UART_IRQHandler+0x11c>
 8009df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00b      	beq.n	8009e1c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2204      	movs	r2, #4
 8009e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e12:	f043 0202 	orr.w	r2, r3, #2
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e20:	f003 0308 	and.w	r3, r3, #8
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d017      	beq.n	8009e58 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e2c:	f003 0320 	and.w	r3, r3, #32
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d105      	bne.n	8009e40 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00b      	beq.n	8009e58 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2208      	movs	r2, #8
 8009e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e4e:	f043 0208 	orr.w	r2, r3, #8
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d012      	beq.n	8009e8a <HAL_UART_IRQHandler+0x18a>
 8009e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00c      	beq.n	8009e8a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e80:	f043 0220 	orr.w	r2, r3, #32
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f000 822c 	beq.w	800a2ee <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e9a:	f003 0320 	and.w	r3, r3, #32
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00d      	beq.n	8009ebe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ea6:	f003 0320 	and.w	r3, r3, #32
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d007      	beq.n	8009ebe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d003      	beq.n	8009ebe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ec4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ed2:	2b40      	cmp	r3, #64	@ 0x40
 8009ed4:	d005      	beq.n	8009ee2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009eda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d04f      	beq.n	8009f82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 ff06 	bl	800acf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ef2:	2b40      	cmp	r3, #64	@ 0x40
 8009ef4:	d141      	bne.n	8009f7a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	3308      	adds	r3, #8
 8009efc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009f04:	e853 3f00 	ldrex	r3, [r3]
 8009f08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009f10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3308      	adds	r3, #8
 8009f1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009f22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009f26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009f2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009f32:	e841 2300 	strex	r3, r2, [r1]
 8009f36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1d9      	bne.n	8009ef6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d013      	beq.n	8009f72 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f4e:	4a13      	ldr	r2, [pc, #76]	@ (8009f9c <HAL_UART_IRQHandler+0x29c>)
 8009f50:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fb f97e 	bl	8005258 <HAL_DMA_Abort_IT>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d017      	beq.n	8009f92 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f70:	e00f      	b.n	8009f92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7fa f9ca 	bl	800430c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f78:	e00b      	b.n	8009f92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f7fa f9c6 	bl	800430c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f80:	e007      	b.n	8009f92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7fa f9c2 	bl	800430c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009f90:	e1ad      	b.n	800a2ee <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f92:	bf00      	nop
    return;
 8009f94:	e1ab      	b.n	800a2ee <HAL_UART_IRQHandler+0x5ee>
 8009f96:	bf00      	nop
 8009f98:	04000120 	.word	0x04000120
 8009f9c:	0800b00b 	.word	0x0800b00b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	f040 8166 	bne.w	800a276 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fae:	f003 0310 	and.w	r3, r3, #16
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 815f 	beq.w	800a276 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fbc:	f003 0310 	and.w	r3, r3, #16
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f000 8158 	beq.w	800a276 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2210      	movs	r2, #16
 8009fcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fd8:	2b40      	cmp	r3, #64	@ 0x40
 8009fda:	f040 80d0 	bne.w	800a17e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009fea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f000 80ab 	beq.w	800a14a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ffe:	429a      	cmp	r2, r3
 800a000:	f080 80a3 	bcs.w	800a14a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a00a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a012:	69db      	ldr	r3, [r3, #28]
 800a014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a018:	f000 8086 	beq.w	800a128 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a024:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a028:	e853 3f00 	ldrex	r3, [r3]
 800a02c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a030:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a038:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	461a      	mov	r2, r3
 800a042:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a046:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a04a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a052:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a056:	e841 2300 	strex	r3, r2, [r1]
 800a05a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a05e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1da      	bne.n	800a01c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3308      	adds	r3, #8
 800a06c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a070:	e853 3f00 	ldrex	r3, [r3]
 800a074:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a076:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a078:	f023 0301 	bic.w	r3, r3, #1
 800a07c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	3308      	adds	r3, #8
 800a086:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a08a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a08e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a090:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a092:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a096:	e841 2300 	strex	r3, r2, [r1]
 800a09a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a09c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1e1      	bne.n	800a066 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	3308      	adds	r3, #8
 800a0a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a0ac:	e853 3f00 	ldrex	r3, [r3]
 800a0b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a0b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3308      	adds	r3, #8
 800a0c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a0c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a0c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a0cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a0ce:	e841 2300 	strex	r3, r2, [r1]
 800a0d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a0d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1e3      	bne.n	800a0a2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2220      	movs	r2, #32
 800a0de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0f0:	e853 3f00 	ldrex	r3, [r3]
 800a0f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a0f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0f8:	f023 0310 	bic.w	r3, r3, #16
 800a0fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	461a      	mov	r2, r3
 800a106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a10a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a10c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a110:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a112:	e841 2300 	strex	r3, r2, [r1]
 800a116:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1e4      	bne.n	800a0e8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a122:	4618      	mov	r0, r3
 800a124:	f7fb f828 	bl	8005178 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	b29b      	uxth	r3, r3
 800a140:	4619      	mov	r1, r3
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f8de 	bl	800a304 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a148:	e0d3      	b.n	800a2f2 <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a150:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a154:	429a      	cmp	r2, r3
 800a156:	f040 80cc 	bne.w	800a2f2 <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a15e:	69db      	ldr	r3, [r3, #28]
 800a160:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a164:	f040 80c5 	bne.w	800a2f2 <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2202      	movs	r2, #2
 800a16c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a174:	4619      	mov	r1, r3
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f8c4 	bl	800a304 <HAL_UARTEx_RxEventCallback>
      return;
 800a17c:	e0b9      	b.n	800a2f2 <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a198:	b29b      	uxth	r3, r3
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 80ab 	beq.w	800a2f6 <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 800a1a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 80a6 	beq.w	800a2f6 <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b2:	e853 3f00 	ldrex	r3, [r3]
 800a1b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a1b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a1cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a1d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1d4:	e841 2300 	strex	r3, r2, [r1]
 800a1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1e4      	bne.n	800a1aa <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3308      	adds	r3, #8
 800a1e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ea:	e853 3f00 	ldrex	r3, [r3]
 800a1ee:	623b      	str	r3, [r7, #32]
   return(result);
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	f023 0301 	bic.w	r3, r3, #1
 800a1f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3308      	adds	r3, #8
 800a200:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a204:	633a      	str	r2, [r7, #48]	@ 0x30
 800a206:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a208:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a20a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a20c:	e841 2300 	strex	r3, r2, [r1]
 800a210:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1e3      	bne.n	800a1e0 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2220      	movs	r2, #32
 800a21c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	e853 3f00 	ldrex	r3, [r3]
 800a238:	60fb      	str	r3, [r7, #12]
   return(result);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f023 0310 	bic.w	r3, r3, #16
 800a240:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	461a      	mov	r2, r3
 800a24a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a24e:	61fb      	str	r3, [r7, #28]
 800a250:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a252:	69b9      	ldr	r1, [r7, #24]
 800a254:	69fa      	ldr	r2, [r7, #28]
 800a256:	e841 2300 	strex	r3, r2, [r1]
 800a25a:	617b      	str	r3, [r7, #20]
   return(result);
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1e4      	bne.n	800a22c <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2202      	movs	r2, #2
 800a266:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a268:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a26c:	4619      	mov	r1, r3
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f848 	bl	800a304 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a274:	e03f      	b.n	800a2f6 <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a27a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00e      	beq.n	800a2a0 <HAL_UART_IRQHandler+0x5a0>
 800a282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d008      	beq.n	800a2a0 <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a296:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 f83f 	bl	800a31c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a29e:	e02d      	b.n	800a2fc <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d00e      	beq.n	800a2ca <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a2ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d008      	beq.n	800a2ca <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d01c      	beq.n	800a2fa <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	4798      	blx	r3
    }
    return;
 800a2c8:	e017      	b.n	800a2fa <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a2ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d012      	beq.n	800a2fc <HAL_UART_IRQHandler+0x5fc>
 800a2d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00c      	beq.n	800a2fc <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 ff5e 	bl	800b1a4 <UART_EndTransmit_IT>
    return;
 800a2e8:	e008      	b.n	800a2fc <HAL_UART_IRQHandler+0x5fc>
      return;
 800a2ea:	bf00      	nop
 800a2ec:	e006      	b.n	800a2fc <HAL_UART_IRQHandler+0x5fc>
    return;
 800a2ee:	bf00      	nop
 800a2f0:	e004      	b.n	800a2fc <HAL_UART_IRQHandler+0x5fc>
      return;
 800a2f2:	bf00      	nop
 800a2f4:	e002      	b.n	800a2fc <HAL_UART_IRQHandler+0x5fc>
      return;
 800a2f6:	bf00      	nop
 800a2f8:	e000      	b.n	800a2fc <HAL_UART_IRQHandler+0x5fc>
    return;
 800a2fa:	bf00      	nop
  }

}
 800a2fc:	37e8      	adds	r7, #232	@ 0xe8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop

0800a304 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	460b      	mov	r3, r1
 800a30e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a310:	bf00      	nop
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a324:	bf00      	nop
 800a326:	370c      	adds	r7, #12
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b088      	sub	sp, #32
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a338:	2300      	movs	r3, #0
 800a33a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	689a      	ldr	r2, [r3, #8]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	431a      	orrs	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	695b      	ldr	r3, [r3, #20]
 800a34a:	431a      	orrs	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	69db      	ldr	r3, [r3, #28]
 800a350:	4313      	orrs	r3, r2
 800a352:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	4ba6      	ldr	r3, [pc, #664]	@ (800a5f4 <UART_SetConfig+0x2c4>)
 800a35c:	4013      	ands	r3, r2
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	6812      	ldr	r2, [r2, #0]
 800a362:	6979      	ldr	r1, [r7, #20]
 800a364:	430b      	orrs	r3, r1
 800a366:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68da      	ldr	r2, [r3, #12]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	430a      	orrs	r2, r1
 800a37c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6a1b      	ldr	r3, [r3, #32]
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	430a      	orrs	r2, r1
 800a3a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a94      	ldr	r2, [pc, #592]	@ (800a5f8 <UART_SetConfig+0x2c8>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d120      	bne.n	800a3ee <UART_SetConfig+0xbe>
 800a3ac:	4b93      	ldr	r3, [pc, #588]	@ (800a5fc <UART_SetConfig+0x2cc>)
 800a3ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3b2:	f003 0303 	and.w	r3, r3, #3
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	d816      	bhi.n	800a3e8 <UART_SetConfig+0xb8>
 800a3ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c0 <UART_SetConfig+0x90>)
 800a3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c0:	0800a3d1 	.word	0x0800a3d1
 800a3c4:	0800a3dd 	.word	0x0800a3dd
 800a3c8:	0800a3d7 	.word	0x0800a3d7
 800a3cc:	0800a3e3 	.word	0x0800a3e3
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	77fb      	strb	r3, [r7, #31]
 800a3d4:	e150      	b.n	800a678 <UART_SetConfig+0x348>
 800a3d6:	2302      	movs	r3, #2
 800a3d8:	77fb      	strb	r3, [r7, #31]
 800a3da:	e14d      	b.n	800a678 <UART_SetConfig+0x348>
 800a3dc:	2304      	movs	r3, #4
 800a3de:	77fb      	strb	r3, [r7, #31]
 800a3e0:	e14a      	b.n	800a678 <UART_SetConfig+0x348>
 800a3e2:	2308      	movs	r3, #8
 800a3e4:	77fb      	strb	r3, [r7, #31]
 800a3e6:	e147      	b.n	800a678 <UART_SetConfig+0x348>
 800a3e8:	2310      	movs	r3, #16
 800a3ea:	77fb      	strb	r3, [r7, #31]
 800a3ec:	e144      	b.n	800a678 <UART_SetConfig+0x348>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a83      	ldr	r2, [pc, #524]	@ (800a600 <UART_SetConfig+0x2d0>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d132      	bne.n	800a45e <UART_SetConfig+0x12e>
 800a3f8:	4b80      	ldr	r3, [pc, #512]	@ (800a5fc <UART_SetConfig+0x2cc>)
 800a3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3fe:	f003 030c 	and.w	r3, r3, #12
 800a402:	2b0c      	cmp	r3, #12
 800a404:	d828      	bhi.n	800a458 <UART_SetConfig+0x128>
 800a406:	a201      	add	r2, pc, #4	@ (adr r2, 800a40c <UART_SetConfig+0xdc>)
 800a408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40c:	0800a441 	.word	0x0800a441
 800a410:	0800a459 	.word	0x0800a459
 800a414:	0800a459 	.word	0x0800a459
 800a418:	0800a459 	.word	0x0800a459
 800a41c:	0800a44d 	.word	0x0800a44d
 800a420:	0800a459 	.word	0x0800a459
 800a424:	0800a459 	.word	0x0800a459
 800a428:	0800a459 	.word	0x0800a459
 800a42c:	0800a447 	.word	0x0800a447
 800a430:	0800a459 	.word	0x0800a459
 800a434:	0800a459 	.word	0x0800a459
 800a438:	0800a459 	.word	0x0800a459
 800a43c:	0800a453 	.word	0x0800a453
 800a440:	2300      	movs	r3, #0
 800a442:	77fb      	strb	r3, [r7, #31]
 800a444:	e118      	b.n	800a678 <UART_SetConfig+0x348>
 800a446:	2302      	movs	r3, #2
 800a448:	77fb      	strb	r3, [r7, #31]
 800a44a:	e115      	b.n	800a678 <UART_SetConfig+0x348>
 800a44c:	2304      	movs	r3, #4
 800a44e:	77fb      	strb	r3, [r7, #31]
 800a450:	e112      	b.n	800a678 <UART_SetConfig+0x348>
 800a452:	2308      	movs	r3, #8
 800a454:	77fb      	strb	r3, [r7, #31]
 800a456:	e10f      	b.n	800a678 <UART_SetConfig+0x348>
 800a458:	2310      	movs	r3, #16
 800a45a:	77fb      	strb	r3, [r7, #31]
 800a45c:	e10c      	b.n	800a678 <UART_SetConfig+0x348>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a68      	ldr	r2, [pc, #416]	@ (800a604 <UART_SetConfig+0x2d4>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d120      	bne.n	800a4aa <UART_SetConfig+0x17a>
 800a468:	4b64      	ldr	r3, [pc, #400]	@ (800a5fc <UART_SetConfig+0x2cc>)
 800a46a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a46e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a472:	2b30      	cmp	r3, #48	@ 0x30
 800a474:	d013      	beq.n	800a49e <UART_SetConfig+0x16e>
 800a476:	2b30      	cmp	r3, #48	@ 0x30
 800a478:	d814      	bhi.n	800a4a4 <UART_SetConfig+0x174>
 800a47a:	2b20      	cmp	r3, #32
 800a47c:	d009      	beq.n	800a492 <UART_SetConfig+0x162>
 800a47e:	2b20      	cmp	r3, #32
 800a480:	d810      	bhi.n	800a4a4 <UART_SetConfig+0x174>
 800a482:	2b00      	cmp	r3, #0
 800a484:	d002      	beq.n	800a48c <UART_SetConfig+0x15c>
 800a486:	2b10      	cmp	r3, #16
 800a488:	d006      	beq.n	800a498 <UART_SetConfig+0x168>
 800a48a:	e00b      	b.n	800a4a4 <UART_SetConfig+0x174>
 800a48c:	2300      	movs	r3, #0
 800a48e:	77fb      	strb	r3, [r7, #31]
 800a490:	e0f2      	b.n	800a678 <UART_SetConfig+0x348>
 800a492:	2302      	movs	r3, #2
 800a494:	77fb      	strb	r3, [r7, #31]
 800a496:	e0ef      	b.n	800a678 <UART_SetConfig+0x348>
 800a498:	2304      	movs	r3, #4
 800a49a:	77fb      	strb	r3, [r7, #31]
 800a49c:	e0ec      	b.n	800a678 <UART_SetConfig+0x348>
 800a49e:	2308      	movs	r3, #8
 800a4a0:	77fb      	strb	r3, [r7, #31]
 800a4a2:	e0e9      	b.n	800a678 <UART_SetConfig+0x348>
 800a4a4:	2310      	movs	r3, #16
 800a4a6:	77fb      	strb	r3, [r7, #31]
 800a4a8:	e0e6      	b.n	800a678 <UART_SetConfig+0x348>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a56      	ldr	r2, [pc, #344]	@ (800a608 <UART_SetConfig+0x2d8>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d120      	bne.n	800a4f6 <UART_SetConfig+0x1c6>
 800a4b4:	4b51      	ldr	r3, [pc, #324]	@ (800a5fc <UART_SetConfig+0x2cc>)
 800a4b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a4be:	2bc0      	cmp	r3, #192	@ 0xc0
 800a4c0:	d013      	beq.n	800a4ea <UART_SetConfig+0x1ba>
 800a4c2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a4c4:	d814      	bhi.n	800a4f0 <UART_SetConfig+0x1c0>
 800a4c6:	2b80      	cmp	r3, #128	@ 0x80
 800a4c8:	d009      	beq.n	800a4de <UART_SetConfig+0x1ae>
 800a4ca:	2b80      	cmp	r3, #128	@ 0x80
 800a4cc:	d810      	bhi.n	800a4f0 <UART_SetConfig+0x1c0>
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d002      	beq.n	800a4d8 <UART_SetConfig+0x1a8>
 800a4d2:	2b40      	cmp	r3, #64	@ 0x40
 800a4d4:	d006      	beq.n	800a4e4 <UART_SetConfig+0x1b4>
 800a4d6:	e00b      	b.n	800a4f0 <UART_SetConfig+0x1c0>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	77fb      	strb	r3, [r7, #31]
 800a4dc:	e0cc      	b.n	800a678 <UART_SetConfig+0x348>
 800a4de:	2302      	movs	r3, #2
 800a4e0:	77fb      	strb	r3, [r7, #31]
 800a4e2:	e0c9      	b.n	800a678 <UART_SetConfig+0x348>
 800a4e4:	2304      	movs	r3, #4
 800a4e6:	77fb      	strb	r3, [r7, #31]
 800a4e8:	e0c6      	b.n	800a678 <UART_SetConfig+0x348>
 800a4ea:	2308      	movs	r3, #8
 800a4ec:	77fb      	strb	r3, [r7, #31]
 800a4ee:	e0c3      	b.n	800a678 <UART_SetConfig+0x348>
 800a4f0:	2310      	movs	r3, #16
 800a4f2:	77fb      	strb	r3, [r7, #31]
 800a4f4:	e0c0      	b.n	800a678 <UART_SetConfig+0x348>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a44      	ldr	r2, [pc, #272]	@ (800a60c <UART_SetConfig+0x2dc>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d125      	bne.n	800a54c <UART_SetConfig+0x21c>
 800a500:	4b3e      	ldr	r3, [pc, #248]	@ (800a5fc <UART_SetConfig+0x2cc>)
 800a502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a50a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a50e:	d017      	beq.n	800a540 <UART_SetConfig+0x210>
 800a510:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a514:	d817      	bhi.n	800a546 <UART_SetConfig+0x216>
 800a516:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a51a:	d00b      	beq.n	800a534 <UART_SetConfig+0x204>
 800a51c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a520:	d811      	bhi.n	800a546 <UART_SetConfig+0x216>
 800a522:	2b00      	cmp	r3, #0
 800a524:	d003      	beq.n	800a52e <UART_SetConfig+0x1fe>
 800a526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a52a:	d006      	beq.n	800a53a <UART_SetConfig+0x20a>
 800a52c:	e00b      	b.n	800a546 <UART_SetConfig+0x216>
 800a52e:	2300      	movs	r3, #0
 800a530:	77fb      	strb	r3, [r7, #31]
 800a532:	e0a1      	b.n	800a678 <UART_SetConfig+0x348>
 800a534:	2302      	movs	r3, #2
 800a536:	77fb      	strb	r3, [r7, #31]
 800a538:	e09e      	b.n	800a678 <UART_SetConfig+0x348>
 800a53a:	2304      	movs	r3, #4
 800a53c:	77fb      	strb	r3, [r7, #31]
 800a53e:	e09b      	b.n	800a678 <UART_SetConfig+0x348>
 800a540:	2308      	movs	r3, #8
 800a542:	77fb      	strb	r3, [r7, #31]
 800a544:	e098      	b.n	800a678 <UART_SetConfig+0x348>
 800a546:	2310      	movs	r3, #16
 800a548:	77fb      	strb	r3, [r7, #31]
 800a54a:	e095      	b.n	800a678 <UART_SetConfig+0x348>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a2f      	ldr	r2, [pc, #188]	@ (800a610 <UART_SetConfig+0x2e0>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d125      	bne.n	800a5a2 <UART_SetConfig+0x272>
 800a556:	4b29      	ldr	r3, [pc, #164]	@ (800a5fc <UART_SetConfig+0x2cc>)
 800a558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a55c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a560:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a564:	d017      	beq.n	800a596 <UART_SetConfig+0x266>
 800a566:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a56a:	d817      	bhi.n	800a59c <UART_SetConfig+0x26c>
 800a56c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a570:	d00b      	beq.n	800a58a <UART_SetConfig+0x25a>
 800a572:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a576:	d811      	bhi.n	800a59c <UART_SetConfig+0x26c>
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d003      	beq.n	800a584 <UART_SetConfig+0x254>
 800a57c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a580:	d006      	beq.n	800a590 <UART_SetConfig+0x260>
 800a582:	e00b      	b.n	800a59c <UART_SetConfig+0x26c>
 800a584:	2301      	movs	r3, #1
 800a586:	77fb      	strb	r3, [r7, #31]
 800a588:	e076      	b.n	800a678 <UART_SetConfig+0x348>
 800a58a:	2302      	movs	r3, #2
 800a58c:	77fb      	strb	r3, [r7, #31]
 800a58e:	e073      	b.n	800a678 <UART_SetConfig+0x348>
 800a590:	2304      	movs	r3, #4
 800a592:	77fb      	strb	r3, [r7, #31]
 800a594:	e070      	b.n	800a678 <UART_SetConfig+0x348>
 800a596:	2308      	movs	r3, #8
 800a598:	77fb      	strb	r3, [r7, #31]
 800a59a:	e06d      	b.n	800a678 <UART_SetConfig+0x348>
 800a59c:	2310      	movs	r3, #16
 800a59e:	77fb      	strb	r3, [r7, #31]
 800a5a0:	e06a      	b.n	800a678 <UART_SetConfig+0x348>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a1b      	ldr	r2, [pc, #108]	@ (800a614 <UART_SetConfig+0x2e4>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d138      	bne.n	800a61e <UART_SetConfig+0x2ee>
 800a5ac:	4b13      	ldr	r3, [pc, #76]	@ (800a5fc <UART_SetConfig+0x2cc>)
 800a5ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5b2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a5b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a5ba:	d017      	beq.n	800a5ec <UART_SetConfig+0x2bc>
 800a5bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a5c0:	d82a      	bhi.n	800a618 <UART_SetConfig+0x2e8>
 800a5c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5c6:	d00b      	beq.n	800a5e0 <UART_SetConfig+0x2b0>
 800a5c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5cc:	d824      	bhi.n	800a618 <UART_SetConfig+0x2e8>
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d003      	beq.n	800a5da <UART_SetConfig+0x2aa>
 800a5d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5d6:	d006      	beq.n	800a5e6 <UART_SetConfig+0x2b6>
 800a5d8:	e01e      	b.n	800a618 <UART_SetConfig+0x2e8>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	77fb      	strb	r3, [r7, #31]
 800a5de:	e04b      	b.n	800a678 <UART_SetConfig+0x348>
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	77fb      	strb	r3, [r7, #31]
 800a5e4:	e048      	b.n	800a678 <UART_SetConfig+0x348>
 800a5e6:	2304      	movs	r3, #4
 800a5e8:	77fb      	strb	r3, [r7, #31]
 800a5ea:	e045      	b.n	800a678 <UART_SetConfig+0x348>
 800a5ec:	2308      	movs	r3, #8
 800a5ee:	77fb      	strb	r3, [r7, #31]
 800a5f0:	e042      	b.n	800a678 <UART_SetConfig+0x348>
 800a5f2:	bf00      	nop
 800a5f4:	efff69f3 	.word	0xefff69f3
 800a5f8:	40011000 	.word	0x40011000
 800a5fc:	40023800 	.word	0x40023800
 800a600:	40004400 	.word	0x40004400
 800a604:	40004800 	.word	0x40004800
 800a608:	40004c00 	.word	0x40004c00
 800a60c:	40005000 	.word	0x40005000
 800a610:	40011400 	.word	0x40011400
 800a614:	40007800 	.word	0x40007800
 800a618:	2310      	movs	r3, #16
 800a61a:	77fb      	strb	r3, [r7, #31]
 800a61c:	e02c      	b.n	800a678 <UART_SetConfig+0x348>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a72      	ldr	r2, [pc, #456]	@ (800a7ec <UART_SetConfig+0x4bc>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d125      	bne.n	800a674 <UART_SetConfig+0x344>
 800a628:	4b71      	ldr	r3, [pc, #452]	@ (800a7f0 <UART_SetConfig+0x4c0>)
 800a62a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a62e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a632:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a636:	d017      	beq.n	800a668 <UART_SetConfig+0x338>
 800a638:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a63c:	d817      	bhi.n	800a66e <UART_SetConfig+0x33e>
 800a63e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a642:	d00b      	beq.n	800a65c <UART_SetConfig+0x32c>
 800a644:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a648:	d811      	bhi.n	800a66e <UART_SetConfig+0x33e>
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d003      	beq.n	800a656 <UART_SetConfig+0x326>
 800a64e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a652:	d006      	beq.n	800a662 <UART_SetConfig+0x332>
 800a654:	e00b      	b.n	800a66e <UART_SetConfig+0x33e>
 800a656:	2300      	movs	r3, #0
 800a658:	77fb      	strb	r3, [r7, #31]
 800a65a:	e00d      	b.n	800a678 <UART_SetConfig+0x348>
 800a65c:	2302      	movs	r3, #2
 800a65e:	77fb      	strb	r3, [r7, #31]
 800a660:	e00a      	b.n	800a678 <UART_SetConfig+0x348>
 800a662:	2304      	movs	r3, #4
 800a664:	77fb      	strb	r3, [r7, #31]
 800a666:	e007      	b.n	800a678 <UART_SetConfig+0x348>
 800a668:	2308      	movs	r3, #8
 800a66a:	77fb      	strb	r3, [r7, #31]
 800a66c:	e004      	b.n	800a678 <UART_SetConfig+0x348>
 800a66e:	2310      	movs	r3, #16
 800a670:	77fb      	strb	r3, [r7, #31]
 800a672:	e001      	b.n	800a678 <UART_SetConfig+0x348>
 800a674:	2310      	movs	r3, #16
 800a676:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	69db      	ldr	r3, [r3, #28]
 800a67c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a680:	d15b      	bne.n	800a73a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a682:	7ffb      	ldrb	r3, [r7, #31]
 800a684:	2b08      	cmp	r3, #8
 800a686:	d828      	bhi.n	800a6da <UART_SetConfig+0x3aa>
 800a688:	a201      	add	r2, pc, #4	@ (adr r2, 800a690 <UART_SetConfig+0x360>)
 800a68a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68e:	bf00      	nop
 800a690:	0800a6b5 	.word	0x0800a6b5
 800a694:	0800a6bd 	.word	0x0800a6bd
 800a698:	0800a6c5 	.word	0x0800a6c5
 800a69c:	0800a6db 	.word	0x0800a6db
 800a6a0:	0800a6cb 	.word	0x0800a6cb
 800a6a4:	0800a6db 	.word	0x0800a6db
 800a6a8:	0800a6db 	.word	0x0800a6db
 800a6ac:	0800a6db 	.word	0x0800a6db
 800a6b0:	0800a6d3 	.word	0x0800a6d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6b4:	f7fd f8f2 	bl	800789c <HAL_RCC_GetPCLK1Freq>
 800a6b8:	61b8      	str	r0, [r7, #24]
        break;
 800a6ba:	e013      	b.n	800a6e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6bc:	f7fd f902 	bl	80078c4 <HAL_RCC_GetPCLK2Freq>
 800a6c0:	61b8      	str	r0, [r7, #24]
        break;
 800a6c2:	e00f      	b.n	800a6e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6c4:	4b4b      	ldr	r3, [pc, #300]	@ (800a7f4 <UART_SetConfig+0x4c4>)
 800a6c6:	61bb      	str	r3, [r7, #24]
        break;
 800a6c8:	e00c      	b.n	800a6e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6ca:	f7fc ffd5 	bl	8007678 <HAL_RCC_GetSysClockFreq>
 800a6ce:	61b8      	str	r0, [r7, #24]
        break;
 800a6d0:	e008      	b.n	800a6e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6d6:	61bb      	str	r3, [r7, #24]
        break;
 800a6d8:	e004      	b.n	800a6e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	77bb      	strb	r3, [r7, #30]
        break;
 800a6e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d074      	beq.n	800a7d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	005a      	lsls	r2, r3, #1
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	085b      	lsrs	r3, r3, #1
 800a6f4:	441a      	add	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	2b0f      	cmp	r3, #15
 800a704:	d916      	bls.n	800a734 <UART_SetConfig+0x404>
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a70c:	d212      	bcs.n	800a734 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	b29b      	uxth	r3, r3
 800a712:	f023 030f 	bic.w	r3, r3, #15
 800a716:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	085b      	lsrs	r3, r3, #1
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	f003 0307 	and.w	r3, r3, #7
 800a722:	b29a      	uxth	r2, r3
 800a724:	89fb      	ldrh	r3, [r7, #14]
 800a726:	4313      	orrs	r3, r2
 800a728:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	89fa      	ldrh	r2, [r7, #14]
 800a730:	60da      	str	r2, [r3, #12]
 800a732:	e04f      	b.n	800a7d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	77bb      	strb	r3, [r7, #30]
 800a738:	e04c      	b.n	800a7d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a73a:	7ffb      	ldrb	r3, [r7, #31]
 800a73c:	2b08      	cmp	r3, #8
 800a73e:	d828      	bhi.n	800a792 <UART_SetConfig+0x462>
 800a740:	a201      	add	r2, pc, #4	@ (adr r2, 800a748 <UART_SetConfig+0x418>)
 800a742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a746:	bf00      	nop
 800a748:	0800a76d 	.word	0x0800a76d
 800a74c:	0800a775 	.word	0x0800a775
 800a750:	0800a77d 	.word	0x0800a77d
 800a754:	0800a793 	.word	0x0800a793
 800a758:	0800a783 	.word	0x0800a783
 800a75c:	0800a793 	.word	0x0800a793
 800a760:	0800a793 	.word	0x0800a793
 800a764:	0800a793 	.word	0x0800a793
 800a768:	0800a78b 	.word	0x0800a78b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a76c:	f7fd f896 	bl	800789c <HAL_RCC_GetPCLK1Freq>
 800a770:	61b8      	str	r0, [r7, #24]
        break;
 800a772:	e013      	b.n	800a79c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a774:	f7fd f8a6 	bl	80078c4 <HAL_RCC_GetPCLK2Freq>
 800a778:	61b8      	str	r0, [r7, #24]
        break;
 800a77a:	e00f      	b.n	800a79c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a77c:	4b1d      	ldr	r3, [pc, #116]	@ (800a7f4 <UART_SetConfig+0x4c4>)
 800a77e:	61bb      	str	r3, [r7, #24]
        break;
 800a780:	e00c      	b.n	800a79c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a782:	f7fc ff79 	bl	8007678 <HAL_RCC_GetSysClockFreq>
 800a786:	61b8      	str	r0, [r7, #24]
        break;
 800a788:	e008      	b.n	800a79c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a78a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a78e:	61bb      	str	r3, [r7, #24]
        break;
 800a790:	e004      	b.n	800a79c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a792:	2300      	movs	r3, #0
 800a794:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	77bb      	strb	r3, [r7, #30]
        break;
 800a79a:	bf00      	nop
    }

    if (pclk != 0U)
 800a79c:	69bb      	ldr	r3, [r7, #24]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d018      	beq.n	800a7d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	085a      	lsrs	r2, r3, #1
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	441a      	add	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	2b0f      	cmp	r3, #15
 800a7ba:	d909      	bls.n	800a7d0 <UART_SetConfig+0x4a0>
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7c2:	d205      	bcs.n	800a7d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	60da      	str	r2, [r3, #12]
 800a7ce:	e001      	b.n	800a7d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a7e0:	7fbb      	ldrb	r3, [r7, #30]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3720      	adds	r7, #32
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	40007c00 	.word	0x40007c00
 800a7f0:	40023800 	.word	0x40023800
 800a7f4:	00f42400 	.word	0x00f42400

0800a7f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a804:	f003 0308 	and.w	r3, r3, #8
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00a      	beq.n	800a822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	430a      	orrs	r2, r1
 800a820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a826:	f003 0301 	and.w	r3, r3, #1
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00a      	beq.n	800a844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	430a      	orrs	r2, r1
 800a842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a848:	f003 0302 	and.w	r3, r3, #2
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00a      	beq.n	800a866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	430a      	orrs	r2, r1
 800a864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a86a:	f003 0304 	and.w	r3, r3, #4
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00a      	beq.n	800a888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	430a      	orrs	r2, r1
 800a886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a88c:	f003 0310 	and.w	r3, r3, #16
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00a      	beq.n	800a8aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	430a      	orrs	r2, r1
 800a8a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ae:	f003 0320 	and.w	r3, r3, #32
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d00a      	beq.n	800a8cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	430a      	orrs	r2, r1
 800a8ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d01a      	beq.n	800a90e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	430a      	orrs	r2, r1
 800a8ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8f6:	d10a      	bne.n	800a90e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	430a      	orrs	r2, r1
 800a90c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00a      	beq.n	800a930 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	430a      	orrs	r2, r1
 800a92e:	605a      	str	r2, [r3, #4]
  }
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b098      	sub	sp, #96	@ 0x60
 800a940:	af02      	add	r7, sp, #8
 800a942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a94c:	f7f9 fd3c 	bl	80043c8 <HAL_GetTick>
 800a950:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 0308 	and.w	r3, r3, #8
 800a95c:	2b08      	cmp	r3, #8
 800a95e:	d12e      	bne.n	800a9be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a960:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a964:	9300      	str	r3, [sp, #0]
 800a966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a968:	2200      	movs	r2, #0
 800a96a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f88c 	bl	800aa8c <UART_WaitOnFlagUntilTimeout>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d021      	beq.n	800a9be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a982:	e853 3f00 	ldrex	r3, [r3]
 800a986:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a98a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a98e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	461a      	mov	r2, r3
 800a996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a998:	647b      	str	r3, [r7, #68]	@ 0x44
 800a99a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a99e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9a0:	e841 2300 	strex	r3, r2, [r1]
 800a9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a9a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1e6      	bne.n	800a97a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2220      	movs	r2, #32
 800a9b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9ba:	2303      	movs	r3, #3
 800a9bc:	e062      	b.n	800aa84 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0304 	and.w	r3, r3, #4
 800a9c8:	2b04      	cmp	r3, #4
 800a9ca:	d149      	bne.n	800aa60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a9d0:	9300      	str	r3, [sp, #0]
 800a9d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f856 	bl	800aa8c <UART_WaitOnFlagUntilTimeout>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d03c      	beq.n	800aa60 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ee:	e853 3f00 	ldrex	r3, [r3]
 800a9f2:	623b      	str	r3, [r7, #32]
   return(result);
 800a9f4:	6a3b      	ldr	r3, [r7, #32]
 800a9f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	461a      	mov	r2, r3
 800aa02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa04:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa0c:	e841 2300 	strex	r3, r2, [r1]
 800aa10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1e6      	bne.n	800a9e6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	3308      	adds	r3, #8
 800aa1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	e853 3f00 	ldrex	r3, [r3]
 800aa26:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f023 0301 	bic.w	r3, r3, #1
 800aa2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	3308      	adds	r3, #8
 800aa36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa38:	61fa      	str	r2, [r7, #28]
 800aa3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3c:	69b9      	ldr	r1, [r7, #24]
 800aa3e:	69fa      	ldr	r2, [r7, #28]
 800aa40:	e841 2300 	strex	r3, r2, [r1]
 800aa44:	617b      	str	r3, [r7, #20]
   return(result);
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1e5      	bne.n	800aa18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2220      	movs	r2, #32
 800aa50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	e011      	b.n	800aa84 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2220      	movs	r2, #32
 800aa64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2220      	movs	r2, #32
 800aa6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800aa82:	2300      	movs	r3, #0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3758      	adds	r7, #88	@ 0x58
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	603b      	str	r3, [r7, #0]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa9c:	e04f      	b.n	800ab3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaa4:	d04b      	beq.n	800ab3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aaa6:	f7f9 fc8f 	bl	80043c8 <HAL_GetTick>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	69ba      	ldr	r2, [r7, #24]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d302      	bcc.n	800aabc <UART_WaitOnFlagUntilTimeout+0x30>
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d101      	bne.n	800aac0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aabc:	2303      	movs	r3, #3
 800aabe:	e04e      	b.n	800ab5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 0304 	and.w	r3, r3, #4
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d037      	beq.n	800ab3e <UART_WaitOnFlagUntilTimeout+0xb2>
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	2b80      	cmp	r3, #128	@ 0x80
 800aad2:	d034      	beq.n	800ab3e <UART_WaitOnFlagUntilTimeout+0xb2>
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	2b40      	cmp	r3, #64	@ 0x40
 800aad8:	d031      	beq.n	800ab3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	69db      	ldr	r3, [r3, #28]
 800aae0:	f003 0308 	and.w	r3, r3, #8
 800aae4:	2b08      	cmp	r3, #8
 800aae6:	d110      	bne.n	800ab0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2208      	movs	r2, #8
 800aaee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f000 f8ff 	bl	800acf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2208      	movs	r2, #8
 800aafa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	e029      	b.n	800ab5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	69db      	ldr	r3, [r3, #28]
 800ab10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab18:	d111      	bne.n	800ab3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ab24:	68f8      	ldr	r0, [r7, #12]
 800ab26:	f000 f8e5 	bl	800acf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2220      	movs	r2, #32
 800ab2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	e00f      	b.n	800ab5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	69da      	ldr	r2, [r3, #28]
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	4013      	ands	r3, r2
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	bf0c      	ite	eq
 800ab4e:	2301      	moveq	r3, #1
 800ab50:	2300      	movne	r3, #0
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	461a      	mov	r2, r3
 800ab56:	79fb      	ldrb	r3, [r7, #7]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d0a0      	beq.n	800aa9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
	...

0800ab68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b096      	sub	sp, #88	@ 0x58
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	4613      	mov	r3, r2
 800ab74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	88fa      	ldrh	r2, [r7, #6]
 800ab80:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2200      	movs	r2, #0
 800ab88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2222      	movs	r2, #34	@ 0x22
 800ab90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d028      	beq.n	800abee <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aba0:	4a3e      	ldr	r2, [pc, #248]	@ (800ac9c <UART_Start_Receive_DMA+0x134>)
 800aba2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aba8:	4a3d      	ldr	r2, [pc, #244]	@ (800aca0 <UART_Start_Receive_DMA+0x138>)
 800abaa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abb0:	4a3c      	ldr	r2, [pc, #240]	@ (800aca4 <UART_Start_Receive_DMA+0x13c>)
 800abb2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abb8:	2200      	movs	r2, #0
 800abba:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	3324      	adds	r3, #36	@ 0x24
 800abc6:	4619      	mov	r1, r3
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abcc:	461a      	mov	r2, r3
 800abce:	88fb      	ldrh	r3, [r7, #6]
 800abd0:	f7fa fa72 	bl	80050b8 <HAL_DMA_Start_IT>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d009      	beq.n	800abee <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2210      	movs	r2, #16
 800abde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2220      	movs	r2, #32
 800abe6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	e051      	b.n	800ac92 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d018      	beq.n	800ac28 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abfe:	e853 3f00 	ldrex	r3, [r3]
 800ac02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac0a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	461a      	mov	r2, r3
 800ac12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac16:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac18:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ac1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac1c:	e841 2300 	strex	r3, r2, [r1]
 800ac20:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ac22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1e6      	bne.n	800abf6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	3308      	adds	r3, #8
 800ac2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac32:	e853 3f00 	ldrex	r3, [r3]
 800ac36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3a:	f043 0301 	orr.w	r3, r3, #1
 800ac3e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	3308      	adds	r3, #8
 800ac46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ac48:	637a      	str	r2, [r7, #52]	@ 0x34
 800ac4a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ac4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac50:	e841 2300 	strex	r3, r2, [r1]
 800ac54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ac56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1e5      	bne.n	800ac28 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	3308      	adds	r3, #8
 800ac62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	e853 3f00 	ldrex	r3, [r3]
 800ac6a:	613b      	str	r3, [r7, #16]
   return(result);
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	3308      	adds	r3, #8
 800ac7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ac7c:	623a      	str	r2, [r7, #32]
 800ac7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac80:	69f9      	ldr	r1, [r7, #28]
 800ac82:	6a3a      	ldr	r2, [r7, #32]
 800ac84:	e841 2300 	strex	r3, r2, [r1]
 800ac88:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d1e5      	bne.n	800ac5c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3758      	adds	r7, #88	@ 0x58
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	0800adbd 	.word	0x0800adbd
 800aca0:	0800af1b 	.word	0x0800af1b
 800aca4:	0800af8d 	.word	0x0800af8d

0800aca8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b089      	sub	sp, #36	@ 0x24
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	e853 3f00 	ldrex	r3, [r3]
 800acbc:	60bb      	str	r3, [r7, #8]
   return(result);
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800acc4:	61fb      	str	r3, [r7, #28]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	461a      	mov	r2, r3
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	61bb      	str	r3, [r7, #24]
 800acd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd2:	6979      	ldr	r1, [r7, #20]
 800acd4:	69ba      	ldr	r2, [r7, #24]
 800acd6:	e841 2300 	strex	r3, r2, [r1]
 800acda:	613b      	str	r3, [r7, #16]
   return(result);
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1e6      	bne.n	800acb0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2220      	movs	r2, #32
 800ace6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800ace8:	bf00      	nop
 800acea:	3724      	adds	r7, #36	@ 0x24
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b095      	sub	sp, #84	@ 0x54
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad04:	e853 3f00 	ldrex	r3, [r3]
 800ad08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	461a      	mov	r2, r3
 800ad18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad1a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ad1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ad20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ad22:	e841 2300 	strex	r3, r2, [r1]
 800ad26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1e6      	bne.n	800acfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	3308      	adds	r3, #8
 800ad34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad36:	6a3b      	ldr	r3, [r7, #32]
 800ad38:	e853 3f00 	ldrex	r3, [r3]
 800ad3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	f023 0301 	bic.w	r3, r3, #1
 800ad44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	3308      	adds	r3, #8
 800ad4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad56:	e841 2300 	strex	r3, r2, [r1]
 800ad5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1e5      	bne.n	800ad2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d118      	bne.n	800ad9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	e853 3f00 	ldrex	r3, [r3]
 800ad76:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	f023 0310 	bic.w	r3, r3, #16
 800ad7e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	461a      	mov	r2, r3
 800ad86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad88:	61bb      	str	r3, [r7, #24]
 800ad8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8c:	6979      	ldr	r1, [r7, #20]
 800ad8e:	69ba      	ldr	r2, [r7, #24]
 800ad90:	e841 2300 	strex	r3, r2, [r1]
 800ad94:	613b      	str	r3, [r7, #16]
   return(result);
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1e6      	bne.n	800ad6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2220      	movs	r2, #32
 800ada0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800adb0:	bf00      	nop
 800adb2:	3754      	adds	r7, #84	@ 0x54
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b09c      	sub	sp, #112	@ 0x70
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adc8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	69db      	ldr	r3, [r3, #28]
 800adce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800add2:	d071      	beq.n	800aeb8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800add4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800add6:	2200      	movs	r2, #0
 800add8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800addc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ade4:	e853 3f00 	ldrex	r3, [r3]
 800ade8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800adea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800adec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800adf0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800adf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	461a      	mov	r2, r3
 800adf8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800adfa:	657b      	str	r3, [r7, #84]	@ 0x54
 800adfc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ae00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ae02:	e841 2300 	strex	r3, r2, [r1]
 800ae06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ae08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1e6      	bne.n	800addc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	3308      	adds	r3, #8
 800ae14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae18:	e853 3f00 	ldrex	r3, [r3]
 800ae1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae20:	f023 0301 	bic.w	r3, r3, #1
 800ae24:	667b      	str	r3, [r7, #100]	@ 0x64
 800ae26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	3308      	adds	r3, #8
 800ae2c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ae2e:	643a      	str	r2, [r7, #64]	@ 0x40
 800ae30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae36:	e841 2300 	strex	r3, r2, [r1]
 800ae3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1e5      	bne.n	800ae0e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	3308      	adds	r3, #8
 800ae48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4a:	6a3b      	ldr	r3, [r7, #32]
 800ae4c:	e853 3f00 	ldrex	r3, [r3]
 800ae50:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae58:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	3308      	adds	r3, #8
 800ae60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ae62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae6a:	e841 2300 	strex	r3, r2, [r1]
 800ae6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d1e5      	bne.n	800ae42 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ae76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae78:	2220      	movs	r2, #32
 800ae7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d118      	bne.n	800aeb8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	e853 3f00 	ldrex	r3, [r3]
 800ae92:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	f023 0310 	bic.w	r3, r3, #16
 800ae9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ae9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	461a      	mov	r2, r3
 800aea2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aea4:	61bb      	str	r3, [r7, #24]
 800aea6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea8:	6979      	ldr	r1, [r7, #20]
 800aeaa:	69ba      	ldr	r2, [r7, #24]
 800aeac:	e841 2300 	strex	r3, r2, [r1]
 800aeb0:	613b      	str	r3, [r7, #16]
   return(result);
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d1e6      	bne.n	800ae86 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aeb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aeba:	2200      	movs	r2, #0
 800aebc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d122      	bne.n	800af0c <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800aec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aec8:	2200      	movs	r2, #0
 800aeca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800aed8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aeda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aede:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d204      	bcs.n	800aef0 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800aee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aee8:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800aeec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aef2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800aef6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aef8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aefc:	b29b      	uxth	r3, r3
 800aefe:	1ad3      	subs	r3, r2, r3
 800af00:	b29b      	uxth	r3, r3
 800af02:	4619      	mov	r1, r3
 800af04:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800af06:	f7ff f9fd 	bl	800a304 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af0a:	e002      	b.n	800af12 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800af0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800af0e:	f7f9 f9d5 	bl	80042bc <HAL_UART_RxCpltCallback>
}
 800af12:	bf00      	nop
 800af14:	3770      	adds	r7, #112	@ 0x70
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b084      	sub	sp, #16
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af26:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2201      	movs	r2, #1
 800af2c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af32:	2b01      	cmp	r3, #1
 800af34:	d123      	bne.n	800af7e <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800af3c:	085b      	lsrs	r3, r3, #1
 800af3e:	b29a      	uxth	r2, r3
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800af54:	897a      	ldrh	r2, [r7, #10]
 800af56:	429a      	cmp	r2, r3
 800af58:	d803      	bhi.n	800af62 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	897a      	ldrh	r2, [r7, #10]
 800af5e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800af6e:	b29b      	uxth	r3, r3
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	b29b      	uxth	r3, r3
 800af74:	4619      	mov	r1, r3
 800af76:	68f8      	ldr	r0, [r7, #12]
 800af78:	f7ff f9c4 	bl	800a304 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800af7c:	e002      	b.n	800af84 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800af7e:	68f8      	ldr	r0, [r7, #12]
 800af80:	f7f9 f9b0 	bl	80042e4 <HAL_UART_RxHalfCpltCallback>
}
 800af84:	bf00      	nop
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b086      	sub	sp, #24
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af98:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af9e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800afa6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afb2:	2b80      	cmp	r3, #128	@ 0x80
 800afb4:	d109      	bne.n	800afca <UART_DMAError+0x3e>
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	2b21      	cmp	r3, #33	@ 0x21
 800afba:	d106      	bne.n	800afca <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800afc4:	6978      	ldr	r0, [r7, #20]
 800afc6:	f7ff fe6f 	bl	800aca8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afd4:	2b40      	cmp	r3, #64	@ 0x40
 800afd6:	d109      	bne.n	800afec <UART_DMAError+0x60>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2b22      	cmp	r3, #34	@ 0x22
 800afdc:	d106      	bne.n	800afec <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800afe6:	6978      	ldr	r0, [r7, #20]
 800afe8:	f7ff fe84 	bl	800acf4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aff2:	f043 0210 	orr.w	r2, r3, #16
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800affc:	6978      	ldr	r0, [r7, #20]
 800affe:	f7f9 f985 	bl	800430c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b002:	bf00      	nop
 800b004:	3718      	adds	r7, #24
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b084      	sub	sp, #16
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b016:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f7f9 f973 	bl	800430c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b026:	bf00      	nop
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b02e:	b480      	push	{r7}
 800b030:	b08f      	sub	sp, #60	@ 0x3c
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b03a:	2b21      	cmp	r3, #33	@ 0x21
 800b03c:	d14c      	bne.n	800b0d8 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b044:	b29b      	uxth	r3, r3
 800b046:	2b00      	cmp	r3, #0
 800b048:	d132      	bne.n	800b0b0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b050:	6a3b      	ldr	r3, [r7, #32]
 800b052:	e853 3f00 	ldrex	r3, [r3]
 800b056:	61fb      	str	r3, [r7, #28]
   return(result);
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b05e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	461a      	mov	r2, r3
 800b066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b068:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b06a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b06e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b070:	e841 2300 	strex	r3, r2, [r1]
 800b074:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1e6      	bne.n	800b04a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	e853 3f00 	ldrex	r3, [r3]
 800b088:	60bb      	str	r3, [r7, #8]
   return(result);
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b090:	633b      	str	r3, [r7, #48]	@ 0x30
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	461a      	mov	r2, r3
 800b098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b09a:	61bb      	str	r3, [r7, #24]
 800b09c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b09e:	6979      	ldr	r1, [r7, #20]
 800b0a0:	69ba      	ldr	r2, [r7, #24]
 800b0a2:	e841 2300 	strex	r3, r2, [r1]
 800b0a6:	613b      	str	r3, [r7, #16]
   return(result);
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1e6      	bne.n	800b07c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b0ae:	e013      	b.n	800b0d8 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0b4:	781a      	ldrb	r2, [r3, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0c0:	1c5a      	adds	r2, r3, #1
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800b0d8:	bf00      	nop
 800b0da:	373c      	adds	r7, #60	@ 0x3c
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b091      	sub	sp, #68	@ 0x44
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b0f0:	2b21      	cmp	r3, #33	@ 0x21
 800b0f2:	d151      	bne.n	800b198 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d132      	bne.n	800b166 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b108:	e853 3f00 	ldrex	r3, [r3]
 800b10c:	623b      	str	r3, [r7, #32]
   return(result);
 800b10e:	6a3b      	ldr	r3, [r7, #32]
 800b110:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b114:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	461a      	mov	r2, r3
 800b11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b120:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b122:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b126:	e841 2300 	strex	r3, r2, [r1]
 800b12a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1e6      	bne.n	800b100 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	e853 3f00 	ldrex	r3, [r3]
 800b13e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b146:	637b      	str	r3, [r7, #52]	@ 0x34
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	461a      	mov	r2, r3
 800b14e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b150:	61fb      	str	r3, [r7, #28]
 800b152:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b154:	69b9      	ldr	r1, [r7, #24]
 800b156:	69fa      	ldr	r2, [r7, #28]
 800b158:	e841 2300 	strex	r3, r2, [r1]
 800b15c:	617b      	str	r3, [r7, #20]
   return(result);
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d1e6      	bne.n	800b132 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b164:	e018      	b.n	800b198 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b16c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b16e:	881b      	ldrh	r3, [r3, #0]
 800b170:	461a      	mov	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b17a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b180:	1c9a      	adds	r2, r3, #2
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	3b01      	subs	r3, #1
 800b190:	b29a      	uxth	r2, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800b198:	bf00      	nop
 800b19a:	3744      	adds	r7, #68	@ 0x44
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b088      	sub	sp, #32
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	e853 3f00 	ldrex	r3, [r3]
 800b1b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1c0:	61fb      	str	r3, [r7, #28]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	61bb      	str	r3, [r7, #24]
 800b1cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ce:	6979      	ldr	r1, [r7, #20]
 800b1d0:	69ba      	ldr	r2, [r7, #24]
 800b1d2:	e841 2300 	strex	r3, r2, [r1]
 800b1d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d1e6      	bne.n	800b1ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2220      	movs	r2, #32
 800b1e2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7f9 f816 	bl	800421c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1f0:	bf00      	nop
 800b1f2:	3720      	adds	r7, #32
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b087      	sub	sp, #28
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	4613      	mov	r3, r2
 800b204:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b206:	79fb      	ldrb	r3, [r7, #7]
 800b208:	2b02      	cmp	r3, #2
 800b20a:	d165      	bne.n	800b2d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	4a41      	ldr	r2, [pc, #260]	@ (800b314 <USB_SetTurnaroundTime+0x11c>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d906      	bls.n	800b222 <USB_SetTurnaroundTime+0x2a>
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	4a40      	ldr	r2, [pc, #256]	@ (800b318 <USB_SetTurnaroundTime+0x120>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d202      	bcs.n	800b222 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b21c:	230f      	movs	r3, #15
 800b21e:	617b      	str	r3, [r7, #20]
 800b220:	e062      	b.n	800b2e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	4a3c      	ldr	r2, [pc, #240]	@ (800b318 <USB_SetTurnaroundTime+0x120>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d306      	bcc.n	800b238 <USB_SetTurnaroundTime+0x40>
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	4a3b      	ldr	r2, [pc, #236]	@ (800b31c <USB_SetTurnaroundTime+0x124>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d202      	bcs.n	800b238 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b232:	230e      	movs	r3, #14
 800b234:	617b      	str	r3, [r7, #20]
 800b236:	e057      	b.n	800b2e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	4a38      	ldr	r2, [pc, #224]	@ (800b31c <USB_SetTurnaroundTime+0x124>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d306      	bcc.n	800b24e <USB_SetTurnaroundTime+0x56>
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	4a37      	ldr	r2, [pc, #220]	@ (800b320 <USB_SetTurnaroundTime+0x128>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d202      	bcs.n	800b24e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b248:	230d      	movs	r3, #13
 800b24a:	617b      	str	r3, [r7, #20]
 800b24c:	e04c      	b.n	800b2e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	4a33      	ldr	r2, [pc, #204]	@ (800b320 <USB_SetTurnaroundTime+0x128>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d306      	bcc.n	800b264 <USB_SetTurnaroundTime+0x6c>
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	4a32      	ldr	r2, [pc, #200]	@ (800b324 <USB_SetTurnaroundTime+0x12c>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d802      	bhi.n	800b264 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b25e:	230c      	movs	r3, #12
 800b260:	617b      	str	r3, [r7, #20]
 800b262:	e041      	b.n	800b2e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	4a2f      	ldr	r2, [pc, #188]	@ (800b324 <USB_SetTurnaroundTime+0x12c>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d906      	bls.n	800b27a <USB_SetTurnaroundTime+0x82>
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	4a2e      	ldr	r2, [pc, #184]	@ (800b328 <USB_SetTurnaroundTime+0x130>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d802      	bhi.n	800b27a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b274:	230b      	movs	r3, #11
 800b276:	617b      	str	r3, [r7, #20]
 800b278:	e036      	b.n	800b2e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	4a2a      	ldr	r2, [pc, #168]	@ (800b328 <USB_SetTurnaroundTime+0x130>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d906      	bls.n	800b290 <USB_SetTurnaroundTime+0x98>
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	4a29      	ldr	r2, [pc, #164]	@ (800b32c <USB_SetTurnaroundTime+0x134>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d802      	bhi.n	800b290 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b28a:	230a      	movs	r3, #10
 800b28c:	617b      	str	r3, [r7, #20]
 800b28e:	e02b      	b.n	800b2e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	4a26      	ldr	r2, [pc, #152]	@ (800b32c <USB_SetTurnaroundTime+0x134>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d906      	bls.n	800b2a6 <USB_SetTurnaroundTime+0xae>
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	4a25      	ldr	r2, [pc, #148]	@ (800b330 <USB_SetTurnaroundTime+0x138>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d202      	bcs.n	800b2a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b2a0:	2309      	movs	r3, #9
 800b2a2:	617b      	str	r3, [r7, #20]
 800b2a4:	e020      	b.n	800b2e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	4a21      	ldr	r2, [pc, #132]	@ (800b330 <USB_SetTurnaroundTime+0x138>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d306      	bcc.n	800b2bc <USB_SetTurnaroundTime+0xc4>
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	4a20      	ldr	r2, [pc, #128]	@ (800b334 <USB_SetTurnaroundTime+0x13c>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d802      	bhi.n	800b2bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b2b6:	2308      	movs	r3, #8
 800b2b8:	617b      	str	r3, [r7, #20]
 800b2ba:	e015      	b.n	800b2e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	4a1d      	ldr	r2, [pc, #116]	@ (800b334 <USB_SetTurnaroundTime+0x13c>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d906      	bls.n	800b2d2 <USB_SetTurnaroundTime+0xda>
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	4a1c      	ldr	r2, [pc, #112]	@ (800b338 <USB_SetTurnaroundTime+0x140>)
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	d202      	bcs.n	800b2d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b2cc:	2307      	movs	r3, #7
 800b2ce:	617b      	str	r3, [r7, #20]
 800b2d0:	e00a      	b.n	800b2e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b2d2:	2306      	movs	r3, #6
 800b2d4:	617b      	str	r3, [r7, #20]
 800b2d6:	e007      	b.n	800b2e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b2d8:	79fb      	ldrb	r3, [r7, #7]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d102      	bne.n	800b2e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b2de:	2309      	movs	r3, #9
 800b2e0:	617b      	str	r3, [r7, #20]
 800b2e2:	e001      	b.n	800b2e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b2e4:	2309      	movs	r3, #9
 800b2e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	68da      	ldr	r2, [r3, #12]
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	029b      	lsls	r3, r3, #10
 800b2fc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b300:	431a      	orrs	r2, r3
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	371c      	adds	r7, #28
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr
 800b314:	00d8acbf 	.word	0x00d8acbf
 800b318:	00e4e1c0 	.word	0x00e4e1c0
 800b31c:	00f42400 	.word	0x00f42400
 800b320:	01067380 	.word	0x01067380
 800b324:	011a499f 	.word	0x011a499f
 800b328:	01312cff 	.word	0x01312cff
 800b32c:	014ca43f 	.word	0x014ca43f
 800b330:	016e3600 	.word	0x016e3600
 800b334:	01a6ab1f 	.word	0x01a6ab1f
 800b338:	01e84800 	.word	0x01e84800

0800b33c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b085      	sub	sp, #20
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b346:	2300      	movs	r3, #0
 800b348:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	3301      	adds	r3, #1
 800b34e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b356:	d901      	bls.n	800b35c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b358:	2303      	movs	r3, #3
 800b35a:	e01b      	b.n	800b394 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	2b00      	cmp	r3, #0
 800b362:	daf2      	bge.n	800b34a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b364:	2300      	movs	r3, #0
 800b366:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	019b      	lsls	r3, r3, #6
 800b36c:	f043 0220 	orr.w	r2, r3, #32
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	3301      	adds	r3, #1
 800b378:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b380:	d901      	bls.n	800b386 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b382:	2303      	movs	r3, #3
 800b384:	e006      	b.n	800b394 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	f003 0320 	and.w	r3, r3, #32
 800b38e:	2b20      	cmp	r3, #32
 800b390:	d0f0      	beq.n	800b374 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3714      	adds	r7, #20
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b087      	sub	sp, #28
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	f003 0306 	and.w	r3, r3, #6
 800b3b8:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d102      	bne.n	800b3c6 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	75fb      	strb	r3, [r7, #23]
 800b3c4:	e00a      	b.n	800b3dc <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	d002      	beq.n	800b3d2 <USB_GetDevSpeed+0x32>
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2b06      	cmp	r3, #6
 800b3d0:	d102      	bne.n	800b3d8 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	75fb      	strb	r3, [r7, #23]
 800b3d6:	e001      	b.n	800b3dc <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b3d8:	230f      	movs	r3, #15
 800b3da:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	371c      	adds	r7, #28
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
	...

0800b3ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	785b      	ldrb	r3, [r3, #1]
 800b404:	2b01      	cmp	r3, #1
 800b406:	d139      	bne.n	800b47c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b40e:	69da      	ldr	r2, [r3, #28]
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	f003 030f 	and.w	r3, r3, #15
 800b418:	2101      	movs	r1, #1
 800b41a:	fa01 f303 	lsl.w	r3, r1, r3
 800b41e:	b29b      	uxth	r3, r3
 800b420:	68f9      	ldr	r1, [r7, #12]
 800b422:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b426:	4313      	orrs	r3, r2
 800b428:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	015a      	lsls	r2, r3, #5
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	4413      	add	r3, r2
 800b432:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d153      	bne.n	800b4e8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	015a      	lsls	r2, r3, #5
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	4413      	add	r3, r2
 800b448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	791b      	ldrb	r3, [r3, #4]
 800b45a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b45c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	059b      	lsls	r3, r3, #22
 800b462:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b464:	431a      	orrs	r2, r3
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	0159      	lsls	r1, r3, #5
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	440b      	add	r3, r1
 800b46e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b472:	4619      	mov	r1, r3
 800b474:	4b20      	ldr	r3, [pc, #128]	@ (800b4f8 <USB_ActivateEndpoint+0x10c>)
 800b476:	4313      	orrs	r3, r2
 800b478:	600b      	str	r3, [r1, #0]
 800b47a:	e035      	b.n	800b4e8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b482:	69da      	ldr	r2, [r3, #28]
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	f003 030f 	and.w	r3, r3, #15
 800b48c:	2101      	movs	r1, #1
 800b48e:	fa01 f303 	lsl.w	r3, r1, r3
 800b492:	041b      	lsls	r3, r3, #16
 800b494:	68f9      	ldr	r1, [r7, #12]
 800b496:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b49a:	4313      	orrs	r3, r2
 800b49c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	015a      	lsls	r2, r3, #5
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	4413      	add	r3, r2
 800b4a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d119      	bne.n	800b4e8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	015a      	lsls	r2, r3, #5
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	689b      	ldr	r3, [r3, #8]
 800b4c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	791b      	ldrb	r3, [r3, #4]
 800b4ce:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b4d0:	430b      	orrs	r3, r1
 800b4d2:	431a      	orrs	r2, r3
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	0159      	lsls	r1, r3, #5
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	440b      	add	r3, r1
 800b4dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	4b05      	ldr	r3, [pc, #20]	@ (800b4f8 <USB_ActivateEndpoint+0x10c>)
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3714      	adds	r7, #20
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop
 800b4f8:	10008000 	.word	0x10008000

0800b4fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b08a      	sub	sp, #40	@ 0x28
 800b500:	af02      	add	r7, sp, #8
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	60b9      	str	r1, [r7, #8]
 800b506:	4613      	mov	r3, r2
 800b508:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	785b      	ldrb	r3, [r3, #1]
 800b518:	2b01      	cmp	r3, #1
 800b51a:	f040 8185 	bne.w	800b828 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	691b      	ldr	r3, [r3, #16]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d132      	bne.n	800b58c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	015a      	lsls	r2, r3, #5
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	4413      	add	r3, r2
 800b52e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b532:	691a      	ldr	r2, [r3, #16]
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	0159      	lsls	r1, r3, #5
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	440b      	add	r3, r1
 800b53c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b540:	4619      	mov	r1, r3
 800b542:	4ba7      	ldr	r3, [pc, #668]	@ (800b7e0 <USB_EPStartXfer+0x2e4>)
 800b544:	4013      	ands	r3, r2
 800b546:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	015a      	lsls	r2, r3, #5
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	4413      	add	r3, r2
 800b550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	69ba      	ldr	r2, [r7, #24]
 800b558:	0151      	lsls	r1, r2, #5
 800b55a:	69fa      	ldr	r2, [r7, #28]
 800b55c:	440a      	add	r2, r1
 800b55e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b562:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b566:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b568:	69bb      	ldr	r3, [r7, #24]
 800b56a:	015a      	lsls	r2, r3, #5
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	4413      	add	r3, r2
 800b570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b574:	691a      	ldr	r2, [r3, #16]
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	0159      	lsls	r1, r3, #5
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	440b      	add	r3, r1
 800b57e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b582:	4619      	mov	r1, r3
 800b584:	4b97      	ldr	r3, [pc, #604]	@ (800b7e4 <USB_EPStartXfer+0x2e8>)
 800b586:	4013      	ands	r3, r2
 800b588:	610b      	str	r3, [r1, #16]
 800b58a:	e097      	b.n	800b6bc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	015a      	lsls	r2, r3, #5
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	4413      	add	r3, r2
 800b594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b598:	691a      	ldr	r2, [r3, #16]
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	0159      	lsls	r1, r3, #5
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	440b      	add	r3, r1
 800b5a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	4b8e      	ldr	r3, [pc, #568]	@ (800b7e4 <USB_EPStartXfer+0x2e8>)
 800b5aa:	4013      	ands	r3, r2
 800b5ac:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	015a      	lsls	r2, r3, #5
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5ba:	691a      	ldr	r2, [r3, #16]
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	0159      	lsls	r1, r3, #5
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	440b      	add	r3, r1
 800b5c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	4b85      	ldr	r3, [pc, #532]	@ (800b7e0 <USB_EPStartXfer+0x2e4>)
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800b5d0:	69bb      	ldr	r3, [r7, #24]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d11a      	bne.n	800b60c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	691a      	ldr	r2, [r3, #16]
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d903      	bls.n	800b5ea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	689a      	ldr	r2, [r3, #8]
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b5ea:	69bb      	ldr	r3, [r7, #24]
 800b5ec:	015a      	lsls	r2, r3, #5
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	4413      	add	r3, r2
 800b5f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5f6:	691b      	ldr	r3, [r3, #16]
 800b5f8:	69ba      	ldr	r2, [r7, #24]
 800b5fa:	0151      	lsls	r1, r2, #5
 800b5fc:	69fa      	ldr	r2, [r7, #28]
 800b5fe:	440a      	add	r2, r1
 800b600:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b604:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b608:	6113      	str	r3, [r2, #16]
 800b60a:	e044      	b.n	800b696 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	691a      	ldr	r2, [r3, #16]
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	4413      	add	r3, r2
 800b616:	1e5a      	subs	r2, r3, #1
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	689b      	ldr	r3, [r3, #8]
 800b61c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b620:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	015a      	lsls	r2, r3, #5
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	4413      	add	r3, r2
 800b62a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b62e:	691a      	ldr	r2, [r3, #16]
 800b630:	8afb      	ldrh	r3, [r7, #22]
 800b632:	04d9      	lsls	r1, r3, #19
 800b634:	4b6c      	ldr	r3, [pc, #432]	@ (800b7e8 <USB_EPStartXfer+0x2ec>)
 800b636:	400b      	ands	r3, r1
 800b638:	69b9      	ldr	r1, [r7, #24]
 800b63a:	0148      	lsls	r0, r1, #5
 800b63c:	69f9      	ldr	r1, [r7, #28]
 800b63e:	4401      	add	r1, r0
 800b640:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b644:	4313      	orrs	r3, r2
 800b646:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	791b      	ldrb	r3, [r3, #4]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d122      	bne.n	800b696 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b650:	69bb      	ldr	r3, [r7, #24]
 800b652:	015a      	lsls	r2, r3, #5
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	4413      	add	r3, r2
 800b658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	69ba      	ldr	r2, [r7, #24]
 800b660:	0151      	lsls	r1, r2, #5
 800b662:	69fa      	ldr	r2, [r7, #28]
 800b664:	440a      	add	r2, r1
 800b666:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b66a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b66e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	015a      	lsls	r2, r3, #5
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	4413      	add	r3, r2
 800b678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b67c:	691a      	ldr	r2, [r3, #16]
 800b67e:	8afb      	ldrh	r3, [r7, #22]
 800b680:	075b      	lsls	r3, r3, #29
 800b682:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800b686:	69b9      	ldr	r1, [r7, #24]
 800b688:	0148      	lsls	r0, r1, #5
 800b68a:	69f9      	ldr	r1, [r7, #28]
 800b68c:	4401      	add	r1, r0
 800b68e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b692:	4313      	orrs	r3, r2
 800b694:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b696:	69bb      	ldr	r3, [r7, #24]
 800b698:	015a      	lsls	r2, r3, #5
 800b69a:	69fb      	ldr	r3, [r7, #28]
 800b69c:	4413      	add	r3, r2
 800b69e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6a2:	691a      	ldr	r2, [r3, #16]
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6ac:	69b9      	ldr	r1, [r7, #24]
 800b6ae:	0148      	lsls	r0, r1, #5
 800b6b0:	69f9      	ldr	r1, [r7, #28]
 800b6b2:	4401      	add	r1, r0
 800b6b4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b6bc:	79fb      	ldrb	r3, [r7, #7]
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	d14b      	bne.n	800b75a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	69db      	ldr	r3, [r3, #28]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d009      	beq.n	800b6de <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	015a      	lsls	r2, r3, #5
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	69db      	ldr	r3, [r3, #28]
 800b6dc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	791b      	ldrb	r3, [r3, #4]
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d128      	bne.n	800b738 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b6e6:	69fb      	ldr	r3, [r7, #28]
 800b6e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d110      	bne.n	800b718 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	015a      	lsls	r2, r3, #5
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	4413      	add	r3, r2
 800b6fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	69ba      	ldr	r2, [r7, #24]
 800b706:	0151      	lsls	r1, r2, #5
 800b708:	69fa      	ldr	r2, [r7, #28]
 800b70a:	440a      	add	r2, r1
 800b70c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b710:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b714:	6013      	str	r3, [r2, #0]
 800b716:	e00f      	b.n	800b738 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b718:	69bb      	ldr	r3, [r7, #24]
 800b71a:	015a      	lsls	r2, r3, #5
 800b71c:	69fb      	ldr	r3, [r7, #28]
 800b71e:	4413      	add	r3, r2
 800b720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	69ba      	ldr	r2, [r7, #24]
 800b728:	0151      	lsls	r1, r2, #5
 800b72a:	69fa      	ldr	r2, [r7, #28]
 800b72c:	440a      	add	r2, r1
 800b72e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b736:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	015a      	lsls	r2, r3, #5
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	4413      	add	r3, r2
 800b740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	69ba      	ldr	r2, [r7, #24]
 800b748:	0151      	lsls	r1, r2, #5
 800b74a:	69fa      	ldr	r2, [r7, #28]
 800b74c:	440a      	add	r2, r1
 800b74e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b752:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b756:	6013      	str	r3, [r2, #0]
 800b758:	e169      	b.n	800ba2e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	015a      	lsls	r2, r3, #5
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	4413      	add	r3, r2
 800b762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	69ba      	ldr	r2, [r7, #24]
 800b76a:	0151      	lsls	r1, r2, #5
 800b76c:	69fa      	ldr	r2, [r7, #28]
 800b76e:	440a      	add	r2, r1
 800b770:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b774:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b778:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	791b      	ldrb	r3, [r3, #4]
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d015      	beq.n	800b7ae <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	2b00      	cmp	r3, #0
 800b788:	f000 8151 	beq.w	800ba2e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	f003 030f 	and.w	r3, r3, #15
 800b79c:	2101      	movs	r1, #1
 800b79e:	fa01 f303 	lsl.w	r3, r1, r3
 800b7a2:	69f9      	ldr	r1, [r7, #28]
 800b7a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	634b      	str	r3, [r1, #52]	@ 0x34
 800b7ac:	e13f      	b.n	800ba2e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d116      	bne.n	800b7ec <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	015a      	lsls	r2, r3, #5
 800b7c2:	69fb      	ldr	r3, [r7, #28]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	69ba      	ldr	r2, [r7, #24]
 800b7ce:	0151      	lsls	r1, r2, #5
 800b7d0:	69fa      	ldr	r2, [r7, #28]
 800b7d2:	440a      	add	r2, r1
 800b7d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b7dc:	6013      	str	r3, [r2, #0]
 800b7de:	e015      	b.n	800b80c <USB_EPStartXfer+0x310>
 800b7e0:	e007ffff 	.word	0xe007ffff
 800b7e4:	fff80000 	.word	0xfff80000
 800b7e8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	015a      	lsls	r2, r3, #5
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	69ba      	ldr	r2, [r7, #24]
 800b7fc:	0151      	lsls	r1, r2, #5
 800b7fe:	69fa      	ldr	r2, [r7, #28]
 800b800:	440a      	add	r2, r1
 800b802:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b806:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b80a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	68d9      	ldr	r1, [r3, #12]
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	781a      	ldrb	r2, [r3, #0]
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	b298      	uxth	r0, r3
 800b81a:	79fb      	ldrb	r3, [r7, #7]
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	4603      	mov	r3, r0
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f000 f9b9 	bl	800bb98 <USB_WritePacket>
 800b826:	e102      	b.n	800ba2e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	015a      	lsls	r2, r3, #5
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	4413      	add	r3, r2
 800b830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b834:	691a      	ldr	r2, [r3, #16]
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	0159      	lsls	r1, r3, #5
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	440b      	add	r3, r1
 800b83e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b842:	4619      	mov	r1, r3
 800b844:	4b7c      	ldr	r3, [pc, #496]	@ (800ba38 <USB_EPStartXfer+0x53c>)
 800b846:	4013      	ands	r3, r2
 800b848:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	015a      	lsls	r2, r3, #5
 800b84e:	69fb      	ldr	r3, [r7, #28]
 800b850:	4413      	add	r3, r2
 800b852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b856:	691a      	ldr	r2, [r3, #16]
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	0159      	lsls	r1, r3, #5
 800b85c:	69fb      	ldr	r3, [r7, #28]
 800b85e:	440b      	add	r3, r1
 800b860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b864:	4619      	mov	r1, r3
 800b866:	4b75      	ldr	r3, [pc, #468]	@ (800ba3c <USB_EPStartXfer+0x540>)
 800b868:	4013      	ands	r3, r2
 800b86a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d12f      	bne.n	800b8d2 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	691b      	ldr	r3, [r3, #16]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d003      	beq.n	800b882 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	689a      	ldr	r2, [r3, #8]
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	689a      	ldr	r2, [r3, #8]
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b88a:	69bb      	ldr	r3, [r7, #24]
 800b88c:	015a      	lsls	r2, r3, #5
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	4413      	add	r3, r2
 800b892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b896:	691a      	ldr	r2, [r3, #16]
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	6a1b      	ldr	r3, [r3, #32]
 800b89c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8a0:	69b9      	ldr	r1, [r7, #24]
 800b8a2:	0148      	lsls	r0, r1, #5
 800b8a4:	69f9      	ldr	r1, [r7, #28]
 800b8a6:	4401      	add	r1, r0
 800b8a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b8b0:	69bb      	ldr	r3, [r7, #24]
 800b8b2:	015a      	lsls	r2, r3, #5
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8bc:	691b      	ldr	r3, [r3, #16]
 800b8be:	69ba      	ldr	r2, [r7, #24]
 800b8c0:	0151      	lsls	r1, r2, #5
 800b8c2:	69fa      	ldr	r2, [r7, #28]
 800b8c4:	440a      	add	r2, r1
 800b8c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b8ce:	6113      	str	r3, [r2, #16]
 800b8d0:	e05f      	b.n	800b992 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	691b      	ldr	r3, [r3, #16]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d123      	bne.n	800b922 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	015a      	lsls	r2, r3, #5
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8e6:	691a      	ldr	r2, [r3, #16]
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8f0:	69b9      	ldr	r1, [r7, #24]
 800b8f2:	0148      	lsls	r0, r1, #5
 800b8f4:	69f9      	ldr	r1, [r7, #28]
 800b8f6:	4401      	add	r1, r0
 800b8f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	015a      	lsls	r2, r3, #5
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	4413      	add	r3, r2
 800b908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b90c:	691b      	ldr	r3, [r3, #16]
 800b90e:	69ba      	ldr	r2, [r7, #24]
 800b910:	0151      	lsls	r1, r2, #5
 800b912:	69fa      	ldr	r2, [r7, #28]
 800b914:	440a      	add	r2, r1
 800b916:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b91a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b91e:	6113      	str	r3, [r2, #16]
 800b920:	e037      	b.n	800b992 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	691a      	ldr	r2, [r3, #16]
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	4413      	add	r3, r2
 800b92c:	1e5a      	subs	r2, r3, #1
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	689b      	ldr	r3, [r3, #8]
 800b932:	fbb2 f3f3 	udiv	r3, r2, r3
 800b936:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	8afa      	ldrh	r2, [r7, #22]
 800b93e:	fb03 f202 	mul.w	r2, r3, r2
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	015a      	lsls	r2, r3, #5
 800b94a:	69fb      	ldr	r3, [r7, #28]
 800b94c:	4413      	add	r3, r2
 800b94e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b952:	691a      	ldr	r2, [r3, #16]
 800b954:	8afb      	ldrh	r3, [r7, #22]
 800b956:	04d9      	lsls	r1, r3, #19
 800b958:	4b39      	ldr	r3, [pc, #228]	@ (800ba40 <USB_EPStartXfer+0x544>)
 800b95a:	400b      	ands	r3, r1
 800b95c:	69b9      	ldr	r1, [r7, #24]
 800b95e:	0148      	lsls	r0, r1, #5
 800b960:	69f9      	ldr	r1, [r7, #28]
 800b962:	4401      	add	r1, r0
 800b964:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b968:	4313      	orrs	r3, r2
 800b96a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b96c:	69bb      	ldr	r3, [r7, #24]
 800b96e:	015a      	lsls	r2, r3, #5
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	4413      	add	r3, r2
 800b974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b978:	691a      	ldr	r2, [r3, #16]
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	6a1b      	ldr	r3, [r3, #32]
 800b97e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b982:	69b9      	ldr	r1, [r7, #24]
 800b984:	0148      	lsls	r0, r1, #5
 800b986:	69f9      	ldr	r1, [r7, #28]
 800b988:	4401      	add	r1, r0
 800b98a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b98e:	4313      	orrs	r3, r2
 800b990:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b992:	79fb      	ldrb	r3, [r7, #7]
 800b994:	2b01      	cmp	r3, #1
 800b996:	d10d      	bne.n	800b9b4 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d009      	beq.n	800b9b4 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	68d9      	ldr	r1, [r3, #12]
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	015a      	lsls	r2, r3, #5
 800b9a8:	69fb      	ldr	r3, [r7, #28]
 800b9aa:	4413      	add	r3, r2
 800b9ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9b0:	460a      	mov	r2, r1
 800b9b2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	791b      	ldrb	r3, [r3, #4]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d128      	bne.n	800ba0e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b9bc:	69fb      	ldr	r3, [r7, #28]
 800b9be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d110      	bne.n	800b9ee <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b9cc:	69bb      	ldr	r3, [r7, #24]
 800b9ce:	015a      	lsls	r2, r3, #5
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	69ba      	ldr	r2, [r7, #24]
 800b9dc:	0151      	lsls	r1, r2, #5
 800b9de:	69fa      	ldr	r2, [r7, #28]
 800b9e0:	440a      	add	r2, r1
 800b9e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b9e6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b9ea:	6013      	str	r3, [r2, #0]
 800b9ec:	e00f      	b.n	800ba0e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	015a      	lsls	r2, r3, #5
 800b9f2:	69fb      	ldr	r3, [r7, #28]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	69ba      	ldr	r2, [r7, #24]
 800b9fe:	0151      	lsls	r1, r2, #5
 800ba00:	69fa      	ldr	r2, [r7, #28]
 800ba02:	440a      	add	r2, r1
 800ba04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba0c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ba0e:	69bb      	ldr	r3, [r7, #24]
 800ba10:	015a      	lsls	r2, r3, #5
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	4413      	add	r3, r2
 800ba16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	69ba      	ldr	r2, [r7, #24]
 800ba1e:	0151      	lsls	r1, r2, #5
 800ba20:	69fa      	ldr	r2, [r7, #28]
 800ba22:	440a      	add	r2, r1
 800ba24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba28:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ba2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3720      	adds	r7, #32
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	fff80000 	.word	0xfff80000
 800ba3c:	e007ffff 	.word	0xe007ffff
 800ba40:	1ff80000 	.word	0x1ff80000

0800ba44 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b087      	sub	sp, #28
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ba52:	2300      	movs	r3, #0
 800ba54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	785b      	ldrb	r3, [r3, #1]
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d14a      	bne.n	800baf8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	015a      	lsls	r2, r3, #5
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	4413      	add	r3, r2
 800ba6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba7a:	f040 8086 	bne.w	800bb8a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	015a      	lsls	r2, r3, #5
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	4413      	add	r3, r2
 800ba88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	7812      	ldrb	r2, [r2, #0]
 800ba92:	0151      	lsls	r1, r2, #5
 800ba94:	693a      	ldr	r2, [r7, #16]
 800ba96:	440a      	add	r2, r1
 800ba98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800baa0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	015a      	lsls	r2, r3, #5
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	4413      	add	r3, r2
 800baac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	683a      	ldr	r2, [r7, #0]
 800bab4:	7812      	ldrb	r2, [r2, #0]
 800bab6:	0151      	lsls	r1, r2, #5
 800bab8:	693a      	ldr	r2, [r7, #16]
 800baba:	440a      	add	r2, r1
 800babc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bac0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bac4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	3301      	adds	r3, #1
 800baca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d902      	bls.n	800badc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bad6:	2301      	movs	r3, #1
 800bad8:	75fb      	strb	r3, [r7, #23]
          break;
 800bada:	e056      	b.n	800bb8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	015a      	lsls	r2, r3, #5
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	4413      	add	r3, r2
 800bae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800baf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800baf4:	d0e7      	beq.n	800bac6 <USB_EPStopXfer+0x82>
 800baf6:	e048      	b.n	800bb8a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	015a      	lsls	r2, r3, #5
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	4413      	add	r3, r2
 800bb02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb10:	d13b      	bne.n	800bb8a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	015a      	lsls	r2, r3, #5
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	4413      	add	r3, r2
 800bb1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	683a      	ldr	r2, [r7, #0]
 800bb24:	7812      	ldrb	r2, [r2, #0]
 800bb26:	0151      	lsls	r1, r2, #5
 800bb28:	693a      	ldr	r2, [r7, #16]
 800bb2a:	440a      	add	r2, r1
 800bb2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bb34:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	015a      	lsls	r2, r3, #5
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	4413      	add	r3, r2
 800bb40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	683a      	ldr	r2, [r7, #0]
 800bb48:	7812      	ldrb	r2, [r2, #0]
 800bb4a:	0151      	lsls	r1, r2, #5
 800bb4c:	693a      	ldr	r2, [r7, #16]
 800bb4e:	440a      	add	r2, r1
 800bb50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bb58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d902      	bls.n	800bb70 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	75fb      	strb	r3, [r7, #23]
          break;
 800bb6e:	e00c      	b.n	800bb8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	015a      	lsls	r2, r3, #5
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	4413      	add	r3, r2
 800bb7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb88:	d0e7      	beq.n	800bb5a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bb8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	371c      	adds	r7, #28
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b089      	sub	sp, #36	@ 0x24
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	4611      	mov	r1, r2
 800bba4:	461a      	mov	r2, r3
 800bba6:	460b      	mov	r3, r1
 800bba8:	71fb      	strb	r3, [r7, #7]
 800bbaa:	4613      	mov	r3, r2
 800bbac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bbb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d123      	bne.n	800bc06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bbbe:	88bb      	ldrh	r3, [r7, #4]
 800bbc0:	3303      	adds	r3, #3
 800bbc2:	089b      	lsrs	r3, r3, #2
 800bbc4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	61bb      	str	r3, [r7, #24]
 800bbca:	e018      	b.n	800bbfe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bbcc:	79fb      	ldrb	r3, [r7, #7]
 800bbce:	031a      	lsls	r2, r3, #12
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bbd8:	461a      	mov	r2, r3
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	3301      	adds	r3, #1
 800bbf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	61bb      	str	r3, [r7, #24]
 800bbfe:	69ba      	ldr	r2, [r7, #24]
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d3e2      	bcc.n	800bbcc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bc06:	2300      	movs	r3, #0
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3724      	adds	r7, #36	@ 0x24
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b08b      	sub	sp, #44	@ 0x2c
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bc2a:	88fb      	ldrh	r3, [r7, #6]
 800bc2c:	089b      	lsrs	r3, r3, #2
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bc32:	88fb      	ldrh	r3, [r7, #6]
 800bc34:	f003 0303 	and.w	r3, r3, #3
 800bc38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	623b      	str	r3, [r7, #32]
 800bc3e:	e014      	b.n	800bc6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bc40:	69bb      	ldr	r3, [r7, #24]
 800bc42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc4a:	601a      	str	r2, [r3, #0]
    pDest++;
 800bc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc4e:	3301      	adds	r3, #1
 800bc50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc54:	3301      	adds	r3, #1
 800bc56:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc60:	3301      	adds	r3, #1
 800bc62:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800bc64:	6a3b      	ldr	r3, [r7, #32]
 800bc66:	3301      	adds	r3, #1
 800bc68:	623b      	str	r3, [r7, #32]
 800bc6a:	6a3a      	ldr	r2, [r7, #32]
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d3e6      	bcc.n	800bc40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bc72:	8bfb      	ldrh	r3, [r7, #30]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d01e      	beq.n	800bcb6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc82:	461a      	mov	r2, r3
 800bc84:	f107 0310 	add.w	r3, r7, #16
 800bc88:	6812      	ldr	r2, [r2, #0]
 800bc8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bc8c:	693a      	ldr	r2, [r7, #16]
 800bc8e:	6a3b      	ldr	r3, [r7, #32]
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	00db      	lsls	r3, r3, #3
 800bc94:	fa22 f303 	lsr.w	r3, r2, r3
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc9c:	701a      	strb	r2, [r3, #0]
      i++;
 800bc9e:	6a3b      	ldr	r3, [r7, #32]
 800bca0:	3301      	adds	r3, #1
 800bca2:	623b      	str	r3, [r7, #32]
      pDest++;
 800bca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca6:	3301      	adds	r3, #1
 800bca8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800bcaa:	8bfb      	ldrh	r3, [r7, #30]
 800bcac:	3b01      	subs	r3, #1
 800bcae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bcb0:	8bfb      	ldrh	r3, [r7, #30]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d1ea      	bne.n	800bc8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bcb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	372c      	adds	r7, #44	@ 0x2c
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	785b      	ldrb	r3, [r3, #1]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d12c      	bne.n	800bd3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	015a      	lsls	r2, r3, #5
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	4413      	add	r3, r2
 800bce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	db12      	blt.n	800bd18 <USB_EPSetStall+0x54>
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00f      	beq.n	800bd18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	015a      	lsls	r2, r3, #5
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	4413      	add	r3, r2
 800bd00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	68ba      	ldr	r2, [r7, #8]
 800bd08:	0151      	lsls	r1, r2, #5
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	440a      	add	r2, r1
 800bd0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd12:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bd16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	015a      	lsls	r2, r3, #5
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	4413      	add	r3, r2
 800bd20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	0151      	lsls	r1, r2, #5
 800bd2a:	68fa      	ldr	r2, [r7, #12]
 800bd2c:	440a      	add	r2, r1
 800bd2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bd36:	6013      	str	r3, [r2, #0]
 800bd38:	e02b      	b.n	800bd92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	015a      	lsls	r2, r3, #5
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	4413      	add	r3, r2
 800bd42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	db12      	blt.n	800bd72 <USB_EPSetStall+0xae>
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d00f      	beq.n	800bd72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	015a      	lsls	r2, r3, #5
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	4413      	add	r3, r2
 800bd5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	68ba      	ldr	r2, [r7, #8]
 800bd62:	0151      	lsls	r1, r2, #5
 800bd64:	68fa      	ldr	r2, [r7, #12]
 800bd66:	440a      	add	r2, r1
 800bd68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd6c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bd70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	015a      	lsls	r2, r3, #5
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	4413      	add	r3, r2
 800bd7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	0151      	lsls	r1, r2, #5
 800bd84:	68fa      	ldr	r2, [r7, #12]
 800bd86:	440a      	add	r2, r1
 800bd88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bd90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3714      	adds	r7, #20
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	785b      	ldrb	r3, [r3, #1]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d128      	bne.n	800be0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	015a      	lsls	r2, r3, #5
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	68ba      	ldr	r2, [r7, #8]
 800bdcc:	0151      	lsls	r1, r2, #5
 800bdce:	68fa      	ldr	r2, [r7, #12]
 800bdd0:	440a      	add	r2, r1
 800bdd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bdd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bdda:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	791b      	ldrb	r3, [r3, #4]
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	d003      	beq.n	800bdec <USB_EPClearStall+0x4c>
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	791b      	ldrb	r3, [r3, #4]
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	d138      	bne.n	800be5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	015a      	lsls	r2, r3, #5
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	68ba      	ldr	r2, [r7, #8]
 800bdfc:	0151      	lsls	r1, r2, #5
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	440a      	add	r2, r1
 800be02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be0a:	6013      	str	r3, [r2, #0]
 800be0c:	e027      	b.n	800be5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	015a      	lsls	r2, r3, #5
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	4413      	add	r3, r2
 800be16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68ba      	ldr	r2, [r7, #8]
 800be1e:	0151      	lsls	r1, r2, #5
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	440a      	add	r2, r1
 800be24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800be2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	791b      	ldrb	r3, [r3, #4]
 800be32:	2b03      	cmp	r3, #3
 800be34:	d003      	beq.n	800be3e <USB_EPClearStall+0x9e>
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	791b      	ldrb	r3, [r3, #4]
 800be3a:	2b02      	cmp	r3, #2
 800be3c:	d10f      	bne.n	800be5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	015a      	lsls	r2, r3, #5
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	4413      	add	r3, r2
 800be46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	68ba      	ldr	r2, [r7, #8]
 800be4e:	0151      	lsls	r1, r2, #5
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	440a      	add	r2, r1
 800be54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800be5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	3714      	adds	r7, #20
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	460b      	mov	r3, r1
 800be76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be8a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800be8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	78fb      	ldrb	r3, [r7, #3]
 800be9a:	011b      	lsls	r3, r3, #4
 800be9c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800bea0:	68f9      	ldr	r1, [r7, #12]
 800bea2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bea6:	4313      	orrs	r3, r2
 800bea8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800beaa:	2300      	movs	r3, #0
}
 800beac:	4618      	mov	r0, r3
 800beae:	3714      	adds	r7, #20
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800beb8:	b480      	push	{r7}
 800beba:	b085      	sub	sp, #20
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	695b      	ldr	r3, [r3, #20]
 800bec4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	699b      	ldr	r3, [r3, #24]
 800beca:	68fa      	ldr	r2, [r7, #12]
 800becc:	4013      	ands	r3, r2
 800bece:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bed0:	68fb      	ldr	r3, [r7, #12]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3714      	adds	r7, #20
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr

0800bede <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bede:	b480      	push	{r7}
 800bee0:	b085      	sub	sp, #20
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bef0:	699b      	ldr	r3, [r3, #24]
 800bef2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800befa:	69db      	ldr	r3, [r3, #28]
 800befc:	68ba      	ldr	r2, [r7, #8]
 800befe:	4013      	ands	r3, r2
 800bf00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	0c1b      	lsrs	r3, r3, #16
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3714      	adds	r7, #20
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr

0800bf12 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bf12:	b480      	push	{r7}
 800bf14:	b085      	sub	sp, #20
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf24:	699b      	ldr	r3, [r3, #24]
 800bf26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf2e:	69db      	ldr	r3, [r3, #28]
 800bf30:	68ba      	ldr	r2, [r7, #8]
 800bf32:	4013      	ands	r3, r2
 800bf34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	b29b      	uxth	r3, r3
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3714      	adds	r7, #20
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr

0800bf46 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bf46:	b480      	push	{r7}
 800bf48:	b085      	sub	sp, #20
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
 800bf4e:	460b      	mov	r3, r1
 800bf50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bf56:	78fb      	ldrb	r3, [r7, #3]
 800bf58:	015a      	lsls	r2, r3, #5
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf6c:	695b      	ldr	r3, [r3, #20]
 800bf6e:	68ba      	ldr	r2, [r7, #8]
 800bf70:	4013      	ands	r3, r2
 800bf72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bf74:	68bb      	ldr	r3, [r7, #8]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3714      	adds	r7, #20
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr

0800bf82 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bf82:	b480      	push	{r7}
 800bf84:	b087      	sub	sp, #28
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf98:	691b      	ldr	r3, [r3, #16]
 800bf9a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfa4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bfa6:	78fb      	ldrb	r3, [r7, #3]
 800bfa8:	f003 030f 	and.w	r3, r3, #15
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	fa22 f303 	lsr.w	r3, r2, r3
 800bfb2:	01db      	lsls	r3, r3, #7
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	693a      	ldr	r2, [r7, #16]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bfbc:	78fb      	ldrb	r3, [r7, #3]
 800bfbe:	015a      	lsls	r2, r3, #5
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	693a      	ldr	r2, [r7, #16]
 800bfcc:	4013      	ands	r3, r2
 800bfce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bfd0:	68bb      	ldr	r3, [r7, #8]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	371c      	adds	r7, #28
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b083      	sub	sp, #12
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	695b      	ldr	r3, [r3, #20]
 800bfea:	f003 0301 	and.w	r3, r3, #1
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	370c      	adds	r7, #12
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
	...

0800bffc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b085      	sub	sp, #20
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c016:	4619      	mov	r1, r3
 800c018:	4b09      	ldr	r3, [pc, #36]	@ (800c040 <USB_ActivateSetup+0x44>)
 800c01a:	4013      	ands	r3, r2
 800c01c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c024:	685b      	ldr	r3, [r3, #4]
 800c026:	68fa      	ldr	r2, [r7, #12]
 800c028:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c02c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c030:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c032:	2300      	movs	r3, #0
}
 800c034:	4618      	mov	r0, r3
 800c036:	3714      	adds	r7, #20
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr
 800c040:	fffff800 	.word	0xfffff800

0800c044 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c044:	b480      	push	{r7}
 800c046:	b087      	sub	sp, #28
 800c048:	af00      	add	r7, sp, #0
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	460b      	mov	r3, r1
 800c04e:	607a      	str	r2, [r7, #4]
 800c050:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	333c      	adds	r3, #60	@ 0x3c
 800c05a:	3304      	adds	r3, #4
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	4a26      	ldr	r2, [pc, #152]	@ (800c0fc <USB_EP0_OutStart+0xb8>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d90a      	bls.n	800c07e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c074:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c078:	d101      	bne.n	800c07e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	e037      	b.n	800c0ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c084:	461a      	mov	r2, r3
 800c086:	2300      	movs	r3, #0
 800c088:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c090:	691b      	ldr	r3, [r3, #16]
 800c092:	697a      	ldr	r2, [r7, #20]
 800c094:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c098:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c09c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	697a      	ldr	r2, [r7, #20]
 800c0a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c0ac:	f043 0318 	orr.w	r3, r3, #24
 800c0b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	697a      	ldr	r2, [r7, #20]
 800c0bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c0c0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c0c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c0c6:	7afb      	ldrb	r3, [r7, #11]
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d10f      	bne.n	800c0ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	697a      	ldr	r2, [r7, #20]
 800c0e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c0e6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c0ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	371c      	adds	r7, #28
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	4f54300a 	.word	0x4f54300a

0800c100 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c100:	b480      	push	{r7}
 800c102:	b083      	sub	sp, #12
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c108:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	370c      	adds	r7, #12
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr

0800c116 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b084      	sub	sp, #16
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
 800c11e:	460b      	mov	r3, r1
 800c120:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c122:	2300      	movs	r3, #0
 800c124:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d009      	beq.n	800c144 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	78fa      	ldrb	r2, [r7, #3]
 800c13a:	4611      	mov	r1, r2
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	4798      	blx	r3
 800c140:	4603      	mov	r3, r0
 800c142:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c144:	7bfb      	ldrb	r3, [r7, #15]
}
 800c146:	4618      	mov	r0, r3
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c14e:	b580      	push	{r7, lr}
 800c150:	b084      	sub	sp, #16
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
 800c156:	460b      	mov	r3, r1
 800c158:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c15a:	2300      	movs	r3, #0
 800c15c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	78fa      	ldrb	r2, [r7, #3]
 800c168:	4611      	mov	r1, r2
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	4798      	blx	r3
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d001      	beq.n	800c178 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c174:	2303      	movs	r3, #3
 800c176:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c178:	7bfb      	ldrb	r3, [r7, #15]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b084      	sub	sp, #16
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
 800c18a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	4618      	mov	r0, r3
 800c196:	f001 f8f8 	bl	800d38a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2201      	movs	r2, #1
 800c19e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c1b6:	f003 031f 	and.w	r3, r3, #31
 800c1ba:	2b02      	cmp	r3, #2
 800c1bc:	d01a      	beq.n	800c1f4 <USBD_LL_SetupStage+0x72>
 800c1be:	2b02      	cmp	r3, #2
 800c1c0:	d822      	bhi.n	800c208 <USBD_LL_SetupStage+0x86>
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d002      	beq.n	800c1cc <USBD_LL_SetupStage+0x4a>
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d00a      	beq.n	800c1e0 <USBD_LL_SetupStage+0x5e>
 800c1ca:	e01d      	b.n	800c208 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 fb23 	bl	800c820 <USBD_StdDevReq>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	73fb      	strb	r3, [r7, #15]
      break;
 800c1de:	e020      	b.n	800c222 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 fb8b 	bl	800c904 <USBD_StdItfReq>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	73fb      	strb	r3, [r7, #15]
      break;
 800c1f2:	e016      	b.n	800c222 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 fbed 	bl	800c9dc <USBD_StdEPReq>
 800c202:	4603      	mov	r3, r0
 800c204:	73fb      	strb	r3, [r7, #15]
      break;
 800c206:	e00c      	b.n	800c222 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c20e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c212:	b2db      	uxtb	r3, r3
 800c214:	4619      	mov	r1, r3
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f007 fc54 	bl	8013ac4 <USBD_LL_StallEP>
 800c21c:	4603      	mov	r3, r0
 800c21e:	73fb      	strb	r3, [r7, #15]
      break;
 800c220:	bf00      	nop
  }

  return ret;
 800c222:	7bfb      	ldrb	r3, [r7, #15]
}
 800c224:	4618      	mov	r0, r3
 800c226:	3710      	adds	r7, #16
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b086      	sub	sp, #24
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	460b      	mov	r3, r1
 800c236:	607a      	str	r2, [r7, #4]
 800c238:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c23a:	2300      	movs	r3, #0
 800c23c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c23e:	7afb      	ldrb	r3, [r7, #11]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d177      	bne.n	800c334 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c24a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c252:	2b03      	cmp	r3, #3
 800c254:	f040 80a1 	bne.w	800c39a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	693a      	ldr	r2, [r7, #16]
 800c25e:	8992      	ldrh	r2, [r2, #12]
 800c260:	4293      	cmp	r3, r2
 800c262:	d91c      	bls.n	800c29e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	693a      	ldr	r2, [r7, #16]
 800c26a:	8992      	ldrh	r2, [r2, #12]
 800c26c:	1a9a      	subs	r2, r3, r2
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	691b      	ldr	r3, [r3, #16]
 800c276:	693a      	ldr	r2, [r7, #16]
 800c278:	8992      	ldrh	r2, [r2, #12]
 800c27a:	441a      	add	r2, r3
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	6919      	ldr	r1, [r3, #16]
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	899b      	ldrh	r3, [r3, #12]
 800c288:	461a      	mov	r2, r3
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	4293      	cmp	r3, r2
 800c290:	bf38      	it	cc
 800c292:	4613      	movcc	r3, r2
 800c294:	461a      	mov	r2, r3
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f001 f8f1 	bl	800d47e <USBD_CtlContinueRx>
 800c29c:	e07d      	b.n	800c39a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c2a4:	f003 031f 	and.w	r3, r3, #31
 800c2a8:	2b02      	cmp	r3, #2
 800c2aa:	d014      	beq.n	800c2d6 <USBD_LL_DataOutStage+0xaa>
 800c2ac:	2b02      	cmp	r3, #2
 800c2ae:	d81d      	bhi.n	800c2ec <USBD_LL_DataOutStage+0xc0>
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d002      	beq.n	800c2ba <USBD_LL_DataOutStage+0x8e>
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d003      	beq.n	800c2c0 <USBD_LL_DataOutStage+0x94>
 800c2b8:	e018      	b.n	800c2ec <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	75bb      	strb	r3, [r7, #22]
            break;
 800c2be:	e018      	b.n	800c2f2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	68f8      	ldr	r0, [r7, #12]
 800c2cc:	f000 fa6e 	bl	800c7ac <USBD_CoreFindIF>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	75bb      	strb	r3, [r7, #22]
            break;
 800c2d4:	e00d      	b.n	800c2f2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	4619      	mov	r1, r3
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f000 fa70 	bl	800c7c6 <USBD_CoreFindEP>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	75bb      	strb	r3, [r7, #22]
            break;
 800c2ea:	e002      	b.n	800c2f2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	75bb      	strb	r3, [r7, #22]
            break;
 800c2f0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c2f2:	7dbb      	ldrb	r3, [r7, #22]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d119      	bne.n	800c32c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	2b03      	cmp	r3, #3
 800c302:	d113      	bne.n	800c32c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c304:	7dba      	ldrb	r2, [r7, #22]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	32ae      	adds	r2, #174	@ 0xae
 800c30a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d00b      	beq.n	800c32c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800c314:	7dba      	ldrb	r2, [r7, #22]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c31c:	7dba      	ldrb	r2, [r7, #22]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	32ae      	adds	r2, #174	@ 0xae
 800c322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	68f8      	ldr	r0, [r7, #12]
 800c32a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f001 f8b7 	bl	800d4a0 <USBD_CtlSendStatus>
 800c332:	e032      	b.n	800c39a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c334:	7afb      	ldrb	r3, [r7, #11]
 800c336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	4619      	mov	r1, r3
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f000 fa41 	bl	800c7c6 <USBD_CoreFindEP>
 800c344:	4603      	mov	r3, r0
 800c346:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c348:	7dbb      	ldrb	r3, [r7, #22]
 800c34a:	2bff      	cmp	r3, #255	@ 0xff
 800c34c:	d025      	beq.n	800c39a <USBD_LL_DataOutStage+0x16e>
 800c34e:	7dbb      	ldrb	r3, [r7, #22]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d122      	bne.n	800c39a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	2b03      	cmp	r3, #3
 800c35e:	d117      	bne.n	800c390 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c360:	7dba      	ldrb	r2, [r7, #22]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	32ae      	adds	r2, #174	@ 0xae
 800c366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c36a:	699b      	ldr	r3, [r3, #24]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d00f      	beq.n	800c390 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800c370:	7dba      	ldrb	r2, [r7, #22]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c378:	7dba      	ldrb	r2, [r7, #22]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	32ae      	adds	r2, #174	@ 0xae
 800c37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c382:	699b      	ldr	r3, [r3, #24]
 800c384:	7afa      	ldrb	r2, [r7, #11]
 800c386:	4611      	mov	r1, r2
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	4798      	blx	r3
 800c38c:	4603      	mov	r3, r0
 800c38e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c390:	7dfb      	ldrb	r3, [r7, #23]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d001      	beq.n	800c39a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800c396:	7dfb      	ldrb	r3, [r7, #23]
 800c398:	e000      	b.n	800c39c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3718      	adds	r7, #24
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b086      	sub	sp, #24
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	607a      	str	r2, [r7, #4]
 800c3b0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c3b2:	7afb      	ldrb	r3, [r7, #11]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d178      	bne.n	800c4aa <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	3314      	adds	r3, #20
 800c3bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	d163      	bne.n	800c490 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	693a      	ldr	r2, [r7, #16]
 800c3ce:	8992      	ldrh	r2, [r2, #12]
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d91c      	bls.n	800c40e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	693a      	ldr	r2, [r7, #16]
 800c3da:	8992      	ldrh	r2, [r2, #12]
 800c3dc:	1a9a      	subs	r2, r3, r2
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	691b      	ldr	r3, [r3, #16]
 800c3e6:	693a      	ldr	r2, [r7, #16]
 800c3e8:	8992      	ldrh	r2, [r2, #12]
 800c3ea:	441a      	add	r2, r3
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	6919      	ldr	r1, [r3, #16]
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f001 f82e 	bl	800d45c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c400:	2300      	movs	r3, #0
 800c402:	2200      	movs	r2, #0
 800c404:	2100      	movs	r1, #0
 800c406:	68f8      	ldr	r0, [r7, #12]
 800c408:	f007 fc06 	bl	8013c18 <USBD_LL_PrepareReceive>
 800c40c:	e040      	b.n	800c490 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	899b      	ldrh	r3, [r3, #12]
 800c412:	461a      	mov	r2, r3
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d11c      	bne.n	800c456 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	693a      	ldr	r2, [r7, #16]
 800c422:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c424:	4293      	cmp	r3, r2
 800c426:	d316      	bcc.n	800c456 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	681a      	ldr	r2, [r3, #0]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c432:	429a      	cmp	r2, r3
 800c434:	d20f      	bcs.n	800c456 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c436:	2200      	movs	r2, #0
 800c438:	2100      	movs	r1, #0
 800c43a:	68f8      	ldr	r0, [r7, #12]
 800c43c:	f001 f80e 	bl	800d45c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2200      	movs	r2, #0
 800c444:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c448:	2300      	movs	r3, #0
 800c44a:	2200      	movs	r2, #0
 800c44c:	2100      	movs	r1, #0
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f007 fbe2 	bl	8013c18 <USBD_LL_PrepareReceive>
 800c454:	e01c      	b.n	800c490 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	2b03      	cmp	r3, #3
 800c460:	d10f      	bne.n	800c482 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d009      	beq.n	800c482 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2200      	movs	r2, #0
 800c472:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c482:	2180      	movs	r1, #128	@ 0x80
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f007 fb1d 	bl	8013ac4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c48a:	68f8      	ldr	r0, [r7, #12]
 800c48c:	f001 f81b 	bl	800d4c6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d03a      	beq.n	800c510 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f7ff fe30 	bl	800c100 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c4a8:	e032      	b.n	800c510 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c4aa:	7afb      	ldrb	r3, [r7, #11]
 800c4ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f000 f986 	bl	800c7c6 <USBD_CoreFindEP>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c4be:	7dfb      	ldrb	r3, [r7, #23]
 800c4c0:	2bff      	cmp	r3, #255	@ 0xff
 800c4c2:	d025      	beq.n	800c510 <USBD_LL_DataInStage+0x16c>
 800c4c4:	7dfb      	ldrb	r3, [r7, #23]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d122      	bne.n	800c510 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	2b03      	cmp	r3, #3
 800c4d4:	d11c      	bne.n	800c510 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c4d6:	7dfa      	ldrb	r2, [r7, #23]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	32ae      	adds	r2, #174	@ 0xae
 800c4dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4e0:	695b      	ldr	r3, [r3, #20]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d014      	beq.n	800c510 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800c4e6:	7dfa      	ldrb	r2, [r7, #23]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c4ee:	7dfa      	ldrb	r2, [r7, #23]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	32ae      	adds	r2, #174	@ 0xae
 800c4f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4f8:	695b      	ldr	r3, [r3, #20]
 800c4fa:	7afa      	ldrb	r2, [r7, #11]
 800c4fc:	4611      	mov	r1, r2
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	4798      	blx	r3
 800c502:	4603      	mov	r3, r0
 800c504:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c506:	7dbb      	ldrb	r3, [r7, #22]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d001      	beq.n	800c510 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800c50c:	7dbb      	ldrb	r3, [r7, #22]
 800c50e:	e000      	b.n	800c512 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800c510:	2300      	movs	r3, #0
}
 800c512:	4618      	mov	r0, r3
 800c514:	3718      	adds	r7, #24
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}

0800c51a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c51a:	b580      	push	{r7, lr}
 800c51c:	b084      	sub	sp, #16
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c522:	2300      	movs	r3, #0
 800c524:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2201      	movs	r2, #1
 800c52a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2200      	movs	r2, #0
 800c540:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2200      	movs	r2, #0
 800c548:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c552:	2b00      	cmp	r3, #0
 800c554:	d014      	beq.n	800c580 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d00e      	beq.n	800c580 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	6852      	ldr	r2, [r2, #4]
 800c56e:	b2d2      	uxtb	r2, r2
 800c570:	4611      	mov	r1, r2
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	4798      	blx	r3
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d001      	beq.n	800c580 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c57c:	2303      	movs	r3, #3
 800c57e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c580:	2340      	movs	r3, #64	@ 0x40
 800c582:	2200      	movs	r2, #0
 800c584:	2100      	movs	r1, #0
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f007 fa76 	bl	8013a78 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2201      	movs	r2, #1
 800c590:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2240      	movs	r2, #64	@ 0x40
 800c598:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c59c:	2340      	movs	r3, #64	@ 0x40
 800c59e:	2200      	movs	r2, #0
 800c5a0:	2180      	movs	r1, #128	@ 0x80
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f007 fa68 	bl	8013a78 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2240      	movs	r2, #64	@ 0x40
 800c5b4:	841a      	strh	r2, [r3, #32]

  return ret;
 800c5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	78fa      	ldrb	r2, [r7, #3]
 800c5d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	2b04      	cmp	r3, #4
 800c5f2:	d006      	beq.n	800c602 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5fa:	b2da      	uxtb	r2, r3
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2204      	movs	r2, #4
 800c606:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c60a:	2300      	movs	r3, #0
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr

0800c618 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c626:	b2db      	uxtb	r3, r3
 800c628:	2b04      	cmp	r3, #4
 800c62a:	d106      	bne.n	800c63a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c632:	b2da      	uxtb	r2, r3
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c63a:	2300      	movs	r3, #0
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	370c      	adds	r7, #12
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c656:	b2db      	uxtb	r3, r3
 800c658:	2b03      	cmp	r3, #3
 800c65a:	d110      	bne.n	800c67e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00b      	beq.n	800c67e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c66c:	69db      	ldr	r3, [r3, #28]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d005      	beq.n	800c67e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c678:	69db      	ldr	r3, [r3, #28]
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c67e:	2300      	movs	r3, #0
}
 800c680:	4618      	mov	r0, r3
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	460b      	mov	r3, r1
 800c692:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	32ae      	adds	r2, #174	@ 0xae
 800c69e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d101      	bne.n	800c6aa <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c6a6:	2303      	movs	r3, #3
 800c6a8:	e01c      	b.n	800c6e4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	2b03      	cmp	r3, #3
 800c6b4:	d115      	bne.n	800c6e2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	32ae      	adds	r2, #174	@ 0xae
 800c6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6c4:	6a1b      	ldr	r3, [r3, #32]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00b      	beq.n	800c6e2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	32ae      	adds	r2, #174	@ 0xae
 800c6d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6d8:	6a1b      	ldr	r3, [r3, #32]
 800c6da:	78fa      	ldrb	r2, [r7, #3]
 800c6dc:	4611      	mov	r1, r2
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c6e2:	2300      	movs	r3, #0
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	32ae      	adds	r2, #174	@ 0xae
 800c702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d101      	bne.n	800c70e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c70a:	2303      	movs	r3, #3
 800c70c:	e01c      	b.n	800c748 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c714:	b2db      	uxtb	r3, r3
 800c716:	2b03      	cmp	r3, #3
 800c718:	d115      	bne.n	800c746 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	32ae      	adds	r2, #174	@ 0xae
 800c724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00b      	beq.n	800c746 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	32ae      	adds	r2, #174	@ 0xae
 800c738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c73e:	78fa      	ldrb	r2, [r7, #3]
 800c740:	4611      	mov	r1, r2
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c746:	2300      	movs	r3, #0
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3708      	adds	r7, #8
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c758:	2300      	movs	r3, #0
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	370c      	adds	r7, #12
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr

0800c766 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c766:	b580      	push	{r7, lr}
 800c768:	b084      	sub	sp, #16
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c76e:	2300      	movs	r3, #0
 800c770:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2201      	movs	r2, #1
 800c776:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c780:	2b00      	cmp	r3, #0
 800c782:	d00e      	beq.n	800c7a2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	6852      	ldr	r2, [r2, #4]
 800c790:	b2d2      	uxtb	r2, r2
 800c792:	4611      	mov	r1, r2
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	4798      	blx	r3
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c79e:	2303      	movs	r3, #3
 800c7a0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3710      	adds	r7, #16
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b083      	sub	sp, #12
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c7b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	370c      	adds	r7, #12
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr

0800c7c6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c7c6:	b480      	push	{r7}
 800c7c8:	b083      	sub	sp, #12
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c7d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b087      	sub	sp, #28
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c7f2:	697b      	ldr	r3, [r7, #20]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c7fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c802:	021b      	lsls	r3, r3, #8
 800c804:	b21a      	sxth	r2, r3
 800c806:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c80a:	4313      	orrs	r3, r2
 800c80c:	b21b      	sxth	r3, r3
 800c80e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c810:	89fb      	ldrh	r3, [r7, #14]
}
 800c812:	4618      	mov	r0, r3
 800c814:	371c      	adds	r7, #28
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr
	...

0800c820 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c82a:	2300      	movs	r3, #0
 800c82c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c836:	2b40      	cmp	r3, #64	@ 0x40
 800c838:	d005      	beq.n	800c846 <USBD_StdDevReq+0x26>
 800c83a:	2b40      	cmp	r3, #64	@ 0x40
 800c83c:	d857      	bhi.n	800c8ee <USBD_StdDevReq+0xce>
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00f      	beq.n	800c862 <USBD_StdDevReq+0x42>
 800c842:	2b20      	cmp	r3, #32
 800c844:	d153      	bne.n	800c8ee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	32ae      	adds	r2, #174	@ 0xae
 800c850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c854:	689b      	ldr	r3, [r3, #8]
 800c856:	6839      	ldr	r1, [r7, #0]
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	4798      	blx	r3
 800c85c:	4603      	mov	r3, r0
 800c85e:	73fb      	strb	r3, [r7, #15]
      break;
 800c860:	e04a      	b.n	800c8f8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	785b      	ldrb	r3, [r3, #1]
 800c866:	2b09      	cmp	r3, #9
 800c868:	d83b      	bhi.n	800c8e2 <USBD_StdDevReq+0xc2>
 800c86a:	a201      	add	r2, pc, #4	@ (adr r2, 800c870 <USBD_StdDevReq+0x50>)
 800c86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c870:	0800c8c5 	.word	0x0800c8c5
 800c874:	0800c8d9 	.word	0x0800c8d9
 800c878:	0800c8e3 	.word	0x0800c8e3
 800c87c:	0800c8cf 	.word	0x0800c8cf
 800c880:	0800c8e3 	.word	0x0800c8e3
 800c884:	0800c8a3 	.word	0x0800c8a3
 800c888:	0800c899 	.word	0x0800c899
 800c88c:	0800c8e3 	.word	0x0800c8e3
 800c890:	0800c8bb 	.word	0x0800c8bb
 800c894:	0800c8ad 	.word	0x0800c8ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c898:	6839      	ldr	r1, [r7, #0]
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 fa3e 	bl	800cd1c <USBD_GetDescriptor>
          break;
 800c8a0:	e024      	b.n	800c8ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c8a2:	6839      	ldr	r1, [r7, #0]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 fbcd 	bl	800d044 <USBD_SetAddress>
          break;
 800c8aa:	e01f      	b.n	800c8ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c8ac:	6839      	ldr	r1, [r7, #0]
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 fc0c 	bl	800d0cc <USBD_SetConfig>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	73fb      	strb	r3, [r7, #15]
          break;
 800c8b8:	e018      	b.n	800c8ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c8ba:	6839      	ldr	r1, [r7, #0]
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f000 fcaf 	bl	800d220 <USBD_GetConfig>
          break;
 800c8c2:	e013      	b.n	800c8ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c8c4:	6839      	ldr	r1, [r7, #0]
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 fce0 	bl	800d28c <USBD_GetStatus>
          break;
 800c8cc:	e00e      	b.n	800c8ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c8ce:	6839      	ldr	r1, [r7, #0]
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 fd0f 	bl	800d2f4 <USBD_SetFeature>
          break;
 800c8d6:	e009      	b.n	800c8ec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c8d8:	6839      	ldr	r1, [r7, #0]
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 fd33 	bl	800d346 <USBD_ClrFeature>
          break;
 800c8e0:	e004      	b.n	800c8ec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c8e2:	6839      	ldr	r1, [r7, #0]
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 fd8a 	bl	800d3fe <USBD_CtlError>
          break;
 800c8ea:	bf00      	nop
      }
      break;
 800c8ec:	e004      	b.n	800c8f8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c8ee:	6839      	ldr	r1, [r7, #0]
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 fd84 	bl	800d3fe <USBD_CtlError>
      break;
 800c8f6:	bf00      	nop
  }

  return ret;
 800c8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3710      	adds	r7, #16
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop

0800c904 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c90e:	2300      	movs	r3, #0
 800c910:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c91a:	2b40      	cmp	r3, #64	@ 0x40
 800c91c:	d005      	beq.n	800c92a <USBD_StdItfReq+0x26>
 800c91e:	2b40      	cmp	r3, #64	@ 0x40
 800c920:	d852      	bhi.n	800c9c8 <USBD_StdItfReq+0xc4>
 800c922:	2b00      	cmp	r3, #0
 800c924:	d001      	beq.n	800c92a <USBD_StdItfReq+0x26>
 800c926:	2b20      	cmp	r3, #32
 800c928:	d14e      	bne.n	800c9c8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c930:	b2db      	uxtb	r3, r3
 800c932:	3b01      	subs	r3, #1
 800c934:	2b02      	cmp	r3, #2
 800c936:	d840      	bhi.n	800c9ba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	889b      	ldrh	r3, [r3, #4]
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d836      	bhi.n	800c9b0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	889b      	ldrh	r3, [r3, #4]
 800c946:	b2db      	uxtb	r3, r3
 800c948:	4619      	mov	r1, r3
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f7ff ff2e 	bl	800c7ac <USBD_CoreFindIF>
 800c950:	4603      	mov	r3, r0
 800c952:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c954:	7bbb      	ldrb	r3, [r7, #14]
 800c956:	2bff      	cmp	r3, #255	@ 0xff
 800c958:	d01d      	beq.n	800c996 <USBD_StdItfReq+0x92>
 800c95a:	7bbb      	ldrb	r3, [r7, #14]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d11a      	bne.n	800c996 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c960:	7bba      	ldrb	r2, [r7, #14]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	32ae      	adds	r2, #174	@ 0xae
 800c966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c96a:	689b      	ldr	r3, [r3, #8]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d00f      	beq.n	800c990 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c970:	7bba      	ldrb	r2, [r7, #14]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c978:	7bba      	ldrb	r2, [r7, #14]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	32ae      	adds	r2, #174	@ 0xae
 800c97e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	6839      	ldr	r1, [r7, #0]
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	4798      	blx	r3
 800c98a:	4603      	mov	r3, r0
 800c98c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c98e:	e004      	b.n	800c99a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c990:	2303      	movs	r3, #3
 800c992:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c994:	e001      	b.n	800c99a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c996:	2303      	movs	r3, #3
 800c998:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	88db      	ldrh	r3, [r3, #6]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d110      	bne.n	800c9c4 <USBD_StdItfReq+0xc0>
 800c9a2:	7bfb      	ldrb	r3, [r7, #15]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10d      	bne.n	800c9c4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 fd79 	bl	800d4a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c9ae:	e009      	b.n	800c9c4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c9b0:	6839      	ldr	r1, [r7, #0]
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 fd23 	bl	800d3fe <USBD_CtlError>
          break;
 800c9b8:	e004      	b.n	800c9c4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c9ba:	6839      	ldr	r1, [r7, #0]
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 fd1e 	bl	800d3fe <USBD_CtlError>
          break;
 800c9c2:	e000      	b.n	800c9c6 <USBD_StdItfReq+0xc2>
          break;
 800c9c4:	bf00      	nop
      }
      break;
 800c9c6:	e004      	b.n	800c9d2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c9c8:	6839      	ldr	r1, [r7, #0]
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 fd17 	bl	800d3fe <USBD_CtlError>
      break;
 800c9d0:	bf00      	nop
  }

  return ret;
 800c9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3710      	adds	r7, #16
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	889b      	ldrh	r3, [r3, #4]
 800c9ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c9f8:	2b40      	cmp	r3, #64	@ 0x40
 800c9fa:	d007      	beq.n	800ca0c <USBD_StdEPReq+0x30>
 800c9fc:	2b40      	cmp	r3, #64	@ 0x40
 800c9fe:	f200 8181 	bhi.w	800cd04 <USBD_StdEPReq+0x328>
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d02a      	beq.n	800ca5c <USBD_StdEPReq+0x80>
 800ca06:	2b20      	cmp	r3, #32
 800ca08:	f040 817c 	bne.w	800cd04 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ca0c:	7bbb      	ldrb	r3, [r7, #14]
 800ca0e:	4619      	mov	r1, r3
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f7ff fed8 	bl	800c7c6 <USBD_CoreFindEP>
 800ca16:	4603      	mov	r3, r0
 800ca18:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca1a:	7b7b      	ldrb	r3, [r7, #13]
 800ca1c:	2bff      	cmp	r3, #255	@ 0xff
 800ca1e:	f000 8176 	beq.w	800cd0e <USBD_StdEPReq+0x332>
 800ca22:	7b7b      	ldrb	r3, [r7, #13]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f040 8172 	bne.w	800cd0e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800ca2a:	7b7a      	ldrb	r2, [r7, #13]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ca32:	7b7a      	ldrb	r2, [r7, #13]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	32ae      	adds	r2, #174	@ 0xae
 800ca38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca3c:	689b      	ldr	r3, [r3, #8]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f000 8165 	beq.w	800cd0e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ca44:	7b7a      	ldrb	r2, [r7, #13]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	32ae      	adds	r2, #174	@ 0xae
 800ca4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca4e:	689b      	ldr	r3, [r3, #8]
 800ca50:	6839      	ldr	r1, [r7, #0]
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	4798      	blx	r3
 800ca56:	4603      	mov	r3, r0
 800ca58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ca5a:	e158      	b.n	800cd0e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	785b      	ldrb	r3, [r3, #1]
 800ca60:	2b03      	cmp	r3, #3
 800ca62:	d008      	beq.n	800ca76 <USBD_StdEPReq+0x9a>
 800ca64:	2b03      	cmp	r3, #3
 800ca66:	f300 8147 	bgt.w	800ccf8 <USBD_StdEPReq+0x31c>
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	f000 809b 	beq.w	800cba6 <USBD_StdEPReq+0x1ca>
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d03c      	beq.n	800caee <USBD_StdEPReq+0x112>
 800ca74:	e140      	b.n	800ccf8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d002      	beq.n	800ca88 <USBD_StdEPReq+0xac>
 800ca82:	2b03      	cmp	r3, #3
 800ca84:	d016      	beq.n	800cab4 <USBD_StdEPReq+0xd8>
 800ca86:	e02c      	b.n	800cae2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca88:	7bbb      	ldrb	r3, [r7, #14]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00d      	beq.n	800caaa <USBD_StdEPReq+0xce>
 800ca8e:	7bbb      	ldrb	r3, [r7, #14]
 800ca90:	2b80      	cmp	r3, #128	@ 0x80
 800ca92:	d00a      	beq.n	800caaa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ca94:	7bbb      	ldrb	r3, [r7, #14]
 800ca96:	4619      	mov	r1, r3
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f007 f813 	bl	8013ac4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca9e:	2180      	movs	r1, #128	@ 0x80
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f007 f80f 	bl	8013ac4 <USBD_LL_StallEP>
 800caa6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800caa8:	e020      	b.n	800caec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800caaa:	6839      	ldr	r1, [r7, #0]
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 fca6 	bl	800d3fe <USBD_CtlError>
              break;
 800cab2:	e01b      	b.n	800caec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	885b      	ldrh	r3, [r3, #2]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d10e      	bne.n	800cada <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cabc:	7bbb      	ldrb	r3, [r7, #14]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d00b      	beq.n	800cada <USBD_StdEPReq+0xfe>
 800cac2:	7bbb      	ldrb	r3, [r7, #14]
 800cac4:	2b80      	cmp	r3, #128	@ 0x80
 800cac6:	d008      	beq.n	800cada <USBD_StdEPReq+0xfe>
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	88db      	ldrh	r3, [r3, #6]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d104      	bne.n	800cada <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cad0:	7bbb      	ldrb	r3, [r7, #14]
 800cad2:	4619      	mov	r1, r3
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f006 fff5 	bl	8013ac4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 fce0 	bl	800d4a0 <USBD_CtlSendStatus>

              break;
 800cae0:	e004      	b.n	800caec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cae2:	6839      	ldr	r1, [r7, #0]
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f000 fc8a 	bl	800d3fe <USBD_CtlError>
              break;
 800caea:	bf00      	nop
          }
          break;
 800caec:	e109      	b.n	800cd02 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	d002      	beq.n	800cb00 <USBD_StdEPReq+0x124>
 800cafa:	2b03      	cmp	r3, #3
 800cafc:	d016      	beq.n	800cb2c <USBD_StdEPReq+0x150>
 800cafe:	e04b      	b.n	800cb98 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb00:	7bbb      	ldrb	r3, [r7, #14]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d00d      	beq.n	800cb22 <USBD_StdEPReq+0x146>
 800cb06:	7bbb      	ldrb	r3, [r7, #14]
 800cb08:	2b80      	cmp	r3, #128	@ 0x80
 800cb0a:	d00a      	beq.n	800cb22 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb0c:	7bbb      	ldrb	r3, [r7, #14]
 800cb0e:	4619      	mov	r1, r3
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f006 ffd7 	bl	8013ac4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb16:	2180      	movs	r1, #128	@ 0x80
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f006 ffd3 	bl	8013ac4 <USBD_LL_StallEP>
 800cb1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb20:	e040      	b.n	800cba4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cb22:	6839      	ldr	r1, [r7, #0]
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 fc6a 	bl	800d3fe <USBD_CtlError>
              break;
 800cb2a:	e03b      	b.n	800cba4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	885b      	ldrh	r3, [r3, #2]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d136      	bne.n	800cba2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cb34:	7bbb      	ldrb	r3, [r7, #14]
 800cb36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d004      	beq.n	800cb48 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cb3e:	7bbb      	ldrb	r3, [r7, #14]
 800cb40:	4619      	mov	r1, r3
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f006 ffdd 	bl	8013b02 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 fca9 	bl	800d4a0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cb4e:	7bbb      	ldrb	r3, [r7, #14]
 800cb50:	4619      	mov	r1, r3
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f7ff fe37 	bl	800c7c6 <USBD_CoreFindEP>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb5c:	7b7b      	ldrb	r3, [r7, #13]
 800cb5e:	2bff      	cmp	r3, #255	@ 0xff
 800cb60:	d01f      	beq.n	800cba2 <USBD_StdEPReq+0x1c6>
 800cb62:	7b7b      	ldrb	r3, [r7, #13]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d11c      	bne.n	800cba2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cb68:	7b7a      	ldrb	r2, [r7, #13]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cb70:	7b7a      	ldrb	r2, [r7, #13]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	32ae      	adds	r2, #174	@ 0xae
 800cb76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb7a:	689b      	ldr	r3, [r3, #8]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d010      	beq.n	800cba2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cb80:	7b7a      	ldrb	r2, [r7, #13]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	32ae      	adds	r2, #174	@ 0xae
 800cb86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	6839      	ldr	r1, [r7, #0]
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	4798      	blx	r3
 800cb92:	4603      	mov	r3, r0
 800cb94:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cb96:	e004      	b.n	800cba2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cb98:	6839      	ldr	r1, [r7, #0]
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f000 fc2f 	bl	800d3fe <USBD_CtlError>
              break;
 800cba0:	e000      	b.n	800cba4 <USBD_StdEPReq+0x1c8>
              break;
 800cba2:	bf00      	nop
          }
          break;
 800cba4:	e0ad      	b.n	800cd02 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	2b02      	cmp	r3, #2
 800cbb0:	d002      	beq.n	800cbb8 <USBD_StdEPReq+0x1dc>
 800cbb2:	2b03      	cmp	r3, #3
 800cbb4:	d033      	beq.n	800cc1e <USBD_StdEPReq+0x242>
 800cbb6:	e099      	b.n	800ccec <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbb8:	7bbb      	ldrb	r3, [r7, #14]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d007      	beq.n	800cbce <USBD_StdEPReq+0x1f2>
 800cbbe:	7bbb      	ldrb	r3, [r7, #14]
 800cbc0:	2b80      	cmp	r3, #128	@ 0x80
 800cbc2:	d004      	beq.n	800cbce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cbc4:	6839      	ldr	r1, [r7, #0]
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 fc19 	bl	800d3fe <USBD_CtlError>
                break;
 800cbcc:	e093      	b.n	800ccf6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	da0b      	bge.n	800cbee <USBD_StdEPReq+0x212>
 800cbd6:	7bbb      	ldrb	r3, [r7, #14]
 800cbd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cbdc:	4613      	mov	r3, r2
 800cbde:	009b      	lsls	r3, r3, #2
 800cbe0:	4413      	add	r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	3310      	adds	r3, #16
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	4413      	add	r3, r2
 800cbea:	3304      	adds	r3, #4
 800cbec:	e00b      	b.n	800cc06 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cbee:	7bbb      	ldrb	r3, [r7, #14]
 800cbf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	4413      	add	r3, r2
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	4413      	add	r3, r2
 800cc04:	3304      	adds	r3, #4
 800cc06:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	330e      	adds	r3, #14
 800cc12:	2202      	movs	r2, #2
 800cc14:	4619      	mov	r1, r3
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 fc02 	bl	800d420 <USBD_CtlSendData>
              break;
 800cc1c:	e06b      	b.n	800ccf6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cc1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	da11      	bge.n	800cc4a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc26:	7bbb      	ldrb	r3, [r7, #14]
 800cc28:	f003 020f 	and.w	r2, r3, #15
 800cc2c:	6879      	ldr	r1, [r7, #4]
 800cc2e:	4613      	mov	r3, r2
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	4413      	add	r3, r2
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	440b      	add	r3, r1
 800cc38:	3323      	adds	r3, #35	@ 0x23
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d117      	bne.n	800cc70 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800cc40:	6839      	ldr	r1, [r7, #0]
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 fbdb 	bl	800d3fe <USBD_CtlError>
                  break;
 800cc48:	e055      	b.n	800ccf6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cc4a:	7bbb      	ldrb	r3, [r7, #14]
 800cc4c:	f003 020f 	and.w	r2, r3, #15
 800cc50:	6879      	ldr	r1, [r7, #4]
 800cc52:	4613      	mov	r3, r2
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	4413      	add	r3, r2
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	440b      	add	r3, r1
 800cc5c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d104      	bne.n	800cc70 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800cc66:	6839      	ldr	r1, [r7, #0]
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f000 fbc8 	bl	800d3fe <USBD_CtlError>
                  break;
 800cc6e:	e042      	b.n	800ccf6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	da0b      	bge.n	800cc90 <USBD_StdEPReq+0x2b4>
 800cc78:	7bbb      	ldrb	r3, [r7, #14]
 800cc7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cc7e:	4613      	mov	r3, r2
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	4413      	add	r3, r2
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	3310      	adds	r3, #16
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	3304      	adds	r3, #4
 800cc8e:	e00b      	b.n	800cca8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc90:	7bbb      	ldrb	r3, [r7, #14]
 800cc92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc96:	4613      	mov	r3, r2
 800cc98:	009b      	lsls	r3, r3, #2
 800cc9a:	4413      	add	r3, r2
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	4413      	add	r3, r2
 800cca6:	3304      	adds	r3, #4
 800cca8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ccaa:	7bbb      	ldrb	r3, [r7, #14]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d002      	beq.n	800ccb6 <USBD_StdEPReq+0x2da>
 800ccb0:	7bbb      	ldrb	r3, [r7, #14]
 800ccb2:	2b80      	cmp	r3, #128	@ 0x80
 800ccb4:	d103      	bne.n	800ccbe <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	739a      	strb	r2, [r3, #14]
 800ccbc:	e00e      	b.n	800ccdc <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ccbe:	7bbb      	ldrb	r3, [r7, #14]
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f006 ff3c 	bl	8013b40 <USBD_LL_IsStallEP>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d003      	beq.n	800ccd6 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	739a      	strb	r2, [r3, #14]
 800ccd4:	e002      	b.n	800ccdc <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	330e      	adds	r3, #14
 800cce0:	2202      	movs	r2, #2
 800cce2:	4619      	mov	r1, r3
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 fb9b 	bl	800d420 <USBD_CtlSendData>
              break;
 800ccea:	e004      	b.n	800ccf6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800ccec:	6839      	ldr	r1, [r7, #0]
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 fb85 	bl	800d3fe <USBD_CtlError>
              break;
 800ccf4:	bf00      	nop
          }
          break;
 800ccf6:	e004      	b.n	800cd02 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800ccf8:	6839      	ldr	r1, [r7, #0]
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 fb7f 	bl	800d3fe <USBD_CtlError>
          break;
 800cd00:	bf00      	nop
      }
      break;
 800cd02:	e005      	b.n	800cd10 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800cd04:	6839      	ldr	r1, [r7, #0]
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f000 fb79 	bl	800d3fe <USBD_CtlError>
      break;
 800cd0c:	e000      	b.n	800cd10 <USBD_StdEPReq+0x334>
      break;
 800cd0e:	bf00      	nop
  }

  return ret;
 800cd10:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3710      	adds	r7, #16
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
	...

0800cd1c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd26:	2300      	movs	r3, #0
 800cd28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	885b      	ldrh	r3, [r3, #2]
 800cd36:	0a1b      	lsrs	r3, r3, #8
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	3b01      	subs	r3, #1
 800cd3c:	2b0e      	cmp	r3, #14
 800cd3e:	f200 8152 	bhi.w	800cfe6 <USBD_GetDescriptor+0x2ca>
 800cd42:	a201      	add	r2, pc, #4	@ (adr r2, 800cd48 <USBD_GetDescriptor+0x2c>)
 800cd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd48:	0800cdb9 	.word	0x0800cdb9
 800cd4c:	0800cdd1 	.word	0x0800cdd1
 800cd50:	0800ce11 	.word	0x0800ce11
 800cd54:	0800cfe7 	.word	0x0800cfe7
 800cd58:	0800cfe7 	.word	0x0800cfe7
 800cd5c:	0800cf87 	.word	0x0800cf87
 800cd60:	0800cfb3 	.word	0x0800cfb3
 800cd64:	0800cfe7 	.word	0x0800cfe7
 800cd68:	0800cfe7 	.word	0x0800cfe7
 800cd6c:	0800cfe7 	.word	0x0800cfe7
 800cd70:	0800cfe7 	.word	0x0800cfe7
 800cd74:	0800cfe7 	.word	0x0800cfe7
 800cd78:	0800cfe7 	.word	0x0800cfe7
 800cd7c:	0800cfe7 	.word	0x0800cfe7
 800cd80:	0800cd85 	.word	0x0800cd85
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd8a:	69db      	ldr	r3, [r3, #28]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00b      	beq.n	800cda8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd96:	69db      	ldr	r3, [r3, #28]
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	7c12      	ldrb	r2, [r2, #16]
 800cd9c:	f107 0108 	add.w	r1, r7, #8
 800cda0:	4610      	mov	r0, r2
 800cda2:	4798      	blx	r3
 800cda4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cda6:	e126      	b.n	800cff6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cda8:	6839      	ldr	r1, [r7, #0]
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f000 fb27 	bl	800d3fe <USBD_CtlError>
        err++;
 800cdb0:	7afb      	ldrb	r3, [r7, #11]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	72fb      	strb	r3, [r7, #11]
      break;
 800cdb6:	e11e      	b.n	800cff6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	7c12      	ldrb	r2, [r2, #16]
 800cdc4:	f107 0108 	add.w	r1, r7, #8
 800cdc8:	4610      	mov	r0, r2
 800cdca:	4798      	blx	r3
 800cdcc:	60f8      	str	r0, [r7, #12]
      break;
 800cdce:	e112      	b.n	800cff6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	7c1b      	ldrb	r3, [r3, #16]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d10d      	bne.n	800cdf4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cde0:	f107 0208 	add.w	r2, r7, #8
 800cde4:	4610      	mov	r0, r2
 800cde6:	4798      	blx	r3
 800cde8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	3301      	adds	r3, #1
 800cdee:	2202      	movs	r2, #2
 800cdf0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cdf2:	e100      	b.n	800cff6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdfc:	f107 0208 	add.w	r2, r7, #8
 800ce00:	4610      	mov	r0, r2
 800ce02:	4798      	blx	r3
 800ce04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	2202      	movs	r2, #2
 800ce0c:	701a      	strb	r2, [r3, #0]
      break;
 800ce0e:	e0f2      	b.n	800cff6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	885b      	ldrh	r3, [r3, #2]
 800ce14:	b2db      	uxtb	r3, r3
 800ce16:	2b05      	cmp	r3, #5
 800ce18:	f200 80ac 	bhi.w	800cf74 <USBD_GetDescriptor+0x258>
 800ce1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ce24 <USBD_GetDescriptor+0x108>)
 800ce1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce22:	bf00      	nop
 800ce24:	0800ce3d 	.word	0x0800ce3d
 800ce28:	0800ce71 	.word	0x0800ce71
 800ce2c:	0800cea5 	.word	0x0800cea5
 800ce30:	0800ced9 	.word	0x0800ced9
 800ce34:	0800cf0d 	.word	0x0800cf0d
 800ce38:	0800cf41 	.word	0x0800cf41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00b      	beq.n	800ce60 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	7c12      	ldrb	r2, [r2, #16]
 800ce54:	f107 0108 	add.w	r1, r7, #8
 800ce58:	4610      	mov	r0, r2
 800ce5a:	4798      	blx	r3
 800ce5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce5e:	e091      	b.n	800cf84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce60:	6839      	ldr	r1, [r7, #0]
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 facb 	bl	800d3fe <USBD_CtlError>
            err++;
 800ce68:	7afb      	ldrb	r3, [r7, #11]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce6e:	e089      	b.n	800cf84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce76:	689b      	ldr	r3, [r3, #8]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d00b      	beq.n	800ce94 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ce82:	689b      	ldr	r3, [r3, #8]
 800ce84:	687a      	ldr	r2, [r7, #4]
 800ce86:	7c12      	ldrb	r2, [r2, #16]
 800ce88:	f107 0108 	add.w	r1, r7, #8
 800ce8c:	4610      	mov	r0, r2
 800ce8e:	4798      	blx	r3
 800ce90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce92:	e077      	b.n	800cf84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce94:	6839      	ldr	r1, [r7, #0]
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 fab1 	bl	800d3fe <USBD_CtlError>
            err++;
 800ce9c:	7afb      	ldrb	r3, [r7, #11]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	72fb      	strb	r3, [r7, #11]
          break;
 800cea2:	e06f      	b.n	800cf84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d00b      	beq.n	800cec8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ceb6:	68db      	ldr	r3, [r3, #12]
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	7c12      	ldrb	r2, [r2, #16]
 800cebc:	f107 0108 	add.w	r1, r7, #8
 800cec0:	4610      	mov	r0, r2
 800cec2:	4798      	blx	r3
 800cec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cec6:	e05d      	b.n	800cf84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cec8:	6839      	ldr	r1, [r7, #0]
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f000 fa97 	bl	800d3fe <USBD_CtlError>
            err++;
 800ced0:	7afb      	ldrb	r3, [r7, #11]
 800ced2:	3301      	adds	r3, #1
 800ced4:	72fb      	strb	r3, [r7, #11]
          break;
 800ced6:	e055      	b.n	800cf84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cede:	691b      	ldr	r3, [r3, #16]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d00b      	beq.n	800cefc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ceea:	691b      	ldr	r3, [r3, #16]
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	7c12      	ldrb	r2, [r2, #16]
 800cef0:	f107 0108 	add.w	r1, r7, #8
 800cef4:	4610      	mov	r0, r2
 800cef6:	4798      	blx	r3
 800cef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cefa:	e043      	b.n	800cf84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cefc:	6839      	ldr	r1, [r7, #0]
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 fa7d 	bl	800d3fe <USBD_CtlError>
            err++;
 800cf04:	7afb      	ldrb	r3, [r7, #11]
 800cf06:	3301      	adds	r3, #1
 800cf08:	72fb      	strb	r3, [r7, #11]
          break;
 800cf0a:	e03b      	b.n	800cf84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf12:	695b      	ldr	r3, [r3, #20]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d00b      	beq.n	800cf30 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf1e:	695b      	ldr	r3, [r3, #20]
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	7c12      	ldrb	r2, [r2, #16]
 800cf24:	f107 0108 	add.w	r1, r7, #8
 800cf28:	4610      	mov	r0, r2
 800cf2a:	4798      	blx	r3
 800cf2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf2e:	e029      	b.n	800cf84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf30:	6839      	ldr	r1, [r7, #0]
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f000 fa63 	bl	800d3fe <USBD_CtlError>
            err++;
 800cf38:	7afb      	ldrb	r3, [r7, #11]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf3e:	e021      	b.n	800cf84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf46:	699b      	ldr	r3, [r3, #24]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00b      	beq.n	800cf64 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cf52:	699b      	ldr	r3, [r3, #24]
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	7c12      	ldrb	r2, [r2, #16]
 800cf58:	f107 0108 	add.w	r1, r7, #8
 800cf5c:	4610      	mov	r0, r2
 800cf5e:	4798      	blx	r3
 800cf60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf62:	e00f      	b.n	800cf84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf64:	6839      	ldr	r1, [r7, #0]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fa49 	bl	800d3fe <USBD_CtlError>
            err++;
 800cf6c:	7afb      	ldrb	r3, [r7, #11]
 800cf6e:	3301      	adds	r3, #1
 800cf70:	72fb      	strb	r3, [r7, #11]
          break;
 800cf72:	e007      	b.n	800cf84 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cf74:	6839      	ldr	r1, [r7, #0]
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 fa41 	bl	800d3fe <USBD_CtlError>
          err++;
 800cf7c:	7afb      	ldrb	r3, [r7, #11]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cf82:	bf00      	nop
      }
      break;
 800cf84:	e037      	b.n	800cff6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	7c1b      	ldrb	r3, [r3, #16]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d109      	bne.n	800cfa2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf96:	f107 0208 	add.w	r2, r7, #8
 800cf9a:	4610      	mov	r0, r2
 800cf9c:	4798      	blx	r3
 800cf9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cfa0:	e029      	b.n	800cff6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cfa2:	6839      	ldr	r1, [r7, #0]
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 fa2a 	bl	800d3fe <USBD_CtlError>
        err++;
 800cfaa:	7afb      	ldrb	r3, [r7, #11]
 800cfac:	3301      	adds	r3, #1
 800cfae:	72fb      	strb	r3, [r7, #11]
      break;
 800cfb0:	e021      	b.n	800cff6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	7c1b      	ldrb	r3, [r3, #16]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d10d      	bne.n	800cfd6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cfc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfc2:	f107 0208 	add.w	r2, r7, #8
 800cfc6:	4610      	mov	r0, r2
 800cfc8:	4798      	blx	r3
 800cfca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	3301      	adds	r3, #1
 800cfd0:	2207      	movs	r2, #7
 800cfd2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cfd4:	e00f      	b.n	800cff6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cfd6:	6839      	ldr	r1, [r7, #0]
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 fa10 	bl	800d3fe <USBD_CtlError>
        err++;
 800cfde:	7afb      	ldrb	r3, [r7, #11]
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	72fb      	strb	r3, [r7, #11]
      break;
 800cfe4:	e007      	b.n	800cff6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cfe6:	6839      	ldr	r1, [r7, #0]
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 fa08 	bl	800d3fe <USBD_CtlError>
      err++;
 800cfee:	7afb      	ldrb	r3, [r7, #11]
 800cff0:	3301      	adds	r3, #1
 800cff2:	72fb      	strb	r3, [r7, #11]
      break;
 800cff4:	bf00      	nop
  }

  if (err != 0U)
 800cff6:	7afb      	ldrb	r3, [r7, #11]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d11e      	bne.n	800d03a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	88db      	ldrh	r3, [r3, #6]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d016      	beq.n	800d032 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d004:	893b      	ldrh	r3, [r7, #8]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00e      	beq.n	800d028 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	88da      	ldrh	r2, [r3, #6]
 800d00e:	893b      	ldrh	r3, [r7, #8]
 800d010:	4293      	cmp	r3, r2
 800d012:	bf28      	it	cs
 800d014:	4613      	movcs	r3, r2
 800d016:	b29b      	uxth	r3, r3
 800d018:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d01a:	893b      	ldrh	r3, [r7, #8]
 800d01c:	461a      	mov	r2, r3
 800d01e:	68f9      	ldr	r1, [r7, #12]
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 f9fd 	bl	800d420 <USBD_CtlSendData>
 800d026:	e009      	b.n	800d03c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d028:	6839      	ldr	r1, [r7, #0]
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 f9e7 	bl	800d3fe <USBD_CtlError>
 800d030:	e004      	b.n	800d03c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 fa34 	bl	800d4a0 <USBD_CtlSendStatus>
 800d038:	e000      	b.n	800d03c <USBD_GetDescriptor+0x320>
    return;
 800d03a:	bf00      	nop
  }
}
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop

0800d044 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b084      	sub	sp, #16
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	889b      	ldrh	r3, [r3, #4]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d131      	bne.n	800d0ba <USBD_SetAddress+0x76>
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	88db      	ldrh	r3, [r3, #6]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d12d      	bne.n	800d0ba <USBD_SetAddress+0x76>
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	885b      	ldrh	r3, [r3, #2]
 800d062:	2b7f      	cmp	r3, #127	@ 0x7f
 800d064:	d829      	bhi.n	800d0ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	885b      	ldrh	r3, [r3, #2]
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d070:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d078:	b2db      	uxtb	r3, r3
 800d07a:	2b03      	cmp	r3, #3
 800d07c:	d104      	bne.n	800d088 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d07e:	6839      	ldr	r1, [r7, #0]
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 f9bc 	bl	800d3fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d086:	e01d      	b.n	800d0c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	7bfa      	ldrb	r2, [r7, #15]
 800d08c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d090:	7bfb      	ldrb	r3, [r7, #15]
 800d092:	4619      	mov	r1, r3
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f006 fd7f 	bl	8013b98 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 fa00 	bl	800d4a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d0a0:	7bfb      	ldrb	r3, [r7, #15]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d004      	beq.n	800d0b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2202      	movs	r2, #2
 800d0aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0ae:	e009      	b.n	800d0c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0b8:	e004      	b.n	800d0c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d0ba:	6839      	ldr	r1, [r7, #0]
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 f99e 	bl	800d3fe <USBD_CtlError>
  }
}
 800d0c2:	bf00      	nop
 800d0c4:	bf00      	nop
 800d0c6:	3710      	adds	r7, #16
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	885b      	ldrh	r3, [r3, #2]
 800d0de:	b2da      	uxtb	r2, r3
 800d0e0:	4b4e      	ldr	r3, [pc, #312]	@ (800d21c <USBD_SetConfig+0x150>)
 800d0e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d0e4:	4b4d      	ldr	r3, [pc, #308]	@ (800d21c <USBD_SetConfig+0x150>)
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d905      	bls.n	800d0f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d0ec:	6839      	ldr	r1, [r7, #0]
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f000 f985 	bl	800d3fe <USBD_CtlError>
    return USBD_FAIL;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	e08c      	b.n	800d212 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0fe:	b2db      	uxtb	r3, r3
 800d100:	2b02      	cmp	r3, #2
 800d102:	d002      	beq.n	800d10a <USBD_SetConfig+0x3e>
 800d104:	2b03      	cmp	r3, #3
 800d106:	d029      	beq.n	800d15c <USBD_SetConfig+0x90>
 800d108:	e075      	b.n	800d1f6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d10a:	4b44      	ldr	r3, [pc, #272]	@ (800d21c <USBD_SetConfig+0x150>)
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d020      	beq.n	800d154 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d112:	4b42      	ldr	r3, [pc, #264]	@ (800d21c <USBD_SetConfig+0x150>)
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	461a      	mov	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d11c:	4b3f      	ldr	r3, [pc, #252]	@ (800d21c <USBD_SetConfig+0x150>)
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	4619      	mov	r1, r3
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f7fe fff7 	bl	800c116 <USBD_SetClassConfig>
 800d128:	4603      	mov	r3, r0
 800d12a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d12c:	7bfb      	ldrb	r3, [r7, #15]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d008      	beq.n	800d144 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d132:	6839      	ldr	r1, [r7, #0]
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 f962 	bl	800d3fe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2202      	movs	r2, #2
 800d13e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d142:	e065      	b.n	800d210 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f9ab 	bl	800d4a0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2203      	movs	r2, #3
 800d14e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d152:	e05d      	b.n	800d210 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 f9a3 	bl	800d4a0 <USBD_CtlSendStatus>
      break;
 800d15a:	e059      	b.n	800d210 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d15c:	4b2f      	ldr	r3, [pc, #188]	@ (800d21c <USBD_SetConfig+0x150>)
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d112      	bne.n	800d18a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2202      	movs	r2, #2
 800d168:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d16c:	4b2b      	ldr	r3, [pc, #172]	@ (800d21c <USBD_SetConfig+0x150>)
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	461a      	mov	r2, r3
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d176:	4b29      	ldr	r3, [pc, #164]	@ (800d21c <USBD_SetConfig+0x150>)
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	4619      	mov	r1, r3
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7fe ffe6 	bl	800c14e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 f98c 	bl	800d4a0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d188:	e042      	b.n	800d210 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d18a:	4b24      	ldr	r3, [pc, #144]	@ (800d21c <USBD_SetConfig+0x150>)
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	461a      	mov	r2, r3
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	429a      	cmp	r2, r3
 800d196:	d02a      	beq.n	800d1ee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	4619      	mov	r1, r3
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f7fe ffd4 	bl	800c14e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d1a6:	4b1d      	ldr	r3, [pc, #116]	@ (800d21c <USBD_SetConfig+0x150>)
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d1b0:	4b1a      	ldr	r3, [pc, #104]	@ (800d21c <USBD_SetConfig+0x150>)
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f7fe ffad 	bl	800c116 <USBD_SetClassConfig>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d1c0:	7bfb      	ldrb	r3, [r7, #15]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d00f      	beq.n	800d1e6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d1c6:	6839      	ldr	r1, [r7, #0]
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 f918 	bl	800d3fe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f7fe ffb9 	bl	800c14e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2202      	movs	r2, #2
 800d1e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d1e4:	e014      	b.n	800d210 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 f95a 	bl	800d4a0 <USBD_CtlSendStatus>
      break;
 800d1ec:	e010      	b.n	800d210 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 f956 	bl	800d4a0 <USBD_CtlSendStatus>
      break;
 800d1f4:	e00c      	b.n	800d210 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d1f6:	6839      	ldr	r1, [r7, #0]
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 f900 	bl	800d3fe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d1fe:	4b07      	ldr	r3, [pc, #28]	@ (800d21c <USBD_SetConfig+0x150>)
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	4619      	mov	r1, r3
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f7fe ffa2 	bl	800c14e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d20a:	2303      	movs	r3, #3
 800d20c:	73fb      	strb	r3, [r7, #15]
      break;
 800d20e:	bf00      	nop
  }

  return ret;
 800d210:	7bfb      	ldrb	r3, [r7, #15]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3710      	adds	r7, #16
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	20007948 	.word	0x20007948

0800d220 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	88db      	ldrh	r3, [r3, #6]
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d004      	beq.n	800d23c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d232:	6839      	ldr	r1, [r7, #0]
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 f8e2 	bl	800d3fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d23a:	e023      	b.n	800d284 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d242:	b2db      	uxtb	r3, r3
 800d244:	2b02      	cmp	r3, #2
 800d246:	dc02      	bgt.n	800d24e <USBD_GetConfig+0x2e>
 800d248:	2b00      	cmp	r3, #0
 800d24a:	dc03      	bgt.n	800d254 <USBD_GetConfig+0x34>
 800d24c:	e015      	b.n	800d27a <USBD_GetConfig+0x5a>
 800d24e:	2b03      	cmp	r3, #3
 800d250:	d00b      	beq.n	800d26a <USBD_GetConfig+0x4a>
 800d252:	e012      	b.n	800d27a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	3308      	adds	r3, #8
 800d25e:	2201      	movs	r2, #1
 800d260:	4619      	mov	r1, r3
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 f8dc 	bl	800d420 <USBD_CtlSendData>
        break;
 800d268:	e00c      	b.n	800d284 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	3304      	adds	r3, #4
 800d26e:	2201      	movs	r2, #1
 800d270:	4619      	mov	r1, r3
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 f8d4 	bl	800d420 <USBD_CtlSendData>
        break;
 800d278:	e004      	b.n	800d284 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d27a:	6839      	ldr	r1, [r7, #0]
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 f8be 	bl	800d3fe <USBD_CtlError>
        break;
 800d282:	bf00      	nop
}
 800d284:	bf00      	nop
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	3b01      	subs	r3, #1
 800d2a0:	2b02      	cmp	r3, #2
 800d2a2:	d81e      	bhi.n	800d2e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	88db      	ldrh	r3, [r3, #6]
 800d2a8:	2b02      	cmp	r3, #2
 800d2aa:	d004      	beq.n	800d2b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d2ac:	6839      	ldr	r1, [r7, #0]
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 f8a5 	bl	800d3fe <USBD_CtlError>
        break;
 800d2b4:	e01a      	b.n	800d2ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d005      	beq.n	800d2d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	f043 0202 	orr.w	r2, r3, #2
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	330c      	adds	r3, #12
 800d2d6:	2202      	movs	r2, #2
 800d2d8:	4619      	mov	r1, r3
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 f8a0 	bl	800d420 <USBD_CtlSendData>
      break;
 800d2e0:	e004      	b.n	800d2ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d2e2:	6839      	ldr	r1, [r7, #0]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f000 f88a 	bl	800d3fe <USBD_CtlError>
      break;
 800d2ea:	bf00      	nop
  }
}
 800d2ec:	bf00      	nop
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	885b      	ldrh	r3, [r3, #2]
 800d302:	2b01      	cmp	r3, #1
 800d304:	d107      	bne.n	800d316 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2201      	movs	r2, #1
 800d30a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f000 f8c6 	bl	800d4a0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d314:	e013      	b.n	800d33e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	885b      	ldrh	r3, [r3, #2]
 800d31a:	2b02      	cmp	r3, #2
 800d31c:	d10b      	bne.n	800d336 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	889b      	ldrh	r3, [r3, #4]
 800d322:	0a1b      	lsrs	r3, r3, #8
 800d324:	b29b      	uxth	r3, r3
 800d326:	b2da      	uxtb	r2, r3
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 f8b6 	bl	800d4a0 <USBD_CtlSendStatus>
}
 800d334:	e003      	b.n	800d33e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d336:	6839      	ldr	r1, [r7, #0]
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f000 f860 	bl	800d3fe <USBD_CtlError>
}
 800d33e:	bf00      	nop
 800d340:	3708      	adds	r7, #8
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}

0800d346 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d346:	b580      	push	{r7, lr}
 800d348:	b082      	sub	sp, #8
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	6078      	str	r0, [r7, #4]
 800d34e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d356:	b2db      	uxtb	r3, r3
 800d358:	3b01      	subs	r3, #1
 800d35a:	2b02      	cmp	r3, #2
 800d35c:	d80b      	bhi.n	800d376 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	885b      	ldrh	r3, [r3, #2]
 800d362:	2b01      	cmp	r3, #1
 800d364:	d10c      	bne.n	800d380 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 f896 	bl	800d4a0 <USBD_CtlSendStatus>
      }
      break;
 800d374:	e004      	b.n	800d380 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d376:	6839      	ldr	r1, [r7, #0]
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f000 f840 	bl	800d3fe <USBD_CtlError>
      break;
 800d37e:	e000      	b.n	800d382 <USBD_ClrFeature+0x3c>
      break;
 800d380:	bf00      	nop
  }
}
 800d382:	bf00      	nop
 800d384:	3708      	adds	r7, #8
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}

0800d38a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b084      	sub	sp, #16
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
 800d392:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	781a      	ldrb	r2, [r3, #0]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	781a      	ldrb	r2, [r3, #0]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d3b4:	68f8      	ldr	r0, [r7, #12]
 800d3b6:	f7ff fa13 	bl	800c7e0 <SWAPBYTE>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	461a      	mov	r2, r3
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d3ce:	68f8      	ldr	r0, [r7, #12]
 800d3d0:	f7ff fa06 	bl	800c7e0 <SWAPBYTE>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	3301      	adds	r3, #1
 800d3e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d3e8:	68f8      	ldr	r0, [r7, #12]
 800d3ea:	f7ff f9f9 	bl	800c7e0 <SWAPBYTE>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	80da      	strh	r2, [r3, #6]
}
 800d3f6:	bf00      	nop
 800d3f8:	3710      	adds	r7, #16
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}

0800d3fe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3fe:	b580      	push	{r7, lr}
 800d400:	b082      	sub	sp, #8
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
 800d406:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d408:	2180      	movs	r1, #128	@ 0x80
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f006 fb5a 	bl	8013ac4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d410:	2100      	movs	r1, #0
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f006 fb56 	bl	8013ac4 <USBD_LL_StallEP>
}
 800d418:	bf00      	nop
 800d41a:	3708      	adds	r7, #8
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	60b9      	str	r1, [r7, #8]
 800d42a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2202      	movs	r2, #2
 800d430:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	68ba      	ldr	r2, [r7, #8]
 800d43e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	68ba      	ldr	r2, [r7, #8]
 800d44a:	2100      	movs	r1, #0
 800d44c:	68f8      	ldr	r0, [r7, #12]
 800d44e:	f006 fbc2 	bl	8013bd6 <USBD_LL_Transmit>

  return USBD_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3710      	adds	r7, #16
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	60f8      	str	r0, [r7, #12]
 800d464:	60b9      	str	r1, [r7, #8]
 800d466:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	68ba      	ldr	r2, [r7, #8]
 800d46c:	2100      	movs	r1, #0
 800d46e:	68f8      	ldr	r0, [r7, #12]
 800d470:	f006 fbb1 	bl	8013bd6 <USBD_LL_Transmit>

  return USBD_OK;
 800d474:	2300      	movs	r3, #0
}
 800d476:	4618      	mov	r0, r3
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d47e:	b580      	push	{r7, lr}
 800d480:	b084      	sub	sp, #16
 800d482:	af00      	add	r7, sp, #0
 800d484:	60f8      	str	r0, [r7, #12]
 800d486:	60b9      	str	r1, [r7, #8]
 800d488:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	68ba      	ldr	r2, [r7, #8]
 800d48e:	2100      	movs	r1, #0
 800d490:	68f8      	ldr	r0, [r7, #12]
 800d492:	f006 fbc1 	bl	8013c18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d496:	2300      	movs	r3, #0
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2204      	movs	r2, #4
 800d4ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	2100      	movs	r1, #0
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f006 fb8d 	bl	8013bd6 <USBD_LL_Transmit>

  return USBD_OK;
 800d4bc:	2300      	movs	r3, #0
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3708      	adds	r7, #8
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b082      	sub	sp, #8
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2205      	movs	r2, #5
 800d4d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	2200      	movs	r2, #0
 800d4da:	2100      	movs	r1, #0
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f006 fb9b 	bl	8013c18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4e2:	2300      	movs	r3, #0
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d4ec:	b480      	push	{r7}
 800d4ee:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d4f0:	bf00      	nop
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f8:	4770      	bx	lr
	...

0800d4fc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d4fc:	b480      	push	{r7}
 800d4fe:	b085      	sub	sp, #20
 800d500:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d502:	f3ef 8305 	mrs	r3, IPSR
 800d506:	60bb      	str	r3, [r7, #8]
  return(result);
 800d508:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d10f      	bne.n	800d52e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d50e:	f3ef 8310 	mrs	r3, PRIMASK
 800d512:	607b      	str	r3, [r7, #4]
  return(result);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d105      	bne.n	800d526 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d51a:	f3ef 8311 	mrs	r3, BASEPRI
 800d51e:	603b      	str	r3, [r7, #0]
  return(result);
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d007      	beq.n	800d536 <osKernelInitialize+0x3a>
 800d526:	4b0e      	ldr	r3, [pc, #56]	@ (800d560 <osKernelInitialize+0x64>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2b02      	cmp	r3, #2
 800d52c:	d103      	bne.n	800d536 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d52e:	f06f 0305 	mvn.w	r3, #5
 800d532:	60fb      	str	r3, [r7, #12]
 800d534:	e00c      	b.n	800d550 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d536:	4b0a      	ldr	r3, [pc, #40]	@ (800d560 <osKernelInitialize+0x64>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d105      	bne.n	800d54a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d53e:	4b08      	ldr	r3, [pc, #32]	@ (800d560 <osKernelInitialize+0x64>)
 800d540:	2201      	movs	r2, #1
 800d542:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d544:	2300      	movs	r3, #0
 800d546:	60fb      	str	r3, [r7, #12]
 800d548:	e002      	b.n	800d550 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d54a:	f04f 33ff 	mov.w	r3, #4294967295
 800d54e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d550:	68fb      	ldr	r3, [r7, #12]
}
 800d552:	4618      	mov	r0, r3
 800d554:	3714      	adds	r7, #20
 800d556:	46bd      	mov	sp, r7
 800d558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55c:	4770      	bx	lr
 800d55e:	bf00      	nop
 800d560:	2000794c 	.word	0x2000794c

0800d564 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d56a:	f3ef 8305 	mrs	r3, IPSR
 800d56e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d570:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d572:	2b00      	cmp	r3, #0
 800d574:	d10f      	bne.n	800d596 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d576:	f3ef 8310 	mrs	r3, PRIMASK
 800d57a:	607b      	str	r3, [r7, #4]
  return(result);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d105      	bne.n	800d58e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d582:	f3ef 8311 	mrs	r3, BASEPRI
 800d586:	603b      	str	r3, [r7, #0]
  return(result);
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d007      	beq.n	800d59e <osKernelStart+0x3a>
 800d58e:	4b0f      	ldr	r3, [pc, #60]	@ (800d5cc <osKernelStart+0x68>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	2b02      	cmp	r3, #2
 800d594:	d103      	bne.n	800d59e <osKernelStart+0x3a>
    stat = osErrorISR;
 800d596:	f06f 0305 	mvn.w	r3, #5
 800d59a:	60fb      	str	r3, [r7, #12]
 800d59c:	e010      	b.n	800d5c0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d59e:	4b0b      	ldr	r3, [pc, #44]	@ (800d5cc <osKernelStart+0x68>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	2b01      	cmp	r3, #1
 800d5a4:	d109      	bne.n	800d5ba <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d5a6:	f7ff ffa1 	bl	800d4ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d5aa:	4b08      	ldr	r3, [pc, #32]	@ (800d5cc <osKernelStart+0x68>)
 800d5ac:	2202      	movs	r2, #2
 800d5ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d5b0:	f001 ffd2 	bl	800f558 <vTaskStartScheduler>
      stat = osOK;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	60fb      	str	r3, [r7, #12]
 800d5b8:	e002      	b.n	800d5c0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800d5ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d5be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3710      	adds	r7, #16
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	2000794c 	.word	0x2000794c

0800d5d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b090      	sub	sp, #64	@ 0x40
 800d5d4:	af04      	add	r7, sp, #16
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5e0:	f3ef 8305 	mrs	r3, IPSR
 800d5e4:	61fb      	str	r3, [r7, #28]
  return(result);
 800d5e6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	f040 8090 	bne.w	800d70e <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5ee:	f3ef 8310 	mrs	r3, PRIMASK
 800d5f2:	61bb      	str	r3, [r7, #24]
  return(result);
 800d5f4:	69bb      	ldr	r3, [r7, #24]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d105      	bne.n	800d606 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d5fa:	f3ef 8311 	mrs	r3, BASEPRI
 800d5fe:	617b      	str	r3, [r7, #20]
  return(result);
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d003      	beq.n	800d60e <osThreadNew+0x3e>
 800d606:	4b44      	ldr	r3, [pc, #272]	@ (800d718 <osThreadNew+0x148>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	2b02      	cmp	r3, #2
 800d60c:	d07f      	beq.n	800d70e <osThreadNew+0x13e>
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d07c      	beq.n	800d70e <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800d614:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d618:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d61a:	2318      	movs	r3, #24
 800d61c:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800d61e:	2300      	movs	r3, #0
 800d620:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800d622:	f04f 33ff 	mov.w	r3, #4294967295
 800d626:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d045      	beq.n	800d6ba <osThreadNew+0xea>
      if (attr->name != NULL) {
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d002      	beq.n	800d63c <osThreadNew+0x6c>
        name = attr->name;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	699b      	ldr	r3, [r3, #24]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d002      	beq.n	800d64a <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	699b      	ldr	r3, [r3, #24]
 800d648:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d008      	beq.n	800d662 <osThreadNew+0x92>
 800d650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d652:	2b38      	cmp	r3, #56	@ 0x38
 800d654:	d805      	bhi.n	800d662 <osThreadNew+0x92>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	f003 0301 	and.w	r3, r3, #1
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d001      	beq.n	800d666 <osThreadNew+0x96>
        return (NULL);
 800d662:	2300      	movs	r3, #0
 800d664:	e054      	b.n	800d710 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	695b      	ldr	r3, [r3, #20]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d003      	beq.n	800d676 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	695b      	ldr	r3, [r3, #20]
 800d672:	089b      	lsrs	r3, r3, #2
 800d674:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d00e      	beq.n	800d69c <osThreadNew+0xcc>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	2baf      	cmp	r3, #175	@ 0xaf
 800d684:	d90a      	bls.n	800d69c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d006      	beq.n	800d69c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	695b      	ldr	r3, [r3, #20]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d002      	beq.n	800d69c <osThreadNew+0xcc>
        mem = 1;
 800d696:	2301      	movs	r3, #1
 800d698:	623b      	str	r3, [r7, #32]
 800d69a:	e010      	b.n	800d6be <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	689b      	ldr	r3, [r3, #8]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d10c      	bne.n	800d6be <osThreadNew+0xee>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	68db      	ldr	r3, [r3, #12]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d108      	bne.n	800d6be <osThreadNew+0xee>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	691b      	ldr	r3, [r3, #16]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d104      	bne.n	800d6be <osThreadNew+0xee>
          mem = 0;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	623b      	str	r3, [r7, #32]
 800d6b8:	e001      	b.n	800d6be <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d6be:	6a3b      	ldr	r3, [r7, #32]
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d110      	bne.n	800d6e6 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d6cc:	9202      	str	r2, [sp, #8]
 800d6ce:	9301      	str	r3, [sp, #4]
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d2:	9300      	str	r3, [sp, #0]
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d6d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6da:	68f8      	ldr	r0, [r7, #12]
 800d6dc:	f001 fcea 	bl	800f0b4 <xTaskCreateStatic>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	613b      	str	r3, [r7, #16]
 800d6e4:	e013      	b.n	800d70e <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800d6e6:	6a3b      	ldr	r3, [r7, #32]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d110      	bne.n	800d70e <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ee:	b29a      	uxth	r2, r3
 800d6f0:	f107 0310 	add.w	r3, r7, #16
 800d6f4:	9301      	str	r3, [sp, #4]
 800d6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f8:	9300      	str	r3, [sp, #0]
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6fe:	68f8      	ldr	r0, [r7, #12]
 800d700:	f001 fd3e 	bl	800f180 <xTaskCreate>
 800d704:	4603      	mov	r3, r0
 800d706:	2b01      	cmp	r3, #1
 800d708:	d001      	beq.n	800d70e <osThreadNew+0x13e>
          hTask = NULL;
 800d70a:	2300      	movs	r3, #0
 800d70c:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d70e:	693b      	ldr	r3, [r7, #16]
}
 800d710:	4618      	mov	r0, r3
 800d712:	3730      	adds	r7, #48	@ 0x30
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}
 800d718:	2000794c 	.word	0x2000794c

0800d71c <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b088      	sub	sp, #32
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800d724:	2300      	movs	r3, #0
 800d726:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d728:	f3ef 8305 	mrs	r3, IPSR
 800d72c:	617b      	str	r3, [r7, #20]
  return(result);
 800d72e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 800d730:	2b00      	cmp	r3, #0
 800d732:	d13d      	bne.n	800d7b0 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d734:	f3ef 8310 	mrs	r3, PRIMASK
 800d738:	613b      	str	r3, [r7, #16]
  return(result);
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d105      	bne.n	800d74c <osEventFlagsNew+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d740:	f3ef 8311 	mrs	r3, BASEPRI
 800d744:	60fb      	str	r3, [r7, #12]
  return(result);
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d003      	beq.n	800d754 <osEventFlagsNew+0x38>
 800d74c:	4b1b      	ldr	r3, [pc, #108]	@ (800d7bc <osEventFlagsNew+0xa0>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	2b02      	cmp	r3, #2
 800d752:	d02d      	beq.n	800d7b0 <osEventFlagsNew+0x94>
    mem = -1;
 800d754:	f04f 33ff 	mov.w	r3, #4294967295
 800d758:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d015      	beq.n	800d78c <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d006      	beq.n	800d776 <osEventFlagsNew+0x5a>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	68db      	ldr	r3, [r3, #12]
 800d76c:	2b1f      	cmp	r3, #31
 800d76e:	d902      	bls.n	800d776 <osEventFlagsNew+0x5a>
        mem = 1;
 800d770:	2301      	movs	r3, #1
 800d772:	61bb      	str	r3, [r7, #24]
 800d774:	e00c      	b.n	800d790 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	689b      	ldr	r3, [r3, #8]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d108      	bne.n	800d790 <osEventFlagsNew+0x74>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	68db      	ldr	r3, [r3, #12]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d104      	bne.n	800d790 <osEventFlagsNew+0x74>
          mem = 0;
 800d786:	2300      	movs	r3, #0
 800d788:	61bb      	str	r3, [r7, #24]
 800d78a:	e001      	b.n	800d790 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 800d78c:	2300      	movs	r3, #0
 800d78e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d790:	69bb      	ldr	r3, [r7, #24]
 800d792:	2b01      	cmp	r3, #1
 800d794:	d106      	bne.n	800d7a4 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	4618      	mov	r0, r3
 800d79c:	f000 fb0a 	bl	800ddb4 <xEventGroupCreateStatic>
 800d7a0:	61f8      	str	r0, [r7, #28]
 800d7a2:	e005      	b.n	800d7b0 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d102      	bne.n	800d7b0 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 800d7aa:	f000 fb40 	bl	800de2e <xEventGroupCreate>
 800d7ae:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800d7b0:	69fb      	ldr	r3, [r7, #28]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3720      	adds	r7, #32
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	2000794c 	.word	0x2000794c

0800d7c0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b08c      	sub	sp, #48	@ 0x30
 800d7c4:	af02      	add	r7, sp, #8
 800d7c6:	60f8      	str	r0, [r7, #12]
 800d7c8:	60b9      	str	r1, [r7, #8]
 800d7ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7d0:	f3ef 8305 	mrs	r3, IPSR
 800d7d4:	61bb      	str	r3, [r7, #24]
  return(result);
 800d7d6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	f040 8086 	bne.w	800d8ea <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7de:	f3ef 8310 	mrs	r3, PRIMASK
 800d7e2:	617b      	str	r3, [r7, #20]
  return(result);
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d105      	bne.n	800d7f6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d7ea:	f3ef 8311 	mrs	r3, BASEPRI
 800d7ee:	613b      	str	r3, [r7, #16]
  return(result);
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d003      	beq.n	800d7fe <osSemaphoreNew+0x3e>
 800d7f6:	4b3f      	ldr	r3, [pc, #252]	@ (800d8f4 <osSemaphoreNew+0x134>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d075      	beq.n	800d8ea <osSemaphoreNew+0x12a>
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d072      	beq.n	800d8ea <osSemaphoreNew+0x12a>
 800d804:	68ba      	ldr	r2, [r7, #8]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d86e      	bhi.n	800d8ea <osSemaphoreNew+0x12a>
    mem = -1;
 800d80c:	f04f 33ff 	mov.w	r3, #4294967295
 800d810:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d015      	beq.n	800d844 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	689b      	ldr	r3, [r3, #8]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d006      	beq.n	800d82e <osSemaphoreNew+0x6e>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	68db      	ldr	r3, [r3, #12]
 800d824:	2b4f      	cmp	r3, #79	@ 0x4f
 800d826:	d902      	bls.n	800d82e <osSemaphoreNew+0x6e>
        mem = 1;
 800d828:	2301      	movs	r3, #1
 800d82a:	623b      	str	r3, [r7, #32]
 800d82c:	e00c      	b.n	800d848 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	689b      	ldr	r3, [r3, #8]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d108      	bne.n	800d848 <osSemaphoreNew+0x88>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d104      	bne.n	800d848 <osSemaphoreNew+0x88>
          mem = 0;
 800d83e:	2300      	movs	r3, #0
 800d840:	623b      	str	r3, [r7, #32]
 800d842:	e001      	b.n	800d848 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800d844:	2300      	movs	r3, #0
 800d846:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800d848:	6a3b      	ldr	r3, [r7, #32]
 800d84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d84e:	d04c      	beq.n	800d8ea <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	2b01      	cmp	r3, #1
 800d854:	d128      	bne.n	800d8a8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800d856:	6a3b      	ldr	r3, [r7, #32]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d10a      	bne.n	800d872 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	689b      	ldr	r3, [r3, #8]
 800d860:	2203      	movs	r2, #3
 800d862:	9200      	str	r2, [sp, #0]
 800d864:	2200      	movs	r2, #0
 800d866:	2100      	movs	r1, #0
 800d868:	2001      	movs	r0, #1
 800d86a:	f000 fc1b 	bl	800e0a4 <xQueueGenericCreateStatic>
 800d86e:	6278      	str	r0, [r7, #36]	@ 0x24
 800d870:	e005      	b.n	800d87e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800d872:	2203      	movs	r2, #3
 800d874:	2100      	movs	r1, #0
 800d876:	2001      	movs	r0, #1
 800d878:	f000 fc9b 	bl	800e1b2 <xQueueGenericCreate>
 800d87c:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d880:	2b00      	cmp	r3, #0
 800d882:	d022      	beq.n	800d8ca <osSemaphoreNew+0x10a>
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d01f      	beq.n	800d8ca <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d88a:	2300      	movs	r3, #0
 800d88c:	2200      	movs	r2, #0
 800d88e:	2100      	movs	r1, #0
 800d890:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d892:	f000 fd6b 	bl	800e36c <xQueueGenericSend>
 800d896:	4603      	mov	r3, r0
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d016      	beq.n	800d8ca <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800d89c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d89e:	f001 fa33 	bl	800ed08 <vQueueDelete>
            hSemaphore = NULL;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8a6:	e010      	b.n	800d8ca <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800d8a8:	6a3b      	ldr	r3, [r7, #32]
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d108      	bne.n	800d8c0 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	689b      	ldr	r3, [r3, #8]
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	68b9      	ldr	r1, [r7, #8]
 800d8b6:	68f8      	ldr	r0, [r7, #12]
 800d8b8:	f000 fce1 	bl	800e27e <xQueueCreateCountingSemaphoreStatic>
 800d8bc:	6278      	str	r0, [r7, #36]	@ 0x24
 800d8be:	e004      	b.n	800d8ca <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d8c0:	68b9      	ldr	r1, [r7, #8]
 800d8c2:	68f8      	ldr	r0, [r7, #12]
 800d8c4:	f000 fd18 	bl	800e2f8 <xQueueCreateCountingSemaphore>
 800d8c8:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00c      	beq.n	800d8ea <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d003      	beq.n	800d8de <osSemaphoreNew+0x11e>
          name = attr->name;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	61fb      	str	r3, [r7, #28]
 800d8dc:	e001      	b.n	800d8e2 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d8e2:	69f9      	ldr	r1, [r7, #28]
 800d8e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d8e6:	f001 fb5d 	bl	800efa4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3728      	adds	r7, #40	@ 0x28
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	2000794c 	.word	0x2000794c

0800d8f8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b088      	sub	sp, #32
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d906:	2300      	movs	r3, #0
 800d908:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d103      	bne.n	800d918 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d910:	f06f 0303 	mvn.w	r3, #3
 800d914:	61fb      	str	r3, [r7, #28]
 800d916:	e04b      	b.n	800d9b0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d918:	f3ef 8305 	mrs	r3, IPSR
 800d91c:	617b      	str	r3, [r7, #20]
  return(result);
 800d91e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d920:	2b00      	cmp	r3, #0
 800d922:	d10f      	bne.n	800d944 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d924:	f3ef 8310 	mrs	r3, PRIMASK
 800d928:	613b      	str	r3, [r7, #16]
  return(result);
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d105      	bne.n	800d93c <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d930:	f3ef 8311 	mrs	r3, BASEPRI
 800d934:	60fb      	str	r3, [r7, #12]
  return(result);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d026      	beq.n	800d98a <osSemaphoreAcquire+0x92>
 800d93c:	4b1f      	ldr	r3, [pc, #124]	@ (800d9bc <osSemaphoreAcquire+0xc4>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2b02      	cmp	r3, #2
 800d942:	d122      	bne.n	800d98a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d003      	beq.n	800d952 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800d94a:	f06f 0303 	mvn.w	r3, #3
 800d94e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d950:	e02d      	b.n	800d9ae <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800d952:	2300      	movs	r3, #0
 800d954:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d956:	f107 0308 	add.w	r3, r7, #8
 800d95a:	461a      	mov	r2, r3
 800d95c:	2100      	movs	r1, #0
 800d95e:	69b8      	ldr	r0, [r7, #24]
 800d960:	f001 f94a 	bl	800ebf8 <xQueueReceiveFromISR>
 800d964:	4603      	mov	r3, r0
 800d966:	2b01      	cmp	r3, #1
 800d968:	d003      	beq.n	800d972 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800d96a:	f06f 0302 	mvn.w	r3, #2
 800d96e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d970:	e01d      	b.n	800d9ae <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d01a      	beq.n	800d9ae <osSemaphoreAcquire+0xb6>
 800d978:	4b11      	ldr	r3, [pc, #68]	@ (800d9c0 <osSemaphoreAcquire+0xc8>)
 800d97a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d97e:	601a      	str	r2, [r3, #0]
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800d988:	e011      	b.n	800d9ae <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d98a:	6839      	ldr	r1, [r7, #0]
 800d98c:	69b8      	ldr	r0, [r7, #24]
 800d98e:	f001 f81b 	bl	800e9c8 <xQueueSemaphoreTake>
 800d992:	4603      	mov	r3, r0
 800d994:	2b01      	cmp	r3, #1
 800d996:	d00b      	beq.n	800d9b0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d003      	beq.n	800d9a6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800d99e:	f06f 0301 	mvn.w	r3, #1
 800d9a2:	61fb      	str	r3, [r7, #28]
 800d9a4:	e004      	b.n	800d9b0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800d9a6:	f06f 0302 	mvn.w	r3, #2
 800d9aa:	61fb      	str	r3, [r7, #28]
 800d9ac:	e000      	b.n	800d9b0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800d9ae:	bf00      	nop
      }
    }
  }

  return (stat);
 800d9b0:	69fb      	ldr	r3, [r7, #28]
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3720      	adds	r7, #32
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	2000794c 	.word	0x2000794c
 800d9c0:	e000ed04 	.word	0xe000ed04

0800d9c4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b088      	sub	sp, #32
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d9d4:	69bb      	ldr	r3, [r7, #24]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d103      	bne.n	800d9e2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d9da:	f06f 0303 	mvn.w	r3, #3
 800d9de:	61fb      	str	r3, [r7, #28]
 800d9e0:	e03e      	b.n	800da60 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9e2:	f3ef 8305 	mrs	r3, IPSR
 800d9e6:	617b      	str	r3, [r7, #20]
  return(result);
 800d9e8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d10f      	bne.n	800da0e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9ee:	f3ef 8310 	mrs	r3, PRIMASK
 800d9f2:	613b      	str	r3, [r7, #16]
  return(result);
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d105      	bne.n	800da06 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d9fa:	f3ef 8311 	mrs	r3, BASEPRI
 800d9fe:	60fb      	str	r3, [r7, #12]
  return(result);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d01e      	beq.n	800da44 <osSemaphoreRelease+0x80>
 800da06:	4b19      	ldr	r3, [pc, #100]	@ (800da6c <osSemaphoreRelease+0xa8>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	2b02      	cmp	r3, #2
 800da0c:	d11a      	bne.n	800da44 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800da0e:	2300      	movs	r3, #0
 800da10:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800da12:	f107 0308 	add.w	r3, r7, #8
 800da16:	4619      	mov	r1, r3
 800da18:	69b8      	ldr	r0, [r7, #24]
 800da1a:	f000 fe54 	bl	800e6c6 <xQueueGiveFromISR>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b01      	cmp	r3, #1
 800da22:	d003      	beq.n	800da2c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800da24:	f06f 0302 	mvn.w	r3, #2
 800da28:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800da2a:	e018      	b.n	800da5e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d015      	beq.n	800da5e <osSemaphoreRelease+0x9a>
 800da32:	4b0f      	ldr	r3, [pc, #60]	@ (800da70 <osSemaphoreRelease+0xac>)
 800da34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da38:	601a      	str	r2, [r3, #0]
 800da3a:	f3bf 8f4f 	dsb	sy
 800da3e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800da42:	e00c      	b.n	800da5e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800da44:	2300      	movs	r3, #0
 800da46:	2200      	movs	r2, #0
 800da48:	2100      	movs	r1, #0
 800da4a:	69b8      	ldr	r0, [r7, #24]
 800da4c:	f000 fc8e 	bl	800e36c <xQueueGenericSend>
 800da50:	4603      	mov	r3, r0
 800da52:	2b01      	cmp	r3, #1
 800da54:	d004      	beq.n	800da60 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800da56:	f06f 0302 	mvn.w	r3, #2
 800da5a:	61fb      	str	r3, [r7, #28]
 800da5c:	e000      	b.n	800da60 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800da5e:	bf00      	nop
    }
  }

  return (stat);
 800da60:	69fb      	ldr	r3, [r7, #28]
}
 800da62:	4618      	mov	r0, r3
 800da64:	3720      	adds	r7, #32
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	2000794c 	.word	0x2000794c
 800da70:	e000ed04 	.word	0xe000ed04

0800da74 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800da74:	b580      	push	{r7, lr}
 800da76:	b08c      	sub	sp, #48	@ 0x30
 800da78:	af02      	add	r7, sp, #8
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800da80:	2300      	movs	r3, #0
 800da82:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da84:	f3ef 8305 	mrs	r3, IPSR
 800da88:	61bb      	str	r3, [r7, #24]
  return(result);
 800da8a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d16f      	bne.n	800db70 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da90:	f3ef 8310 	mrs	r3, PRIMASK
 800da94:	617b      	str	r3, [r7, #20]
  return(result);
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d105      	bne.n	800daa8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da9c:	f3ef 8311 	mrs	r3, BASEPRI
 800daa0:	613b      	str	r3, [r7, #16]
  return(result);
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d003      	beq.n	800dab0 <osMessageQueueNew+0x3c>
 800daa8:	4b34      	ldr	r3, [pc, #208]	@ (800db7c <osMessageQueueNew+0x108>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2b02      	cmp	r3, #2
 800daae:	d05f      	beq.n	800db70 <osMessageQueueNew+0xfc>
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d05c      	beq.n	800db70 <osMessageQueueNew+0xfc>
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d059      	beq.n	800db70 <osMessageQueueNew+0xfc>
    mem = -1;
 800dabc:	f04f 33ff 	mov.w	r3, #4294967295
 800dac0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d029      	beq.n	800db1c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	689b      	ldr	r3, [r3, #8]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d012      	beq.n	800daf6 <osMessageQueueNew+0x82>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	68db      	ldr	r3, [r3, #12]
 800dad4:	2b4f      	cmp	r3, #79	@ 0x4f
 800dad6:	d90e      	bls.n	800daf6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d00a      	beq.n	800daf6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	695a      	ldr	r2, [r3, #20]
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	68b9      	ldr	r1, [r7, #8]
 800dae8:	fb01 f303 	mul.w	r3, r1, r3
 800daec:	429a      	cmp	r2, r3
 800daee:	d302      	bcc.n	800daf6 <osMessageQueueNew+0x82>
        mem = 1;
 800daf0:	2301      	movs	r3, #1
 800daf2:	623b      	str	r3, [r7, #32]
 800daf4:	e014      	b.n	800db20 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	689b      	ldr	r3, [r3, #8]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d110      	bne.n	800db20 <osMessageQueueNew+0xac>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	68db      	ldr	r3, [r3, #12]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d10c      	bne.n	800db20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d108      	bne.n	800db20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	695b      	ldr	r3, [r3, #20]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d104      	bne.n	800db20 <osMessageQueueNew+0xac>
          mem = 0;
 800db16:	2300      	movs	r3, #0
 800db18:	623b      	str	r3, [r7, #32]
 800db1a:	e001      	b.n	800db20 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800db1c:	2300      	movs	r3, #0
 800db1e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800db20:	6a3b      	ldr	r3, [r7, #32]
 800db22:	2b01      	cmp	r3, #1
 800db24:	d10b      	bne.n	800db3e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	691a      	ldr	r2, [r3, #16]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	2100      	movs	r1, #0
 800db30:	9100      	str	r1, [sp, #0]
 800db32:	68b9      	ldr	r1, [r7, #8]
 800db34:	68f8      	ldr	r0, [r7, #12]
 800db36:	f000 fab5 	bl	800e0a4 <xQueueGenericCreateStatic>
 800db3a:	6278      	str	r0, [r7, #36]	@ 0x24
 800db3c:	e008      	b.n	800db50 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800db3e:	6a3b      	ldr	r3, [r7, #32]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d105      	bne.n	800db50 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800db44:	2200      	movs	r2, #0
 800db46:	68b9      	ldr	r1, [r7, #8]
 800db48:	68f8      	ldr	r0, [r7, #12]
 800db4a:	f000 fb32 	bl	800e1b2 <xQueueGenericCreate>
 800db4e:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800db50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00c      	beq.n	800db70 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d003      	beq.n	800db64 <osMessageQueueNew+0xf0>
        name = attr->name;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	61fb      	str	r3, [r7, #28]
 800db62:	e001      	b.n	800db68 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800db64:	2300      	movs	r3, #0
 800db66:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800db68:	69f9      	ldr	r1, [r7, #28]
 800db6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800db6c:	f001 fa1a 	bl	800efa4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800db70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800db72:	4618      	mov	r0, r3
 800db74:	3728      	adds	r7, #40	@ 0x28
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	bf00      	nop
 800db7c:	2000794c 	.word	0x2000794c

0800db80 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800db80:	b580      	push	{r7, lr}
 800db82:	b08a      	sub	sp, #40	@ 0x28
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	60b9      	str	r1, [r7, #8]
 800db8a:	603b      	str	r3, [r7, #0]
 800db8c:	4613      	mov	r3, r2
 800db8e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800db94:	2300      	movs	r3, #0
 800db96:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db98:	f3ef 8305 	mrs	r3, IPSR
 800db9c:	61fb      	str	r3, [r7, #28]
  return(result);
 800db9e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d10f      	bne.n	800dbc4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dba4:	f3ef 8310 	mrs	r3, PRIMASK
 800dba8:	61bb      	str	r3, [r7, #24]
  return(result);
 800dbaa:	69bb      	ldr	r3, [r7, #24]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d105      	bne.n	800dbbc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dbb0:	f3ef 8311 	mrs	r3, BASEPRI
 800dbb4:	617b      	str	r3, [r7, #20]
  return(result);
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d02c      	beq.n	800dc16 <osMessageQueuePut+0x96>
 800dbbc:	4b28      	ldr	r3, [pc, #160]	@ (800dc60 <osMessageQueuePut+0xe0>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	2b02      	cmp	r3, #2
 800dbc2:	d128      	bne.n	800dc16 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dbc4:	6a3b      	ldr	r3, [r7, #32]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d005      	beq.n	800dbd6 <osMessageQueuePut+0x56>
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d002      	beq.n	800dbd6 <osMessageQueuePut+0x56>
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d003      	beq.n	800dbde <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800dbd6:	f06f 0303 	mvn.w	r3, #3
 800dbda:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dbdc:	e039      	b.n	800dc52 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dbe2:	f107 0210 	add.w	r2, r7, #16
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	68b9      	ldr	r1, [r7, #8]
 800dbea:	6a38      	ldr	r0, [r7, #32]
 800dbec:	f000 fcc8 	bl	800e580 <xQueueGenericSendFromISR>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d003      	beq.n	800dbfe <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800dbf6:	f06f 0302 	mvn.w	r3, #2
 800dbfa:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dbfc:	e029      	b.n	800dc52 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d026      	beq.n	800dc52 <osMessageQueuePut+0xd2>
 800dc04:	4b17      	ldr	r3, [pc, #92]	@ (800dc64 <osMessageQueuePut+0xe4>)
 800dc06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc0a:	601a      	str	r2, [r3, #0]
 800dc0c:	f3bf 8f4f 	dsb	sy
 800dc10:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc14:	e01d      	b.n	800dc52 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dc16:	6a3b      	ldr	r3, [r7, #32]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d002      	beq.n	800dc22 <osMessageQueuePut+0xa2>
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d103      	bne.n	800dc2a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800dc22:	f06f 0303 	mvn.w	r3, #3
 800dc26:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc28:	e014      	b.n	800dc54 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	683a      	ldr	r2, [r7, #0]
 800dc2e:	68b9      	ldr	r1, [r7, #8]
 800dc30:	6a38      	ldr	r0, [r7, #32]
 800dc32:	f000 fb9b 	bl	800e36c <xQueueGenericSend>
 800dc36:	4603      	mov	r3, r0
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d00b      	beq.n	800dc54 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d003      	beq.n	800dc4a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800dc42:	f06f 0301 	mvn.w	r3, #1
 800dc46:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc48:	e004      	b.n	800dc54 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800dc4a:	f06f 0302 	mvn.w	r3, #2
 800dc4e:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc50:	e000      	b.n	800dc54 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc52:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800dc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3728      	adds	r7, #40	@ 0x28
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	2000794c 	.word	0x2000794c
 800dc64:	e000ed04 	.word	0xe000ed04

0800dc68 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b08a      	sub	sp, #40	@ 0x28
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	607a      	str	r2, [r7, #4]
 800dc74:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc7e:	f3ef 8305 	mrs	r3, IPSR
 800dc82:	61fb      	str	r3, [r7, #28]
  return(result);
 800dc84:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d10f      	bne.n	800dcaa <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc8a:	f3ef 8310 	mrs	r3, PRIMASK
 800dc8e:	61bb      	str	r3, [r7, #24]
  return(result);
 800dc90:	69bb      	ldr	r3, [r7, #24]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d105      	bne.n	800dca2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc96:	f3ef 8311 	mrs	r3, BASEPRI
 800dc9a:	617b      	str	r3, [r7, #20]
  return(result);
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d02c      	beq.n	800dcfc <osMessageQueueGet+0x94>
 800dca2:	4b28      	ldr	r3, [pc, #160]	@ (800dd44 <osMessageQueueGet+0xdc>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2b02      	cmp	r3, #2
 800dca8:	d128      	bne.n	800dcfc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dcaa:	6a3b      	ldr	r3, [r7, #32]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d005      	beq.n	800dcbc <osMessageQueueGet+0x54>
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d002      	beq.n	800dcbc <osMessageQueueGet+0x54>
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d003      	beq.n	800dcc4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800dcbc:	f06f 0303 	mvn.w	r3, #3
 800dcc0:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dcc2:	e038      	b.n	800dd36 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dcc8:	f107 0310 	add.w	r3, r7, #16
 800dccc:	461a      	mov	r2, r3
 800dcce:	68b9      	ldr	r1, [r7, #8]
 800dcd0:	6a38      	ldr	r0, [r7, #32]
 800dcd2:	f000 ff91 	bl	800ebf8 <xQueueReceiveFromISR>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d003      	beq.n	800dce4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800dcdc:	f06f 0302 	mvn.w	r3, #2
 800dce0:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dce2:	e028      	b.n	800dd36 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d025      	beq.n	800dd36 <osMessageQueueGet+0xce>
 800dcea:	4b17      	ldr	r3, [pc, #92]	@ (800dd48 <osMessageQueueGet+0xe0>)
 800dcec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcf0:	601a      	str	r2, [r3, #0]
 800dcf2:	f3bf 8f4f 	dsb	sy
 800dcf6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dcfa:	e01c      	b.n	800dd36 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dcfc:	6a3b      	ldr	r3, [r7, #32]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d002      	beq.n	800dd08 <osMessageQueueGet+0xa0>
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d103      	bne.n	800dd10 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800dd08:	f06f 0303 	mvn.w	r3, #3
 800dd0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd0e:	e013      	b.n	800dd38 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dd10:	683a      	ldr	r2, [r7, #0]
 800dd12:	68b9      	ldr	r1, [r7, #8]
 800dd14:	6a38      	ldr	r0, [r7, #32]
 800dd16:	f000 fd6f 	bl	800e7f8 <xQueueReceive>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d00b      	beq.n	800dd38 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d003      	beq.n	800dd2e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800dd26:	f06f 0301 	mvn.w	r3, #1
 800dd2a:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd2c:	e004      	b.n	800dd38 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800dd2e:	f06f 0302 	mvn.w	r3, #2
 800dd32:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd34:	e000      	b.n	800dd38 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd36:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800dd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3728      	adds	r7, #40	@ 0x28
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	2000794c 	.word	0x2000794c
 800dd48:	e000ed04 	.word	0xe000ed04

0800dd4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dd4c:	b480      	push	{r7}
 800dd4e:	b085      	sub	sp, #20
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	4a07      	ldr	r2, [pc, #28]	@ (800dd78 <vApplicationGetIdleTaskMemory+0x2c>)
 800dd5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	4a06      	ldr	r2, [pc, #24]	@ (800dd7c <vApplicationGetIdleTaskMemory+0x30>)
 800dd62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dd6a:	601a      	str	r2, [r3, #0]
}
 800dd6c:	bf00      	nop
 800dd6e:	3714      	adds	r7, #20
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr
 800dd78:	20007950 	.word	0x20007950
 800dd7c:	20007a00 	.word	0x20007a00

0800dd80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dd80:	b480      	push	{r7}
 800dd82:	b085      	sub	sp, #20
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	60b9      	str	r1, [r7, #8]
 800dd8a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	4a07      	ldr	r2, [pc, #28]	@ (800ddac <vApplicationGetTimerTaskMemory+0x2c>)
 800dd90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	4a06      	ldr	r2, [pc, #24]	@ (800ddb0 <vApplicationGetTimerTaskMemory+0x30>)
 800dd96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd9e:	601a      	str	r2, [r3, #0]
}
 800dda0:	bf00      	nop
 800dda2:	3714      	adds	r7, #20
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr
 800ddac:	20007e00 	.word	0x20007e00
 800ddb0:	20007eb0 	.word	0x20007eb0

0800ddb4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b086      	sub	sp, #24
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d10d      	bne.n	800ddde <xEventGroupCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ddc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddc6:	b672      	cpsid	i
 800ddc8:	f383 8811 	msr	BASEPRI, r3
 800ddcc:	f3bf 8f6f 	isb	sy
 800ddd0:	f3bf 8f4f 	dsb	sy
 800ddd4:	b662      	cpsie	i
 800ddd6:	613b      	str	r3, [r7, #16]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ddd8:	bf00      	nop
 800ddda:	bf00      	nop
 800dddc:	e7fd      	b.n	800ddda <xEventGroupCreateStatic+0x26>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800ddde:	2320      	movs	r3, #32
 800dde0:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	2b20      	cmp	r3, #32
 800dde6:	d00d      	beq.n	800de04 <xEventGroupCreateStatic+0x50>
	__asm volatile
 800dde8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddec:	b672      	cpsid	i
 800ddee:	f383 8811 	msr	BASEPRI, r3
 800ddf2:	f3bf 8f6f 	isb	sy
 800ddf6:	f3bf 8f4f 	dsb	sy
 800ddfa:	b662      	cpsie	i
 800ddfc:	60fb      	str	r3, [r7, #12]
}
 800ddfe:	bf00      	nop
 800de00:	bf00      	nop
 800de02:	e7fd      	b.n	800de00 <xEventGroupCreateStatic+0x4c>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00a      	beq.n	800de24 <xEventGroupCreateStatic+0x70>
		{
			pxEventBits->uxEventBits = 0;
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	2200      	movs	r2, #0
 800de12:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	3304      	adds	r3, #4
 800de18:	4618      	mov	r0, r3
 800de1a:	f000 f822 	bl	800de62 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800de1e:	697b      	ldr	r3, [r7, #20]
 800de20:	2201      	movs	r2, #1
 800de22:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800de24:	697b      	ldr	r3, [r7, #20]
	}
 800de26:	4618      	mov	r0, r3
 800de28:	3718      	adds	r7, #24
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}

0800de2e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800de2e:	b580      	push	{r7, lr}
 800de30:	b082      	sub	sp, #8
 800de32:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800de34:	2020      	movs	r0, #32
 800de36:	f002 ffdf 	bl	8010df8 <pvPortMalloc>
 800de3a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d00a      	beq.n	800de58 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2200      	movs	r2, #0
 800de46:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	3304      	adds	r3, #4
 800de4c:	4618      	mov	r0, r3
 800de4e:	f000 f808 	bl	800de62 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2200      	movs	r2, #0
 800de56:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800de58:	687b      	ldr	r3, [r7, #4]
	}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3708      	adds	r7, #8
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}

0800de62 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800de62:	b480      	push	{r7}
 800de64:	b083      	sub	sp, #12
 800de66:	af00      	add	r7, sp, #0
 800de68:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f103 0208 	add.w	r2, r3, #8
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f04f 32ff 	mov.w	r2, #4294967295
 800de7a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f103 0208 	add.w	r2, r3, #8
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f103 0208 	add.w	r2, r3, #8
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2200      	movs	r2, #0
 800de94:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800de96:	bf00      	nop
 800de98:	370c      	adds	r7, #12
 800de9a:	46bd      	mov	sp, r7
 800de9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea0:	4770      	bx	lr

0800dea2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dea2:	b480      	push	{r7}
 800dea4:	b083      	sub	sp, #12
 800dea6:	af00      	add	r7, sp, #0
 800dea8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2200      	movs	r2, #0
 800deae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800deb0:	bf00      	nop
 800deb2:	370c      	adds	r7, #12
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800debc:	b480      	push	{r7}
 800debe:	b085      	sub	sp, #20
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	685b      	ldr	r3, [r3, #4]
 800deca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	68fa      	ldr	r2, [r7, #12]
 800ded0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	689a      	ldr	r2, [r3, #8]
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	689b      	ldr	r3, [r3, #8]
 800dede:	683a      	ldr	r2, [r7, #0]
 800dee0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	683a      	ldr	r2, [r7, #0]
 800dee6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	1c5a      	adds	r2, r3, #1
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	601a      	str	r2, [r3, #0]
}
 800def8:	bf00      	nop
 800defa:	3714      	adds	r7, #20
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr

0800df04 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df04:	b480      	push	{r7}
 800df06:	b085      	sub	sp, #20
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
 800df0c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df1a:	d103      	bne.n	800df24 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	691b      	ldr	r3, [r3, #16]
 800df20:	60fb      	str	r3, [r7, #12]
 800df22:	e00c      	b.n	800df3e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	3308      	adds	r3, #8
 800df28:	60fb      	str	r3, [r7, #12]
 800df2a:	e002      	b.n	800df32 <vListInsert+0x2e>
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	60fb      	str	r3, [r7, #12]
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	68ba      	ldr	r2, [r7, #8]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d2f6      	bcs.n	800df2c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	685a      	ldr	r2, [r3, #4]
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	683a      	ldr	r2, [r7, #0]
 800df4c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	68fa      	ldr	r2, [r7, #12]
 800df52:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	683a      	ldr	r2, [r7, #0]
 800df58:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	1c5a      	adds	r2, r3, #1
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	601a      	str	r2, [r3, #0]
}
 800df6a:	bf00      	nop
 800df6c:	3714      	adds	r7, #20
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr

0800df76 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800df76:	b480      	push	{r7}
 800df78:	b085      	sub	sp, #20
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	691b      	ldr	r3, [r3, #16]
 800df82:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	687a      	ldr	r2, [r7, #4]
 800df8a:	6892      	ldr	r2, [r2, #8]
 800df8c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	689b      	ldr	r3, [r3, #8]
 800df92:	687a      	ldr	r2, [r7, #4]
 800df94:	6852      	ldr	r2, [r2, #4]
 800df96:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d103      	bne.n	800dfaa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	689a      	ldr	r2, [r3, #8]
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2200      	movs	r2, #0
 800dfae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	1e5a      	subs	r2, r3, #1
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3714      	adds	r7, #20
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr
	...

0800dfcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d10d      	bne.n	800dffc <xQueueGenericReset+0x30>
	__asm volatile
 800dfe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfe4:	b672      	cpsid	i
 800dfe6:	f383 8811 	msr	BASEPRI, r3
 800dfea:	f3bf 8f6f 	isb	sy
 800dfee:	f3bf 8f4f 	dsb	sy
 800dff2:	b662      	cpsie	i
 800dff4:	60bb      	str	r3, [r7, #8]
}
 800dff6:	bf00      	nop
 800dff8:	bf00      	nop
 800dffa:	e7fd      	b.n	800dff8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800dffc:	f002 fdce 	bl	8010b9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e008:	68f9      	ldr	r1, [r7, #12]
 800e00a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e00c:	fb01 f303 	mul.w	r3, r1, r3
 800e010:	441a      	add	r2, r3
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2200      	movs	r2, #0
 800e01a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681a      	ldr	r2, [r3, #0]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681a      	ldr	r2, [r3, #0]
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e02c:	3b01      	subs	r3, #1
 800e02e:	68f9      	ldr	r1, [r7, #12]
 800e030:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e032:	fb01 f303 	mul.w	r3, r1, r3
 800e036:	441a      	add	r2, r3
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	22ff      	movs	r2, #255	@ 0xff
 800e040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	22ff      	movs	r2, #255	@ 0xff
 800e048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d114      	bne.n	800e07c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	691b      	ldr	r3, [r3, #16]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d01a      	beq.n	800e090 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	3310      	adds	r3, #16
 800e05e:	4618      	mov	r0, r3
 800e060:	f001 fd6a 	bl	800fb38 <xTaskRemoveFromEventList>
 800e064:	4603      	mov	r3, r0
 800e066:	2b00      	cmp	r3, #0
 800e068:	d012      	beq.n	800e090 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e06a:	4b0d      	ldr	r3, [pc, #52]	@ (800e0a0 <xQueueGenericReset+0xd4>)
 800e06c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e070:	601a      	str	r2, [r3, #0]
 800e072:	f3bf 8f4f 	dsb	sy
 800e076:	f3bf 8f6f 	isb	sy
 800e07a:	e009      	b.n	800e090 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	3310      	adds	r3, #16
 800e080:	4618      	mov	r0, r3
 800e082:	f7ff feee 	bl	800de62 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	3324      	adds	r3, #36	@ 0x24
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7ff fee9 	bl	800de62 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e090:	f002 fdba 	bl	8010c08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e094:	2301      	movs	r3, #1
}
 800e096:	4618      	mov	r0, r3
 800e098:	3710      	adds	r7, #16
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	e000ed04 	.word	0xe000ed04

0800e0a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b08e      	sub	sp, #56	@ 0x38
 800e0a8:	af02      	add	r7, sp, #8
 800e0aa:	60f8      	str	r0, [r7, #12]
 800e0ac:	60b9      	str	r1, [r7, #8]
 800e0ae:	607a      	str	r2, [r7, #4]
 800e0b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d10d      	bne.n	800e0d4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800e0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0bc:	b672      	cpsid	i
 800e0be:	f383 8811 	msr	BASEPRI, r3
 800e0c2:	f3bf 8f6f 	isb	sy
 800e0c6:	f3bf 8f4f 	dsb	sy
 800e0ca:	b662      	cpsie	i
 800e0cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e0ce:	bf00      	nop
 800e0d0:	bf00      	nop
 800e0d2:	e7fd      	b.n	800e0d0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d10d      	bne.n	800e0f6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800e0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0de:	b672      	cpsid	i
 800e0e0:	f383 8811 	msr	BASEPRI, r3
 800e0e4:	f3bf 8f6f 	isb	sy
 800e0e8:	f3bf 8f4f 	dsb	sy
 800e0ec:	b662      	cpsie	i
 800e0ee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e0f0:	bf00      	nop
 800e0f2:	bf00      	nop
 800e0f4:	e7fd      	b.n	800e0f2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d002      	beq.n	800e102 <xQueueGenericCreateStatic+0x5e>
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d001      	beq.n	800e106 <xQueueGenericCreateStatic+0x62>
 800e102:	2301      	movs	r3, #1
 800e104:	e000      	b.n	800e108 <xQueueGenericCreateStatic+0x64>
 800e106:	2300      	movs	r3, #0
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d10d      	bne.n	800e128 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800e10c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e110:	b672      	cpsid	i
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	b662      	cpsie	i
 800e120:	623b      	str	r3, [r7, #32]
}
 800e122:	bf00      	nop
 800e124:	bf00      	nop
 800e126:	e7fd      	b.n	800e124 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d102      	bne.n	800e134 <xQueueGenericCreateStatic+0x90>
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d101      	bne.n	800e138 <xQueueGenericCreateStatic+0x94>
 800e134:	2301      	movs	r3, #1
 800e136:	e000      	b.n	800e13a <xQueueGenericCreateStatic+0x96>
 800e138:	2300      	movs	r3, #0
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d10d      	bne.n	800e15a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800e13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e142:	b672      	cpsid	i
 800e144:	f383 8811 	msr	BASEPRI, r3
 800e148:	f3bf 8f6f 	isb	sy
 800e14c:	f3bf 8f4f 	dsb	sy
 800e150:	b662      	cpsie	i
 800e152:	61fb      	str	r3, [r7, #28]
}
 800e154:	bf00      	nop
 800e156:	bf00      	nop
 800e158:	e7fd      	b.n	800e156 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e15a:	2350      	movs	r3, #80	@ 0x50
 800e15c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	2b50      	cmp	r3, #80	@ 0x50
 800e162:	d00d      	beq.n	800e180 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800e164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e168:	b672      	cpsid	i
 800e16a:	f383 8811 	msr	BASEPRI, r3
 800e16e:	f3bf 8f6f 	isb	sy
 800e172:	f3bf 8f4f 	dsb	sy
 800e176:	b662      	cpsie	i
 800e178:	61bb      	str	r3, [r7, #24]
}
 800e17a:	bf00      	nop
 800e17c:	bf00      	nop
 800e17e:	e7fd      	b.n	800e17c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e180:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d00d      	beq.n	800e1a8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e18e:	2201      	movs	r2, #1
 800e190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e194:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e19a:	9300      	str	r3, [sp, #0]
 800e19c:	4613      	mov	r3, r2
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	68b9      	ldr	r1, [r7, #8]
 800e1a2:	68f8      	ldr	r0, [r7, #12]
 800e1a4:	f000 f848 	bl	800e238 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3730      	adds	r7, #48	@ 0x30
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}

0800e1b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e1b2:	b580      	push	{r7, lr}
 800e1b4:	b08a      	sub	sp, #40	@ 0x28
 800e1b6:	af02      	add	r7, sp, #8
 800e1b8:	60f8      	str	r0, [r7, #12]
 800e1ba:	60b9      	str	r1, [r7, #8]
 800e1bc:	4613      	mov	r3, r2
 800e1be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d10d      	bne.n	800e1e2 <xQueueGenericCreate+0x30>
	__asm volatile
 800e1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ca:	b672      	cpsid	i
 800e1cc:	f383 8811 	msr	BASEPRI, r3
 800e1d0:	f3bf 8f6f 	isb	sy
 800e1d4:	f3bf 8f4f 	dsb	sy
 800e1d8:	b662      	cpsie	i
 800e1da:	613b      	str	r3, [r7, #16]
}
 800e1dc:	bf00      	nop
 800e1de:	bf00      	nop
 800e1e0:	e7fd      	b.n	800e1de <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d102      	bne.n	800e1ee <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	61fb      	str	r3, [r7, #28]
 800e1ec:	e004      	b.n	800e1f8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	68ba      	ldr	r2, [r7, #8]
 800e1f2:	fb02 f303 	mul.w	r3, r2, r3
 800e1f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	3350      	adds	r3, #80	@ 0x50
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f002 fdfb 	bl	8010df8 <pvPortMalloc>
 800e202:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e204:	69bb      	ldr	r3, [r7, #24]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d011      	beq.n	800e22e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e20a:	69bb      	ldr	r3, [r7, #24]
 800e20c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	3350      	adds	r3, #80	@ 0x50
 800e212:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e214:	69bb      	ldr	r3, [r7, #24]
 800e216:	2200      	movs	r2, #0
 800e218:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e21c:	79fa      	ldrb	r2, [r7, #7]
 800e21e:	69bb      	ldr	r3, [r7, #24]
 800e220:	9300      	str	r3, [sp, #0]
 800e222:	4613      	mov	r3, r2
 800e224:	697a      	ldr	r2, [r7, #20]
 800e226:	68b9      	ldr	r1, [r7, #8]
 800e228:	68f8      	ldr	r0, [r7, #12]
 800e22a:	f000 f805 	bl	800e238 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e22e:	69bb      	ldr	r3, [r7, #24]
	}
 800e230:	4618      	mov	r0, r3
 800e232:	3720      	adds	r7, #32
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	607a      	str	r2, [r7, #4]
 800e244:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d103      	bne.n	800e254 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	69ba      	ldr	r2, [r7, #24]
 800e250:	601a      	str	r2, [r3, #0]
 800e252:	e002      	b.n	800e25a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e254:	69bb      	ldr	r3, [r7, #24]
 800e256:	687a      	ldr	r2, [r7, #4]
 800e258:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e25a:	69bb      	ldr	r3, [r7, #24]
 800e25c:	68fa      	ldr	r2, [r7, #12]
 800e25e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e260:	69bb      	ldr	r3, [r7, #24]
 800e262:	68ba      	ldr	r2, [r7, #8]
 800e264:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e266:	2101      	movs	r1, #1
 800e268:	69b8      	ldr	r0, [r7, #24]
 800e26a:	f7ff feaf 	bl	800dfcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e26e:	69bb      	ldr	r3, [r7, #24]
 800e270:	78fa      	ldrb	r2, [r7, #3]
 800e272:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e276:	bf00      	nop
 800e278:	3710      	adds	r7, #16
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}

0800e27e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e27e:	b580      	push	{r7, lr}
 800e280:	b08a      	sub	sp, #40	@ 0x28
 800e282:	af02      	add	r7, sp, #8
 800e284:	60f8      	str	r0, [r7, #12]
 800e286:	60b9      	str	r1, [r7, #8]
 800e288:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d10d      	bne.n	800e2ac <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800e290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e294:	b672      	cpsid	i
 800e296:	f383 8811 	msr	BASEPRI, r3
 800e29a:	f3bf 8f6f 	isb	sy
 800e29e:	f3bf 8f4f 	dsb	sy
 800e2a2:	b662      	cpsie	i
 800e2a4:	61bb      	str	r3, [r7, #24]
}
 800e2a6:	bf00      	nop
 800e2a8:	bf00      	nop
 800e2aa:	e7fd      	b.n	800e2a8 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e2ac:	68ba      	ldr	r2, [r7, #8]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d90d      	bls.n	800e2d0 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800e2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2b8:	b672      	cpsid	i
 800e2ba:	f383 8811 	msr	BASEPRI, r3
 800e2be:	f3bf 8f6f 	isb	sy
 800e2c2:	f3bf 8f4f 	dsb	sy
 800e2c6:	b662      	cpsie	i
 800e2c8:	617b      	str	r3, [r7, #20]
}
 800e2ca:	bf00      	nop
 800e2cc:	bf00      	nop
 800e2ce:	e7fd      	b.n	800e2cc <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e2d0:	2302      	movs	r3, #2
 800e2d2:	9300      	str	r3, [sp, #0]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	2100      	movs	r1, #0
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	f7ff fee2 	bl	800e0a4 <xQueueGenericCreateStatic>
 800e2e0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e2e2:	69fb      	ldr	r3, [r7, #28]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d002      	beq.n	800e2ee <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	68ba      	ldr	r2, [r7, #8]
 800e2ec:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e2ee:	69fb      	ldr	r3, [r7, #28]
	}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3720      	adds	r7, #32
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b086      	sub	sp, #24
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d10d      	bne.n	800e324 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800e308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e30c:	b672      	cpsid	i
 800e30e:	f383 8811 	msr	BASEPRI, r3
 800e312:	f3bf 8f6f 	isb	sy
 800e316:	f3bf 8f4f 	dsb	sy
 800e31a:	b662      	cpsie	i
 800e31c:	613b      	str	r3, [r7, #16]
}
 800e31e:	bf00      	nop
 800e320:	bf00      	nop
 800e322:	e7fd      	b.n	800e320 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e324:	683a      	ldr	r2, [r7, #0]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	429a      	cmp	r2, r3
 800e32a:	d90d      	bls.n	800e348 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800e32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e330:	b672      	cpsid	i
 800e332:	f383 8811 	msr	BASEPRI, r3
 800e336:	f3bf 8f6f 	isb	sy
 800e33a:	f3bf 8f4f 	dsb	sy
 800e33e:	b662      	cpsie	i
 800e340:	60fb      	str	r3, [r7, #12]
}
 800e342:	bf00      	nop
 800e344:	bf00      	nop
 800e346:	e7fd      	b.n	800e344 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e348:	2202      	movs	r2, #2
 800e34a:	2100      	movs	r1, #0
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f7ff ff30 	bl	800e1b2 <xQueueGenericCreate>
 800e352:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d002      	beq.n	800e360 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	683a      	ldr	r2, [r7, #0]
 800e35e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e360:	697b      	ldr	r3, [r7, #20]
	}
 800e362:	4618      	mov	r0, r3
 800e364:	3718      	adds	r7, #24
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
	...

0800e36c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b08e      	sub	sp, #56	@ 0x38
 800e370:	af00      	add	r7, sp, #0
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	60b9      	str	r1, [r7, #8]
 800e376:	607a      	str	r2, [r7, #4]
 800e378:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e37a:	2300      	movs	r3, #0
 800e37c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e384:	2b00      	cmp	r3, #0
 800e386:	d10d      	bne.n	800e3a4 <xQueueGenericSend+0x38>
	__asm volatile
 800e388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e38c:	b672      	cpsid	i
 800e38e:	f383 8811 	msr	BASEPRI, r3
 800e392:	f3bf 8f6f 	isb	sy
 800e396:	f3bf 8f4f 	dsb	sy
 800e39a:	b662      	cpsie	i
 800e39c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e39e:	bf00      	nop
 800e3a0:	bf00      	nop
 800e3a2:	e7fd      	b.n	800e3a0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d103      	bne.n	800e3b2 <xQueueGenericSend+0x46>
 800e3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d101      	bne.n	800e3b6 <xQueueGenericSend+0x4a>
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	e000      	b.n	800e3b8 <xQueueGenericSend+0x4c>
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d10d      	bne.n	800e3d8 <xQueueGenericSend+0x6c>
	__asm volatile
 800e3bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3c0:	b672      	cpsid	i
 800e3c2:	f383 8811 	msr	BASEPRI, r3
 800e3c6:	f3bf 8f6f 	isb	sy
 800e3ca:	f3bf 8f4f 	dsb	sy
 800e3ce:	b662      	cpsie	i
 800e3d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e3d2:	bf00      	nop
 800e3d4:	bf00      	nop
 800e3d6:	e7fd      	b.n	800e3d4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	2b02      	cmp	r3, #2
 800e3dc:	d103      	bne.n	800e3e6 <xQueueGenericSend+0x7a>
 800e3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d101      	bne.n	800e3ea <xQueueGenericSend+0x7e>
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	e000      	b.n	800e3ec <xQueueGenericSend+0x80>
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d10d      	bne.n	800e40c <xQueueGenericSend+0xa0>
	__asm volatile
 800e3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f4:	b672      	cpsid	i
 800e3f6:	f383 8811 	msr	BASEPRI, r3
 800e3fa:	f3bf 8f6f 	isb	sy
 800e3fe:	f3bf 8f4f 	dsb	sy
 800e402:	b662      	cpsie	i
 800e404:	623b      	str	r3, [r7, #32]
}
 800e406:	bf00      	nop
 800e408:	bf00      	nop
 800e40a:	e7fd      	b.n	800e408 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e40c:	f001 fd64 	bl	800fed8 <xTaskGetSchedulerState>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d102      	bne.n	800e41c <xQueueGenericSend+0xb0>
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d101      	bne.n	800e420 <xQueueGenericSend+0xb4>
 800e41c:	2301      	movs	r3, #1
 800e41e:	e000      	b.n	800e422 <xQueueGenericSend+0xb6>
 800e420:	2300      	movs	r3, #0
 800e422:	2b00      	cmp	r3, #0
 800e424:	d10d      	bne.n	800e442 <xQueueGenericSend+0xd6>
	__asm volatile
 800e426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e42a:	b672      	cpsid	i
 800e42c:	f383 8811 	msr	BASEPRI, r3
 800e430:	f3bf 8f6f 	isb	sy
 800e434:	f3bf 8f4f 	dsb	sy
 800e438:	b662      	cpsie	i
 800e43a:	61fb      	str	r3, [r7, #28]
}
 800e43c:	bf00      	nop
 800e43e:	bf00      	nop
 800e440:	e7fd      	b.n	800e43e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e442:	f002 fbab 	bl	8010b9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e448:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e44c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e44e:	429a      	cmp	r2, r3
 800e450:	d302      	bcc.n	800e458 <xQueueGenericSend+0xec>
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	2b02      	cmp	r3, #2
 800e456:	d129      	bne.n	800e4ac <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e458:	683a      	ldr	r2, [r7, #0]
 800e45a:	68b9      	ldr	r1, [r7, #8]
 800e45c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e45e:	f000 fc91 	bl	800ed84 <prvCopyDataToQueue>
 800e462:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d010      	beq.n	800e48e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e46e:	3324      	adds	r3, #36	@ 0x24
 800e470:	4618      	mov	r0, r3
 800e472:	f001 fb61 	bl	800fb38 <xTaskRemoveFromEventList>
 800e476:	4603      	mov	r3, r0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d013      	beq.n	800e4a4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e47c:	4b3f      	ldr	r3, [pc, #252]	@ (800e57c <xQueueGenericSend+0x210>)
 800e47e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e482:	601a      	str	r2, [r3, #0]
 800e484:	f3bf 8f4f 	dsb	sy
 800e488:	f3bf 8f6f 	isb	sy
 800e48c:	e00a      	b.n	800e4a4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e490:	2b00      	cmp	r3, #0
 800e492:	d007      	beq.n	800e4a4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e494:	4b39      	ldr	r3, [pc, #228]	@ (800e57c <xQueueGenericSend+0x210>)
 800e496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e49a:	601a      	str	r2, [r3, #0]
 800e49c:	f3bf 8f4f 	dsb	sy
 800e4a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e4a4:	f002 fbb0 	bl	8010c08 <vPortExitCritical>
				return pdPASS;
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	e063      	b.n	800e574 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d103      	bne.n	800e4ba <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e4b2:	f002 fba9 	bl	8010c08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	e05c      	b.n	800e574 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e4ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d106      	bne.n	800e4ce <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e4c0:	f107 0314 	add.w	r3, r7, #20
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f001 fb9d 	bl	800fc04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e4ce:	f002 fb9b 	bl	8010c08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e4d2:	f001 f8b7 	bl	800f644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e4d6:	f002 fb61 	bl	8010b9c <vPortEnterCritical>
 800e4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e4e0:	b25b      	sxtb	r3, r3
 800e4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4e6:	d103      	bne.n	800e4f0 <xQueueGenericSend+0x184>
 800e4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e4f6:	b25b      	sxtb	r3, r3
 800e4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4fc:	d103      	bne.n	800e506 <xQueueGenericSend+0x19a>
 800e4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e500:	2200      	movs	r2, #0
 800e502:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e506:	f002 fb7f 	bl	8010c08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e50a:	1d3a      	adds	r2, r7, #4
 800e50c:	f107 0314 	add.w	r3, r7, #20
 800e510:	4611      	mov	r1, r2
 800e512:	4618      	mov	r0, r3
 800e514:	f001 fb8c 	bl	800fc30 <xTaskCheckForTimeOut>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d124      	bne.n	800e568 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e51e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e520:	f000 fd28 	bl	800ef74 <prvIsQueueFull>
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d018      	beq.n	800e55c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e52c:	3310      	adds	r3, #16
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	4611      	mov	r1, r2
 800e532:	4618      	mov	r0, r3
 800e534:	f001 faaa 	bl	800fa8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e538:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e53a:	f000 fcb3 	bl	800eea4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e53e:	f001 f88f 	bl	800f660 <xTaskResumeAll>
 800e542:	4603      	mov	r3, r0
 800e544:	2b00      	cmp	r3, #0
 800e546:	f47f af7c 	bne.w	800e442 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800e54a:	4b0c      	ldr	r3, [pc, #48]	@ (800e57c <xQueueGenericSend+0x210>)
 800e54c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e550:	601a      	str	r2, [r3, #0]
 800e552:	f3bf 8f4f 	dsb	sy
 800e556:	f3bf 8f6f 	isb	sy
 800e55a:	e772      	b.n	800e442 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e55c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e55e:	f000 fca1 	bl	800eea4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e562:	f001 f87d 	bl	800f660 <xTaskResumeAll>
 800e566:	e76c      	b.n	800e442 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e56a:	f000 fc9b 	bl	800eea4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e56e:	f001 f877 	bl	800f660 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e572:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e574:	4618      	mov	r0, r3
 800e576:	3738      	adds	r7, #56	@ 0x38
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}
 800e57c:	e000ed04 	.word	0xe000ed04

0800e580 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b08e      	sub	sp, #56	@ 0x38
 800e584:	af00      	add	r7, sp, #0
 800e586:	60f8      	str	r0, [r7, #12]
 800e588:	60b9      	str	r1, [r7, #8]
 800e58a:	607a      	str	r2, [r7, #4]
 800e58c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e594:	2b00      	cmp	r3, #0
 800e596:	d10d      	bne.n	800e5b4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800e598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e59c:	b672      	cpsid	i
 800e59e:	f383 8811 	msr	BASEPRI, r3
 800e5a2:	f3bf 8f6f 	isb	sy
 800e5a6:	f3bf 8f4f 	dsb	sy
 800e5aa:	b662      	cpsie	i
 800e5ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e5ae:	bf00      	nop
 800e5b0:	bf00      	nop
 800e5b2:	e7fd      	b.n	800e5b0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d103      	bne.n	800e5c2 <xQueueGenericSendFromISR+0x42>
 800e5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d101      	bne.n	800e5c6 <xQueueGenericSendFromISR+0x46>
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	e000      	b.n	800e5c8 <xQueueGenericSendFromISR+0x48>
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d10d      	bne.n	800e5e8 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800e5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5d0:	b672      	cpsid	i
 800e5d2:	f383 8811 	msr	BASEPRI, r3
 800e5d6:	f3bf 8f6f 	isb	sy
 800e5da:	f3bf 8f4f 	dsb	sy
 800e5de:	b662      	cpsie	i
 800e5e0:	623b      	str	r3, [r7, #32]
}
 800e5e2:	bf00      	nop
 800e5e4:	bf00      	nop
 800e5e6:	e7fd      	b.n	800e5e4 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	2b02      	cmp	r3, #2
 800e5ec:	d103      	bne.n	800e5f6 <xQueueGenericSendFromISR+0x76>
 800e5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d101      	bne.n	800e5fa <xQueueGenericSendFromISR+0x7a>
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	e000      	b.n	800e5fc <xQueueGenericSendFromISR+0x7c>
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d10d      	bne.n	800e61c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800e600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e604:	b672      	cpsid	i
 800e606:	f383 8811 	msr	BASEPRI, r3
 800e60a:	f3bf 8f6f 	isb	sy
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	b662      	cpsie	i
 800e614:	61fb      	str	r3, [r7, #28]
}
 800e616:	bf00      	nop
 800e618:	bf00      	nop
 800e61a:	e7fd      	b.n	800e618 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e61c:	f002 fba6 	bl	8010d6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e620:	f3ef 8211 	mrs	r2, BASEPRI
 800e624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e628:	b672      	cpsid	i
 800e62a:	f383 8811 	msr	BASEPRI, r3
 800e62e:	f3bf 8f6f 	isb	sy
 800e632:	f3bf 8f4f 	dsb	sy
 800e636:	b662      	cpsie	i
 800e638:	61ba      	str	r2, [r7, #24]
 800e63a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e63c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e63e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e642:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e648:	429a      	cmp	r2, r3
 800e64a:	d302      	bcc.n	800e652 <xQueueGenericSendFromISR+0xd2>
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	2b02      	cmp	r3, #2
 800e650:	d12c      	bne.n	800e6ac <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e654:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e658:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e65c:	683a      	ldr	r2, [r7, #0]
 800e65e:	68b9      	ldr	r1, [r7, #8]
 800e660:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e662:	f000 fb8f 	bl	800ed84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e666:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e66e:	d112      	bne.n	800e696 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e674:	2b00      	cmp	r3, #0
 800e676:	d016      	beq.n	800e6a6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e67a:	3324      	adds	r3, #36	@ 0x24
 800e67c:	4618      	mov	r0, r3
 800e67e:	f001 fa5b 	bl	800fb38 <xTaskRemoveFromEventList>
 800e682:	4603      	mov	r3, r0
 800e684:	2b00      	cmp	r3, #0
 800e686:	d00e      	beq.n	800e6a6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d00b      	beq.n	800e6a6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2201      	movs	r2, #1
 800e692:	601a      	str	r2, [r3, #0]
 800e694:	e007      	b.n	800e6a6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e696:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e69a:	3301      	adds	r3, #1
 800e69c:	b2db      	uxtb	r3, r3
 800e69e:	b25a      	sxtb	r2, r3
 800e6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800e6aa:	e001      	b.n	800e6b0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800e6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6b2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e6ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e6bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3738      	adds	r7, #56	@ 0x38
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}

0800e6c6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e6c6:	b580      	push	{r7, lr}
 800e6c8:	b08e      	sub	sp, #56	@ 0x38
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	6078      	str	r0, [r7, #4]
 800e6ce:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e6d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d10d      	bne.n	800e6f6 <xQueueGiveFromISR+0x30>
	__asm volatile
 800e6da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6de:	b672      	cpsid	i
 800e6e0:	f383 8811 	msr	BASEPRI, r3
 800e6e4:	f3bf 8f6f 	isb	sy
 800e6e8:	f3bf 8f4f 	dsb	sy
 800e6ec:	b662      	cpsie	i
 800e6ee:	623b      	str	r3, [r7, #32]
}
 800e6f0:	bf00      	nop
 800e6f2:	bf00      	nop
 800e6f4:	e7fd      	b.n	800e6f2 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d00d      	beq.n	800e71a <xQueueGiveFromISR+0x54>
	__asm volatile
 800e6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e702:	b672      	cpsid	i
 800e704:	f383 8811 	msr	BASEPRI, r3
 800e708:	f3bf 8f6f 	isb	sy
 800e70c:	f3bf 8f4f 	dsb	sy
 800e710:	b662      	cpsie	i
 800e712:	61fb      	str	r3, [r7, #28]
}
 800e714:	bf00      	nop
 800e716:	bf00      	nop
 800e718:	e7fd      	b.n	800e716 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d103      	bne.n	800e72a <xQueueGiveFromISR+0x64>
 800e722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e724:	689b      	ldr	r3, [r3, #8]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d101      	bne.n	800e72e <xQueueGiveFromISR+0x68>
 800e72a:	2301      	movs	r3, #1
 800e72c:	e000      	b.n	800e730 <xQueueGiveFromISR+0x6a>
 800e72e:	2300      	movs	r3, #0
 800e730:	2b00      	cmp	r3, #0
 800e732:	d10d      	bne.n	800e750 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800e734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e738:	b672      	cpsid	i
 800e73a:	f383 8811 	msr	BASEPRI, r3
 800e73e:	f3bf 8f6f 	isb	sy
 800e742:	f3bf 8f4f 	dsb	sy
 800e746:	b662      	cpsie	i
 800e748:	61bb      	str	r3, [r7, #24]
}
 800e74a:	bf00      	nop
 800e74c:	bf00      	nop
 800e74e:	e7fd      	b.n	800e74c <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e750:	f002 fb0c 	bl	8010d6c <vPortValidateInterruptPriority>
	__asm volatile
 800e754:	f3ef 8211 	mrs	r2, BASEPRI
 800e758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e75c:	b672      	cpsid	i
 800e75e:	f383 8811 	msr	BASEPRI, r3
 800e762:	f3bf 8f6f 	isb	sy
 800e766:	f3bf 8f4f 	dsb	sy
 800e76a:	b662      	cpsie	i
 800e76c:	617a      	str	r2, [r7, #20]
 800e76e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e770:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e772:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e778:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e77c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e77e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e780:	429a      	cmp	r2, r3
 800e782:	d22b      	bcs.n	800e7dc <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e786:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e78a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e790:	1c5a      	adds	r2, r3, #1
 800e792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e794:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e796:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e79e:	d112      	bne.n	800e7c6 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d016      	beq.n	800e7d6 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7aa:	3324      	adds	r3, #36	@ 0x24
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f001 f9c3 	bl	800fb38 <xTaskRemoveFromEventList>
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d00e      	beq.n	800e7d6 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00b      	beq.n	800e7d6 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	2201      	movs	r2, #1
 800e7c2:	601a      	str	r2, [r3, #0]
 800e7c4:	e007      	b.n	800e7d6 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e7c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	b2db      	uxtb	r3, r3
 800e7ce:	b25a      	sxtb	r2, r3
 800e7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e7da:	e001      	b.n	800e7e0 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e7dc:	2300      	movs	r3, #0
 800e7de:	637b      	str	r3, [r7, #52]	@ 0x34
 800e7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7e2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f383 8811 	msr	BASEPRI, r3
}
 800e7ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e7ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3738      	adds	r7, #56	@ 0x38
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
	...

0800e7f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b08c      	sub	sp, #48	@ 0x30
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	60f8      	str	r0, [r7, #12]
 800e800:	60b9      	str	r1, [r7, #8]
 800e802:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e804:	2300      	movs	r3, #0
 800e806:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d10d      	bne.n	800e82e <xQueueReceive+0x36>
	__asm volatile
 800e812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e816:	b672      	cpsid	i
 800e818:	f383 8811 	msr	BASEPRI, r3
 800e81c:	f3bf 8f6f 	isb	sy
 800e820:	f3bf 8f4f 	dsb	sy
 800e824:	b662      	cpsie	i
 800e826:	623b      	str	r3, [r7, #32]
}
 800e828:	bf00      	nop
 800e82a:	bf00      	nop
 800e82c:	e7fd      	b.n	800e82a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d103      	bne.n	800e83c <xQueueReceive+0x44>
 800e834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d101      	bne.n	800e840 <xQueueReceive+0x48>
 800e83c:	2301      	movs	r3, #1
 800e83e:	e000      	b.n	800e842 <xQueueReceive+0x4a>
 800e840:	2300      	movs	r3, #0
 800e842:	2b00      	cmp	r3, #0
 800e844:	d10d      	bne.n	800e862 <xQueueReceive+0x6a>
	__asm volatile
 800e846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e84a:	b672      	cpsid	i
 800e84c:	f383 8811 	msr	BASEPRI, r3
 800e850:	f3bf 8f6f 	isb	sy
 800e854:	f3bf 8f4f 	dsb	sy
 800e858:	b662      	cpsie	i
 800e85a:	61fb      	str	r3, [r7, #28]
}
 800e85c:	bf00      	nop
 800e85e:	bf00      	nop
 800e860:	e7fd      	b.n	800e85e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e862:	f001 fb39 	bl	800fed8 <xTaskGetSchedulerState>
 800e866:	4603      	mov	r3, r0
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d102      	bne.n	800e872 <xQueueReceive+0x7a>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d101      	bne.n	800e876 <xQueueReceive+0x7e>
 800e872:	2301      	movs	r3, #1
 800e874:	e000      	b.n	800e878 <xQueueReceive+0x80>
 800e876:	2300      	movs	r3, #0
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d10d      	bne.n	800e898 <xQueueReceive+0xa0>
	__asm volatile
 800e87c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e880:	b672      	cpsid	i
 800e882:	f383 8811 	msr	BASEPRI, r3
 800e886:	f3bf 8f6f 	isb	sy
 800e88a:	f3bf 8f4f 	dsb	sy
 800e88e:	b662      	cpsie	i
 800e890:	61bb      	str	r3, [r7, #24]
}
 800e892:	bf00      	nop
 800e894:	bf00      	nop
 800e896:	e7fd      	b.n	800e894 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e898:	f002 f980 	bl	8010b9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e89e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d01f      	beq.n	800e8e8 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e8a8:	68b9      	ldr	r1, [r7, #8]
 800e8aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e8ac:	f000 fad4 	bl	800ee58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8b2:	1e5a      	subs	r2, r3, #1
 800e8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8ba:	691b      	ldr	r3, [r3, #16]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d00f      	beq.n	800e8e0 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8c2:	3310      	adds	r3, #16
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f001 f937 	bl	800fb38 <xTaskRemoveFromEventList>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d007      	beq.n	800e8e0 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e8d0:	4b3c      	ldr	r3, [pc, #240]	@ (800e9c4 <xQueueReceive+0x1cc>)
 800e8d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8d6:	601a      	str	r2, [r3, #0]
 800e8d8:	f3bf 8f4f 	dsb	sy
 800e8dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e8e0:	f002 f992 	bl	8010c08 <vPortExitCritical>
				return pdPASS;
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	e069      	b.n	800e9bc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d103      	bne.n	800e8f6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e8ee:	f002 f98b 	bl	8010c08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	e062      	b.n	800e9bc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d106      	bne.n	800e90a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e8fc:	f107 0310 	add.w	r3, r7, #16
 800e900:	4618      	mov	r0, r3
 800e902:	f001 f97f 	bl	800fc04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e906:	2301      	movs	r3, #1
 800e908:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e90a:	f002 f97d 	bl	8010c08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e90e:	f000 fe99 	bl	800f644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e912:	f002 f943 	bl	8010b9c <vPortEnterCritical>
 800e916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e918:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e91c:	b25b      	sxtb	r3, r3
 800e91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e922:	d103      	bne.n	800e92c <xQueueReceive+0x134>
 800e924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e926:	2200      	movs	r2, #0
 800e928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e92e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e932:	b25b      	sxtb	r3, r3
 800e934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e938:	d103      	bne.n	800e942 <xQueueReceive+0x14a>
 800e93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e93c:	2200      	movs	r2, #0
 800e93e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e942:	f002 f961 	bl	8010c08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e946:	1d3a      	adds	r2, r7, #4
 800e948:	f107 0310 	add.w	r3, r7, #16
 800e94c:	4611      	mov	r1, r2
 800e94e:	4618      	mov	r0, r3
 800e950:	f001 f96e 	bl	800fc30 <xTaskCheckForTimeOut>
 800e954:	4603      	mov	r3, r0
 800e956:	2b00      	cmp	r3, #0
 800e958:	d123      	bne.n	800e9a2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e95a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e95c:	f000 faf4 	bl	800ef48 <prvIsQueueEmpty>
 800e960:	4603      	mov	r3, r0
 800e962:	2b00      	cmp	r3, #0
 800e964:	d017      	beq.n	800e996 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e968:	3324      	adds	r3, #36	@ 0x24
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	4611      	mov	r1, r2
 800e96e:	4618      	mov	r0, r3
 800e970:	f001 f88c 	bl	800fa8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e974:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e976:	f000 fa95 	bl	800eea4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e97a:	f000 fe71 	bl	800f660 <xTaskResumeAll>
 800e97e:	4603      	mov	r3, r0
 800e980:	2b00      	cmp	r3, #0
 800e982:	d189      	bne.n	800e898 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800e984:	4b0f      	ldr	r3, [pc, #60]	@ (800e9c4 <xQueueReceive+0x1cc>)
 800e986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e98a:	601a      	str	r2, [r3, #0]
 800e98c:	f3bf 8f4f 	dsb	sy
 800e990:	f3bf 8f6f 	isb	sy
 800e994:	e780      	b.n	800e898 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e998:	f000 fa84 	bl	800eea4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e99c:	f000 fe60 	bl	800f660 <xTaskResumeAll>
 800e9a0:	e77a      	b.n	800e898 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e9a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9a4:	f000 fa7e 	bl	800eea4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9a8:	f000 fe5a 	bl	800f660 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9ae:	f000 facb 	bl	800ef48 <prvIsQueueEmpty>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	f43f af6f 	beq.w	800e898 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e9ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3730      	adds	r7, #48	@ 0x30
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	e000ed04 	.word	0xe000ed04

0800e9c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b08e      	sub	sp, #56	@ 0x38
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d10d      	bne.n	800ea00 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800e9e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9e8:	b672      	cpsid	i
 800e9ea:	f383 8811 	msr	BASEPRI, r3
 800e9ee:	f3bf 8f6f 	isb	sy
 800e9f2:	f3bf 8f4f 	dsb	sy
 800e9f6:	b662      	cpsie	i
 800e9f8:	623b      	str	r3, [r7, #32]
}
 800e9fa:	bf00      	nop
 800e9fc:	bf00      	nop
 800e9fe:	e7fd      	b.n	800e9fc <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ea00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d00d      	beq.n	800ea24 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800ea08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea0c:	b672      	cpsid	i
 800ea0e:	f383 8811 	msr	BASEPRI, r3
 800ea12:	f3bf 8f6f 	isb	sy
 800ea16:	f3bf 8f4f 	dsb	sy
 800ea1a:	b662      	cpsie	i
 800ea1c:	61fb      	str	r3, [r7, #28]
}
 800ea1e:	bf00      	nop
 800ea20:	bf00      	nop
 800ea22:	e7fd      	b.n	800ea20 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea24:	f001 fa58 	bl	800fed8 <xTaskGetSchedulerState>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d102      	bne.n	800ea34 <xQueueSemaphoreTake+0x6c>
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d101      	bne.n	800ea38 <xQueueSemaphoreTake+0x70>
 800ea34:	2301      	movs	r3, #1
 800ea36:	e000      	b.n	800ea3a <xQueueSemaphoreTake+0x72>
 800ea38:	2300      	movs	r3, #0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d10d      	bne.n	800ea5a <xQueueSemaphoreTake+0x92>
	__asm volatile
 800ea3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea42:	b672      	cpsid	i
 800ea44:	f383 8811 	msr	BASEPRI, r3
 800ea48:	f3bf 8f6f 	isb	sy
 800ea4c:	f3bf 8f4f 	dsb	sy
 800ea50:	b662      	cpsie	i
 800ea52:	61bb      	str	r3, [r7, #24]
}
 800ea54:	bf00      	nop
 800ea56:	bf00      	nop
 800ea58:	e7fd      	b.n	800ea56 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ea5a:	f002 f89f 	bl	8010b9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ea5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea62:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ea64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d024      	beq.n	800eab4 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ea6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea6c:	1e5a      	subs	r2, r3, #1
 800ea6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea70:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d104      	bne.n	800ea84 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ea7a:	f001 fbaf 	bl	80101dc <pvTaskIncrementMutexHeldCount>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea82:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea86:	691b      	ldr	r3, [r3, #16]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d00f      	beq.n	800eaac <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea8e:	3310      	adds	r3, #16
 800ea90:	4618      	mov	r0, r3
 800ea92:	f001 f851 	bl	800fb38 <xTaskRemoveFromEventList>
 800ea96:	4603      	mov	r3, r0
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d007      	beq.n	800eaac <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ea9c:	4b55      	ldr	r3, [pc, #340]	@ (800ebf4 <xQueueSemaphoreTake+0x22c>)
 800ea9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eaa2:	601a      	str	r2, [r3, #0]
 800eaa4:	f3bf 8f4f 	dsb	sy
 800eaa8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eaac:	f002 f8ac 	bl	8010c08 <vPortExitCritical>
				return pdPASS;
 800eab0:	2301      	movs	r3, #1
 800eab2:	e09a      	b.n	800ebea <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d114      	bne.n	800eae4 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800eaba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d00d      	beq.n	800eadc <xQueueSemaphoreTake+0x114>
	__asm volatile
 800eac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eac4:	b672      	cpsid	i
 800eac6:	f383 8811 	msr	BASEPRI, r3
 800eaca:	f3bf 8f6f 	isb	sy
 800eace:	f3bf 8f4f 	dsb	sy
 800ead2:	b662      	cpsie	i
 800ead4:	617b      	str	r3, [r7, #20]
}
 800ead6:	bf00      	nop
 800ead8:	bf00      	nop
 800eada:	e7fd      	b.n	800ead8 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eadc:	f002 f894 	bl	8010c08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eae0:	2300      	movs	r3, #0
 800eae2:	e082      	b.n	800ebea <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d106      	bne.n	800eaf8 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eaea:	f107 030c 	add.w	r3, r7, #12
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f001 f888 	bl	800fc04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eaf8:	f002 f886 	bl	8010c08 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eafc:	f000 fda2 	bl	800f644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb00:	f002 f84c 	bl	8010b9c <vPortEnterCritical>
 800eb04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb0a:	b25b      	sxtb	r3, r3
 800eb0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb10:	d103      	bne.n	800eb1a <xQueueSemaphoreTake+0x152>
 800eb12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb14:	2200      	movs	r2, #0
 800eb16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eb20:	b25b      	sxtb	r3, r3
 800eb22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb26:	d103      	bne.n	800eb30 <xQueueSemaphoreTake+0x168>
 800eb28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eb30:	f002 f86a 	bl	8010c08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eb34:	463a      	mov	r2, r7
 800eb36:	f107 030c 	add.w	r3, r7, #12
 800eb3a:	4611      	mov	r1, r2
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f001 f877 	bl	800fc30 <xTaskCheckForTimeOut>
 800eb42:	4603      	mov	r3, r0
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d132      	bne.n	800ebae <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eb48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb4a:	f000 f9fd 	bl	800ef48 <prvIsQueueEmpty>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d026      	beq.n	800eba2 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d109      	bne.n	800eb70 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800eb5c:	f002 f81e 	bl	8010b9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eb60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb62:	689b      	ldr	r3, [r3, #8]
 800eb64:	4618      	mov	r0, r3
 800eb66:	f001 f9d5 	bl	800ff14 <xTaskPriorityInherit>
 800eb6a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800eb6c:	f002 f84c 	bl	8010c08 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb72:	3324      	adds	r3, #36	@ 0x24
 800eb74:	683a      	ldr	r2, [r7, #0]
 800eb76:	4611      	mov	r1, r2
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f000 ff87 	bl	800fa8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eb7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb80:	f000 f990 	bl	800eea4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eb84:	f000 fd6c 	bl	800f660 <xTaskResumeAll>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	f47f af65 	bne.w	800ea5a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800eb90:	4b18      	ldr	r3, [pc, #96]	@ (800ebf4 <xQueueSemaphoreTake+0x22c>)
 800eb92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb96:	601a      	str	r2, [r3, #0]
 800eb98:	f3bf 8f4f 	dsb	sy
 800eb9c:	f3bf 8f6f 	isb	sy
 800eba0:	e75b      	b.n	800ea5a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800eba2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eba4:	f000 f97e 	bl	800eea4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eba8:	f000 fd5a 	bl	800f660 <xTaskResumeAll>
 800ebac:	e755      	b.n	800ea5a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ebae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebb0:	f000 f978 	bl	800eea4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ebb4:	f000 fd54 	bl	800f660 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebba:	f000 f9c5 	bl	800ef48 <prvIsQueueEmpty>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	f43f af4a 	beq.w	800ea5a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ebc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d00d      	beq.n	800ebe8 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800ebcc:	f001 ffe6 	bl	8010b9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ebd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebd2:	f000 f8bf 	bl	800ed54 <prvGetDisinheritPriorityAfterTimeout>
 800ebd6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ebd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebda:	689b      	ldr	r3, [r3, #8]
 800ebdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f001 fa74 	bl	80100cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ebe4:	f002 f810 	bl	8010c08 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ebe8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3738      	adds	r7, #56	@ 0x38
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	e000ed04 	.word	0xe000ed04

0800ebf8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b08e      	sub	sp, #56	@ 0x38
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	60f8      	str	r0, [r7, #12]
 800ec00:	60b9      	str	r1, [r7, #8]
 800ec02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ec08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d10d      	bne.n	800ec2a <xQueueReceiveFromISR+0x32>
	__asm volatile
 800ec0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec12:	b672      	cpsid	i
 800ec14:	f383 8811 	msr	BASEPRI, r3
 800ec18:	f3bf 8f6f 	isb	sy
 800ec1c:	f3bf 8f4f 	dsb	sy
 800ec20:	b662      	cpsie	i
 800ec22:	623b      	str	r3, [r7, #32]
}
 800ec24:	bf00      	nop
 800ec26:	bf00      	nop
 800ec28:	e7fd      	b.n	800ec26 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d103      	bne.n	800ec38 <xQueueReceiveFromISR+0x40>
 800ec30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d101      	bne.n	800ec3c <xQueueReceiveFromISR+0x44>
 800ec38:	2301      	movs	r3, #1
 800ec3a:	e000      	b.n	800ec3e <xQueueReceiveFromISR+0x46>
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d10d      	bne.n	800ec5e <xQueueReceiveFromISR+0x66>
	__asm volatile
 800ec42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec46:	b672      	cpsid	i
 800ec48:	f383 8811 	msr	BASEPRI, r3
 800ec4c:	f3bf 8f6f 	isb	sy
 800ec50:	f3bf 8f4f 	dsb	sy
 800ec54:	b662      	cpsie	i
 800ec56:	61fb      	str	r3, [r7, #28]
}
 800ec58:	bf00      	nop
 800ec5a:	bf00      	nop
 800ec5c:	e7fd      	b.n	800ec5a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ec5e:	f002 f885 	bl	8010d6c <vPortValidateInterruptPriority>
	__asm volatile
 800ec62:	f3ef 8211 	mrs	r2, BASEPRI
 800ec66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec6a:	b672      	cpsid	i
 800ec6c:	f383 8811 	msr	BASEPRI, r3
 800ec70:	f3bf 8f6f 	isb	sy
 800ec74:	f3bf 8f4f 	dsb	sy
 800ec78:	b662      	cpsie	i
 800ec7a:	61ba      	str	r2, [r7, #24]
 800ec7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ec7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ec82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec86:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d02f      	beq.n	800ecee <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ec8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ec94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ec98:	68b9      	ldr	r1, [r7, #8]
 800ec9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ec9c:	f000 f8dc 	bl	800ee58 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eca2:	1e5a      	subs	r2, r3, #1
 800eca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eca6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800eca8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ecac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecb0:	d112      	bne.n	800ecd8 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ecb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb4:	691b      	ldr	r3, [r3, #16]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d016      	beq.n	800ece8 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ecba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecbc:	3310      	adds	r3, #16
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f000 ff3a 	bl	800fb38 <xTaskRemoveFromEventList>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d00e      	beq.n	800ece8 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d00b      	beq.n	800ece8 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	601a      	str	r2, [r3, #0]
 800ecd6:	e007      	b.n	800ece8 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ecd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecdc:	3301      	adds	r3, #1
 800ecde:	b2db      	uxtb	r3, r3
 800ece0:	b25a      	sxtb	r2, r3
 800ece2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ece4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ece8:	2301      	movs	r3, #1
 800ecea:	637b      	str	r3, [r7, #52]	@ 0x34
 800ecec:	e001      	b.n	800ecf2 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	637b      	str	r3, [r7, #52]	@ 0x34
 800ecf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecf4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	f383 8811 	msr	BASEPRI, r3
}
 800ecfc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ecfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3738      	adds	r7, #56	@ 0x38
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d10d      	bne.n	800ed36 <vQueueDelete+0x2e>
	__asm volatile
 800ed1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed1e:	b672      	cpsid	i
 800ed20:	f383 8811 	msr	BASEPRI, r3
 800ed24:	f3bf 8f6f 	isb	sy
 800ed28:	f3bf 8f4f 	dsb	sy
 800ed2c:	b662      	cpsie	i
 800ed2e:	60bb      	str	r3, [r7, #8]
}
 800ed30:	bf00      	nop
 800ed32:	bf00      	nop
 800ed34:	e7fd      	b.n	800ed32 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ed36:	68f8      	ldr	r0, [r7, #12]
 800ed38:	f000 f95e 	bl	800eff8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d102      	bne.n	800ed4c <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800ed46:	68f8      	ldr	r0, [r7, #12]
 800ed48:	f002 f924 	bl	8010f94 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ed4c:	bf00      	nop
 800ed4e:	3710      	adds	r7, #16
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ed54:	b480      	push	{r7}
 800ed56:	b085      	sub	sp, #20
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d006      	beq.n	800ed72 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ed6e:	60fb      	str	r3, [r7, #12]
 800ed70:	e001      	b.n	800ed76 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ed72:	2300      	movs	r3, #0
 800ed74:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ed76:	68fb      	ldr	r3, [r7, #12]
	}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3714      	adds	r7, #20
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed82:	4770      	bx	lr

0800ed84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b086      	sub	sp, #24
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	60f8      	str	r0, [r7, #12]
 800ed8c:	60b9      	str	r1, [r7, #8]
 800ed8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ed90:	2300      	movs	r3, #0
 800ed92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d10d      	bne.n	800edbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d14d      	bne.n	800ee46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	689b      	ldr	r3, [r3, #8]
 800edae:	4618      	mov	r0, r3
 800edb0:	f001 f918 	bl	800ffe4 <xTaskPriorityDisinherit>
 800edb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2200      	movs	r2, #0
 800edba:	609a      	str	r2, [r3, #8]
 800edbc:	e043      	b.n	800ee46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d119      	bne.n	800edf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	6858      	ldr	r0, [r3, #4]
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edcc:	461a      	mov	r2, r3
 800edce:	68b9      	ldr	r1, [r7, #8]
 800edd0:	f005 ffa7 	bl	8014d22 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	685a      	ldr	r2, [r3, #4]
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eddc:	441a      	add	r2, r3
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	685a      	ldr	r2, [r3, #4]
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	689b      	ldr	r3, [r3, #8]
 800edea:	429a      	cmp	r2, r3
 800edec:	d32b      	bcc.n	800ee46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	681a      	ldr	r2, [r3, #0]
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	605a      	str	r2, [r3, #4]
 800edf6:	e026      	b.n	800ee46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	68d8      	ldr	r0, [r3, #12]
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee00:	461a      	mov	r2, r3
 800ee02:	68b9      	ldr	r1, [r7, #8]
 800ee04:	f005 ff8d 	bl	8014d22 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	68da      	ldr	r2, [r3, #12]
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee10:	425b      	negs	r3, r3
 800ee12:	441a      	add	r2, r3
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	68da      	ldr	r2, [r3, #12]
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d207      	bcs.n	800ee34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	689a      	ldr	r2, [r3, #8]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee2c:	425b      	negs	r3, r3
 800ee2e:	441a      	add	r2, r3
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2b02      	cmp	r3, #2
 800ee38:	d105      	bne.n	800ee46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d002      	beq.n	800ee46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	3b01      	subs	r3, #1
 800ee44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	1c5a      	adds	r2, r3, #1
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ee4e:	697b      	ldr	r3, [r7, #20]
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3718      	adds	r7, #24
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}

0800ee58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b082      	sub	sp, #8
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d018      	beq.n	800ee9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	68da      	ldr	r2, [r3, #12]
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee72:	441a      	add	r2, r3
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	68da      	ldr	r2, [r3, #12]
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	689b      	ldr	r3, [r3, #8]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d303      	bcc.n	800ee8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681a      	ldr	r2, [r3, #0]
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	68d9      	ldr	r1, [r3, #12]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee94:	461a      	mov	r2, r3
 800ee96:	6838      	ldr	r0, [r7, #0]
 800ee98:	f005 ff43 	bl	8014d22 <memcpy>
	}
}
 800ee9c:	bf00      	nop
 800ee9e:	3708      	adds	r7, #8
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b084      	sub	sp, #16
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eeac:	f001 fe76 	bl	8010b9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eeb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eeb8:	e011      	b.n	800eede <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d012      	beq.n	800eee8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	3324      	adds	r3, #36	@ 0x24
 800eec6:	4618      	mov	r0, r3
 800eec8:	f000 fe36 	bl	800fb38 <xTaskRemoveFromEventList>
 800eecc:	4603      	mov	r3, r0
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d001      	beq.n	800eed6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eed2:	f000 ff15 	bl	800fd00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800eed6:	7bfb      	ldrb	r3, [r7, #15]
 800eed8:	3b01      	subs	r3, #1
 800eeda:	b2db      	uxtb	r3, r3
 800eedc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	dce9      	bgt.n	800eeba <prvUnlockQueue+0x16>
 800eee6:	e000      	b.n	800eeea <prvUnlockQueue+0x46>
					break;
 800eee8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	22ff      	movs	r2, #255	@ 0xff
 800eeee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800eef2:	f001 fe89 	bl	8010c08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eef6:	f001 fe51 	bl	8010b9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ef00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ef02:	e011      	b.n	800ef28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	691b      	ldr	r3, [r3, #16]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d012      	beq.n	800ef32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	3310      	adds	r3, #16
 800ef10:	4618      	mov	r0, r3
 800ef12:	f000 fe11 	bl	800fb38 <xTaskRemoveFromEventList>
 800ef16:	4603      	mov	r3, r0
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d001      	beq.n	800ef20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ef1c:	f000 fef0 	bl	800fd00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ef20:	7bbb      	ldrb	r3, [r7, #14]
 800ef22:	3b01      	subs	r3, #1
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ef28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	dce9      	bgt.n	800ef04 <prvUnlockQueue+0x60>
 800ef30:	e000      	b.n	800ef34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ef32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	22ff      	movs	r2, #255	@ 0xff
 800ef38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ef3c:	f001 fe64 	bl	8010c08 <vPortExitCritical>
}
 800ef40:	bf00      	nop
 800ef42:	3710      	adds	r7, #16
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}

0800ef48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b084      	sub	sp, #16
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ef50:	f001 fe24 	bl	8010b9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d102      	bne.n	800ef62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	60fb      	str	r3, [r7, #12]
 800ef60:	e001      	b.n	800ef66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ef62:	2300      	movs	r3, #0
 800ef64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ef66:	f001 fe4f 	bl	8010c08 <vPortExitCritical>

	return xReturn;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3710      	adds	r7, #16
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b084      	sub	sp, #16
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ef7c:	f001 fe0e 	bl	8010b9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d102      	bne.n	800ef92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	60fb      	str	r3, [r7, #12]
 800ef90:	e001      	b.n	800ef96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ef92:	2300      	movs	r3, #0
 800ef94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ef96:	f001 fe37 	bl	8010c08 <vPortExitCritical>

	return xReturn;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3710      	adds	r7, #16
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}

0800efa4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800efa4:	b480      	push	{r7}
 800efa6:	b085      	sub	sp, #20
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800efae:	2300      	movs	r3, #0
 800efb0:	60fb      	str	r3, [r7, #12]
 800efb2:	e014      	b.n	800efde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800efb4:	4a0f      	ldr	r2, [pc, #60]	@ (800eff4 <vQueueAddToRegistry+0x50>)
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d10b      	bne.n	800efd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800efc0:	490c      	ldr	r1, [pc, #48]	@ (800eff4 <vQueueAddToRegistry+0x50>)
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	683a      	ldr	r2, [r7, #0]
 800efc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800efca:	4a0a      	ldr	r2, [pc, #40]	@ (800eff4 <vQueueAddToRegistry+0x50>)
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	00db      	lsls	r3, r3, #3
 800efd0:	4413      	add	r3, r2
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800efd6:	e006      	b.n	800efe6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	3301      	adds	r3, #1
 800efdc:	60fb      	str	r3, [r7, #12]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	2b07      	cmp	r3, #7
 800efe2:	d9e7      	bls.n	800efb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800efe4:	bf00      	nop
 800efe6:	bf00      	nop
 800efe8:	3714      	adds	r7, #20
 800efea:	46bd      	mov	sp, r7
 800efec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff0:	4770      	bx	lr
 800eff2:	bf00      	nop
 800eff4:	200086b0 	.word	0x200086b0

0800eff8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800eff8:	b480      	push	{r7}
 800effa:	b085      	sub	sp, #20
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f000:	2300      	movs	r3, #0
 800f002:	60fb      	str	r3, [r7, #12]
 800f004:	e016      	b.n	800f034 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f006:	4a10      	ldr	r2, [pc, #64]	@ (800f048 <vQueueUnregisterQueue+0x50>)
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	00db      	lsls	r3, r3, #3
 800f00c:	4413      	add	r3, r2
 800f00e:	685b      	ldr	r3, [r3, #4]
 800f010:	687a      	ldr	r2, [r7, #4]
 800f012:	429a      	cmp	r2, r3
 800f014:	d10b      	bne.n	800f02e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f016:	4a0c      	ldr	r2, [pc, #48]	@ (800f048 <vQueueUnregisterQueue+0x50>)
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2100      	movs	r1, #0
 800f01c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f020:	4a09      	ldr	r2, [pc, #36]	@ (800f048 <vQueueUnregisterQueue+0x50>)
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	00db      	lsls	r3, r3, #3
 800f026:	4413      	add	r3, r2
 800f028:	2200      	movs	r2, #0
 800f02a:	605a      	str	r2, [r3, #4]
				break;
 800f02c:	e006      	b.n	800f03c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	3301      	adds	r3, #1
 800f032:	60fb      	str	r3, [r7, #12]
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	2b07      	cmp	r3, #7
 800f038:	d9e5      	bls.n	800f006 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f03a:	bf00      	nop
 800f03c:	bf00      	nop
 800f03e:	3714      	adds	r7, #20
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr
 800f048:	200086b0 	.word	0x200086b0

0800f04c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b086      	sub	sp, #24
 800f050:	af00      	add	r7, sp, #0
 800f052:	60f8      	str	r0, [r7, #12]
 800f054:	60b9      	str	r1, [r7, #8]
 800f056:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f05c:	f001 fd9e 	bl	8010b9c <vPortEnterCritical>
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f066:	b25b      	sxtb	r3, r3
 800f068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f06c:	d103      	bne.n	800f076 <vQueueWaitForMessageRestricted+0x2a>
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	2200      	movs	r2, #0
 800f072:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f07c:	b25b      	sxtb	r3, r3
 800f07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f082:	d103      	bne.n	800f08c <vQueueWaitForMessageRestricted+0x40>
 800f084:	697b      	ldr	r3, [r7, #20]
 800f086:	2200      	movs	r2, #0
 800f088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f08c:	f001 fdbc 	bl	8010c08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f094:	2b00      	cmp	r3, #0
 800f096:	d106      	bne.n	800f0a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	3324      	adds	r3, #36	@ 0x24
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	68b9      	ldr	r1, [r7, #8]
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f000 fd1b 	bl	800fadc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f0a6:	6978      	ldr	r0, [r7, #20]
 800f0a8:	f7ff fefc 	bl	800eea4 <prvUnlockQueue>
	}
 800f0ac:	bf00      	nop
 800f0ae:	3718      	adds	r7, #24
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b08e      	sub	sp, #56	@ 0x38
 800f0b8:	af04      	add	r7, sp, #16
 800f0ba:	60f8      	str	r0, [r7, #12]
 800f0bc:	60b9      	str	r1, [r7, #8]
 800f0be:	607a      	str	r2, [r7, #4]
 800f0c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f0c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d10d      	bne.n	800f0e4 <xTaskCreateStatic+0x30>
	__asm volatile
 800f0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0cc:	b672      	cpsid	i
 800f0ce:	f383 8811 	msr	BASEPRI, r3
 800f0d2:	f3bf 8f6f 	isb	sy
 800f0d6:	f3bf 8f4f 	dsb	sy
 800f0da:	b662      	cpsie	i
 800f0dc:	623b      	str	r3, [r7, #32]
}
 800f0de:	bf00      	nop
 800f0e0:	bf00      	nop
 800f0e2:	e7fd      	b.n	800f0e0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d10d      	bne.n	800f106 <xTaskCreateStatic+0x52>
	__asm volatile
 800f0ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0ee:	b672      	cpsid	i
 800f0f0:	f383 8811 	msr	BASEPRI, r3
 800f0f4:	f3bf 8f6f 	isb	sy
 800f0f8:	f3bf 8f4f 	dsb	sy
 800f0fc:	b662      	cpsie	i
 800f0fe:	61fb      	str	r3, [r7, #28]
}
 800f100:	bf00      	nop
 800f102:	bf00      	nop
 800f104:	e7fd      	b.n	800f102 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f106:	23b0      	movs	r3, #176	@ 0xb0
 800f108:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f10a:	693b      	ldr	r3, [r7, #16]
 800f10c:	2bb0      	cmp	r3, #176	@ 0xb0
 800f10e:	d00d      	beq.n	800f12c <xTaskCreateStatic+0x78>
	__asm volatile
 800f110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f114:	b672      	cpsid	i
 800f116:	f383 8811 	msr	BASEPRI, r3
 800f11a:	f3bf 8f6f 	isb	sy
 800f11e:	f3bf 8f4f 	dsb	sy
 800f122:	b662      	cpsie	i
 800f124:	61bb      	str	r3, [r7, #24]
}
 800f126:	bf00      	nop
 800f128:	bf00      	nop
 800f12a:	e7fd      	b.n	800f128 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f12c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f130:	2b00      	cmp	r3, #0
 800f132:	d01e      	beq.n	800f172 <xTaskCreateStatic+0xbe>
 800f134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f136:	2b00      	cmp	r3, #0
 800f138:	d01b      	beq.n	800f172 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f13a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f13c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f140:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f142:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f146:	2202      	movs	r2, #2
 800f148:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f14c:	2300      	movs	r3, #0
 800f14e:	9303      	str	r3, [sp, #12]
 800f150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f152:	9302      	str	r3, [sp, #8]
 800f154:	f107 0314 	add.w	r3, r7, #20
 800f158:	9301      	str	r3, [sp, #4]
 800f15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f15c:	9300      	str	r3, [sp, #0]
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	687a      	ldr	r2, [r7, #4]
 800f162:	68b9      	ldr	r1, [r7, #8]
 800f164:	68f8      	ldr	r0, [r7, #12]
 800f166:	f000 f851 	bl	800f20c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f16a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f16c:	f000 f8fe 	bl	800f36c <prvAddNewTaskToReadyList>
 800f170:	e001      	b.n	800f176 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800f172:	2300      	movs	r3, #0
 800f174:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f176:	697b      	ldr	r3, [r7, #20]
	}
 800f178:	4618      	mov	r0, r3
 800f17a:	3728      	adds	r7, #40	@ 0x28
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f180:	b580      	push	{r7, lr}
 800f182:	b08c      	sub	sp, #48	@ 0x30
 800f184:	af04      	add	r7, sp, #16
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	60b9      	str	r1, [r7, #8]
 800f18a:	603b      	str	r3, [r7, #0]
 800f18c:	4613      	mov	r3, r2
 800f18e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f190:	88fb      	ldrh	r3, [r7, #6]
 800f192:	009b      	lsls	r3, r3, #2
 800f194:	4618      	mov	r0, r3
 800f196:	f001 fe2f 	bl	8010df8 <pvPortMalloc>
 800f19a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d00e      	beq.n	800f1c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f1a2:	20b0      	movs	r0, #176	@ 0xb0
 800f1a4:	f001 fe28 	bl	8010df8 <pvPortMalloc>
 800f1a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f1aa:	69fb      	ldr	r3, [r7, #28]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d003      	beq.n	800f1b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	697a      	ldr	r2, [r7, #20]
 800f1b4:	631a      	str	r2, [r3, #48]	@ 0x30
 800f1b6:	e005      	b.n	800f1c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f1b8:	6978      	ldr	r0, [r7, #20]
 800f1ba:	f001 feeb 	bl	8010f94 <vPortFree>
 800f1be:	e001      	b.n	800f1c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d017      	beq.n	800f1fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f1d2:	88fa      	ldrh	r2, [r7, #6]
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	9303      	str	r3, [sp, #12]
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	9302      	str	r3, [sp, #8]
 800f1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1de:	9301      	str	r3, [sp, #4]
 800f1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e2:	9300      	str	r3, [sp, #0]
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	68b9      	ldr	r1, [r7, #8]
 800f1e8:	68f8      	ldr	r0, [r7, #12]
 800f1ea:	f000 f80f 	bl	800f20c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f1ee:	69f8      	ldr	r0, [r7, #28]
 800f1f0:	f000 f8bc 	bl	800f36c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	61bb      	str	r3, [r7, #24]
 800f1f8:	e002      	b.n	800f200 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f1fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f1fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f200:	69bb      	ldr	r3, [r7, #24]
	}
 800f202:	4618      	mov	r0, r3
 800f204:	3720      	adds	r7, #32
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
	...

0800f20c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b088      	sub	sp, #32
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	607a      	str	r2, [r7, #4]
 800f218:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f21c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	009b      	lsls	r3, r3, #2
 800f222:	461a      	mov	r2, r3
 800f224:	21a5      	movs	r1, #165	@ 0xa5
 800f226:	f005 fc8f 	bl	8014b48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f22c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f22e:	6879      	ldr	r1, [r7, #4]
 800f230:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f234:	440b      	add	r3, r1
 800f236:	009b      	lsls	r3, r3, #2
 800f238:	4413      	add	r3, r2
 800f23a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f23c:	69bb      	ldr	r3, [r7, #24]
 800f23e:	f023 0307 	bic.w	r3, r3, #7
 800f242:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f244:	69bb      	ldr	r3, [r7, #24]
 800f246:	f003 0307 	and.w	r3, r3, #7
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d00d      	beq.n	800f26a <prvInitialiseNewTask+0x5e>
	__asm volatile
 800f24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f252:	b672      	cpsid	i
 800f254:	f383 8811 	msr	BASEPRI, r3
 800f258:	f3bf 8f6f 	isb	sy
 800f25c:	f3bf 8f4f 	dsb	sy
 800f260:	b662      	cpsie	i
 800f262:	617b      	str	r3, [r7, #20]
}
 800f264:	bf00      	nop
 800f266:	bf00      	nop
 800f268:	e7fd      	b.n	800f266 <prvInitialiseNewTask+0x5a>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800f26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f26c:	69ba      	ldr	r2, [r7, #24]
 800f26e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d01f      	beq.n	800f2b6 <prvInitialiseNewTask+0xaa>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f276:	2300      	movs	r3, #0
 800f278:	61fb      	str	r3, [r7, #28]
 800f27a:	e012      	b.n	800f2a2 <prvInitialiseNewTask+0x96>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f27c:	68ba      	ldr	r2, [r7, #8]
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	4413      	add	r3, r2
 800f282:	7819      	ldrb	r1, [r3, #0]
 800f284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f286:	69fb      	ldr	r3, [r7, #28]
 800f288:	4413      	add	r3, r2
 800f28a:	3334      	adds	r3, #52	@ 0x34
 800f28c:	460a      	mov	r2, r1
 800f28e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f290:	68ba      	ldr	r2, [r7, #8]
 800f292:	69fb      	ldr	r3, [r7, #28]
 800f294:	4413      	add	r3, r2
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d006      	beq.n	800f2aa <prvInitialiseNewTask+0x9e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f29c:	69fb      	ldr	r3, [r7, #28]
 800f29e:	3301      	adds	r3, #1
 800f2a0:	61fb      	str	r3, [r7, #28]
 800f2a2:	69fb      	ldr	r3, [r7, #28]
 800f2a4:	2b0f      	cmp	r3, #15
 800f2a6:	d9e9      	bls.n	800f27c <prvInitialiseNewTask+0x70>
 800f2a8:	e000      	b.n	800f2ac <prvInitialiseNewTask+0xa0>
			{
				break;
 800f2aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f2ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f2b4:	e003      	b.n	800f2be <prvInitialiseNewTask+0xb2>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2c0:	2b37      	cmp	r3, #55	@ 0x37
 800f2c2:	d901      	bls.n	800f2c8 <prvInitialiseNewTask+0xbc>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f2c4:	2337      	movs	r3, #55	@ 0x37
 800f2c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f2cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f2d2:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800f2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2dc:	3304      	adds	r3, #4
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f7fe fddf 	bl	800dea2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2e6:	3318      	adds	r3, #24
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7fe fdda 	bl	800dea2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f2f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2f6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f302:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800f304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f306:	2200      	movs	r2, #0
 800f308:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f30c:	2200      	movs	r2, #0
 800f30e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f314:	2200      	movs	r2, #0
 800f316:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f31c:	335c      	adds	r3, #92	@ 0x5c
 800f31e:	224c      	movs	r2, #76	@ 0x4c
 800f320:	2100      	movs	r1, #0
 800f322:	4618      	mov	r0, r3
 800f324:	f005 fc10 	bl	8014b48 <memset>
 800f328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f32a:	4a0d      	ldr	r2, [pc, #52]	@ (800f360 <prvInitialiseNewTask+0x154>)
 800f32c:	661a      	str	r2, [r3, #96]	@ 0x60
 800f32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f330:	4a0c      	ldr	r2, [pc, #48]	@ (800f364 <prvInitialiseNewTask+0x158>)
 800f332:	665a      	str	r2, [r3, #100]	@ 0x64
 800f334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f336:	4a0c      	ldr	r2, [pc, #48]	@ (800f368 <prvInitialiseNewTask+0x15c>)
 800f338:	669a      	str	r2, [r3, #104]	@ 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f33a:	683a      	ldr	r2, [r7, #0]
 800f33c:	68f9      	ldr	r1, [r7, #12]
 800f33e:	69b8      	ldr	r0, [r7, #24]
 800f340:	f001 fb1c 	bl	801097c <pxPortInitialiseStack>
 800f344:	4602      	mov	r2, r0
 800f346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f348:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d002      	beq.n	800f356 <prvInitialiseNewTask+0x14a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f354:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f356:	bf00      	nop
 800f358:	3720      	adds	r7, #32
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	2000d8e0 	.word	0x2000d8e0
 800f364:	2000d948 	.word	0x2000d948
 800f368:	2000d9b0 	.word	0x2000d9b0

0800f36c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b082      	sub	sp, #8
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f374:	f001 fc12 	bl	8010b9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f378:	4b2d      	ldr	r3, [pc, #180]	@ (800f430 <prvAddNewTaskToReadyList+0xc4>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	3301      	adds	r3, #1
 800f37e:	4a2c      	ldr	r2, [pc, #176]	@ (800f430 <prvAddNewTaskToReadyList+0xc4>)
 800f380:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f382:	4b2c      	ldr	r3, [pc, #176]	@ (800f434 <prvAddNewTaskToReadyList+0xc8>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d109      	bne.n	800f39e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f38a:	4a2a      	ldr	r2, [pc, #168]	@ (800f434 <prvAddNewTaskToReadyList+0xc8>)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f390:	4b27      	ldr	r3, [pc, #156]	@ (800f430 <prvAddNewTaskToReadyList+0xc4>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	2b01      	cmp	r3, #1
 800f396:	d110      	bne.n	800f3ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f398:	f000 fcd8 	bl	800fd4c <prvInitialiseTaskLists>
 800f39c:	e00d      	b.n	800f3ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f39e:	4b26      	ldr	r3, [pc, #152]	@ (800f438 <prvAddNewTaskToReadyList+0xcc>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d109      	bne.n	800f3ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f3a6:	4b23      	ldr	r3, [pc, #140]	@ (800f434 <prvAddNewTaskToReadyList+0xc8>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d802      	bhi.n	800f3ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f3b4:	4a1f      	ldr	r2, [pc, #124]	@ (800f434 <prvAddNewTaskToReadyList+0xc8>)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f3ba:	4b20      	ldr	r3, [pc, #128]	@ (800f43c <prvAddNewTaskToReadyList+0xd0>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	3301      	adds	r3, #1
 800f3c0:	4a1e      	ldr	r2, [pc, #120]	@ (800f43c <prvAddNewTaskToReadyList+0xd0>)
 800f3c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f3c4:	4b1d      	ldr	r3, [pc, #116]	@ (800f43c <prvAddNewTaskToReadyList+0xd0>)
 800f3c6:	681a      	ldr	r2, [r3, #0]
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3d0:	4b1b      	ldr	r3, [pc, #108]	@ (800f440 <prvAddNewTaskToReadyList+0xd4>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d903      	bls.n	800f3e0 <prvAddNewTaskToReadyList+0x74>
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3dc:	4a18      	ldr	r2, [pc, #96]	@ (800f440 <prvAddNewTaskToReadyList+0xd4>)
 800f3de:	6013      	str	r3, [r2, #0]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3e4:	4613      	mov	r3, r2
 800f3e6:	009b      	lsls	r3, r3, #2
 800f3e8:	4413      	add	r3, r2
 800f3ea:	009b      	lsls	r3, r3, #2
 800f3ec:	4a15      	ldr	r2, [pc, #84]	@ (800f444 <prvAddNewTaskToReadyList+0xd8>)
 800f3ee:	441a      	add	r2, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	3304      	adds	r3, #4
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	4610      	mov	r0, r2
 800f3f8:	f7fe fd60 	bl	800debc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f3fc:	f001 fc04 	bl	8010c08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f400:	4b0d      	ldr	r3, [pc, #52]	@ (800f438 <prvAddNewTaskToReadyList+0xcc>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d00e      	beq.n	800f426 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f408:	4b0a      	ldr	r3, [pc, #40]	@ (800f434 <prvAddNewTaskToReadyList+0xc8>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f412:	429a      	cmp	r2, r3
 800f414:	d207      	bcs.n	800f426 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f416:	4b0c      	ldr	r3, [pc, #48]	@ (800f448 <prvAddNewTaskToReadyList+0xdc>)
 800f418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f41c:	601a      	str	r2, [r3, #0]
 800f41e:	f3bf 8f4f 	dsb	sy
 800f422:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f426:	bf00      	nop
 800f428:	3708      	adds	r7, #8
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}
 800f42e:	bf00      	nop
 800f430:	20008bc4 	.word	0x20008bc4
 800f434:	200086f0 	.word	0x200086f0
 800f438:	20008bd0 	.word	0x20008bd0
 800f43c:	20008be0 	.word	0x20008be0
 800f440:	20008bcc 	.word	0x20008bcc
 800f444:	200086f4 	.word	0x200086f4
 800f448:	e000ed04 	.word	0xe000ed04

0800f44c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b08a      	sub	sp, #40	@ 0x28
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800f456:	2300      	movs	r3, #0
 800f458:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d10d      	bne.n	800f47c <vTaskDelayUntil+0x30>
	__asm volatile
 800f460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f464:	b672      	cpsid	i
 800f466:	f383 8811 	msr	BASEPRI, r3
 800f46a:	f3bf 8f6f 	isb	sy
 800f46e:	f3bf 8f4f 	dsb	sy
 800f472:	b662      	cpsie	i
 800f474:	617b      	str	r3, [r7, #20]
}
 800f476:	bf00      	nop
 800f478:	bf00      	nop
 800f47a:	e7fd      	b.n	800f478 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d10d      	bne.n	800f49e <vTaskDelayUntil+0x52>
	__asm volatile
 800f482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f486:	b672      	cpsid	i
 800f488:	f383 8811 	msr	BASEPRI, r3
 800f48c:	f3bf 8f6f 	isb	sy
 800f490:	f3bf 8f4f 	dsb	sy
 800f494:	b662      	cpsie	i
 800f496:	613b      	str	r3, [r7, #16]
}
 800f498:	bf00      	nop
 800f49a:	bf00      	nop
 800f49c:	e7fd      	b.n	800f49a <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 800f49e:	4b2b      	ldr	r3, [pc, #172]	@ (800f54c <vTaskDelayUntil+0x100>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d00d      	beq.n	800f4c2 <vTaskDelayUntil+0x76>
	__asm volatile
 800f4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4aa:	b672      	cpsid	i
 800f4ac:	f383 8811 	msr	BASEPRI, r3
 800f4b0:	f3bf 8f6f 	isb	sy
 800f4b4:	f3bf 8f4f 	dsb	sy
 800f4b8:	b662      	cpsie	i
 800f4ba:	60fb      	str	r3, [r7, #12]
}
 800f4bc:	bf00      	nop
 800f4be:	bf00      	nop
 800f4c0:	e7fd      	b.n	800f4be <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 800f4c2:	f000 f8bf 	bl	800f644 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800f4c6:	4b22      	ldr	r3, [pc, #136]	@ (800f550 <vTaskDelayUntil+0x104>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	683a      	ldr	r2, [r7, #0]
 800f4d2:	4413      	add	r3, r2
 800f4d4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	6a3a      	ldr	r2, [r7, #32]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d20b      	bcs.n	800f4f8 <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	69fa      	ldr	r2, [r7, #28]
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d211      	bcs.n	800f50e <vTaskDelayUntil+0xc2>
 800f4ea:	69fa      	ldr	r2, [r7, #28]
 800f4ec:	6a3b      	ldr	r3, [r7, #32]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d90d      	bls.n	800f50e <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800f4f6:	e00a      	b.n	800f50e <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	69fa      	ldr	r2, [r7, #28]
 800f4fe:	429a      	cmp	r2, r3
 800f500:	d303      	bcc.n	800f50a <vTaskDelayUntil+0xbe>
 800f502:	69fa      	ldr	r2, [r7, #28]
 800f504:	6a3b      	ldr	r3, [r7, #32]
 800f506:	429a      	cmp	r2, r3
 800f508:	d901      	bls.n	800f50e <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 800f50a:	2301      	movs	r3, #1
 800f50c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	69fa      	ldr	r2, [r7, #28]
 800f512:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800f514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f516:	2b00      	cmp	r3, #0
 800f518:	d006      	beq.n	800f528 <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800f51a:	69fa      	ldr	r2, [r7, #28]
 800f51c:	6a3b      	ldr	r3, [r7, #32]
 800f51e:	1ad3      	subs	r3, r2, r3
 800f520:	2100      	movs	r1, #0
 800f522:	4618      	mov	r0, r3
 800f524:	f000 fe6e 	bl	8010204 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800f528:	f000 f89a 	bl	800f660 <xTaskResumeAll>
 800f52c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d107      	bne.n	800f544 <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 800f534:	4b07      	ldr	r3, [pc, #28]	@ (800f554 <vTaskDelayUntil+0x108>)
 800f536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f53a:	601a      	str	r2, [r3, #0]
 800f53c:	f3bf 8f4f 	dsb	sy
 800f540:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f544:	bf00      	nop
 800f546:	3728      	adds	r7, #40	@ 0x28
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	20008bec 	.word	0x20008bec
 800f550:	20008bc8 	.word	0x20008bc8
 800f554:	e000ed04 	.word	0xe000ed04

0800f558 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b08a      	sub	sp, #40	@ 0x28
 800f55c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f55e:	2300      	movs	r3, #0
 800f560:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f562:	2300      	movs	r3, #0
 800f564:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f566:	463a      	mov	r2, r7
 800f568:	1d39      	adds	r1, r7, #4
 800f56a:	f107 0308 	add.w	r3, r7, #8
 800f56e:	4618      	mov	r0, r3
 800f570:	f7fe fbec 	bl	800dd4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f574:	6839      	ldr	r1, [r7, #0]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	68ba      	ldr	r2, [r7, #8]
 800f57a:	9202      	str	r2, [sp, #8]
 800f57c:	9301      	str	r3, [sp, #4]
 800f57e:	2300      	movs	r3, #0
 800f580:	9300      	str	r3, [sp, #0]
 800f582:	2300      	movs	r3, #0
 800f584:	460a      	mov	r2, r1
 800f586:	4927      	ldr	r1, [pc, #156]	@ (800f624 <vTaskStartScheduler+0xcc>)
 800f588:	4827      	ldr	r0, [pc, #156]	@ (800f628 <vTaskStartScheduler+0xd0>)
 800f58a:	f7ff fd93 	bl	800f0b4 <xTaskCreateStatic>
 800f58e:	4603      	mov	r3, r0
 800f590:	4a26      	ldr	r2, [pc, #152]	@ (800f62c <vTaskStartScheduler+0xd4>)
 800f592:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f594:	4b25      	ldr	r3, [pc, #148]	@ (800f62c <vTaskStartScheduler+0xd4>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d002      	beq.n	800f5a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f59c:	2301      	movs	r3, #1
 800f59e:	617b      	str	r3, [r7, #20]
 800f5a0:	e001      	b.n	800f5a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	2b01      	cmp	r3, #1
 800f5aa:	d102      	bne.n	800f5b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f5ac:	f000 fe7e 	bl	80102ac <xTimerCreateTimerTask>
 800f5b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	2b01      	cmp	r3, #1
 800f5b6:	d11f      	bne.n	800f5f8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800f5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5bc:	b672      	cpsid	i
 800f5be:	f383 8811 	msr	BASEPRI, r3
 800f5c2:	f3bf 8f6f 	isb	sy
 800f5c6:	f3bf 8f4f 	dsb	sy
 800f5ca:	b662      	cpsie	i
 800f5cc:	613b      	str	r3, [r7, #16]
}
 800f5ce:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f5d0:	4b17      	ldr	r3, [pc, #92]	@ (800f630 <vTaskStartScheduler+0xd8>)
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	335c      	adds	r3, #92	@ 0x5c
 800f5d6:	4a17      	ldr	r2, [pc, #92]	@ (800f634 <vTaskStartScheduler+0xdc>)
 800f5d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f5da:	4b17      	ldr	r3, [pc, #92]	@ (800f638 <vTaskStartScheduler+0xe0>)
 800f5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f5e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f5e2:	4b16      	ldr	r3, [pc, #88]	@ (800f63c <vTaskStartScheduler+0xe4>)
 800f5e4:	2201      	movs	r2, #1
 800f5e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f5e8:	4b15      	ldr	r3, [pc, #84]	@ (800f640 <vTaskStartScheduler+0xe8>)
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f5ee:	f7f2 fbcf 	bl	8001d90 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f5f2:	f001 fa55 	bl	8010aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f5f6:	e011      	b.n	800f61c <vTaskStartScheduler+0xc4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5fe:	d10d      	bne.n	800f61c <vTaskStartScheduler+0xc4>
	__asm volatile
 800f600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f604:	b672      	cpsid	i
 800f606:	f383 8811 	msr	BASEPRI, r3
 800f60a:	f3bf 8f6f 	isb	sy
 800f60e:	f3bf 8f4f 	dsb	sy
 800f612:	b662      	cpsie	i
 800f614:	60fb      	str	r3, [r7, #12]
}
 800f616:	bf00      	nop
 800f618:	bf00      	nop
 800f61a:	e7fd      	b.n	800f618 <vTaskStartScheduler+0xc0>
}
 800f61c:	bf00      	nop
 800f61e:	3718      	adds	r7, #24
 800f620:	46bd      	mov	sp, r7
 800f622:	bd80      	pop	{r7, pc}
 800f624:	08016cf4 	.word	0x08016cf4
 800f628:	0800fd19 	.word	0x0800fd19
 800f62c:	20008be8 	.word	0x20008be8
 800f630:	200086f0 	.word	0x200086f0
 800f634:	200000fc 	.word	0x200000fc
 800f638:	20008be4 	.word	0x20008be4
 800f63c:	20008bd0 	.word	0x20008bd0
 800f640:	20008bc8 	.word	0x20008bc8

0800f644 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f644:	b480      	push	{r7}
 800f646:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f648:	4b04      	ldr	r3, [pc, #16]	@ (800f65c <vTaskSuspendAll+0x18>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	3301      	adds	r3, #1
 800f64e:	4a03      	ldr	r2, [pc, #12]	@ (800f65c <vTaskSuspendAll+0x18>)
 800f650:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f652:	bf00      	nop
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr
 800f65c:	20008bec 	.word	0x20008bec

0800f660 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b084      	sub	sp, #16
 800f664:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f666:	2300      	movs	r3, #0
 800f668:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f66a:	2300      	movs	r3, #0
 800f66c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f66e:	4b43      	ldr	r3, [pc, #268]	@ (800f77c <xTaskResumeAll+0x11c>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d10d      	bne.n	800f692 <xTaskResumeAll+0x32>
	__asm volatile
 800f676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f67a:	b672      	cpsid	i
 800f67c:	f383 8811 	msr	BASEPRI, r3
 800f680:	f3bf 8f6f 	isb	sy
 800f684:	f3bf 8f4f 	dsb	sy
 800f688:	b662      	cpsie	i
 800f68a:	603b      	str	r3, [r7, #0]
}
 800f68c:	bf00      	nop
 800f68e:	bf00      	nop
 800f690:	e7fd      	b.n	800f68e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f692:	f001 fa83 	bl	8010b9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f696:	4b39      	ldr	r3, [pc, #228]	@ (800f77c <xTaskResumeAll+0x11c>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	3b01      	subs	r3, #1
 800f69c:	4a37      	ldr	r2, [pc, #220]	@ (800f77c <xTaskResumeAll+0x11c>)
 800f69e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6a0:	4b36      	ldr	r3, [pc, #216]	@ (800f77c <xTaskResumeAll+0x11c>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d162      	bne.n	800f76e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f6a8:	4b35      	ldr	r3, [pc, #212]	@ (800f780 <xTaskResumeAll+0x120>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d05e      	beq.n	800f76e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f6b0:	e02f      	b.n	800f712 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6b2:	4b34      	ldr	r3, [pc, #208]	@ (800f784 <xTaskResumeAll+0x124>)
 800f6b4:	68db      	ldr	r3, [r3, #12]
 800f6b6:	68db      	ldr	r3, [r3, #12]
 800f6b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	3318      	adds	r3, #24
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7fe fc59 	bl	800df76 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	3304      	adds	r3, #4
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7fe fc54 	bl	800df76 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6d2:	4b2d      	ldr	r3, [pc, #180]	@ (800f788 <xTaskResumeAll+0x128>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d903      	bls.n	800f6e2 <xTaskResumeAll+0x82>
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6de:	4a2a      	ldr	r2, [pc, #168]	@ (800f788 <xTaskResumeAll+0x128>)
 800f6e0:	6013      	str	r3, [r2, #0]
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f6e6:	4613      	mov	r3, r2
 800f6e8:	009b      	lsls	r3, r3, #2
 800f6ea:	4413      	add	r3, r2
 800f6ec:	009b      	lsls	r3, r3, #2
 800f6ee:	4a27      	ldr	r2, [pc, #156]	@ (800f78c <xTaskResumeAll+0x12c>)
 800f6f0:	441a      	add	r2, r3
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	3304      	adds	r3, #4
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	4610      	mov	r0, r2
 800f6fa:	f7fe fbdf 	bl	800debc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f702:	4b23      	ldr	r3, [pc, #140]	@ (800f790 <xTaskResumeAll+0x130>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f708:	429a      	cmp	r2, r3
 800f70a:	d302      	bcc.n	800f712 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800f70c:	4b21      	ldr	r3, [pc, #132]	@ (800f794 <xTaskResumeAll+0x134>)
 800f70e:	2201      	movs	r2, #1
 800f710:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f712:	4b1c      	ldr	r3, [pc, #112]	@ (800f784 <xTaskResumeAll+0x124>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d1cb      	bne.n	800f6b2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d001      	beq.n	800f724 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f720:	f000 fbba 	bl	800fe98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f724:	4b1c      	ldr	r3, [pc, #112]	@ (800f798 <xTaskResumeAll+0x138>)
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d010      	beq.n	800f752 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f730:	f000 f846 	bl	800f7c0 <xTaskIncrementTick>
 800f734:	4603      	mov	r3, r0
 800f736:	2b00      	cmp	r3, #0
 800f738:	d002      	beq.n	800f740 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800f73a:	4b16      	ldr	r3, [pc, #88]	@ (800f794 <xTaskResumeAll+0x134>)
 800f73c:	2201      	movs	r2, #1
 800f73e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	3b01      	subs	r3, #1
 800f744:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d1f1      	bne.n	800f730 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800f74c:	4b12      	ldr	r3, [pc, #72]	@ (800f798 <xTaskResumeAll+0x138>)
 800f74e:	2200      	movs	r2, #0
 800f750:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f752:	4b10      	ldr	r3, [pc, #64]	@ (800f794 <xTaskResumeAll+0x134>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d009      	beq.n	800f76e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f75a:	2301      	movs	r3, #1
 800f75c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f75e:	4b0f      	ldr	r3, [pc, #60]	@ (800f79c <xTaskResumeAll+0x13c>)
 800f760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f764:	601a      	str	r2, [r3, #0]
 800f766:	f3bf 8f4f 	dsb	sy
 800f76a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f76e:	f001 fa4b 	bl	8010c08 <vPortExitCritical>

	return xAlreadyYielded;
 800f772:	68bb      	ldr	r3, [r7, #8]
}
 800f774:	4618      	mov	r0, r3
 800f776:	3710      	adds	r7, #16
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}
 800f77c:	20008bec 	.word	0x20008bec
 800f780:	20008bc4 	.word	0x20008bc4
 800f784:	20008b84 	.word	0x20008b84
 800f788:	20008bcc 	.word	0x20008bcc
 800f78c:	200086f4 	.word	0x200086f4
 800f790:	200086f0 	.word	0x200086f0
 800f794:	20008bd8 	.word	0x20008bd8
 800f798:	20008bd4 	.word	0x20008bd4
 800f79c:	e000ed04 	.word	0xe000ed04

0800f7a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b083      	sub	sp, #12
 800f7a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f7a6:	4b05      	ldr	r3, [pc, #20]	@ (800f7bc <xTaskGetTickCount+0x1c>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f7ac:	687b      	ldr	r3, [r7, #4]
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	370c      	adds	r7, #12
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b8:	4770      	bx	lr
 800f7ba:	bf00      	nop
 800f7bc:	20008bc8 	.word	0x20008bc8

0800f7c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b086      	sub	sp, #24
 800f7c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7ca:	4b50      	ldr	r3, [pc, #320]	@ (800f90c <xTaskIncrementTick+0x14c>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	f040 808c 	bne.w	800f8ec <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f7d4:	4b4e      	ldr	r3, [pc, #312]	@ (800f910 <xTaskIncrementTick+0x150>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	3301      	adds	r3, #1
 800f7da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f7dc:	4a4c      	ldr	r2, [pc, #304]	@ (800f910 <xTaskIncrementTick+0x150>)
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d123      	bne.n	800f830 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800f7e8:	4b4a      	ldr	r3, [pc, #296]	@ (800f914 <xTaskIncrementTick+0x154>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00d      	beq.n	800f80e <xTaskIncrementTick+0x4e>
	__asm volatile
 800f7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7f6:	b672      	cpsid	i
 800f7f8:	f383 8811 	msr	BASEPRI, r3
 800f7fc:	f3bf 8f6f 	isb	sy
 800f800:	f3bf 8f4f 	dsb	sy
 800f804:	b662      	cpsie	i
 800f806:	603b      	str	r3, [r7, #0]
}
 800f808:	bf00      	nop
 800f80a:	bf00      	nop
 800f80c:	e7fd      	b.n	800f80a <xTaskIncrementTick+0x4a>
 800f80e:	4b41      	ldr	r3, [pc, #260]	@ (800f914 <xTaskIncrementTick+0x154>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	60fb      	str	r3, [r7, #12]
 800f814:	4b40      	ldr	r3, [pc, #256]	@ (800f918 <xTaskIncrementTick+0x158>)
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	4a3e      	ldr	r2, [pc, #248]	@ (800f914 <xTaskIncrementTick+0x154>)
 800f81a:	6013      	str	r3, [r2, #0]
 800f81c:	4a3e      	ldr	r2, [pc, #248]	@ (800f918 <xTaskIncrementTick+0x158>)
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	6013      	str	r3, [r2, #0]
 800f822:	4b3e      	ldr	r3, [pc, #248]	@ (800f91c <xTaskIncrementTick+0x15c>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	3301      	adds	r3, #1
 800f828:	4a3c      	ldr	r2, [pc, #240]	@ (800f91c <xTaskIncrementTick+0x15c>)
 800f82a:	6013      	str	r3, [r2, #0]
 800f82c:	f000 fb34 	bl	800fe98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f830:	4b3b      	ldr	r3, [pc, #236]	@ (800f920 <xTaskIncrementTick+0x160>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	693a      	ldr	r2, [r7, #16]
 800f836:	429a      	cmp	r2, r3
 800f838:	d349      	bcc.n	800f8ce <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f83a:	4b36      	ldr	r3, [pc, #216]	@ (800f914 <xTaskIncrementTick+0x154>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d104      	bne.n	800f84e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f844:	4b36      	ldr	r3, [pc, #216]	@ (800f920 <xTaskIncrementTick+0x160>)
 800f846:	f04f 32ff 	mov.w	r2, #4294967295
 800f84a:	601a      	str	r2, [r3, #0]
					break;
 800f84c:	e03f      	b.n	800f8ce <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f84e:	4b31      	ldr	r3, [pc, #196]	@ (800f914 <xTaskIncrementTick+0x154>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	68db      	ldr	r3, [r3, #12]
 800f856:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f85e:	693a      	ldr	r2, [r7, #16]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	429a      	cmp	r2, r3
 800f864:	d203      	bcs.n	800f86e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f866:	4a2e      	ldr	r2, [pc, #184]	@ (800f920 <xTaskIncrementTick+0x160>)
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f86c:	e02f      	b.n	800f8ce <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	3304      	adds	r3, #4
 800f872:	4618      	mov	r0, r3
 800f874:	f7fe fb7f 	bl	800df76 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d004      	beq.n	800f88a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	3318      	adds	r3, #24
 800f884:	4618      	mov	r0, r3
 800f886:	f7fe fb76 	bl	800df76 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f88e:	4b25      	ldr	r3, [pc, #148]	@ (800f924 <xTaskIncrementTick+0x164>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	429a      	cmp	r2, r3
 800f894:	d903      	bls.n	800f89e <xTaskIncrementTick+0xde>
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f89a:	4a22      	ldr	r2, [pc, #136]	@ (800f924 <xTaskIncrementTick+0x164>)
 800f89c:	6013      	str	r3, [r2, #0]
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8a2:	4613      	mov	r3, r2
 800f8a4:	009b      	lsls	r3, r3, #2
 800f8a6:	4413      	add	r3, r2
 800f8a8:	009b      	lsls	r3, r3, #2
 800f8aa:	4a1f      	ldr	r2, [pc, #124]	@ (800f928 <xTaskIncrementTick+0x168>)
 800f8ac:	441a      	add	r2, r3
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	3304      	adds	r3, #4
 800f8b2:	4619      	mov	r1, r3
 800f8b4:	4610      	mov	r0, r2
 800f8b6:	f7fe fb01 	bl	800debc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8be:	4b1b      	ldr	r3, [pc, #108]	@ (800f92c <xTaskIncrementTick+0x16c>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d3b8      	bcc.n	800f83a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8cc:	e7b5      	b.n	800f83a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f8ce:	4b17      	ldr	r3, [pc, #92]	@ (800f92c <xTaskIncrementTick+0x16c>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8d4:	4914      	ldr	r1, [pc, #80]	@ (800f928 <xTaskIncrementTick+0x168>)
 800f8d6:	4613      	mov	r3, r2
 800f8d8:	009b      	lsls	r3, r3, #2
 800f8da:	4413      	add	r3, r2
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	440b      	add	r3, r1
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	2b01      	cmp	r3, #1
 800f8e4:	d907      	bls.n	800f8f6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	617b      	str	r3, [r7, #20]
 800f8ea:	e004      	b.n	800f8f6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f8ec:	4b10      	ldr	r3, [pc, #64]	@ (800f930 <xTaskIncrementTick+0x170>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	3301      	adds	r3, #1
 800f8f2:	4a0f      	ldr	r2, [pc, #60]	@ (800f930 <xTaskIncrementTick+0x170>)
 800f8f4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f8f6:	4b0f      	ldr	r3, [pc, #60]	@ (800f934 <xTaskIncrementTick+0x174>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d001      	beq.n	800f902 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800f8fe:	2301      	movs	r3, #1
 800f900:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f902:	697b      	ldr	r3, [r7, #20]
}
 800f904:	4618      	mov	r0, r3
 800f906:	3718      	adds	r7, #24
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}
 800f90c:	20008bec 	.word	0x20008bec
 800f910:	20008bc8 	.word	0x20008bc8
 800f914:	20008b7c 	.word	0x20008b7c
 800f918:	20008b80 	.word	0x20008b80
 800f91c:	20008bdc 	.word	0x20008bdc
 800f920:	20008be4 	.word	0x20008be4
 800f924:	20008bcc 	.word	0x20008bcc
 800f928:	200086f4 	.word	0x200086f4
 800f92c:	200086f0 	.word	0x200086f0
 800f930:	20008bd4 	.word	0x20008bd4
 800f934:	20008bd8 	.word	0x20008bd8

0800f938 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b086      	sub	sp, #24
 800f93c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f93e:	4b4b      	ldr	r3, [pc, #300]	@ (800fa6c <vTaskSwitchContext+0x134>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d003      	beq.n	800f94e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f946:	4b4a      	ldr	r3, [pc, #296]	@ (800fa70 <vTaskSwitchContext+0x138>)
 800f948:	2201      	movs	r2, #1
 800f94a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f94c:	e089      	b.n	800fa62 <vTaskSwitchContext+0x12a>
		xYieldPending = pdFALSE;
 800f94e:	4b48      	ldr	r3, [pc, #288]	@ (800fa70 <vTaskSwitchContext+0x138>)
 800f950:	2200      	movs	r2, #0
 800f952:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f954:	f7f2 fa23 	bl	8001d9e <getRunTimeCounterValue>
 800f958:	4603      	mov	r3, r0
 800f95a:	4a46      	ldr	r2, [pc, #280]	@ (800fa74 <vTaskSwitchContext+0x13c>)
 800f95c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f95e:	4b45      	ldr	r3, [pc, #276]	@ (800fa74 <vTaskSwitchContext+0x13c>)
 800f960:	681a      	ldr	r2, [r3, #0]
 800f962:	4b45      	ldr	r3, [pc, #276]	@ (800fa78 <vTaskSwitchContext+0x140>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	429a      	cmp	r2, r3
 800f968:	d909      	bls.n	800f97e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f96a:	4b44      	ldr	r3, [pc, #272]	@ (800fa7c <vTaskSwitchContext+0x144>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800f970:	4a40      	ldr	r2, [pc, #256]	@ (800fa74 <vTaskSwitchContext+0x13c>)
 800f972:	6810      	ldr	r0, [r2, #0]
 800f974:	4a40      	ldr	r2, [pc, #256]	@ (800fa78 <vTaskSwitchContext+0x140>)
 800f976:	6812      	ldr	r2, [r2, #0]
 800f978:	1a82      	subs	r2, r0, r2
 800f97a:	440a      	add	r2, r1
 800f97c:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800f97e:	4b3d      	ldr	r3, [pc, #244]	@ (800fa74 <vTaskSwitchContext+0x13c>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	4a3d      	ldr	r2, [pc, #244]	@ (800fa78 <vTaskSwitchContext+0x140>)
 800f984:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f986:	4b3d      	ldr	r3, [pc, #244]	@ (800fa7c <vTaskSwitchContext+0x144>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f98c:	613b      	str	r3, [r7, #16]
 800f98e:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800f992:	60fb      	str	r3, [r7, #12]
 800f994:	693b      	ldr	r3, [r7, #16]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	68fa      	ldr	r2, [r7, #12]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d111      	bne.n	800f9c2 <vTaskSwitchContext+0x8a>
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	3304      	adds	r3, #4
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	68fa      	ldr	r2, [r7, #12]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d10b      	bne.n	800f9c2 <vTaskSwitchContext+0x8a>
 800f9aa:	693b      	ldr	r3, [r7, #16]
 800f9ac:	3308      	adds	r3, #8
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	68fa      	ldr	r2, [r7, #12]
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	d105      	bne.n	800f9c2 <vTaskSwitchContext+0x8a>
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	330c      	adds	r3, #12
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	68fa      	ldr	r2, [r7, #12]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d008      	beq.n	800f9d4 <vTaskSwitchContext+0x9c>
 800f9c2:	4b2e      	ldr	r3, [pc, #184]	@ (800fa7c <vTaskSwitchContext+0x144>)
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	4b2d      	ldr	r3, [pc, #180]	@ (800fa7c <vTaskSwitchContext+0x144>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	3334      	adds	r3, #52	@ 0x34
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	4610      	mov	r0, r2
 800f9d0:	f7f2 f9f8 	bl	8001dc4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9d4:	4b2a      	ldr	r3, [pc, #168]	@ (800fa80 <vTaskSwitchContext+0x148>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	617b      	str	r3, [r7, #20]
 800f9da:	e013      	b.n	800fa04 <vTaskSwitchContext+0xcc>
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d10d      	bne.n	800f9fe <vTaskSwitchContext+0xc6>
	__asm volatile
 800f9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9e6:	b672      	cpsid	i
 800f9e8:	f383 8811 	msr	BASEPRI, r3
 800f9ec:	f3bf 8f6f 	isb	sy
 800f9f0:	f3bf 8f4f 	dsb	sy
 800f9f4:	b662      	cpsie	i
 800f9f6:	607b      	str	r3, [r7, #4]
}
 800f9f8:	bf00      	nop
 800f9fa:	bf00      	nop
 800f9fc:	e7fd      	b.n	800f9fa <vTaskSwitchContext+0xc2>
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	3b01      	subs	r3, #1
 800fa02:	617b      	str	r3, [r7, #20]
 800fa04:	491f      	ldr	r1, [pc, #124]	@ (800fa84 <vTaskSwitchContext+0x14c>)
 800fa06:	697a      	ldr	r2, [r7, #20]
 800fa08:	4613      	mov	r3, r2
 800fa0a:	009b      	lsls	r3, r3, #2
 800fa0c:	4413      	add	r3, r2
 800fa0e:	009b      	lsls	r3, r3, #2
 800fa10:	440b      	add	r3, r1
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d0e1      	beq.n	800f9dc <vTaskSwitchContext+0xa4>
 800fa18:	697a      	ldr	r2, [r7, #20]
 800fa1a:	4613      	mov	r3, r2
 800fa1c:	009b      	lsls	r3, r3, #2
 800fa1e:	4413      	add	r3, r2
 800fa20:	009b      	lsls	r3, r3, #2
 800fa22:	4a18      	ldr	r2, [pc, #96]	@ (800fa84 <vTaskSwitchContext+0x14c>)
 800fa24:	4413      	add	r3, r2
 800fa26:	60bb      	str	r3, [r7, #8]
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	685b      	ldr	r3, [r3, #4]
 800fa2c:	685a      	ldr	r2, [r3, #4]
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	605a      	str	r2, [r3, #4]
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	685a      	ldr	r2, [r3, #4]
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	3308      	adds	r3, #8
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d104      	bne.n	800fa48 <vTaskSwitchContext+0x110>
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	685b      	ldr	r3, [r3, #4]
 800fa42:	685a      	ldr	r2, [r3, #4]
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	605a      	str	r2, [r3, #4]
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	68db      	ldr	r3, [r3, #12]
 800fa4e:	4a0b      	ldr	r2, [pc, #44]	@ (800fa7c <vTaskSwitchContext+0x144>)
 800fa50:	6013      	str	r3, [r2, #0]
 800fa52:	4a0b      	ldr	r2, [pc, #44]	@ (800fa80 <vTaskSwitchContext+0x148>)
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa58:	4b08      	ldr	r3, [pc, #32]	@ (800fa7c <vTaskSwitchContext+0x144>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	335c      	adds	r3, #92	@ 0x5c
 800fa5e:	4a0a      	ldr	r2, [pc, #40]	@ (800fa88 <vTaskSwitchContext+0x150>)
 800fa60:	6013      	str	r3, [r2, #0]
}
 800fa62:	bf00      	nop
 800fa64:	3718      	adds	r7, #24
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop
 800fa6c:	20008bec 	.word	0x20008bec
 800fa70:	20008bd8 	.word	0x20008bd8
 800fa74:	20008bf4 	.word	0x20008bf4
 800fa78:	20008bf0 	.word	0x20008bf0
 800fa7c:	200086f0 	.word	0x200086f0
 800fa80:	20008bcc 	.word	0x20008bcc
 800fa84:	200086f4 	.word	0x200086f4
 800fa88:	200000fc 	.word	0x200000fc

0800fa8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b084      	sub	sp, #16
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
 800fa94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d10d      	bne.n	800fab8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800fa9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faa0:	b672      	cpsid	i
 800faa2:	f383 8811 	msr	BASEPRI, r3
 800faa6:	f3bf 8f6f 	isb	sy
 800faaa:	f3bf 8f4f 	dsb	sy
 800faae:	b662      	cpsie	i
 800fab0:	60fb      	str	r3, [r7, #12]
}
 800fab2:	bf00      	nop
 800fab4:	bf00      	nop
 800fab6:	e7fd      	b.n	800fab4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fab8:	4b07      	ldr	r3, [pc, #28]	@ (800fad8 <vTaskPlaceOnEventList+0x4c>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	3318      	adds	r3, #24
 800fabe:	4619      	mov	r1, r3
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f7fe fa1f 	bl	800df04 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fac6:	2101      	movs	r1, #1
 800fac8:	6838      	ldr	r0, [r7, #0]
 800faca:	f000 fb9b 	bl	8010204 <prvAddCurrentTaskToDelayedList>
}
 800face:	bf00      	nop
 800fad0:	3710      	adds	r7, #16
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	200086f0 	.word	0x200086f0

0800fadc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b086      	sub	sp, #24
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d10d      	bne.n	800fb0a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800faee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faf2:	b672      	cpsid	i
 800faf4:	f383 8811 	msr	BASEPRI, r3
 800faf8:	f3bf 8f6f 	isb	sy
 800fafc:	f3bf 8f4f 	dsb	sy
 800fb00:	b662      	cpsie	i
 800fb02:	617b      	str	r3, [r7, #20]
}
 800fb04:	bf00      	nop
 800fb06:	bf00      	nop
 800fb08:	e7fd      	b.n	800fb06 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb0a:	4b0a      	ldr	r3, [pc, #40]	@ (800fb34 <vTaskPlaceOnEventListRestricted+0x58>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	3318      	adds	r3, #24
 800fb10:	4619      	mov	r1, r3
 800fb12:	68f8      	ldr	r0, [r7, #12]
 800fb14:	f7fe f9d2 	bl	800debc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d002      	beq.n	800fb24 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800fb1e:	f04f 33ff 	mov.w	r3, #4294967295
 800fb22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fb24:	6879      	ldr	r1, [r7, #4]
 800fb26:	68b8      	ldr	r0, [r7, #8]
 800fb28:	f000 fb6c 	bl	8010204 <prvAddCurrentTaskToDelayedList>
	}
 800fb2c:	bf00      	nop
 800fb2e:	3718      	adds	r7, #24
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}
 800fb34:	200086f0 	.word	0x200086f0

0800fb38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b086      	sub	sp, #24
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	68db      	ldr	r3, [r3, #12]
 800fb44:	68db      	ldr	r3, [r3, #12]
 800fb46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d10d      	bne.n	800fb6a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800fb4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb52:	b672      	cpsid	i
 800fb54:	f383 8811 	msr	BASEPRI, r3
 800fb58:	f3bf 8f6f 	isb	sy
 800fb5c:	f3bf 8f4f 	dsb	sy
 800fb60:	b662      	cpsie	i
 800fb62:	60fb      	str	r3, [r7, #12]
}
 800fb64:	bf00      	nop
 800fb66:	bf00      	nop
 800fb68:	e7fd      	b.n	800fb66 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	3318      	adds	r3, #24
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f7fe fa01 	bl	800df76 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb74:	4b1d      	ldr	r3, [pc, #116]	@ (800fbec <xTaskRemoveFromEventList+0xb4>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d11d      	bne.n	800fbb8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	3304      	adds	r3, #4
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7fe f9f8 	bl	800df76 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb8a:	4b19      	ldr	r3, [pc, #100]	@ (800fbf0 <xTaskRemoveFromEventList+0xb8>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d903      	bls.n	800fb9a <xTaskRemoveFromEventList+0x62>
 800fb92:	693b      	ldr	r3, [r7, #16]
 800fb94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb96:	4a16      	ldr	r2, [pc, #88]	@ (800fbf0 <xTaskRemoveFromEventList+0xb8>)
 800fb98:	6013      	str	r3, [r2, #0]
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb9e:	4613      	mov	r3, r2
 800fba0:	009b      	lsls	r3, r3, #2
 800fba2:	4413      	add	r3, r2
 800fba4:	009b      	lsls	r3, r3, #2
 800fba6:	4a13      	ldr	r2, [pc, #76]	@ (800fbf4 <xTaskRemoveFromEventList+0xbc>)
 800fba8:	441a      	add	r2, r3
 800fbaa:	693b      	ldr	r3, [r7, #16]
 800fbac:	3304      	adds	r3, #4
 800fbae:	4619      	mov	r1, r3
 800fbb0:	4610      	mov	r0, r2
 800fbb2:	f7fe f983 	bl	800debc <vListInsertEnd>
 800fbb6:	e005      	b.n	800fbc4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	3318      	adds	r3, #24
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	480e      	ldr	r0, [pc, #56]	@ (800fbf8 <xTaskRemoveFromEventList+0xc0>)
 800fbc0:	f7fe f97c 	bl	800debc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbc8:	4b0c      	ldr	r3, [pc, #48]	@ (800fbfc <xTaskRemoveFromEventList+0xc4>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	d905      	bls.n	800fbde <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fbd6:	4b0a      	ldr	r3, [pc, #40]	@ (800fc00 <xTaskRemoveFromEventList+0xc8>)
 800fbd8:	2201      	movs	r2, #1
 800fbda:	601a      	str	r2, [r3, #0]
 800fbdc:	e001      	b.n	800fbe2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fbe2:	697b      	ldr	r3, [r7, #20]
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3718      	adds	r7, #24
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	20008bec 	.word	0x20008bec
 800fbf0:	20008bcc 	.word	0x20008bcc
 800fbf4:	200086f4 	.word	0x200086f4
 800fbf8:	20008b84 	.word	0x20008b84
 800fbfc:	200086f0 	.word	0x200086f0
 800fc00:	20008bd8 	.word	0x20008bd8

0800fc04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fc04:	b480      	push	{r7}
 800fc06:	b083      	sub	sp, #12
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fc0c:	4b06      	ldr	r3, [pc, #24]	@ (800fc28 <vTaskInternalSetTimeOutState+0x24>)
 800fc0e:	681a      	ldr	r2, [r3, #0]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fc14:	4b05      	ldr	r3, [pc, #20]	@ (800fc2c <vTaskInternalSetTimeOutState+0x28>)
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	605a      	str	r2, [r3, #4]
}
 800fc1c:	bf00      	nop
 800fc1e:	370c      	adds	r7, #12
 800fc20:	46bd      	mov	sp, r7
 800fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc26:	4770      	bx	lr
 800fc28:	20008bdc 	.word	0x20008bdc
 800fc2c:	20008bc8 	.word	0x20008bc8

0800fc30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b088      	sub	sp, #32
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d10d      	bne.n	800fc5c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800fc40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc44:	b672      	cpsid	i
 800fc46:	f383 8811 	msr	BASEPRI, r3
 800fc4a:	f3bf 8f6f 	isb	sy
 800fc4e:	f3bf 8f4f 	dsb	sy
 800fc52:	b662      	cpsie	i
 800fc54:	613b      	str	r3, [r7, #16]
}
 800fc56:	bf00      	nop
 800fc58:	bf00      	nop
 800fc5a:	e7fd      	b.n	800fc58 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d10d      	bne.n	800fc7e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800fc62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc66:	b672      	cpsid	i
 800fc68:	f383 8811 	msr	BASEPRI, r3
 800fc6c:	f3bf 8f6f 	isb	sy
 800fc70:	f3bf 8f4f 	dsb	sy
 800fc74:	b662      	cpsie	i
 800fc76:	60fb      	str	r3, [r7, #12]
}
 800fc78:	bf00      	nop
 800fc7a:	bf00      	nop
 800fc7c:	e7fd      	b.n	800fc7a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800fc7e:	f000 ff8d 	bl	8010b9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fc82:	4b1d      	ldr	r3, [pc, #116]	@ (800fcf8 <xTaskCheckForTimeOut+0xc8>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	69ba      	ldr	r2, [r7, #24]
 800fc8e:	1ad3      	subs	r3, r2, r3
 800fc90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc9a:	d102      	bne.n	800fca2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	61fb      	str	r3, [r7, #28]
 800fca0:	e023      	b.n	800fcea <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	4b15      	ldr	r3, [pc, #84]	@ (800fcfc <xTaskCheckForTimeOut+0xcc>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d007      	beq.n	800fcbe <xTaskCheckForTimeOut+0x8e>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	685b      	ldr	r3, [r3, #4]
 800fcb2:	69ba      	ldr	r2, [r7, #24]
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d302      	bcc.n	800fcbe <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fcb8:	2301      	movs	r3, #1
 800fcba:	61fb      	str	r3, [r7, #28]
 800fcbc:	e015      	b.n	800fcea <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	697a      	ldr	r2, [r7, #20]
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d20b      	bcs.n	800fce0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	1ad2      	subs	r2, r2, r3
 800fcd0:	683b      	ldr	r3, [r7, #0]
 800fcd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f7ff ff95 	bl	800fc04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	61fb      	str	r3, [r7, #28]
 800fcde:	e004      	b.n	800fcea <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	2200      	movs	r2, #0
 800fce4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fce6:	2301      	movs	r3, #1
 800fce8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fcea:	f000 ff8d 	bl	8010c08 <vPortExitCritical>

	return xReturn;
 800fcee:	69fb      	ldr	r3, [r7, #28]
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3720      	adds	r7, #32
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}
 800fcf8:	20008bc8 	.word	0x20008bc8
 800fcfc:	20008bdc 	.word	0x20008bdc

0800fd00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fd00:	b480      	push	{r7}
 800fd02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fd04:	4b03      	ldr	r3, [pc, #12]	@ (800fd14 <vTaskMissedYield+0x14>)
 800fd06:	2201      	movs	r2, #1
 800fd08:	601a      	str	r2, [r3, #0]
}
 800fd0a:	bf00      	nop
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd12:	4770      	bx	lr
 800fd14:	20008bd8 	.word	0x20008bd8

0800fd18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b082      	sub	sp, #8
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fd20:	f000 f854 	bl	800fdcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fd24:	4b07      	ldr	r3, [pc, #28]	@ (800fd44 <prvIdleTask+0x2c>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	2b01      	cmp	r3, #1
 800fd2a:	d907      	bls.n	800fd3c <prvIdleTask+0x24>
			{
				taskYIELD();
 800fd2c:	4b06      	ldr	r3, [pc, #24]	@ (800fd48 <prvIdleTask+0x30>)
 800fd2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd32:	601a      	str	r2, [r3, #0]
 800fd34:	f3bf 8f4f 	dsb	sy
 800fd38:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800fd3c:	f7f2 f838 	bl	8001db0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800fd40:	e7ee      	b.n	800fd20 <prvIdleTask+0x8>
 800fd42:	bf00      	nop
 800fd44:	200086f4 	.word	0x200086f4
 800fd48:	e000ed04 	.word	0xe000ed04

0800fd4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b082      	sub	sp, #8
 800fd50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd52:	2300      	movs	r3, #0
 800fd54:	607b      	str	r3, [r7, #4]
 800fd56:	e00c      	b.n	800fd72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fd58:	687a      	ldr	r2, [r7, #4]
 800fd5a:	4613      	mov	r3, r2
 800fd5c:	009b      	lsls	r3, r3, #2
 800fd5e:	4413      	add	r3, r2
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	4a12      	ldr	r2, [pc, #72]	@ (800fdac <prvInitialiseTaskLists+0x60>)
 800fd64:	4413      	add	r3, r2
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7fe f87b 	bl	800de62 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	3301      	adds	r3, #1
 800fd70:	607b      	str	r3, [r7, #4]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2b37      	cmp	r3, #55	@ 0x37
 800fd76:	d9ef      	bls.n	800fd58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fd78:	480d      	ldr	r0, [pc, #52]	@ (800fdb0 <prvInitialiseTaskLists+0x64>)
 800fd7a:	f7fe f872 	bl	800de62 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fd7e:	480d      	ldr	r0, [pc, #52]	@ (800fdb4 <prvInitialiseTaskLists+0x68>)
 800fd80:	f7fe f86f 	bl	800de62 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fd84:	480c      	ldr	r0, [pc, #48]	@ (800fdb8 <prvInitialiseTaskLists+0x6c>)
 800fd86:	f7fe f86c 	bl	800de62 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fd8a:	480c      	ldr	r0, [pc, #48]	@ (800fdbc <prvInitialiseTaskLists+0x70>)
 800fd8c:	f7fe f869 	bl	800de62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fd90:	480b      	ldr	r0, [pc, #44]	@ (800fdc0 <prvInitialiseTaskLists+0x74>)
 800fd92:	f7fe f866 	bl	800de62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fd96:	4b0b      	ldr	r3, [pc, #44]	@ (800fdc4 <prvInitialiseTaskLists+0x78>)
 800fd98:	4a05      	ldr	r2, [pc, #20]	@ (800fdb0 <prvInitialiseTaskLists+0x64>)
 800fd9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fd9c:	4b0a      	ldr	r3, [pc, #40]	@ (800fdc8 <prvInitialiseTaskLists+0x7c>)
 800fd9e:	4a05      	ldr	r2, [pc, #20]	@ (800fdb4 <prvInitialiseTaskLists+0x68>)
 800fda0:	601a      	str	r2, [r3, #0]
}
 800fda2:	bf00      	nop
 800fda4:	3708      	adds	r7, #8
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	200086f4 	.word	0x200086f4
 800fdb0:	20008b54 	.word	0x20008b54
 800fdb4:	20008b68 	.word	0x20008b68
 800fdb8:	20008b84 	.word	0x20008b84
 800fdbc:	20008b98 	.word	0x20008b98
 800fdc0:	20008bb0 	.word	0x20008bb0
 800fdc4:	20008b7c 	.word	0x20008b7c
 800fdc8:	20008b80 	.word	0x20008b80

0800fdcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fdd2:	e019      	b.n	800fe08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fdd4:	f000 fee2 	bl	8010b9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdd8:	4b10      	ldr	r3, [pc, #64]	@ (800fe1c <prvCheckTasksWaitingTermination+0x50>)
 800fdda:	68db      	ldr	r3, [r3, #12]
 800fddc:	68db      	ldr	r3, [r3, #12]
 800fdde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	3304      	adds	r3, #4
 800fde4:	4618      	mov	r0, r3
 800fde6:	f7fe f8c6 	bl	800df76 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fdea:	4b0d      	ldr	r3, [pc, #52]	@ (800fe20 <prvCheckTasksWaitingTermination+0x54>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	3b01      	subs	r3, #1
 800fdf0:	4a0b      	ldr	r2, [pc, #44]	@ (800fe20 <prvCheckTasksWaitingTermination+0x54>)
 800fdf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fdf4:	4b0b      	ldr	r3, [pc, #44]	@ (800fe24 <prvCheckTasksWaitingTermination+0x58>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	3b01      	subs	r3, #1
 800fdfa:	4a0a      	ldr	r2, [pc, #40]	@ (800fe24 <prvCheckTasksWaitingTermination+0x58>)
 800fdfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fdfe:	f000 ff03 	bl	8010c08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f000 f810 	bl	800fe28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe08:	4b06      	ldr	r3, [pc, #24]	@ (800fe24 <prvCheckTasksWaitingTermination+0x58>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d1e1      	bne.n	800fdd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fe10:	bf00      	nop
 800fe12:	bf00      	nop
 800fe14:	3708      	adds	r7, #8
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	20008b98 	.word	0x20008b98
 800fe20:	20008bc4 	.word	0x20008bc4
 800fe24:	20008bac 	.word	0x20008bac

0800fe28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b084      	sub	sp, #16
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	335c      	adds	r3, #92	@ 0x5c
 800fe34:	4618      	mov	r0, r3
 800fe36:	f004 fea3 	bl	8014b80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d108      	bne.n	800fe56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f001 f8a3 	bl	8010f94 <vPortFree>
				vPortFree( pxTCB );
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f001 f8a0 	bl	8010f94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fe54:	e01b      	b.n	800fe8e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800fe5c:	2b01      	cmp	r3, #1
 800fe5e:	d103      	bne.n	800fe68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f001 f897 	bl	8010f94 <vPortFree>
	}
 800fe66:	e012      	b.n	800fe8e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800fe6e:	2b02      	cmp	r3, #2
 800fe70:	d00d      	beq.n	800fe8e <prvDeleteTCB+0x66>
	__asm volatile
 800fe72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe76:	b672      	cpsid	i
 800fe78:	f383 8811 	msr	BASEPRI, r3
 800fe7c:	f3bf 8f6f 	isb	sy
 800fe80:	f3bf 8f4f 	dsb	sy
 800fe84:	b662      	cpsie	i
 800fe86:	60fb      	str	r3, [r7, #12]
}
 800fe88:	bf00      	nop
 800fe8a:	bf00      	nop
 800fe8c:	e7fd      	b.n	800fe8a <prvDeleteTCB+0x62>
	}
 800fe8e:	bf00      	nop
 800fe90:	3710      	adds	r7, #16
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
	...

0800fe98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b083      	sub	sp, #12
 800fe9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe9e:	4b0c      	ldr	r3, [pc, #48]	@ (800fed0 <prvResetNextTaskUnblockTime+0x38>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d104      	bne.n	800feb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fea8:	4b0a      	ldr	r3, [pc, #40]	@ (800fed4 <prvResetNextTaskUnblockTime+0x3c>)
 800feaa:	f04f 32ff 	mov.w	r2, #4294967295
 800feae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800feb0:	e008      	b.n	800fec4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800feb2:	4b07      	ldr	r3, [pc, #28]	@ (800fed0 <prvResetNextTaskUnblockTime+0x38>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	68db      	ldr	r3, [r3, #12]
 800feba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	685b      	ldr	r3, [r3, #4]
 800fec0:	4a04      	ldr	r2, [pc, #16]	@ (800fed4 <prvResetNextTaskUnblockTime+0x3c>)
 800fec2:	6013      	str	r3, [r2, #0]
}
 800fec4:	bf00      	nop
 800fec6:	370c      	adds	r7, #12
 800fec8:	46bd      	mov	sp, r7
 800feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fece:	4770      	bx	lr
 800fed0:	20008b7c 	.word	0x20008b7c
 800fed4:	20008be4 	.word	0x20008be4

0800fed8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fede:	4b0b      	ldr	r3, [pc, #44]	@ (800ff0c <xTaskGetSchedulerState+0x34>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d102      	bne.n	800feec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fee6:	2301      	movs	r3, #1
 800fee8:	607b      	str	r3, [r7, #4]
 800feea:	e008      	b.n	800fefe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800feec:	4b08      	ldr	r3, [pc, #32]	@ (800ff10 <xTaskGetSchedulerState+0x38>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d102      	bne.n	800fefa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fef4:	2302      	movs	r3, #2
 800fef6:	607b      	str	r3, [r7, #4]
 800fef8:	e001      	b.n	800fefe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fefa:	2300      	movs	r3, #0
 800fefc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fefe:	687b      	ldr	r3, [r7, #4]
	}
 800ff00:	4618      	mov	r0, r3
 800ff02:	370c      	adds	r7, #12
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr
 800ff0c:	20008bd0 	.word	0x20008bd0
 800ff10:	20008bec 	.word	0x20008bec

0800ff14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b084      	sub	sp, #16
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ff20:	2300      	movs	r3, #0
 800ff22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d051      	beq.n	800ffce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff2e:	4b2a      	ldr	r3, [pc, #168]	@ (800ffd8 <xTaskPriorityInherit+0xc4>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff34:	429a      	cmp	r2, r3
 800ff36:	d241      	bcs.n	800ffbc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	699b      	ldr	r3, [r3, #24]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	db06      	blt.n	800ff4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff40:	4b25      	ldr	r3, [pc, #148]	@ (800ffd8 <xTaskPriorityInherit+0xc4>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff46:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	6959      	ldr	r1, [r3, #20]
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff56:	4613      	mov	r3, r2
 800ff58:	009b      	lsls	r3, r3, #2
 800ff5a:	4413      	add	r3, r2
 800ff5c:	009b      	lsls	r3, r3, #2
 800ff5e:	4a1f      	ldr	r2, [pc, #124]	@ (800ffdc <xTaskPriorityInherit+0xc8>)
 800ff60:	4413      	add	r3, r2
 800ff62:	4299      	cmp	r1, r3
 800ff64:	d122      	bne.n	800ffac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	3304      	adds	r3, #4
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7fe f803 	bl	800df76 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ff70:	4b19      	ldr	r3, [pc, #100]	@ (800ffd8 <xTaskPriorityInherit+0xc4>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff7e:	4b18      	ldr	r3, [pc, #96]	@ (800ffe0 <xTaskPriorityInherit+0xcc>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	429a      	cmp	r2, r3
 800ff84:	d903      	bls.n	800ff8e <xTaskPriorityInherit+0x7a>
 800ff86:	68bb      	ldr	r3, [r7, #8]
 800ff88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff8a:	4a15      	ldr	r2, [pc, #84]	@ (800ffe0 <xTaskPriorityInherit+0xcc>)
 800ff8c:	6013      	str	r3, [r2, #0]
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff92:	4613      	mov	r3, r2
 800ff94:	009b      	lsls	r3, r3, #2
 800ff96:	4413      	add	r3, r2
 800ff98:	009b      	lsls	r3, r3, #2
 800ff9a:	4a10      	ldr	r2, [pc, #64]	@ (800ffdc <xTaskPriorityInherit+0xc8>)
 800ff9c:	441a      	add	r2, r3
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	3304      	adds	r3, #4
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	4610      	mov	r0, r2
 800ffa6:	f7fd ff89 	bl	800debc <vListInsertEnd>
 800ffaa:	e004      	b.n	800ffb6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ffac:	4b0a      	ldr	r3, [pc, #40]	@ (800ffd8 <xTaskPriorityInherit+0xc4>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	60fb      	str	r3, [r7, #12]
 800ffba:	e008      	b.n	800ffce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ffc0:	4b05      	ldr	r3, [pc, #20]	@ (800ffd8 <xTaskPriorityInherit+0xc4>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d201      	bcs.n	800ffce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ffca:	2301      	movs	r3, #1
 800ffcc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ffce:	68fb      	ldr	r3, [r7, #12]
	}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	3710      	adds	r7, #16
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bd80      	pop	{r7, pc}
 800ffd8:	200086f0 	.word	0x200086f0
 800ffdc:	200086f4 	.word	0x200086f4
 800ffe0:	20008bcc 	.word	0x20008bcc

0800ffe4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b086      	sub	sp, #24
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fff0:	2300      	movs	r3, #0
 800fff2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d05c      	beq.n	80100b4 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fffa:	4b31      	ldr	r3, [pc, #196]	@ (80100c0 <xTaskPriorityDisinherit+0xdc>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	693a      	ldr	r2, [r7, #16]
 8010000:	429a      	cmp	r2, r3
 8010002:	d00d      	beq.n	8010020 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8010004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010008:	b672      	cpsid	i
 801000a:	f383 8811 	msr	BASEPRI, r3
 801000e:	f3bf 8f6f 	isb	sy
 8010012:	f3bf 8f4f 	dsb	sy
 8010016:	b662      	cpsie	i
 8010018:	60fb      	str	r3, [r7, #12]
}
 801001a:	bf00      	nop
 801001c:	bf00      	nop
 801001e:	e7fd      	b.n	801001c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010024:	2b00      	cmp	r3, #0
 8010026:	d10d      	bne.n	8010044 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8010028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801002c:	b672      	cpsid	i
 801002e:	f383 8811 	msr	BASEPRI, r3
 8010032:	f3bf 8f6f 	isb	sy
 8010036:	f3bf 8f4f 	dsb	sy
 801003a:	b662      	cpsie	i
 801003c:	60bb      	str	r3, [r7, #8]
}
 801003e:	bf00      	nop
 8010040:	bf00      	nop
 8010042:	e7fd      	b.n	8010040 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8010044:	693b      	ldr	r3, [r7, #16]
 8010046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010048:	1e5a      	subs	r2, r3, #1
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010056:	429a      	cmp	r2, r3
 8010058:	d02c      	beq.n	80100b4 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801005e:	2b00      	cmp	r3, #0
 8010060:	d128      	bne.n	80100b4 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	3304      	adds	r3, #4
 8010066:	4618      	mov	r0, r3
 8010068:	f7fd ff85 	bl	800df76 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010078:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801007c:	693b      	ldr	r3, [r7, #16]
 801007e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010084:	4b0f      	ldr	r3, [pc, #60]	@ (80100c4 <xTaskPriorityDisinherit+0xe0>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	429a      	cmp	r2, r3
 801008a:	d903      	bls.n	8010094 <xTaskPriorityDisinherit+0xb0>
 801008c:	693b      	ldr	r3, [r7, #16]
 801008e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010090:	4a0c      	ldr	r2, [pc, #48]	@ (80100c4 <xTaskPriorityDisinherit+0xe0>)
 8010092:	6013      	str	r3, [r2, #0]
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010098:	4613      	mov	r3, r2
 801009a:	009b      	lsls	r3, r3, #2
 801009c:	4413      	add	r3, r2
 801009e:	009b      	lsls	r3, r3, #2
 80100a0:	4a09      	ldr	r2, [pc, #36]	@ (80100c8 <xTaskPriorityDisinherit+0xe4>)
 80100a2:	441a      	add	r2, r3
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	3304      	adds	r3, #4
 80100a8:	4619      	mov	r1, r3
 80100aa:	4610      	mov	r0, r2
 80100ac:	f7fd ff06 	bl	800debc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80100b0:	2301      	movs	r3, #1
 80100b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80100b4:	697b      	ldr	r3, [r7, #20]
	}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3718      	adds	r7, #24
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}
 80100be:	bf00      	nop
 80100c0:	200086f0 	.word	0x200086f0
 80100c4:	20008bcc 	.word	0x20008bcc
 80100c8:	200086f4 	.word	0x200086f4

080100cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b088      	sub	sp, #32
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
 80100d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80100da:	2301      	movs	r3, #1
 80100dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d070      	beq.n	80101c6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80100e4:	69bb      	ldr	r3, [r7, #24]
 80100e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d10d      	bne.n	8010108 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80100ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100f0:	b672      	cpsid	i
 80100f2:	f383 8811 	msr	BASEPRI, r3
 80100f6:	f3bf 8f6f 	isb	sy
 80100fa:	f3bf 8f4f 	dsb	sy
 80100fe:	b662      	cpsie	i
 8010100:	60fb      	str	r3, [r7, #12]
}
 8010102:	bf00      	nop
 8010104:	bf00      	nop
 8010106:	e7fd      	b.n	8010104 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010108:	69bb      	ldr	r3, [r7, #24]
 801010a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801010c:	683a      	ldr	r2, [r7, #0]
 801010e:	429a      	cmp	r2, r3
 8010110:	d902      	bls.n	8010118 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	61fb      	str	r3, [r7, #28]
 8010116:	e002      	b.n	801011e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010118:	69bb      	ldr	r3, [r7, #24]
 801011a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801011c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801011e:	69bb      	ldr	r3, [r7, #24]
 8010120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010122:	69fa      	ldr	r2, [r7, #28]
 8010124:	429a      	cmp	r2, r3
 8010126:	d04e      	beq.n	80101c6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801012c:	697a      	ldr	r2, [r7, #20]
 801012e:	429a      	cmp	r2, r3
 8010130:	d149      	bne.n	80101c6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010132:	4b27      	ldr	r3, [pc, #156]	@ (80101d0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	69ba      	ldr	r2, [r7, #24]
 8010138:	429a      	cmp	r2, r3
 801013a:	d10d      	bne.n	8010158 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 801013c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010140:	b672      	cpsid	i
 8010142:	f383 8811 	msr	BASEPRI, r3
 8010146:	f3bf 8f6f 	isb	sy
 801014a:	f3bf 8f4f 	dsb	sy
 801014e:	b662      	cpsie	i
 8010150:	60bb      	str	r3, [r7, #8]
}
 8010152:	bf00      	nop
 8010154:	bf00      	nop
 8010156:	e7fd      	b.n	8010154 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010158:	69bb      	ldr	r3, [r7, #24]
 801015a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801015c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801015e:	69bb      	ldr	r3, [r7, #24]
 8010160:	69fa      	ldr	r2, [r7, #28]
 8010162:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010164:	69bb      	ldr	r3, [r7, #24]
 8010166:	699b      	ldr	r3, [r3, #24]
 8010168:	2b00      	cmp	r3, #0
 801016a:	db04      	blt.n	8010176 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801016c:	69fb      	ldr	r3, [r7, #28]
 801016e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010172:	69bb      	ldr	r3, [r7, #24]
 8010174:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010176:	69bb      	ldr	r3, [r7, #24]
 8010178:	6959      	ldr	r1, [r3, #20]
 801017a:	693a      	ldr	r2, [r7, #16]
 801017c:	4613      	mov	r3, r2
 801017e:	009b      	lsls	r3, r3, #2
 8010180:	4413      	add	r3, r2
 8010182:	009b      	lsls	r3, r3, #2
 8010184:	4a13      	ldr	r2, [pc, #76]	@ (80101d4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8010186:	4413      	add	r3, r2
 8010188:	4299      	cmp	r1, r3
 801018a:	d11c      	bne.n	80101c6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801018c:	69bb      	ldr	r3, [r7, #24]
 801018e:	3304      	adds	r3, #4
 8010190:	4618      	mov	r0, r3
 8010192:	f7fd fef0 	bl	800df76 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010196:	69bb      	ldr	r3, [r7, #24]
 8010198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801019a:	4b0f      	ldr	r3, [pc, #60]	@ (80101d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	429a      	cmp	r2, r3
 80101a0:	d903      	bls.n	80101aa <vTaskPriorityDisinheritAfterTimeout+0xde>
 80101a2:	69bb      	ldr	r3, [r7, #24]
 80101a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101a6:	4a0c      	ldr	r2, [pc, #48]	@ (80101d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80101a8:	6013      	str	r3, [r2, #0]
 80101aa:	69bb      	ldr	r3, [r7, #24]
 80101ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101ae:	4613      	mov	r3, r2
 80101b0:	009b      	lsls	r3, r3, #2
 80101b2:	4413      	add	r3, r2
 80101b4:	009b      	lsls	r3, r3, #2
 80101b6:	4a07      	ldr	r2, [pc, #28]	@ (80101d4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80101b8:	441a      	add	r2, r3
 80101ba:	69bb      	ldr	r3, [r7, #24]
 80101bc:	3304      	adds	r3, #4
 80101be:	4619      	mov	r1, r3
 80101c0:	4610      	mov	r0, r2
 80101c2:	f7fd fe7b 	bl	800debc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80101c6:	bf00      	nop
 80101c8:	3720      	adds	r7, #32
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}
 80101ce:	bf00      	nop
 80101d0:	200086f0 	.word	0x200086f0
 80101d4:	200086f4 	.word	0x200086f4
 80101d8:	20008bcc 	.word	0x20008bcc

080101dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80101dc:	b480      	push	{r7}
 80101de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80101e0:	4b07      	ldr	r3, [pc, #28]	@ (8010200 <pvTaskIncrementMutexHeldCount+0x24>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d004      	beq.n	80101f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80101e8:	4b05      	ldr	r3, [pc, #20]	@ (8010200 <pvTaskIncrementMutexHeldCount+0x24>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80101ee:	3201      	adds	r2, #1
 80101f0:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 80101f2:	4b03      	ldr	r3, [pc, #12]	@ (8010200 <pvTaskIncrementMutexHeldCount+0x24>)
 80101f4:	681b      	ldr	r3, [r3, #0]
	}
 80101f6:	4618      	mov	r0, r3
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr
 8010200:	200086f0 	.word	0x200086f0

08010204 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b084      	sub	sp, #16
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801020e:	4b21      	ldr	r3, [pc, #132]	@ (8010294 <prvAddCurrentTaskToDelayedList+0x90>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010214:	4b20      	ldr	r3, [pc, #128]	@ (8010298 <prvAddCurrentTaskToDelayedList+0x94>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	3304      	adds	r3, #4
 801021a:	4618      	mov	r0, r3
 801021c:	f7fd feab 	bl	800df76 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010226:	d10a      	bne.n	801023e <prvAddCurrentTaskToDelayedList+0x3a>
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d007      	beq.n	801023e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801022e:	4b1a      	ldr	r3, [pc, #104]	@ (8010298 <prvAddCurrentTaskToDelayedList+0x94>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	3304      	adds	r3, #4
 8010234:	4619      	mov	r1, r3
 8010236:	4819      	ldr	r0, [pc, #100]	@ (801029c <prvAddCurrentTaskToDelayedList+0x98>)
 8010238:	f7fd fe40 	bl	800debc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801023c:	e026      	b.n	801028c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801023e:	68fa      	ldr	r2, [r7, #12]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	4413      	add	r3, r2
 8010244:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010246:	4b14      	ldr	r3, [pc, #80]	@ (8010298 <prvAddCurrentTaskToDelayedList+0x94>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	68ba      	ldr	r2, [r7, #8]
 801024c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801024e:	68ba      	ldr	r2, [r7, #8]
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	429a      	cmp	r2, r3
 8010254:	d209      	bcs.n	801026a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010256:	4b12      	ldr	r3, [pc, #72]	@ (80102a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010258:	681a      	ldr	r2, [r3, #0]
 801025a:	4b0f      	ldr	r3, [pc, #60]	@ (8010298 <prvAddCurrentTaskToDelayedList+0x94>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	3304      	adds	r3, #4
 8010260:	4619      	mov	r1, r3
 8010262:	4610      	mov	r0, r2
 8010264:	f7fd fe4e 	bl	800df04 <vListInsert>
}
 8010268:	e010      	b.n	801028c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801026a:	4b0e      	ldr	r3, [pc, #56]	@ (80102a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801026c:	681a      	ldr	r2, [r3, #0]
 801026e:	4b0a      	ldr	r3, [pc, #40]	@ (8010298 <prvAddCurrentTaskToDelayedList+0x94>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	3304      	adds	r3, #4
 8010274:	4619      	mov	r1, r3
 8010276:	4610      	mov	r0, r2
 8010278:	f7fd fe44 	bl	800df04 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801027c:	4b0a      	ldr	r3, [pc, #40]	@ (80102a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	68ba      	ldr	r2, [r7, #8]
 8010282:	429a      	cmp	r2, r3
 8010284:	d202      	bcs.n	801028c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010286:	4a08      	ldr	r2, [pc, #32]	@ (80102a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	6013      	str	r3, [r2, #0]
}
 801028c:	bf00      	nop
 801028e:	3710      	adds	r7, #16
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}
 8010294:	20008bc8 	.word	0x20008bc8
 8010298:	200086f0 	.word	0x200086f0
 801029c:	20008bb0 	.word	0x20008bb0
 80102a0:	20008b80 	.word	0x20008b80
 80102a4:	20008b7c 	.word	0x20008b7c
 80102a8:	20008be4 	.word	0x20008be4

080102ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b08a      	sub	sp, #40	@ 0x28
 80102b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80102b2:	2300      	movs	r3, #0
 80102b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80102b6:	f000 fb21 	bl	80108fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80102ba:	4b1e      	ldr	r3, [pc, #120]	@ (8010334 <xTimerCreateTimerTask+0x88>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d021      	beq.n	8010306 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80102c2:	2300      	movs	r3, #0
 80102c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80102c6:	2300      	movs	r3, #0
 80102c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80102ca:	1d3a      	adds	r2, r7, #4
 80102cc:	f107 0108 	add.w	r1, r7, #8
 80102d0:	f107 030c 	add.w	r3, r7, #12
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7fd fd53 	bl	800dd80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80102da:	6879      	ldr	r1, [r7, #4]
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	68fa      	ldr	r2, [r7, #12]
 80102e0:	9202      	str	r2, [sp, #8]
 80102e2:	9301      	str	r3, [sp, #4]
 80102e4:	2302      	movs	r3, #2
 80102e6:	9300      	str	r3, [sp, #0]
 80102e8:	2300      	movs	r3, #0
 80102ea:	460a      	mov	r2, r1
 80102ec:	4912      	ldr	r1, [pc, #72]	@ (8010338 <xTimerCreateTimerTask+0x8c>)
 80102ee:	4813      	ldr	r0, [pc, #76]	@ (801033c <xTimerCreateTimerTask+0x90>)
 80102f0:	f7fe fee0 	bl	800f0b4 <xTaskCreateStatic>
 80102f4:	4603      	mov	r3, r0
 80102f6:	4a12      	ldr	r2, [pc, #72]	@ (8010340 <xTimerCreateTimerTask+0x94>)
 80102f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80102fa:	4b11      	ldr	r3, [pc, #68]	@ (8010340 <xTimerCreateTimerTask+0x94>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d001      	beq.n	8010306 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010302:	2301      	movs	r3, #1
 8010304:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d10d      	bne.n	8010328 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 801030c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010310:	b672      	cpsid	i
 8010312:	f383 8811 	msr	BASEPRI, r3
 8010316:	f3bf 8f6f 	isb	sy
 801031a:	f3bf 8f4f 	dsb	sy
 801031e:	b662      	cpsie	i
 8010320:	613b      	str	r3, [r7, #16]
}
 8010322:	bf00      	nop
 8010324:	bf00      	nop
 8010326:	e7fd      	b.n	8010324 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8010328:	697b      	ldr	r3, [r7, #20]
}
 801032a:	4618      	mov	r0, r3
 801032c:	3718      	adds	r7, #24
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	20008c28 	.word	0x20008c28
 8010338:	08016d24 	.word	0x08016d24
 801033c:	08010485 	.word	0x08010485
 8010340:	20008c2c 	.word	0x20008c2c

08010344 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b08a      	sub	sp, #40	@ 0x28
 8010348:	af00      	add	r7, sp, #0
 801034a:	60f8      	str	r0, [r7, #12]
 801034c:	60b9      	str	r1, [r7, #8]
 801034e:	607a      	str	r2, [r7, #4]
 8010350:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010352:	2300      	movs	r3, #0
 8010354:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d10d      	bne.n	8010378 <xTimerGenericCommand+0x34>
	__asm volatile
 801035c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010360:	b672      	cpsid	i
 8010362:	f383 8811 	msr	BASEPRI, r3
 8010366:	f3bf 8f6f 	isb	sy
 801036a:	f3bf 8f4f 	dsb	sy
 801036e:	b662      	cpsie	i
 8010370:	623b      	str	r3, [r7, #32]
}
 8010372:	bf00      	nop
 8010374:	bf00      	nop
 8010376:	e7fd      	b.n	8010374 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010378:	4b19      	ldr	r3, [pc, #100]	@ (80103e0 <xTimerGenericCommand+0x9c>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d02a      	beq.n	80103d6 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	2b05      	cmp	r3, #5
 8010390:	dc18      	bgt.n	80103c4 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010392:	f7ff fda1 	bl	800fed8 <xTaskGetSchedulerState>
 8010396:	4603      	mov	r3, r0
 8010398:	2b02      	cmp	r3, #2
 801039a:	d109      	bne.n	80103b0 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801039c:	4b10      	ldr	r3, [pc, #64]	@ (80103e0 <xTimerGenericCommand+0x9c>)
 801039e:	6818      	ldr	r0, [r3, #0]
 80103a0:	f107 0110 	add.w	r1, r7, #16
 80103a4:	2300      	movs	r3, #0
 80103a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103a8:	f7fd ffe0 	bl	800e36c <xQueueGenericSend>
 80103ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80103ae:	e012      	b.n	80103d6 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80103b0:	4b0b      	ldr	r3, [pc, #44]	@ (80103e0 <xTimerGenericCommand+0x9c>)
 80103b2:	6818      	ldr	r0, [r3, #0]
 80103b4:	f107 0110 	add.w	r1, r7, #16
 80103b8:	2300      	movs	r3, #0
 80103ba:	2200      	movs	r2, #0
 80103bc:	f7fd ffd6 	bl	800e36c <xQueueGenericSend>
 80103c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80103c2:	e008      	b.n	80103d6 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80103c4:	4b06      	ldr	r3, [pc, #24]	@ (80103e0 <xTimerGenericCommand+0x9c>)
 80103c6:	6818      	ldr	r0, [r3, #0]
 80103c8:	f107 0110 	add.w	r1, r7, #16
 80103cc:	2300      	movs	r3, #0
 80103ce:	683a      	ldr	r2, [r7, #0]
 80103d0:	f7fe f8d6 	bl	800e580 <xQueueGenericSendFromISR>
 80103d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80103d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80103d8:	4618      	mov	r0, r3
 80103da:	3728      	adds	r7, #40	@ 0x28
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}
 80103e0:	20008c28 	.word	0x20008c28

080103e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b088      	sub	sp, #32
 80103e8:	af02      	add	r7, sp, #8
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103ee:	4b24      	ldr	r3, [pc, #144]	@ (8010480 <prvProcessExpiredTimer+0x9c>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	68db      	ldr	r3, [r3, #12]
 80103f4:	68db      	ldr	r3, [r3, #12]
 80103f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	3304      	adds	r3, #4
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7fd fdba 	bl	800df76 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010408:	f003 0304 	and.w	r3, r3, #4
 801040c:	2b00      	cmp	r3, #0
 801040e:	d025      	beq.n	801045c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	699a      	ldr	r2, [r3, #24]
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	18d1      	adds	r1, r2, r3
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	683a      	ldr	r2, [r7, #0]
 801041c:	6978      	ldr	r0, [r7, #20]
 801041e:	f000 f8d7 	bl	80105d0 <prvInsertTimerInActiveList>
 8010422:	4603      	mov	r3, r0
 8010424:	2b00      	cmp	r3, #0
 8010426:	d022      	beq.n	801046e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010428:	2300      	movs	r3, #0
 801042a:	9300      	str	r3, [sp, #0]
 801042c:	2300      	movs	r3, #0
 801042e:	687a      	ldr	r2, [r7, #4]
 8010430:	2100      	movs	r1, #0
 8010432:	6978      	ldr	r0, [r7, #20]
 8010434:	f7ff ff86 	bl	8010344 <xTimerGenericCommand>
 8010438:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d116      	bne.n	801046e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8010440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010444:	b672      	cpsid	i
 8010446:	f383 8811 	msr	BASEPRI, r3
 801044a:	f3bf 8f6f 	isb	sy
 801044e:	f3bf 8f4f 	dsb	sy
 8010452:	b662      	cpsie	i
 8010454:	60fb      	str	r3, [r7, #12]
}
 8010456:	bf00      	nop
 8010458:	bf00      	nop
 801045a:	e7fd      	b.n	8010458 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010462:	f023 0301 	bic.w	r3, r3, #1
 8010466:	b2da      	uxtb	r2, r3
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	6a1b      	ldr	r3, [r3, #32]
 8010472:	6978      	ldr	r0, [r7, #20]
 8010474:	4798      	blx	r3
}
 8010476:	bf00      	nop
 8010478:	3718      	adds	r7, #24
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	20008c20 	.word	0x20008c20

08010484 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b084      	sub	sp, #16
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801048c:	f107 0308 	add.w	r3, r7, #8
 8010490:	4618      	mov	r0, r3
 8010492:	f000 f859 	bl	8010548 <prvGetNextExpireTime>
 8010496:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	4619      	mov	r1, r3
 801049c:	68f8      	ldr	r0, [r7, #12]
 801049e:	f000 f805 	bl	80104ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80104a2:	f000 f8d7 	bl	8010654 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80104a6:	bf00      	nop
 80104a8:	e7f0      	b.n	801048c <prvTimerTask+0x8>
	...

080104ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b084      	sub	sp, #16
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80104b6:	f7ff f8c5 	bl	800f644 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80104ba:	f107 0308 	add.w	r3, r7, #8
 80104be:	4618      	mov	r0, r3
 80104c0:	f000 f866 	bl	8010590 <prvSampleTimeNow>
 80104c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d130      	bne.n	801052e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d10a      	bne.n	80104e8 <prvProcessTimerOrBlockTask+0x3c>
 80104d2:	687a      	ldr	r2, [r7, #4]
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d806      	bhi.n	80104e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80104da:	f7ff f8c1 	bl	800f660 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80104de:	68f9      	ldr	r1, [r7, #12]
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f7ff ff7f 	bl	80103e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80104e6:	e024      	b.n	8010532 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d008      	beq.n	8010500 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80104ee:	4b13      	ldr	r3, [pc, #76]	@ (801053c <prvProcessTimerOrBlockTask+0x90>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d101      	bne.n	80104fc <prvProcessTimerOrBlockTask+0x50>
 80104f8:	2301      	movs	r3, #1
 80104fa:	e000      	b.n	80104fe <prvProcessTimerOrBlockTask+0x52>
 80104fc:	2300      	movs	r3, #0
 80104fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010500:	4b0f      	ldr	r3, [pc, #60]	@ (8010540 <prvProcessTimerOrBlockTask+0x94>)
 8010502:	6818      	ldr	r0, [r3, #0]
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	1ad3      	subs	r3, r2, r3
 801050a:	683a      	ldr	r2, [r7, #0]
 801050c:	4619      	mov	r1, r3
 801050e:	f7fe fd9d 	bl	800f04c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010512:	f7ff f8a5 	bl	800f660 <xTaskResumeAll>
 8010516:	4603      	mov	r3, r0
 8010518:	2b00      	cmp	r3, #0
 801051a:	d10a      	bne.n	8010532 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801051c:	4b09      	ldr	r3, [pc, #36]	@ (8010544 <prvProcessTimerOrBlockTask+0x98>)
 801051e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010522:	601a      	str	r2, [r3, #0]
 8010524:	f3bf 8f4f 	dsb	sy
 8010528:	f3bf 8f6f 	isb	sy
}
 801052c:	e001      	b.n	8010532 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801052e:	f7ff f897 	bl	800f660 <xTaskResumeAll>
}
 8010532:	bf00      	nop
 8010534:	3710      	adds	r7, #16
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
 801053a:	bf00      	nop
 801053c:	20008c24 	.word	0x20008c24
 8010540:	20008c28 	.word	0x20008c28
 8010544:	e000ed04 	.word	0xe000ed04

08010548 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010548:	b480      	push	{r7}
 801054a:	b085      	sub	sp, #20
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010550:	4b0e      	ldr	r3, [pc, #56]	@ (801058c <prvGetNextExpireTime+0x44>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d101      	bne.n	801055e <prvGetNextExpireTime+0x16>
 801055a:	2201      	movs	r2, #1
 801055c:	e000      	b.n	8010560 <prvGetNextExpireTime+0x18>
 801055e:	2200      	movs	r2, #0
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d105      	bne.n	8010578 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801056c:	4b07      	ldr	r3, [pc, #28]	@ (801058c <prvGetNextExpireTime+0x44>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	68db      	ldr	r3, [r3, #12]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	60fb      	str	r3, [r7, #12]
 8010576:	e001      	b.n	801057c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010578:	2300      	movs	r3, #0
 801057a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801057c:	68fb      	ldr	r3, [r7, #12]
}
 801057e:	4618      	mov	r0, r3
 8010580:	3714      	adds	r7, #20
 8010582:	46bd      	mov	sp, r7
 8010584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010588:	4770      	bx	lr
 801058a:	bf00      	nop
 801058c:	20008c20 	.word	0x20008c20

08010590 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b084      	sub	sp, #16
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010598:	f7ff f902 	bl	800f7a0 <xTaskGetTickCount>
 801059c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801059e:	4b0b      	ldr	r3, [pc, #44]	@ (80105cc <prvSampleTimeNow+0x3c>)
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	68fa      	ldr	r2, [r7, #12]
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d205      	bcs.n	80105b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80105a8:	f000 f940 	bl	801082c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2201      	movs	r2, #1
 80105b0:	601a      	str	r2, [r3, #0]
 80105b2:	e002      	b.n	80105ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2200      	movs	r2, #0
 80105b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80105ba:	4a04      	ldr	r2, [pc, #16]	@ (80105cc <prvSampleTimeNow+0x3c>)
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80105c0:	68fb      	ldr	r3, [r7, #12]
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3710      	adds	r7, #16
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
 80105ca:	bf00      	nop
 80105cc:	20008c30 	.word	0x20008c30

080105d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b086      	sub	sp, #24
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	60f8      	str	r0, [r7, #12]
 80105d8:	60b9      	str	r1, [r7, #8]
 80105da:	607a      	str	r2, [r7, #4]
 80105dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80105de:	2300      	movs	r3, #0
 80105e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	68ba      	ldr	r2, [r7, #8]
 80105e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	68fa      	ldr	r2, [r7, #12]
 80105ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80105ee:	68ba      	ldr	r2, [r7, #8]
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	429a      	cmp	r2, r3
 80105f4:	d812      	bhi.n	801061c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	1ad2      	subs	r2, r2, r3
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	699b      	ldr	r3, [r3, #24]
 8010600:	429a      	cmp	r2, r3
 8010602:	d302      	bcc.n	801060a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010604:	2301      	movs	r3, #1
 8010606:	617b      	str	r3, [r7, #20]
 8010608:	e01b      	b.n	8010642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801060a:	4b10      	ldr	r3, [pc, #64]	@ (801064c <prvInsertTimerInActiveList+0x7c>)
 801060c:	681a      	ldr	r2, [r3, #0]
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	3304      	adds	r3, #4
 8010612:	4619      	mov	r1, r3
 8010614:	4610      	mov	r0, r2
 8010616:	f7fd fc75 	bl	800df04 <vListInsert>
 801061a:	e012      	b.n	8010642 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801061c:	687a      	ldr	r2, [r7, #4]
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	429a      	cmp	r2, r3
 8010622:	d206      	bcs.n	8010632 <prvInsertTimerInActiveList+0x62>
 8010624:	68ba      	ldr	r2, [r7, #8]
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	429a      	cmp	r2, r3
 801062a:	d302      	bcc.n	8010632 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801062c:	2301      	movs	r3, #1
 801062e:	617b      	str	r3, [r7, #20]
 8010630:	e007      	b.n	8010642 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010632:	4b07      	ldr	r3, [pc, #28]	@ (8010650 <prvInsertTimerInActiveList+0x80>)
 8010634:	681a      	ldr	r2, [r3, #0]
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	3304      	adds	r3, #4
 801063a:	4619      	mov	r1, r3
 801063c:	4610      	mov	r0, r2
 801063e:	f7fd fc61 	bl	800df04 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010642:	697b      	ldr	r3, [r7, #20]
}
 8010644:	4618      	mov	r0, r3
 8010646:	3718      	adds	r7, #24
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}
 801064c:	20008c24 	.word	0x20008c24
 8010650:	20008c20 	.word	0x20008c20

08010654 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b08e      	sub	sp, #56	@ 0x38
 8010658:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801065a:	e0d4      	b.n	8010806 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2b00      	cmp	r3, #0
 8010660:	da1b      	bge.n	801069a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010662:	1d3b      	adds	r3, r7, #4
 8010664:	3304      	adds	r3, #4
 8010666:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801066a:	2b00      	cmp	r3, #0
 801066c:	d10d      	bne.n	801068a <prvProcessReceivedCommands+0x36>
	__asm volatile
 801066e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010672:	b672      	cpsid	i
 8010674:	f383 8811 	msr	BASEPRI, r3
 8010678:	f3bf 8f6f 	isb	sy
 801067c:	f3bf 8f4f 	dsb	sy
 8010680:	b662      	cpsie	i
 8010682:	61fb      	str	r3, [r7, #28]
}
 8010684:	bf00      	nop
 8010686:	bf00      	nop
 8010688:	e7fd      	b.n	8010686 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801068a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010690:	6850      	ldr	r0, [r2, #4]
 8010692:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010694:	6892      	ldr	r2, [r2, #8]
 8010696:	4611      	mov	r1, r2
 8010698:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2b00      	cmp	r3, #0
 801069e:	f2c0 80b2 	blt.w	8010806 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80106a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106a8:	695b      	ldr	r3, [r3, #20]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d004      	beq.n	80106b8 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80106ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106b0:	3304      	adds	r3, #4
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7fd fc5f 	bl	800df76 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80106b8:	463b      	mov	r3, r7
 80106ba:	4618      	mov	r0, r3
 80106bc:	f7ff ff68 	bl	8010590 <prvSampleTimeNow>
 80106c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2b09      	cmp	r3, #9
 80106c6:	f200 809b 	bhi.w	8010800 <prvProcessReceivedCommands+0x1ac>
 80106ca:	a201      	add	r2, pc, #4	@ (adr r2, 80106d0 <prvProcessReceivedCommands+0x7c>)
 80106cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106d0:	080106f9 	.word	0x080106f9
 80106d4:	080106f9 	.word	0x080106f9
 80106d8:	080106f9 	.word	0x080106f9
 80106dc:	08010773 	.word	0x08010773
 80106e0:	08010787 	.word	0x08010787
 80106e4:	080107d7 	.word	0x080107d7
 80106e8:	080106f9 	.word	0x080106f9
 80106ec:	080106f9 	.word	0x080106f9
 80106f0:	08010773 	.word	0x08010773
 80106f4:	08010787 	.word	0x08010787
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80106f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80106fe:	f043 0301 	orr.w	r3, r3, #1
 8010702:	b2da      	uxtb	r2, r3
 8010704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010706:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801070a:	68ba      	ldr	r2, [r7, #8]
 801070c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801070e:	699b      	ldr	r3, [r3, #24]
 8010710:	18d1      	adds	r1, r2, r3
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010716:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010718:	f7ff ff5a 	bl	80105d0 <prvInsertTimerInActiveList>
 801071c:	4603      	mov	r3, r0
 801071e:	2b00      	cmp	r3, #0
 8010720:	d070      	beq.n	8010804 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010724:	6a1b      	ldr	r3, [r3, #32]
 8010726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010728:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801072a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801072c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010730:	f003 0304 	and.w	r3, r3, #4
 8010734:	2b00      	cmp	r3, #0
 8010736:	d065      	beq.n	8010804 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010738:	68ba      	ldr	r2, [r7, #8]
 801073a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801073c:	699b      	ldr	r3, [r3, #24]
 801073e:	441a      	add	r2, r3
 8010740:	2300      	movs	r3, #0
 8010742:	9300      	str	r3, [sp, #0]
 8010744:	2300      	movs	r3, #0
 8010746:	2100      	movs	r1, #0
 8010748:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801074a:	f7ff fdfb 	bl	8010344 <xTimerGenericCommand>
 801074e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010750:	6a3b      	ldr	r3, [r7, #32]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d156      	bne.n	8010804 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8010756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801075a:	b672      	cpsid	i
 801075c:	f383 8811 	msr	BASEPRI, r3
 8010760:	f3bf 8f6f 	isb	sy
 8010764:	f3bf 8f4f 	dsb	sy
 8010768:	b662      	cpsie	i
 801076a:	61bb      	str	r3, [r7, #24]
}
 801076c:	bf00      	nop
 801076e:	bf00      	nop
 8010770:	e7fd      	b.n	801076e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010774:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010778:	f023 0301 	bic.w	r3, r3, #1
 801077c:	b2da      	uxtb	r2, r3
 801077e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010780:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010784:	e03f      	b.n	8010806 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010788:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801078c:	f043 0301 	orr.w	r3, r3, #1
 8010790:	b2da      	uxtb	r2, r3
 8010792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010794:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010798:	68ba      	ldr	r2, [r7, #8]
 801079a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801079c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801079e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107a0:	699b      	ldr	r3, [r3, #24]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d10d      	bne.n	80107c2 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80107a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107aa:	b672      	cpsid	i
 80107ac:	f383 8811 	msr	BASEPRI, r3
 80107b0:	f3bf 8f6f 	isb	sy
 80107b4:	f3bf 8f4f 	dsb	sy
 80107b8:	b662      	cpsie	i
 80107ba:	617b      	str	r3, [r7, #20]
}
 80107bc:	bf00      	nop
 80107be:	bf00      	nop
 80107c0:	e7fd      	b.n	80107be <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80107c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107c4:	699a      	ldr	r2, [r3, #24]
 80107c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107c8:	18d1      	adds	r1, r2, r3
 80107ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80107d0:	f7ff fefe 	bl	80105d0 <prvInsertTimerInActiveList>
					break;
 80107d4:	e017      	b.n	8010806 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80107d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80107dc:	f003 0302 	and.w	r3, r3, #2
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d103      	bne.n	80107ec <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 80107e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80107e6:	f000 fbd5 	bl	8010f94 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80107ea:	e00c      	b.n	8010806 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80107ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80107f2:	f023 0301 	bic.w	r3, r3, #1
 80107f6:	b2da      	uxtb	r2, r3
 80107f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80107fe:	e002      	b.n	8010806 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8010800:	bf00      	nop
 8010802:	e000      	b.n	8010806 <prvProcessReceivedCommands+0x1b2>
					break;
 8010804:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010806:	4b08      	ldr	r3, [pc, #32]	@ (8010828 <prvProcessReceivedCommands+0x1d4>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	1d39      	adds	r1, r7, #4
 801080c:	2200      	movs	r2, #0
 801080e:	4618      	mov	r0, r3
 8010810:	f7fd fff2 	bl	800e7f8 <xQueueReceive>
 8010814:	4603      	mov	r3, r0
 8010816:	2b00      	cmp	r3, #0
 8010818:	f47f af20 	bne.w	801065c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 801081c:	bf00      	nop
 801081e:	bf00      	nop
 8010820:	3730      	adds	r7, #48	@ 0x30
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
 8010826:	bf00      	nop
 8010828:	20008c28 	.word	0x20008c28

0801082c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b088      	sub	sp, #32
 8010830:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010832:	e04b      	b.n	80108cc <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010834:	4b2f      	ldr	r3, [pc, #188]	@ (80108f4 <prvSwitchTimerLists+0xc8>)
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	68db      	ldr	r3, [r3, #12]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801083e:	4b2d      	ldr	r3, [pc, #180]	@ (80108f4 <prvSwitchTimerLists+0xc8>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	68db      	ldr	r3, [r3, #12]
 8010844:	68db      	ldr	r3, [r3, #12]
 8010846:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	3304      	adds	r3, #4
 801084c:	4618      	mov	r0, r3
 801084e:	f7fd fb92 	bl	800df76 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	6a1b      	ldr	r3, [r3, #32]
 8010856:	68f8      	ldr	r0, [r7, #12]
 8010858:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010860:	f003 0304 	and.w	r3, r3, #4
 8010864:	2b00      	cmp	r3, #0
 8010866:	d031      	beq.n	80108cc <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	699b      	ldr	r3, [r3, #24]
 801086c:	693a      	ldr	r2, [r7, #16]
 801086e:	4413      	add	r3, r2
 8010870:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010872:	68ba      	ldr	r2, [r7, #8]
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	429a      	cmp	r2, r3
 8010878:	d90e      	bls.n	8010898 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	68ba      	ldr	r2, [r7, #8]
 801087e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	68fa      	ldr	r2, [r7, #12]
 8010884:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010886:	4b1b      	ldr	r3, [pc, #108]	@ (80108f4 <prvSwitchTimerLists+0xc8>)
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	3304      	adds	r3, #4
 801088e:	4619      	mov	r1, r3
 8010890:	4610      	mov	r0, r2
 8010892:	f7fd fb37 	bl	800df04 <vListInsert>
 8010896:	e019      	b.n	80108cc <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010898:	2300      	movs	r3, #0
 801089a:	9300      	str	r3, [sp, #0]
 801089c:	2300      	movs	r3, #0
 801089e:	693a      	ldr	r2, [r7, #16]
 80108a0:	2100      	movs	r1, #0
 80108a2:	68f8      	ldr	r0, [r7, #12]
 80108a4:	f7ff fd4e 	bl	8010344 <xTimerGenericCommand>
 80108a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d10d      	bne.n	80108cc <prvSwitchTimerLists+0xa0>
	__asm volatile
 80108b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108b4:	b672      	cpsid	i
 80108b6:	f383 8811 	msr	BASEPRI, r3
 80108ba:	f3bf 8f6f 	isb	sy
 80108be:	f3bf 8f4f 	dsb	sy
 80108c2:	b662      	cpsie	i
 80108c4:	603b      	str	r3, [r7, #0]
}
 80108c6:	bf00      	nop
 80108c8:	bf00      	nop
 80108ca:	e7fd      	b.n	80108c8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80108cc:	4b09      	ldr	r3, [pc, #36]	@ (80108f4 <prvSwitchTimerLists+0xc8>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d1ae      	bne.n	8010834 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80108d6:	4b07      	ldr	r3, [pc, #28]	@ (80108f4 <prvSwitchTimerLists+0xc8>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80108dc:	4b06      	ldr	r3, [pc, #24]	@ (80108f8 <prvSwitchTimerLists+0xcc>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	4a04      	ldr	r2, [pc, #16]	@ (80108f4 <prvSwitchTimerLists+0xc8>)
 80108e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80108e4:	4a04      	ldr	r2, [pc, #16]	@ (80108f8 <prvSwitchTimerLists+0xcc>)
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	6013      	str	r3, [r2, #0]
}
 80108ea:	bf00      	nop
 80108ec:	3718      	adds	r7, #24
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	bf00      	nop
 80108f4:	20008c20 	.word	0x20008c20
 80108f8:	20008c24 	.word	0x20008c24

080108fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b082      	sub	sp, #8
 8010900:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010902:	f000 f94b 	bl	8010b9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010906:	4b15      	ldr	r3, [pc, #84]	@ (801095c <prvCheckForValidListAndQueue+0x60>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d120      	bne.n	8010950 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801090e:	4814      	ldr	r0, [pc, #80]	@ (8010960 <prvCheckForValidListAndQueue+0x64>)
 8010910:	f7fd faa7 	bl	800de62 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010914:	4813      	ldr	r0, [pc, #76]	@ (8010964 <prvCheckForValidListAndQueue+0x68>)
 8010916:	f7fd faa4 	bl	800de62 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801091a:	4b13      	ldr	r3, [pc, #76]	@ (8010968 <prvCheckForValidListAndQueue+0x6c>)
 801091c:	4a10      	ldr	r2, [pc, #64]	@ (8010960 <prvCheckForValidListAndQueue+0x64>)
 801091e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010920:	4b12      	ldr	r3, [pc, #72]	@ (801096c <prvCheckForValidListAndQueue+0x70>)
 8010922:	4a10      	ldr	r2, [pc, #64]	@ (8010964 <prvCheckForValidListAndQueue+0x68>)
 8010924:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010926:	2300      	movs	r3, #0
 8010928:	9300      	str	r3, [sp, #0]
 801092a:	4b11      	ldr	r3, [pc, #68]	@ (8010970 <prvCheckForValidListAndQueue+0x74>)
 801092c:	4a11      	ldr	r2, [pc, #68]	@ (8010974 <prvCheckForValidListAndQueue+0x78>)
 801092e:	2110      	movs	r1, #16
 8010930:	200a      	movs	r0, #10
 8010932:	f7fd fbb7 	bl	800e0a4 <xQueueGenericCreateStatic>
 8010936:	4603      	mov	r3, r0
 8010938:	4a08      	ldr	r2, [pc, #32]	@ (801095c <prvCheckForValidListAndQueue+0x60>)
 801093a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801093c:	4b07      	ldr	r3, [pc, #28]	@ (801095c <prvCheckForValidListAndQueue+0x60>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d005      	beq.n	8010950 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010944:	4b05      	ldr	r3, [pc, #20]	@ (801095c <prvCheckForValidListAndQueue+0x60>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	490b      	ldr	r1, [pc, #44]	@ (8010978 <prvCheckForValidListAndQueue+0x7c>)
 801094a:	4618      	mov	r0, r3
 801094c:	f7fe fb2a 	bl	800efa4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010950:	f000 f95a 	bl	8010c08 <vPortExitCritical>
}
 8010954:	bf00      	nop
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	20008c28 	.word	0x20008c28
 8010960:	20008bf8 	.word	0x20008bf8
 8010964:	20008c0c 	.word	0x20008c0c
 8010968:	20008c20 	.word	0x20008c20
 801096c:	20008c24 	.word	0x20008c24
 8010970:	20008cd4 	.word	0x20008cd4
 8010974:	20008c34 	.word	0x20008c34
 8010978:	08016d2c 	.word	0x08016d2c

0801097c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801097c:	b480      	push	{r7}
 801097e:	b085      	sub	sp, #20
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	3b04      	subs	r3, #4
 801098c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	3b04      	subs	r3, #4
 801099a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	f023 0201 	bic.w	r2, r3, #1
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	3b04      	subs	r3, #4
 80109aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80109ac:	4a0c      	ldr	r2, [pc, #48]	@ (80109e0 <pxPortInitialiseStack+0x64>)
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	3b14      	subs	r3, #20
 80109b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80109b8:	687a      	ldr	r2, [r7, #4]
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	3b04      	subs	r3, #4
 80109c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	f06f 0202 	mvn.w	r2, #2
 80109ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	3b20      	subs	r3, #32
 80109d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80109d2:	68fb      	ldr	r3, [r7, #12]
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	3714      	adds	r7, #20
 80109d8:	46bd      	mov	sp, r7
 80109da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109de:	4770      	bx	lr
 80109e0:	080109e5 	.word	0x080109e5

080109e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80109e4:	b480      	push	{r7}
 80109e6:	b085      	sub	sp, #20
 80109e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80109ea:	2300      	movs	r3, #0
 80109ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80109ee:	4b15      	ldr	r3, [pc, #84]	@ (8010a44 <prvTaskExitError+0x60>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109f6:	d00d      	beq.n	8010a14 <prvTaskExitError+0x30>
	__asm volatile
 80109f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109fc:	b672      	cpsid	i
 80109fe:	f383 8811 	msr	BASEPRI, r3
 8010a02:	f3bf 8f6f 	isb	sy
 8010a06:	f3bf 8f4f 	dsb	sy
 8010a0a:	b662      	cpsie	i
 8010a0c:	60fb      	str	r3, [r7, #12]
}
 8010a0e:	bf00      	nop
 8010a10:	bf00      	nop
 8010a12:	e7fd      	b.n	8010a10 <prvTaskExitError+0x2c>
	__asm volatile
 8010a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a18:	b672      	cpsid	i
 8010a1a:	f383 8811 	msr	BASEPRI, r3
 8010a1e:	f3bf 8f6f 	isb	sy
 8010a22:	f3bf 8f4f 	dsb	sy
 8010a26:	b662      	cpsie	i
 8010a28:	60bb      	str	r3, [r7, #8]
}
 8010a2a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010a2c:	bf00      	nop
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d0fc      	beq.n	8010a2e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010a34:	bf00      	nop
 8010a36:	bf00      	nop
 8010a38:	3714      	adds	r7, #20
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a40:	4770      	bx	lr
 8010a42:	bf00      	nop
 8010a44:	200000ec 	.word	0x200000ec
	...

08010a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010a50:	4b07      	ldr	r3, [pc, #28]	@ (8010a70 <pxCurrentTCBConst2>)
 8010a52:	6819      	ldr	r1, [r3, #0]
 8010a54:	6808      	ldr	r0, [r1, #0]
 8010a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a5a:	f380 8809 	msr	PSP, r0
 8010a5e:	f3bf 8f6f 	isb	sy
 8010a62:	f04f 0000 	mov.w	r0, #0
 8010a66:	f380 8811 	msr	BASEPRI, r0
 8010a6a:	4770      	bx	lr
 8010a6c:	f3af 8000 	nop.w

08010a70 <pxCurrentTCBConst2>:
 8010a70:	200086f0 	.word	0x200086f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010a74:	bf00      	nop
 8010a76:	bf00      	nop

08010a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010a78:	4808      	ldr	r0, [pc, #32]	@ (8010a9c <prvPortStartFirstTask+0x24>)
 8010a7a:	6800      	ldr	r0, [r0, #0]
 8010a7c:	6800      	ldr	r0, [r0, #0]
 8010a7e:	f380 8808 	msr	MSP, r0
 8010a82:	f04f 0000 	mov.w	r0, #0
 8010a86:	f380 8814 	msr	CONTROL, r0
 8010a8a:	b662      	cpsie	i
 8010a8c:	b661      	cpsie	f
 8010a8e:	f3bf 8f4f 	dsb	sy
 8010a92:	f3bf 8f6f 	isb	sy
 8010a96:	df00      	svc	0
 8010a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010a9a:	bf00      	nop
 8010a9c:	e000ed08 	.word	0xe000ed08

08010aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b084      	sub	sp, #16
 8010aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010aa6:	4b37      	ldr	r3, [pc, #220]	@ (8010b84 <xPortStartScheduler+0xe4>)
 8010aa8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	781b      	ldrb	r3, [r3, #0]
 8010aae:	b2db      	uxtb	r3, r3
 8010ab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	22ff      	movs	r2, #255	@ 0xff
 8010ab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	781b      	ldrb	r3, [r3, #0]
 8010abc:	b2db      	uxtb	r3, r3
 8010abe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ac0:	78fb      	ldrb	r3, [r7, #3]
 8010ac2:	b2db      	uxtb	r3, r3
 8010ac4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010ac8:	b2da      	uxtb	r2, r3
 8010aca:	4b2f      	ldr	r3, [pc, #188]	@ (8010b88 <xPortStartScheduler+0xe8>)
 8010acc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010ace:	4b2f      	ldr	r3, [pc, #188]	@ (8010b8c <xPortStartScheduler+0xec>)
 8010ad0:	2207      	movs	r2, #7
 8010ad2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010ad4:	e009      	b.n	8010aea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8010b8c <xPortStartScheduler+0xec>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	3b01      	subs	r3, #1
 8010adc:	4a2b      	ldr	r2, [pc, #172]	@ (8010b8c <xPortStartScheduler+0xec>)
 8010ade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010ae0:	78fb      	ldrb	r3, [r7, #3]
 8010ae2:	b2db      	uxtb	r3, r3
 8010ae4:	005b      	lsls	r3, r3, #1
 8010ae6:	b2db      	uxtb	r3, r3
 8010ae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010aea:	78fb      	ldrb	r3, [r7, #3]
 8010aec:	b2db      	uxtb	r3, r3
 8010aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010af2:	2b80      	cmp	r3, #128	@ 0x80
 8010af4:	d0ef      	beq.n	8010ad6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010af6:	4b25      	ldr	r3, [pc, #148]	@ (8010b8c <xPortStartScheduler+0xec>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f1c3 0307 	rsb	r3, r3, #7
 8010afe:	2b04      	cmp	r3, #4
 8010b00:	d00d      	beq.n	8010b1e <xPortStartScheduler+0x7e>
	__asm volatile
 8010b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b06:	b672      	cpsid	i
 8010b08:	f383 8811 	msr	BASEPRI, r3
 8010b0c:	f3bf 8f6f 	isb	sy
 8010b10:	f3bf 8f4f 	dsb	sy
 8010b14:	b662      	cpsie	i
 8010b16:	60bb      	str	r3, [r7, #8]
}
 8010b18:	bf00      	nop
 8010b1a:	bf00      	nop
 8010b1c:	e7fd      	b.n	8010b1a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8010b8c <xPortStartScheduler+0xec>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	021b      	lsls	r3, r3, #8
 8010b24:	4a19      	ldr	r2, [pc, #100]	@ (8010b8c <xPortStartScheduler+0xec>)
 8010b26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010b28:	4b18      	ldr	r3, [pc, #96]	@ (8010b8c <xPortStartScheduler+0xec>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010b30:	4a16      	ldr	r2, [pc, #88]	@ (8010b8c <xPortStartScheduler+0xec>)
 8010b32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	b2da      	uxtb	r2, r3
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010b3c:	4b14      	ldr	r3, [pc, #80]	@ (8010b90 <xPortStartScheduler+0xf0>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	4a13      	ldr	r2, [pc, #76]	@ (8010b90 <xPortStartScheduler+0xf0>)
 8010b42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010b46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010b48:	4b11      	ldr	r3, [pc, #68]	@ (8010b90 <xPortStartScheduler+0xf0>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	4a10      	ldr	r2, [pc, #64]	@ (8010b90 <xPortStartScheduler+0xf0>)
 8010b4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010b52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010b54:	f000 f8dc 	bl	8010d10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010b58:	4b0e      	ldr	r3, [pc, #56]	@ (8010b94 <xPortStartScheduler+0xf4>)
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010b5e:	f000 f8fb 	bl	8010d58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010b62:	4b0d      	ldr	r3, [pc, #52]	@ (8010b98 <xPortStartScheduler+0xf8>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	4a0c      	ldr	r2, [pc, #48]	@ (8010b98 <xPortStartScheduler+0xf8>)
 8010b68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010b6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010b6e:	f7ff ff83 	bl	8010a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010b72:	f7fe fee1 	bl	800f938 <vTaskSwitchContext>
	prvTaskExitError();
 8010b76:	f7ff ff35 	bl	80109e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010b7a:	2300      	movs	r3, #0
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	3710      	adds	r7, #16
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}
 8010b84:	e000e400 	.word	0xe000e400
 8010b88:	20008d24 	.word	0x20008d24
 8010b8c:	20008d28 	.word	0x20008d28
 8010b90:	e000ed20 	.word	0xe000ed20
 8010b94:	200000ec 	.word	0x200000ec
 8010b98:	e000ef34 	.word	0xe000ef34

08010b9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b083      	sub	sp, #12
 8010ba0:	af00      	add	r7, sp, #0
	__asm volatile
 8010ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ba6:	b672      	cpsid	i
 8010ba8:	f383 8811 	msr	BASEPRI, r3
 8010bac:	f3bf 8f6f 	isb	sy
 8010bb0:	f3bf 8f4f 	dsb	sy
 8010bb4:	b662      	cpsie	i
 8010bb6:	607b      	str	r3, [r7, #4]
}
 8010bb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010bba:	4b11      	ldr	r3, [pc, #68]	@ (8010c00 <vPortEnterCritical+0x64>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	4a0f      	ldr	r2, [pc, #60]	@ (8010c00 <vPortEnterCritical+0x64>)
 8010bc2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8010c00 <vPortEnterCritical+0x64>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	d112      	bne.n	8010bf2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8010c04 <vPortEnterCritical+0x68>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	b2db      	uxtb	r3, r3
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d00d      	beq.n	8010bf2 <vPortEnterCritical+0x56>
	__asm volatile
 8010bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bda:	b672      	cpsid	i
 8010bdc:	f383 8811 	msr	BASEPRI, r3
 8010be0:	f3bf 8f6f 	isb	sy
 8010be4:	f3bf 8f4f 	dsb	sy
 8010be8:	b662      	cpsie	i
 8010bea:	603b      	str	r3, [r7, #0]
}
 8010bec:	bf00      	nop
 8010bee:	bf00      	nop
 8010bf0:	e7fd      	b.n	8010bee <vPortEnterCritical+0x52>
	}
}
 8010bf2:	bf00      	nop
 8010bf4:	370c      	adds	r7, #12
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfc:	4770      	bx	lr
 8010bfe:	bf00      	nop
 8010c00:	200000ec 	.word	0x200000ec
 8010c04:	e000ed04 	.word	0xe000ed04

08010c08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010c08:	b480      	push	{r7}
 8010c0a:	b083      	sub	sp, #12
 8010c0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010c0e:	4b13      	ldr	r3, [pc, #76]	@ (8010c5c <vPortExitCritical+0x54>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d10d      	bne.n	8010c32 <vPortExitCritical+0x2a>
	__asm volatile
 8010c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c1a:	b672      	cpsid	i
 8010c1c:	f383 8811 	msr	BASEPRI, r3
 8010c20:	f3bf 8f6f 	isb	sy
 8010c24:	f3bf 8f4f 	dsb	sy
 8010c28:	b662      	cpsie	i
 8010c2a:	607b      	str	r3, [r7, #4]
}
 8010c2c:	bf00      	nop
 8010c2e:	bf00      	nop
 8010c30:	e7fd      	b.n	8010c2e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010c32:	4b0a      	ldr	r3, [pc, #40]	@ (8010c5c <vPortExitCritical+0x54>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	3b01      	subs	r3, #1
 8010c38:	4a08      	ldr	r2, [pc, #32]	@ (8010c5c <vPortExitCritical+0x54>)
 8010c3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010c3c:	4b07      	ldr	r3, [pc, #28]	@ (8010c5c <vPortExitCritical+0x54>)
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d105      	bne.n	8010c50 <vPortExitCritical+0x48>
 8010c44:	2300      	movs	r3, #0
 8010c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	f383 8811 	msr	BASEPRI, r3
}
 8010c4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010c50:	bf00      	nop
 8010c52:	370c      	adds	r7, #12
 8010c54:	46bd      	mov	sp, r7
 8010c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5a:	4770      	bx	lr
 8010c5c:	200000ec 	.word	0x200000ec

08010c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010c60:	f3ef 8009 	mrs	r0, PSP
 8010c64:	f3bf 8f6f 	isb	sy
 8010c68:	4b15      	ldr	r3, [pc, #84]	@ (8010cc0 <pxCurrentTCBConst>)
 8010c6a:	681a      	ldr	r2, [r3, #0]
 8010c6c:	f01e 0f10 	tst.w	lr, #16
 8010c70:	bf08      	it	eq
 8010c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c7a:	6010      	str	r0, [r2, #0]
 8010c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010c80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010c84:	b672      	cpsid	i
 8010c86:	f380 8811 	msr	BASEPRI, r0
 8010c8a:	f3bf 8f4f 	dsb	sy
 8010c8e:	f3bf 8f6f 	isb	sy
 8010c92:	b662      	cpsie	i
 8010c94:	f7fe fe50 	bl	800f938 <vTaskSwitchContext>
 8010c98:	f04f 0000 	mov.w	r0, #0
 8010c9c:	f380 8811 	msr	BASEPRI, r0
 8010ca0:	bc09      	pop	{r0, r3}
 8010ca2:	6819      	ldr	r1, [r3, #0]
 8010ca4:	6808      	ldr	r0, [r1, #0]
 8010ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010caa:	f01e 0f10 	tst.w	lr, #16
 8010cae:	bf08      	it	eq
 8010cb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010cb4:	f380 8809 	msr	PSP, r0
 8010cb8:	f3bf 8f6f 	isb	sy
 8010cbc:	4770      	bx	lr
 8010cbe:	bf00      	nop

08010cc0 <pxCurrentTCBConst>:
 8010cc0:	200086f0 	.word	0x200086f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010cc4:	bf00      	nop
 8010cc6:	bf00      	nop

08010cc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8010cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cd2:	b672      	cpsid	i
 8010cd4:	f383 8811 	msr	BASEPRI, r3
 8010cd8:	f3bf 8f6f 	isb	sy
 8010cdc:	f3bf 8f4f 	dsb	sy
 8010ce0:	b662      	cpsie	i
 8010ce2:	607b      	str	r3, [r7, #4]
}
 8010ce4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010ce6:	f7fe fd6b 	bl	800f7c0 <xTaskIncrementTick>
 8010cea:	4603      	mov	r3, r0
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d003      	beq.n	8010cf8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010cf0:	4b06      	ldr	r3, [pc, #24]	@ (8010d0c <SysTick_Handler+0x44>)
 8010cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010cf6:	601a      	str	r2, [r3, #0]
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	f383 8811 	msr	BASEPRI, r3
}
 8010d02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010d04:	bf00      	nop
 8010d06:	3708      	adds	r7, #8
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}
 8010d0c:	e000ed04 	.word	0xe000ed04

08010d10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010d10:	b480      	push	{r7}
 8010d12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010d14:	4b0b      	ldr	r3, [pc, #44]	@ (8010d44 <vPortSetupTimerInterrupt+0x34>)
 8010d16:	2200      	movs	r2, #0
 8010d18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8010d48 <vPortSetupTimerInterrupt+0x38>)
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010d20:	4b0a      	ldr	r3, [pc, #40]	@ (8010d4c <vPortSetupTimerInterrupt+0x3c>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	4a0a      	ldr	r2, [pc, #40]	@ (8010d50 <vPortSetupTimerInterrupt+0x40>)
 8010d26:	fba2 2303 	umull	r2, r3, r2, r3
 8010d2a:	099b      	lsrs	r3, r3, #6
 8010d2c:	4a09      	ldr	r2, [pc, #36]	@ (8010d54 <vPortSetupTimerInterrupt+0x44>)
 8010d2e:	3b01      	subs	r3, #1
 8010d30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010d32:	4b04      	ldr	r3, [pc, #16]	@ (8010d44 <vPortSetupTimerInterrupt+0x34>)
 8010d34:	2207      	movs	r2, #7
 8010d36:	601a      	str	r2, [r3, #0]
}
 8010d38:	bf00      	nop
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d40:	4770      	bx	lr
 8010d42:	bf00      	nop
 8010d44:	e000e010 	.word	0xe000e010
 8010d48:	e000e018 	.word	0xe000e018
 8010d4c:	200000e0 	.word	0x200000e0
 8010d50:	10624dd3 	.word	0x10624dd3
 8010d54:	e000e014 	.word	0xe000e014

08010d58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010d58:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010d68 <vPortEnableVFP+0x10>
 8010d5c:	6801      	ldr	r1, [r0, #0]
 8010d5e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010d62:	6001      	str	r1, [r0, #0]
 8010d64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010d66:	bf00      	nop
 8010d68:	e000ed88 	.word	0xe000ed88

08010d6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b085      	sub	sp, #20
 8010d70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010d72:	f3ef 8305 	mrs	r3, IPSR
 8010d76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	2b0f      	cmp	r3, #15
 8010d7c:	d917      	bls.n	8010dae <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010d7e:	4a1a      	ldr	r2, [pc, #104]	@ (8010de8 <vPortValidateInterruptPriority+0x7c>)
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	4413      	add	r3, r2
 8010d84:	781b      	ldrb	r3, [r3, #0]
 8010d86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010d88:	4b18      	ldr	r3, [pc, #96]	@ (8010dec <vPortValidateInterruptPriority+0x80>)
 8010d8a:	781b      	ldrb	r3, [r3, #0]
 8010d8c:	7afa      	ldrb	r2, [r7, #11]
 8010d8e:	429a      	cmp	r2, r3
 8010d90:	d20d      	bcs.n	8010dae <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8010d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d96:	b672      	cpsid	i
 8010d98:	f383 8811 	msr	BASEPRI, r3
 8010d9c:	f3bf 8f6f 	isb	sy
 8010da0:	f3bf 8f4f 	dsb	sy
 8010da4:	b662      	cpsie	i
 8010da6:	607b      	str	r3, [r7, #4]
}
 8010da8:	bf00      	nop
 8010daa:	bf00      	nop
 8010dac:	e7fd      	b.n	8010daa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010dae:	4b10      	ldr	r3, [pc, #64]	@ (8010df0 <vPortValidateInterruptPriority+0x84>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010db6:	4b0f      	ldr	r3, [pc, #60]	@ (8010df4 <vPortValidateInterruptPriority+0x88>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d90d      	bls.n	8010dda <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8010dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dc2:	b672      	cpsid	i
 8010dc4:	f383 8811 	msr	BASEPRI, r3
 8010dc8:	f3bf 8f6f 	isb	sy
 8010dcc:	f3bf 8f4f 	dsb	sy
 8010dd0:	b662      	cpsie	i
 8010dd2:	603b      	str	r3, [r7, #0]
}
 8010dd4:	bf00      	nop
 8010dd6:	bf00      	nop
 8010dd8:	e7fd      	b.n	8010dd6 <vPortValidateInterruptPriority+0x6a>
	}
 8010dda:	bf00      	nop
 8010ddc:	3714      	adds	r7, #20
 8010dde:	46bd      	mov	sp, r7
 8010de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de4:	4770      	bx	lr
 8010de6:	bf00      	nop
 8010de8:	e000e3f0 	.word	0xe000e3f0
 8010dec:	20008d24 	.word	0x20008d24
 8010df0:	e000ed0c 	.word	0xe000ed0c
 8010df4:	20008d28 	.word	0x20008d28

08010df8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b08a      	sub	sp, #40	@ 0x28
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010e00:	2300      	movs	r3, #0
 8010e02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010e04:	f7fe fc1e 	bl	800f644 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010e08:	4b5d      	ldr	r3, [pc, #372]	@ (8010f80 <pvPortMalloc+0x188>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d101      	bne.n	8010e14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010e10:	f000 f920 	bl	8011054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010e14:	4b5b      	ldr	r3, [pc, #364]	@ (8010f84 <pvPortMalloc+0x18c>)
 8010e16:	681a      	ldr	r2, [r3, #0]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	4013      	ands	r3, r2
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	f040 8094 	bne.w	8010f4a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d020      	beq.n	8010e6a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8010e28:	2208      	movs	r2, #8
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	4413      	add	r3, r2
 8010e2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f003 0307 	and.w	r3, r3, #7
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d017      	beq.n	8010e6a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f023 0307 	bic.w	r3, r3, #7
 8010e40:	3308      	adds	r3, #8
 8010e42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f003 0307 	and.w	r3, r3, #7
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d00d      	beq.n	8010e6a <pvPortMalloc+0x72>
	__asm volatile
 8010e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e52:	b672      	cpsid	i
 8010e54:	f383 8811 	msr	BASEPRI, r3
 8010e58:	f3bf 8f6f 	isb	sy
 8010e5c:	f3bf 8f4f 	dsb	sy
 8010e60:	b662      	cpsie	i
 8010e62:	617b      	str	r3, [r7, #20]
}
 8010e64:	bf00      	nop
 8010e66:	bf00      	nop
 8010e68:	e7fd      	b.n	8010e66 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d06c      	beq.n	8010f4a <pvPortMalloc+0x152>
 8010e70:	4b45      	ldr	r3, [pc, #276]	@ (8010f88 <pvPortMalloc+0x190>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	687a      	ldr	r2, [r7, #4]
 8010e76:	429a      	cmp	r2, r3
 8010e78:	d867      	bhi.n	8010f4a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010e7a:	4b44      	ldr	r3, [pc, #272]	@ (8010f8c <pvPortMalloc+0x194>)
 8010e7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010e7e:	4b43      	ldr	r3, [pc, #268]	@ (8010f8c <pvPortMalloc+0x194>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e84:	e004      	b.n	8010e90 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8010e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e92:	685b      	ldr	r3, [r3, #4]
 8010e94:	687a      	ldr	r2, [r7, #4]
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d903      	bls.n	8010ea2 <pvPortMalloc+0xaa>
 8010e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d1f1      	bne.n	8010e86 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010ea2:	4b37      	ldr	r3, [pc, #220]	@ (8010f80 <pvPortMalloc+0x188>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	d04e      	beq.n	8010f4a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010eac:	6a3b      	ldr	r3, [r7, #32]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	2208      	movs	r2, #8
 8010eb2:	4413      	add	r3, r2
 8010eb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eb8:	681a      	ldr	r2, [r3, #0]
 8010eba:	6a3b      	ldr	r3, [r7, #32]
 8010ebc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ec0:	685a      	ldr	r2, [r3, #4]
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	1ad2      	subs	r2, r2, r3
 8010ec6:	2308      	movs	r3, #8
 8010ec8:	005b      	lsls	r3, r3, #1
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	d922      	bls.n	8010f14 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	4413      	add	r3, r2
 8010ed4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ed6:	69bb      	ldr	r3, [r7, #24]
 8010ed8:	f003 0307 	and.w	r3, r3, #7
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d00d      	beq.n	8010efc <pvPortMalloc+0x104>
	__asm volatile
 8010ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ee4:	b672      	cpsid	i
 8010ee6:	f383 8811 	msr	BASEPRI, r3
 8010eea:	f3bf 8f6f 	isb	sy
 8010eee:	f3bf 8f4f 	dsb	sy
 8010ef2:	b662      	cpsie	i
 8010ef4:	613b      	str	r3, [r7, #16]
}
 8010ef6:	bf00      	nop
 8010ef8:	bf00      	nop
 8010efa:	e7fd      	b.n	8010ef8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010efe:	685a      	ldr	r2, [r3, #4]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	1ad2      	subs	r2, r2, r3
 8010f04:	69bb      	ldr	r3, [r7, #24]
 8010f06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f0a:	687a      	ldr	r2, [r7, #4]
 8010f0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010f0e:	69b8      	ldr	r0, [r7, #24]
 8010f10:	f000 f902 	bl	8011118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010f14:	4b1c      	ldr	r3, [pc, #112]	@ (8010f88 <pvPortMalloc+0x190>)
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f1a:	685b      	ldr	r3, [r3, #4]
 8010f1c:	1ad3      	subs	r3, r2, r3
 8010f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8010f88 <pvPortMalloc+0x190>)
 8010f20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010f22:	4b19      	ldr	r3, [pc, #100]	@ (8010f88 <pvPortMalloc+0x190>)
 8010f24:	681a      	ldr	r2, [r3, #0]
 8010f26:	4b1a      	ldr	r3, [pc, #104]	@ (8010f90 <pvPortMalloc+0x198>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d203      	bcs.n	8010f36 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010f2e:	4b16      	ldr	r3, [pc, #88]	@ (8010f88 <pvPortMalloc+0x190>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	4a17      	ldr	r2, [pc, #92]	@ (8010f90 <pvPortMalloc+0x198>)
 8010f34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f38:	685a      	ldr	r2, [r3, #4]
 8010f3a:	4b12      	ldr	r3, [pc, #72]	@ (8010f84 <pvPortMalloc+0x18c>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	431a      	orrs	r2, r3
 8010f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f46:	2200      	movs	r2, #0
 8010f48:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010f4a:	f7fe fb89 	bl	800f660 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f4e:	69fb      	ldr	r3, [r7, #28]
 8010f50:	f003 0307 	and.w	r3, r3, #7
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d00d      	beq.n	8010f74 <pvPortMalloc+0x17c>
	__asm volatile
 8010f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f5c:	b672      	cpsid	i
 8010f5e:	f383 8811 	msr	BASEPRI, r3
 8010f62:	f3bf 8f6f 	isb	sy
 8010f66:	f3bf 8f4f 	dsb	sy
 8010f6a:	b662      	cpsie	i
 8010f6c:	60fb      	str	r3, [r7, #12]
}
 8010f6e:	bf00      	nop
 8010f70:	bf00      	nop
 8010f72:	e7fd      	b.n	8010f70 <pvPortMalloc+0x178>
	return pvReturn;
 8010f74:	69fb      	ldr	r3, [r7, #28]
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	3728      	adds	r7, #40	@ 0x28
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}
 8010f7e:	bf00      	nop
 8010f80:	2000c934 	.word	0x2000c934
 8010f84:	2000c940 	.word	0x2000c940
 8010f88:	2000c938 	.word	0x2000c938
 8010f8c:	2000c92c 	.word	0x2000c92c
 8010f90:	2000c93c 	.word	0x2000c93c

08010f94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b086      	sub	sp, #24
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d04e      	beq.n	8011044 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010fa6:	2308      	movs	r3, #8
 8010fa8:	425b      	negs	r3, r3
 8010faa:	697a      	ldr	r2, [r7, #20]
 8010fac:	4413      	add	r3, r2
 8010fae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	685a      	ldr	r2, [r3, #4]
 8010fb8:	4b24      	ldr	r3, [pc, #144]	@ (801104c <vPortFree+0xb8>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	4013      	ands	r3, r2
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d10d      	bne.n	8010fde <vPortFree+0x4a>
	__asm volatile
 8010fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fc6:	b672      	cpsid	i
 8010fc8:	f383 8811 	msr	BASEPRI, r3
 8010fcc:	f3bf 8f6f 	isb	sy
 8010fd0:	f3bf 8f4f 	dsb	sy
 8010fd4:	b662      	cpsie	i
 8010fd6:	60fb      	str	r3, [r7, #12]
}
 8010fd8:	bf00      	nop
 8010fda:	bf00      	nop
 8010fdc:	e7fd      	b.n	8010fda <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d00d      	beq.n	8011002 <vPortFree+0x6e>
	__asm volatile
 8010fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fea:	b672      	cpsid	i
 8010fec:	f383 8811 	msr	BASEPRI, r3
 8010ff0:	f3bf 8f6f 	isb	sy
 8010ff4:	f3bf 8f4f 	dsb	sy
 8010ff8:	b662      	cpsie	i
 8010ffa:	60bb      	str	r3, [r7, #8]
}
 8010ffc:	bf00      	nop
 8010ffe:	bf00      	nop
 8011000:	e7fd      	b.n	8010ffe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	685a      	ldr	r2, [r3, #4]
 8011006:	4b11      	ldr	r3, [pc, #68]	@ (801104c <vPortFree+0xb8>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	4013      	ands	r3, r2
 801100c:	2b00      	cmp	r3, #0
 801100e:	d019      	beq.n	8011044 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d115      	bne.n	8011044 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011018:	693b      	ldr	r3, [r7, #16]
 801101a:	685a      	ldr	r2, [r3, #4]
 801101c:	4b0b      	ldr	r3, [pc, #44]	@ (801104c <vPortFree+0xb8>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	43db      	mvns	r3, r3
 8011022:	401a      	ands	r2, r3
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011028:	f7fe fb0c 	bl	800f644 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	685a      	ldr	r2, [r3, #4]
 8011030:	4b07      	ldr	r3, [pc, #28]	@ (8011050 <vPortFree+0xbc>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	4413      	add	r3, r2
 8011036:	4a06      	ldr	r2, [pc, #24]	@ (8011050 <vPortFree+0xbc>)
 8011038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801103a:	6938      	ldr	r0, [r7, #16]
 801103c:	f000 f86c 	bl	8011118 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011040:	f7fe fb0e 	bl	800f660 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011044:	bf00      	nop
 8011046:	3718      	adds	r7, #24
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}
 801104c:	2000c940 	.word	0x2000c940
 8011050:	2000c938 	.word	0x2000c938

08011054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011054:	b480      	push	{r7}
 8011056:	b085      	sub	sp, #20
 8011058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801105a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801105e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011060:	4b27      	ldr	r3, [pc, #156]	@ (8011100 <prvHeapInit+0xac>)
 8011062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f003 0307 	and.w	r3, r3, #7
 801106a:	2b00      	cmp	r3, #0
 801106c:	d00c      	beq.n	8011088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	3307      	adds	r3, #7
 8011072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	f023 0307 	bic.w	r3, r3, #7
 801107a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801107c:	68ba      	ldr	r2, [r7, #8]
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	1ad3      	subs	r3, r2, r3
 8011082:	4a1f      	ldr	r2, [pc, #124]	@ (8011100 <prvHeapInit+0xac>)
 8011084:	4413      	add	r3, r2
 8011086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801108c:	4a1d      	ldr	r2, [pc, #116]	@ (8011104 <prvHeapInit+0xb0>)
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011092:	4b1c      	ldr	r3, [pc, #112]	@ (8011104 <prvHeapInit+0xb0>)
 8011094:	2200      	movs	r2, #0
 8011096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	68ba      	ldr	r2, [r7, #8]
 801109c:	4413      	add	r3, r2
 801109e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80110a0:	2208      	movs	r2, #8
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	1a9b      	subs	r3, r3, r2
 80110a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f023 0307 	bic.w	r3, r3, #7
 80110ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	4a15      	ldr	r2, [pc, #84]	@ (8011108 <prvHeapInit+0xb4>)
 80110b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80110b6:	4b14      	ldr	r3, [pc, #80]	@ (8011108 <prvHeapInit+0xb4>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	2200      	movs	r2, #0
 80110bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80110be:	4b12      	ldr	r3, [pc, #72]	@ (8011108 <prvHeapInit+0xb4>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	2200      	movs	r2, #0
 80110c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	68fa      	ldr	r2, [r7, #12]
 80110ce:	1ad2      	subs	r2, r2, r3
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80110d4:	4b0c      	ldr	r3, [pc, #48]	@ (8011108 <prvHeapInit+0xb4>)
 80110d6:	681a      	ldr	r2, [r3, #0]
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	685b      	ldr	r3, [r3, #4]
 80110e0:	4a0a      	ldr	r2, [pc, #40]	@ (801110c <prvHeapInit+0xb8>)
 80110e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	685b      	ldr	r3, [r3, #4]
 80110e8:	4a09      	ldr	r2, [pc, #36]	@ (8011110 <prvHeapInit+0xbc>)
 80110ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80110ec:	4b09      	ldr	r3, [pc, #36]	@ (8011114 <prvHeapInit+0xc0>)
 80110ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80110f2:	601a      	str	r2, [r3, #0]
}
 80110f4:	bf00      	nop
 80110f6:	3714      	adds	r7, #20
 80110f8:	46bd      	mov	sp, r7
 80110fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fe:	4770      	bx	lr
 8011100:	20008d2c 	.word	0x20008d2c
 8011104:	2000c92c 	.word	0x2000c92c
 8011108:	2000c934 	.word	0x2000c934
 801110c:	2000c93c 	.word	0x2000c93c
 8011110:	2000c938 	.word	0x2000c938
 8011114:	2000c940 	.word	0x2000c940

08011118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011118:	b480      	push	{r7}
 801111a:	b085      	sub	sp, #20
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011120:	4b28      	ldr	r3, [pc, #160]	@ (80111c4 <prvInsertBlockIntoFreeList+0xac>)
 8011122:	60fb      	str	r3, [r7, #12]
 8011124:	e002      	b.n	801112c <prvInsertBlockIntoFreeList+0x14>
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	60fb      	str	r3, [r7, #12]
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	687a      	ldr	r2, [r7, #4]
 8011132:	429a      	cmp	r2, r3
 8011134:	d8f7      	bhi.n	8011126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	68ba      	ldr	r2, [r7, #8]
 8011140:	4413      	add	r3, r2
 8011142:	687a      	ldr	r2, [r7, #4]
 8011144:	429a      	cmp	r2, r3
 8011146:	d108      	bne.n	801115a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	685a      	ldr	r2, [r3, #4]
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	441a      	add	r2, r3
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	68ba      	ldr	r2, [r7, #8]
 8011164:	441a      	add	r2, r3
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	429a      	cmp	r2, r3
 801116c:	d118      	bne.n	80111a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	681a      	ldr	r2, [r3, #0]
 8011172:	4b15      	ldr	r3, [pc, #84]	@ (80111c8 <prvInsertBlockIntoFreeList+0xb0>)
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	429a      	cmp	r2, r3
 8011178:	d00d      	beq.n	8011196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	685a      	ldr	r2, [r3, #4]
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	685b      	ldr	r3, [r3, #4]
 8011184:	441a      	add	r2, r3
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	681a      	ldr	r2, [r3, #0]
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	601a      	str	r2, [r3, #0]
 8011194:	e008      	b.n	80111a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011196:	4b0c      	ldr	r3, [pc, #48]	@ (80111c8 <prvInsertBlockIntoFreeList+0xb0>)
 8011198:	681a      	ldr	r2, [r3, #0]
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	601a      	str	r2, [r3, #0]
 801119e:	e003      	b.n	80111a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	681a      	ldr	r2, [r3, #0]
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80111a8:	68fa      	ldr	r2, [r7, #12]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	429a      	cmp	r2, r3
 80111ae:	d002      	beq.n	80111b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	687a      	ldr	r2, [r7, #4]
 80111b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80111b6:	bf00      	nop
 80111b8:	3714      	adds	r7, #20
 80111ba:	46bd      	mov	sp, r7
 80111bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c0:	4770      	bx	lr
 80111c2:	bf00      	nop
 80111c4:	2000c92c 	.word	0x2000c92c
 80111c8:	2000c934 	.word	0x2000c934

080111cc <opStart>:
// ------------------------------------------------------------------------
// Private functions

// SH-2 transaction phases
static int opStart(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b084      	sub	sp, #16
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	6039      	str	r1, [r7, #0]
    // return error if another operation already in progress
    if (pSh2->pOp) return SH2_ERR_OP_IN_PROGRESS;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	69db      	ldr	r3, [r3, #28]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d002      	beq.n	80111e4 <opStart+0x18>
 80111de:	f06f 0302 	mvn.w	r3, #2
 80111e2:	e014      	b.n	801120e <opStart+0x42>

    // Establish this operation as the new operation in progress
    pSh2->pOp = pOp;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	683a      	ldr	r2, [r7, #0]
 80111e8:	61da      	str	r2, [r3, #28]
    pSh2->opStatus = SH2_OK;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	2200      	movs	r2, #0
 80111ee:	621a      	str	r2, [r3, #32]
    int rc = pOp->start(pSh2);  // Call start method
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	685b      	ldr	r3, [r3, #4]
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	4798      	blx	r3
 80111f8:	60f8      	str	r0, [r7, #12]
    if (rc != SH2_OK) {
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d005      	beq.n	801120c <opStart+0x40>
        // Unregister this operation
        pSh2->opStatus = rc;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	68fa      	ldr	r2, [r7, #12]
 8011204:	621a      	str	r2, [r3, #32]
        pSh2->pOp = 0;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2200      	movs	r2, #0
 801120a:	61da      	str	r2, [r3, #28]
    }

    return rc;
 801120c:	68fb      	ldr	r3, [r7, #12]
}
 801120e:	4618      	mov	r0, r3
 8011210:	3710      	adds	r7, #16
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}

08011216 <opRx>:

static void opRx(sh2_t *pSh2, const uint8_t *payload, uint16_t len)
{ 
 8011216:	b580      	push	{r7, lr}
 8011218:	b084      	sub	sp, #16
 801121a:	af00      	add	r7, sp, #0
 801121c:	60f8      	str	r0, [r7, #12]
 801121e:	60b9      	str	r1, [r7, #8]
 8011220:	4613      	mov	r3, r2
 8011222:	80fb      	strh	r3, [r7, #6]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	69db      	ldr	r3, [r3, #28]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d00b      	beq.n	8011244 <opRx+0x2e>
        (pSh2->pOp->rx != 0)) {                  // and it has an rx method
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	69db      	ldr	r3, [r3, #28]
 8011230:	689b      	ldr	r3, [r3, #8]
    if ((pSh2->pOp != 0) &&                      // An operation is in progress
 8011232:	2b00      	cmp	r3, #0
 8011234:	d006      	beq.n	8011244 <opRx+0x2e>
        pSh2->pOp->rx(pSh2, payload, len);  // Call receive method
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	69db      	ldr	r3, [r3, #28]
 801123a:	689b      	ldr	r3, [r3, #8]
 801123c:	88fa      	ldrh	r2, [r7, #6]
 801123e:	68b9      	ldr	r1, [r7, #8]
 8011240:	68f8      	ldr	r0, [r7, #12]
 8011242:	4798      	blx	r3
    }
}
 8011244:	bf00      	nop
 8011246:	3710      	adds	r7, #16
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}

0801124c <opCompleted>:

static int opCompleted(sh2_t *pSh2, int status)
{
 801124c:	b480      	push	{r7}
 801124e:	b083      	sub	sp, #12
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6039      	str	r1, [r7, #0]
    // Record status
    pSh2->opStatus = status;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	683a      	ldr	r2, [r7, #0]
 801125a:	621a      	str	r2, [r3, #32]

    // Signal that op is done.
    pSh2->pOp = 0;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2200      	movs	r2, #0
 8011260:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8011262:	2300      	movs	r3, #0
}
 8011264:	4618      	mov	r0, r3
 8011266:	370c      	adds	r7, #12
 8011268:	46bd      	mov	sp, r7
 801126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126e:	4770      	bx	lr

08011270 <opOnReset>:

static void opOnReset(sh2_t *pSh2)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
    if (pSh2->pOp != 0) {
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	69db      	ldr	r3, [r3, #28]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d00f      	beq.n	80112a0 <opOnReset+0x30>
        if (pSh2->pOp->onReset != 0) {
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	69db      	ldr	r3, [r3, #28]
 8011284:	68db      	ldr	r3, [r3, #12]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d005      	beq.n	8011296 <opOnReset+0x26>
            // This operation has its own reset handler so use it.
            pSh2->pOp->onReset(pSh2);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	69db      	ldr	r3, [r3, #28]
 801128e:	68db      	ldr	r3, [r3, #12]
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	4798      	blx	r3
        else {
            // No reset handler : abort the operation with SH2_ERR code
            opCompleted(pSh2, SH2_ERR);
        }
    }
}
 8011294:	e004      	b.n	80112a0 <opOnReset+0x30>
            opCompleted(pSh2, SH2_ERR);
 8011296:	f04f 31ff 	mov.w	r1, #4294967295
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f7ff ffd6 	bl	801124c <opCompleted>
}
 80112a0:	bf00      	nop
 80112a2:	3708      	adds	r7, #8
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}

080112a8 <getReportLen>:

static uint8_t getReportLen(uint8_t reportId)
{
 80112a8:	b480      	push	{r7}
 80112aa:	b085      	sub	sp, #20
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	4603      	mov	r3, r0
 80112b0:	71fb      	strb	r3, [r7, #7]
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 80112b2:	2300      	movs	r3, #0
 80112b4:	60fb      	str	r3, [r7, #12]
 80112b6:	e00f      	b.n	80112d8 <getReportLen+0x30>
        if (sh2ReportLens[n].id == reportId) {
 80112b8:	4a0c      	ldr	r2, [pc, #48]	@ (80112ec <getReportLen+0x44>)
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80112c0:	79fa      	ldrb	r2, [r7, #7]
 80112c2:	429a      	cmp	r2, r3
 80112c4:	d105      	bne.n	80112d2 <getReportLen+0x2a>
            return sh2ReportLens[n].len;
 80112c6:	4a09      	ldr	r2, [pc, #36]	@ (80112ec <getReportLen+0x44>)
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	005b      	lsls	r3, r3, #1
 80112cc:	4413      	add	r3, r2
 80112ce:	785b      	ldrb	r3, [r3, #1]
 80112d0:	e006      	b.n	80112e0 <getReportLen+0x38>
    for (unsigned n = 0; n < ARRAY_LEN(sh2ReportLens); n++) {
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	3301      	adds	r3, #1
 80112d6:	60fb      	str	r3, [r7, #12]
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	2b2f      	cmp	r3, #47	@ 0x2f
 80112dc:	d9ec      	bls.n	80112b8 <getReportLen+0x10>
        }
    }

    return 0;
 80112de:	2300      	movs	r3, #0
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3714      	adds	r7, #20
 80112e4:	46bd      	mov	sp, r7
 80112e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ea:	4770      	bx	lr
 80112ec:	08016e4c 	.word	0x08016e4c

080112f0 <sensorhubControlHdlr>:

static void sensorhubControlHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b08a      	sub	sp, #40	@ 0x28
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	60f8      	str	r0, [r7, #12]
 80112f8:	60b9      	str	r1, [r7, #8]
 80112fa:	603b      	str	r3, [r7, #0]
 80112fc:	4613      	mov	r3, r2
 80112fe:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused.
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	61fb      	str	r3, [r7, #28]

    uint16_t cursor = 0;
 8011304:	2300      	movs	r3, #0
 8011306:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint32_t count = 0;
 8011308:	2300      	movs	r3, #0
 801130a:	623b      	str	r3, [r7, #32]
    CommandResp_t * pResp = 0;
 801130c:	2300      	movs	r3, #0
 801130e:	61bb      	str	r3, [r7, #24]

    if (len == 0) {
 8011310:	88fb      	ldrh	r3, [r7, #6]
 8011312:	2b00      	cmp	r3, #0
 8011314:	f040 8094 	bne.w	8011440 <sensorhubControlHdlr+0x150>
        pSh2->emptyPayloads++;
 8011318:	69fb      	ldr	r3, [r7, #28]
 801131a:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
 801131e:	1c5a      	adds	r2, r3, #1
 8011320:	69fb      	ldr	r3, [r7, #28]
 8011322:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
        return;
 8011326:	e090      	b.n	801144a <sensorhubControlHdlr+0x15a>
    }

    while (cursor < len) {
        // Get next report id
        count++;
 8011328:	6a3b      	ldr	r3, [r7, #32]
 801132a:	3301      	adds	r3, #1
 801132c:	623b      	str	r3, [r7, #32]
        uint8_t reportId = payload[cursor];
 801132e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011330:	68ba      	ldr	r2, [r7, #8]
 8011332:	4413      	add	r3, r2
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	75fb      	strb	r3, [r7, #23]

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 8011338:	7dfb      	ldrb	r3, [r7, #23]
 801133a:	4618      	mov	r0, r3
 801133c:	f7ff ffb4 	bl	80112a8 <getReportLen>
 8011340:	4603      	mov	r3, r0
 8011342:	75bb      	strb	r3, [r7, #22]
        if (reportLen == 0) {
 8011344:	7dbb      	ldrb	r3, [r7, #22]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d107      	bne.n	801135a <sensorhubControlHdlr+0x6a>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 801134a:	69fb      	ldr	r3, [r7, #28]
 801134c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8011350:	1c5a      	adds	r2, r3, #1
 8011352:	69fb      	ldr	r3, [r7, #28]
 8011354:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
            return;
 8011358:	e077      	b.n	801144a <sensorhubControlHdlr+0x15a>
        }
        else {
            // Check for unsolicited initialize response
            if (reportId == SENSORHUB_COMMAND_RESP) {
 801135a:	7dfb      	ldrb	r3, [r7, #23]
 801135c:	2bf1      	cmp	r3, #241	@ 0xf1
 801135e:	d107      	bne.n	8011370 <sensorhubControlHdlr+0x80>
                pResp = (CommandResp_t *)(payload+cursor);
 8011360:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011362:	68ba      	ldr	r2, [r7, #8]
 8011364:	4413      	add	r3, r2
 8011366:	61bb      	str	r3, [r7, #24]
                if ((pResp->command == (SH2_CMD_INITIALIZE | SH2_INIT_UNSOLICITED)) &&
 8011368:	69bb      	ldr	r3, [r7, #24]
 801136a:	789b      	ldrb	r3, [r3, #2]
 801136c:	2b84      	cmp	r3, #132	@ 0x84
 801136e:	e059      	b.n	8011424 <sensorhubControlHdlr+0x134>
                    // This is an unsolicited INIT message.
                    // Ignore this.  EXECUTABLE_DEVICE_RESP_RESET_COMPLETE makes it redundant.
                }

            } // Check for Get Feature Response
            else if (reportId == SENSORHUB_GET_FEATURE_RESP) {
 8011370:	7dfb      	ldrb	r3, [r7, #23]
 8011372:	2bfc      	cmp	r3, #252	@ 0xfc
 8011374:	d156      	bne.n	8011424 <sensorhubControlHdlr+0x134>
                if (pSh2->eventCallback) {
 8011376:	69fb      	ldr	r3, [r7, #28]
 8011378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801137a:	2b00      	cmp	r3, #0
 801137c:	d052      	beq.n	8011424 <sensorhubControlHdlr+0x134>
                    GetFeatureResp_t * pGetFeatureResp;
                    pGetFeatureResp = (GetFeatureResp_t *)(payload + cursor);
 801137e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011380:	68ba      	ldr	r2, [r7, #8]
 8011382:	4413      	add	r3, r2
 8011384:	613b      	str	r3, [r7, #16]

                    sh2AsyncEvent.eventId = SH2_GET_FEATURE_RESP;
 8011386:	4b32      	ldr	r3, [pc, #200]	@ (8011450 <sensorhubControlHdlr+0x160>)
 8011388:	2202      	movs	r2, #2
 801138a:	601a      	str	r2, [r3, #0]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorId = pGetFeatureResp->featureReportId;
 801138c:	693b      	ldr	r3, [r7, #16]
 801138e:	785a      	ldrb	r2, [r3, #1]
 8011390:	4b2f      	ldr	r3, [pc, #188]	@ (8011450 <sensorhubControlHdlr+0x160>)
 8011392:	711a      	strb	r2, [r3, #4]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_ENABLED) != 0);
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	789b      	ldrb	r3, [r3, #2]
 8011398:	f003 0302 	and.w	r3, r3, #2
 801139c:	2b00      	cmp	r3, #0
 801139e:	bf14      	ite	ne
 80113a0:	2301      	movne	r3, #1
 80113a2:	2300      	moveq	r3, #0
 80113a4:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityEnabled =
 80113a6:	4b2a      	ldr	r3, [pc, #168]	@ (8011450 <sensorhubControlHdlr+0x160>)
 80113a8:	721a      	strb	r2, [r3, #8]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
                        ((pGetFeatureResp->flags & FEAT_CHANGE_SENSITIVITY_RELATIVE) != 0);
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	789b      	ldrb	r3, [r3, #2]
 80113ae:	f003 0301 	and.w	r3, r3, #1
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	bf14      	ite	ne
 80113b6:	2301      	movne	r3, #1
 80113b8:	2300      	moveq	r3, #0
 80113ba:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivityRelative =
 80113bc:	4b24      	ldr	r3, [pc, #144]	@ (8011450 <sensorhubControlHdlr+0x160>)
 80113be:	725a      	strb	r2, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
                        ((pGetFeatureResp->flags & FEAT_WAKE_ENABLED) != 0);
 80113c0:	693b      	ldr	r3, [r7, #16]
 80113c2:	789b      	ldrb	r3, [r3, #2]
 80113c4:	f003 0304 	and.w	r3, r3, #4
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	bf14      	ite	ne
 80113cc:	2301      	movne	r3, #1
 80113ce:	2300      	moveq	r3, #0
 80113d0:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.wakeupEnabled =
 80113d2:	4b1f      	ldr	r3, [pc, #124]	@ (8011450 <sensorhubControlHdlr+0x160>)
 80113d4:	729a      	strb	r2, [r3, #10]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
                        ((pGetFeatureResp->flags & FEAT_ALWAYS_ON_ENABLED) != 0);
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	789b      	ldrb	r3, [r3, #2]
 80113da:	f003 0308 	and.w	r3, r3, #8
 80113de:	2b00      	cmp	r3, #0
 80113e0:	bf14      	ite	ne
 80113e2:	2301      	movne	r3, #1
 80113e4:	2300      	moveq	r3, #0
 80113e6:	b2da      	uxtb	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.alwaysOnEnabled =
 80113e8:	4b19      	ldr	r3, [pc, #100]	@ (8011450 <sensorhubControlHdlr+0x160>)
 80113ea:	72da      	strb	r2, [r3, #11]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
                        pGetFeatureResp->changeSensitivity;
 80113ec:	693b      	ldr	r3, [r7, #16]
 80113ee:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80113f2:	b29a      	uxth	r2, r3
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.changeSensitivity =
 80113f4:	4b16      	ldr	r3, [pc, #88]	@ (8011450 <sensorhubControlHdlr+0x160>)
 80113f6:	81da      	strh	r2, [r3, #14]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
                        pGetFeatureResp->reportInterval_uS;
 80113f8:	693b      	ldr	r3, [r7, #16]
 80113fa:	f8d3 3005 	ldr.w	r3, [r3, #5]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.reportInterval_us =
 80113fe:	4a14      	ldr	r2, [pc, #80]	@ (8011450 <sensorhubControlHdlr+0x160>)
 8011400:	6113      	str	r3, [r2, #16]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
                        pGetFeatureResp->batchInterval_uS;
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	f8d3 3009 	ldr.w	r3, [r3, #9]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.batchInterval_us =
 8011408:	4a11      	ldr	r2, [pc, #68]	@ (8011450 <sensorhubControlHdlr+0x160>)
 801140a:	6153      	str	r3, [r2, #20]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
                        pGetFeatureResp->sensorSpecific;
 801140c:	693b      	ldr	r3, [r7, #16]
 801140e:	f8d3 300d 	ldr.w	r3, [r3, #13]
                    sh2AsyncEvent.sh2SensorConfigResp.sensorConfig.sensorSpecific =
 8011412:	4a0f      	ldr	r2, [pc, #60]	@ (8011450 <sensorhubControlHdlr+0x160>)
 8011414:	6193      	str	r3, [r2, #24]

                    pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8011416:	69fb      	ldr	r3, [r7, #28]
 8011418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801141a:	69fa      	ldr	r2, [r7, #28]
 801141c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801141e:	490c      	ldr	r1, [pc, #48]	@ (8011450 <sensorhubControlHdlr+0x160>)
 8011420:	4610      	mov	r0, r2
 8011422:	4798      	blx	r3
                }
            }

            // Hand off to operation in progress, if any
            opRx(pSh2, payload+cursor, reportLen);
 8011424:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011426:	68ba      	ldr	r2, [r7, #8]
 8011428:	4413      	add	r3, r2
 801142a:	7dba      	ldrb	r2, [r7, #22]
 801142c:	b292      	uxth	r2, r2
 801142e:	4619      	mov	r1, r3
 8011430:	69f8      	ldr	r0, [r7, #28]
 8011432:	f7ff fef0 	bl	8011216 <opRx>
            cursor += reportLen;
 8011436:	7dbb      	ldrb	r3, [r7, #22]
 8011438:	b29a      	uxth	r2, r3
 801143a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801143c:	4413      	add	r3, r2
 801143e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    while (cursor < len) {
 8011440:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011442:	88fb      	ldrh	r3, [r7, #6]
 8011444:	429a      	cmp	r2, r3
 8011446:	f4ff af6f 	bcc.w	8011328 <sensorhubControlHdlr+0x38>
        }
    }
}
 801144a:	3728      	adds	r7, #40	@ 0x28
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	2000cabc 	.word	0x2000cabc

08011454 <opProcess>:


static int opProcess(sh2_t *pSh2, const sh2_Op_t *pOp)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	b086      	sub	sp, #24
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
 801145c:	6039      	str	r1, [r7, #0]
    int status = SH2_OK;
 801145e:	2300      	movs	r3, #0
 8011460:	613b      	str	r3, [r7, #16]
    uint32_t start_us = 0;
 8011462:	2300      	movs	r3, #0
 8011464:	60fb      	str	r3, [r7, #12]

    start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	691b      	ldr	r3, [r3, #16]
 801146c:	687a      	ldr	r2, [r7, #4]
 801146e:	6812      	ldr	r2, [r2, #0]
 8011470:	4610      	mov	r0, r2
 8011472:	4798      	blx	r3
 8011474:	60f8      	str	r0, [r7, #12]
    
    status = opStart(pSh2, pOp);
 8011476:	6839      	ldr	r1, [r7, #0]
 8011478:	6878      	ldr	r0, [r7, #4]
 801147a:	f7ff fea7 	bl	80111cc <opStart>
 801147e:	6138      	str	r0, [r7, #16]
    if (status != SH2_OK) {
 8011480:	693b      	ldr	r3, [r7, #16]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d001      	beq.n	801148a <opProcess+0x36>
        return status;
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	e034      	b.n	80114f4 <opProcess+0xa0>
    }

    uint32_t now_us = start_us;
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	617b      	str	r3, [r7, #20]
    // While op not complete and not timed out.
    while ((pSh2->pOp != 0) &&
 801148e:	e015      	b.n	80114bc <opProcess+0x68>
           ((pOp->timeout_us == 0) ||
            ((now_us-start_us) < pOp->timeout_us))) {

        if (pSh2->pShtp == 0) {
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	685b      	ldr	r3, [r3, #4]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d104      	bne.n	80114a2 <opProcess+0x4e>
            // Was SH2 interface closed unexpectedly?
            pSh2->opStatus = SH2_ERR;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f04f 32ff 	mov.w	r2, #4294967295
 801149e:	621a      	str	r2, [r3, #32]
            break;
 80114a0:	e01b      	b.n	80114da <opProcess+0x86>
        }
            
        // Service SHTP to poll the device.
        shtp_service(pSh2->pShtp);
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	685b      	ldr	r3, [r3, #4]
 80114a6:	4618      	mov	r0, r3
 80114a8:	f002 f9cf 	bl	801384a <shtp_service>

        // Update the time
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	691b      	ldr	r3, [r3, #16]
 80114b2:	687a      	ldr	r2, [r7, #4]
 80114b4:	6812      	ldr	r2, [r2, #0]
 80114b6:	4610      	mov	r0, r2
 80114b8:	4798      	blx	r3
 80114ba:	6178      	str	r0, [r7, #20]
    while ((pSh2->pOp != 0) &&
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	69db      	ldr	r3, [r3, #28]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d00a      	beq.n	80114da <opProcess+0x86>
           ((pOp->timeout_us == 0) ||
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	681b      	ldr	r3, [r3, #0]
    while ((pSh2->pOp != 0) &&
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d0e1      	beq.n	8011490 <opProcess+0x3c>
            ((now_us-start_us) < pOp->timeout_us))) {
 80114cc:	697a      	ldr	r2, [r7, #20]
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	1ad2      	subs	r2, r2, r3
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	681b      	ldr	r3, [r3, #0]
           ((pOp->timeout_us == 0) ||
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d3da      	bcc.n	8011490 <opProcess+0x3c>
    }

    if (pSh2->pOp != 0) {
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	69db      	ldr	r3, [r3, #28]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d006      	beq.n	80114f0 <opProcess+0x9c>
        // Operation has timed out.  Clean up.
        pSh2->pOp = 0;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2200      	movs	r2, #0
 80114e6:	61da      	str	r2, [r3, #28]
        pSh2->opStatus = SH2_ERR_TIMEOUT;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f06f 0205 	mvn.w	r2, #5
 80114ee:	621a      	str	r2, [r3, #32]
    }

    return pSh2->opStatus;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6a1b      	ldr	r3, [r3, #32]
}
 80114f4:	4618      	mov	r0, r3
 80114f6:	3718      	adds	r7, #24
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}

080114fc <touSTimestamp>:

// Produce 64-bit microsecond timestamp for a sensor event
static uint64_t touSTimestamp(uint32_t hostInt, int32_t referenceDelta, uint16_t delay)
{
 80114fc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011500:	b087      	sub	sp, #28
 8011502:	af00      	add	r7, sp, #0
 8011504:	60f8      	str	r0, [r7, #12]
 8011506:	60b9      	str	r1, [r7, #8]
 8011508:	4613      	mov	r3, r2
 801150a:	80fb      	strh	r3, [r7, #6]
    static uint32_t lastHostInt = 0;
    static uint32_t rollovers = 0;
    uint64_t timestamp;

    // Count times hostInt timestamps rolled over to produce upper bits
    if (hostInt < lastHostInt) {
 801150c:	4b1b      	ldr	r3, [pc, #108]	@ (801157c <touSTimestamp+0x80>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	68fa      	ldr	r2, [r7, #12]
 8011512:	429a      	cmp	r2, r3
 8011514:	d204      	bcs.n	8011520 <touSTimestamp+0x24>
        rollovers++;
 8011516:	4b1a      	ldr	r3, [pc, #104]	@ (8011580 <touSTimestamp+0x84>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	3301      	adds	r3, #1
 801151c:	4a18      	ldr	r2, [pc, #96]	@ (8011580 <touSTimestamp+0x84>)
 801151e:	6013      	str	r3, [r2, #0]
    }
    lastHostInt = hostInt;
 8011520:	4a16      	ldr	r2, [pc, #88]	@ (801157c <touSTimestamp+0x80>)
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	6013      	str	r3, [r2, #0]
    
    timestamp = ((uint64_t)rollovers << 32);
 8011526:	4b16      	ldr	r3, [pc, #88]	@ (8011580 <touSTimestamp+0x84>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	2200      	movs	r2, #0
 801152c:	469a      	mov	sl, r3
 801152e:	4693      	mov	fp, r2
 8011530:	f04f 0200 	mov.w	r2, #0
 8011534:	f04f 0300 	mov.w	r3, #0
 8011538:	4653      	mov	r3, sl
 801153a:	2200      	movs	r2, #0
 801153c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    timestamp += hostInt + (referenceDelta + delay) * 100;
 8011540:	88fa      	ldrh	r2, [r7, #6]
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	4413      	add	r3, r2
 8011546:	2264      	movs	r2, #100	@ 0x64
 8011548:	fb02 f303 	mul.w	r3, r2, r3
 801154c:	461a      	mov	r2, r3
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	4413      	add	r3, r2
 8011552:	2200      	movs	r2, #0
 8011554:	461c      	mov	r4, r3
 8011556:	4615      	mov	r5, r2
 8011558:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801155c:	eb12 0804 	adds.w	r8, r2, r4
 8011560:	eb43 0905 	adc.w	r9, r3, r5
 8011564:	e9c7 8904 	strd	r8, r9, [r7, #16]

    return timestamp;
 8011568:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 801156c:	4610      	mov	r0, r2
 801156e:	4619      	mov	r1, r3
 8011570:	371c      	adds	r7, #28
 8011572:	46bd      	mov	sp, r7
 8011574:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011578:	4770      	bx	lr
 801157a:	bf00      	nop
 801157c:	2000cad8 	.word	0x2000cad8
 8011580:	2000cadc 	.word	0x2000cadc

08011584 <sensorhubInputHdlr>:

static void sensorhubInputHdlr(sh2_t *pSh2, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8011584:	b5b0      	push	{r4, r5, r7, lr}
 8011586:	b0a0      	sub	sp, #128	@ 0x80
 8011588:	af00      	add	r7, sp, #0
 801158a:	60f8      	str	r0, [r7, #12]
 801158c:	60b9      	str	r1, [r7, #8]
 801158e:	603b      	str	r3, [r7, #0]
 8011590:	4613      	mov	r3, r2
 8011592:	80fb      	strh	r3, [r7, #6]
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 8011594:	2300      	movs	r3, #0
 8011596:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

    int32_t referenceDelta = 0;
 801159a:	2300      	movs	r3, #0
 801159c:	67bb      	str	r3, [r7, #120]	@ 0x78

    while (cursor < len) {
 801159e:	e098      	b.n	80116d2 <sensorhubInputHdlr+0x14e>
        // Get next report id
        uint8_t reportId = payload[cursor];
 80115a0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80115a4:	68ba      	ldr	r2, [r7, #8]
 80115a6:	4413      	add	r3, r2
 80115a8:	781b      	ldrb	r3, [r3, #0]
 80115aa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

        // Determine report length
        uint8_t reportLen = getReportLen(reportId);
 80115ae:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7ff fe78 	bl	80112a8 <getReportLen>
 80115b8:	4603      	mov	r3, r0
 80115ba:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
        if (reportLen == 0) {
 80115be:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d107      	bne.n	80115d6 <sensorhubInputHdlr+0x52>
            // An unrecognized report id
            pSh2->unknownReportIds++;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80115cc:	1c5a      	adds	r2, r3, #1
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 80115d4:	e083      	b.n	80116de <sensorhubInputHdlr+0x15a>
            return;
        }
        else {
            if (reportId == SENSORHUB_BASE_TIMESTAMP_REF) {
 80115d6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80115da:	2bfb      	cmp	r3, #251	@ 0xfb
 80115dc:	d10a      	bne.n	80115f4 <sensorhubInputHdlr+0x70>
                const BaseTimestampRef_t *rpt = (const BaseTimestampRef_t *)(payload+cursor);
 80115de:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80115e2:	68ba      	ldr	r2, [r7, #8]
 80115e4:	4413      	add	r3, r2
 80115e6:	667b      	str	r3, [r7, #100]	@ 0x64
                
                // store base timestamp reference
                referenceDelta = -rpt->timebase;
 80115e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80115ea:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80115ee:	425b      	negs	r3, r3
 80115f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80115f2:	e066      	b.n	80116c2 <sensorhubInputHdlr+0x13e>
            }
            else if (reportId == SENSORHUB_TIMESTAMP_REBASE) {
 80115f4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80115f8:	2bfa      	cmp	r3, #250	@ 0xfa
 80115fa:	d10b      	bne.n	8011614 <sensorhubInputHdlr+0x90>
                const TimestampRebase_t *rpt = (const TimestampRebase_t *)(payload+cursor);
 80115fc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8011600:	68ba      	ldr	r2, [r7, #8]
 8011602:	4413      	add	r3, r2
 8011604:	66bb      	str	r3, [r7, #104]	@ 0x68

                referenceDelta += rpt->timebase;
 8011606:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011608:	f8d3 3001 	ldr.w	r3, [r3, #1]
 801160c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801160e:	4413      	add	r3, r2
 8011610:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011612:	e056      	b.n	80116c2 <sensorhubInputHdlr+0x13e>
            }
            else if (reportId == SENSORHUB_FLUSH_COMPLETED) {
 8011614:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8011618:	2bef      	cmp	r3, #239	@ 0xef
 801161a:	d10b      	bne.n	8011634 <sensorhubInputHdlr+0xb0>
                // Route this as if it arrived on command channel.
                opRx(pSh2, payload+cursor, reportLen);
 801161c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8011620:	68ba      	ldr	r2, [r7, #8]
 8011622:	4413      	add	r3, r2
 8011624:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8011628:	b292      	uxth	r2, r2
 801162a:	4619      	mov	r1, r3
 801162c:	68f8      	ldr	r0, [r7, #12]
 801162e:	f7ff fdf2 	bl	8011216 <opRx>
 8011632:	e046      	b.n	80116c2 <sensorhubInputHdlr+0x13e>
            }
            else {
                // Sensor event.  Call callback
                uint8_t *pReport = payload+cursor;
 8011634:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8011638:	68ba      	ldr	r2, [r7, #8]
 801163a:	4413      	add	r3, r2
 801163c:	673b      	str	r3, [r7, #112]	@ 0x70
                uint16_t delay = ((pReport[2] & 0xFC) << 6) + pReport[3];
 801163e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011640:	3302      	adds	r3, #2
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	019b      	lsls	r3, r3, #6
 8011646:	b29b      	uxth	r3, r3
 8011648:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 801164c:	b29b      	uxth	r3, r3
 801164e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011650:	3203      	adds	r2, #3
 8011652:	7812      	ldrb	r2, [r2, #0]
 8011654:	4413      	add	r3, r2
 8011656:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
                event.timestamp_uS = touSTimestamp(timestamp, referenceDelta, delay);
 801165a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801165e:	461a      	mov	r2, r3
 8011660:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8011662:	6838      	ldr	r0, [r7, #0]
 8011664:	f7ff ff4a 	bl	80114fc <touSTimestamp>
 8011668:	4602      	mov	r2, r0
 801166a:	460b      	mov	r3, r1
 801166c:	e9c7 2304 	strd	r2, r3, [r7, #16]
                event.delay_uS = (referenceDelta + delay) * 100;
 8011670:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8011674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011676:	4413      	add	r3, r2
 8011678:	2264      	movs	r2, #100	@ 0x64
 801167a:	fb02 f303 	mul.w	r3, r2, r3
 801167e:	17da      	asrs	r2, r3, #31
 8011680:	461c      	mov	r4, r3
 8011682:	4615      	mov	r5, r2
 8011684:	e9c7 4506 	strd	r4, r5, [r7, #24]
                event.reportId = reportId;
 8011688:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801168c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                memcpy(event.report, pReport, reportLen);
 8011690:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8011694:	f107 0310 	add.w	r3, r7, #16
 8011698:	3312      	adds	r3, #18
 801169a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801169c:	4618      	mov	r0, r3
 801169e:	f003 fb40 	bl	8014d22 <memcpy>
                event.len = reportLen;
 80116a2:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80116a6:	f887 3020 	strb.w	r3, [r7, #32]
                if (pSh2->sensorCallback != 0) {
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d007      	beq.n	80116c2 <sensorhubInputHdlr+0x13e>
                    pSh2->sensorCallback(pSh2->sensorCookie, &event);
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80116b6:	68fa      	ldr	r2, [r7, #12]
 80116b8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80116ba:	f107 0110 	add.w	r1, r7, #16
 80116be:	4610      	mov	r0, r2
 80116c0:	4798      	blx	r3
                }
            }
            
            // Move to next report in the payload
            cursor += reportLen;
 80116c2:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80116c6:	b29a      	uxth	r2, r3
 80116c8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80116cc:	4413      	add	r3, r2
 80116ce:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
    while (cursor < len) {
 80116d2:	f8b7 207e 	ldrh.w	r2, [r7, #126]	@ 0x7e
 80116d6:	88fb      	ldrh	r3, [r7, #6]
 80116d8:	429a      	cmp	r2, r3
 80116da:	f4ff af61 	bcc.w	80115a0 <sensorhubInputHdlr+0x1c>
        }
    }
}
 80116de:	3780      	adds	r7, #128	@ 0x80
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bdb0      	pop	{r4, r5, r7, pc}

080116e4 <sensorhubInputNormalHdlr>:

static void sensorhubInputNormalHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b086      	sub	sp, #24
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	60f8      	str	r0, [r7, #12]
 80116ec:	60b9      	str	r1, [r7, #8]
 80116ee:	603b      	str	r3, [r7, #0]
 80116f0:	4613      	mov	r3, r2
 80116f2:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	617b      	str	r3, [r7, #20]

    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 80116f8:	88fa      	ldrh	r2, [r7, #6]
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	68b9      	ldr	r1, [r7, #8]
 80116fe:	6978      	ldr	r0, [r7, #20]
 8011700:	f7ff ff40 	bl	8011584 <sensorhubInputHdlr>
}
 8011704:	bf00      	nop
 8011706:	3718      	adds	r7, #24
 8011708:	46bd      	mov	sp, r7
 801170a:	bd80      	pop	{r7, pc}

0801170c <sensorhubInputWakeHdlr>:

static void sensorhubInputWakeHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b086      	sub	sp, #24
 8011710:	af00      	add	r7, sp, #0
 8011712:	60f8      	str	r0, [r7, #12]
 8011714:	60b9      	str	r1, [r7, #8]
 8011716:	603b      	str	r3, [r7, #0]
 8011718:	4613      	mov	r3, r2
 801171a:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	617b      	str	r3, [r7, #20]
    
    sensorhubInputHdlr(pSh2, payload, len, timestamp);
 8011720:	88fa      	ldrh	r2, [r7, #6]
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	68b9      	ldr	r1, [r7, #8]
 8011726:	6978      	ldr	r0, [r7, #20]
 8011728:	f7ff ff2c 	bl	8011584 <sensorhubInputHdlr>
}
 801172c:	bf00      	nop
 801172e:	3718      	adds	r7, #24
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}

08011734 <sensorhubInputGyroRvHdlr>:

static void sensorhubInputGyroRvHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 8011734:	b5b0      	push	{r4, r5, r7, lr}
 8011736:	b09c      	sub	sp, #112	@ 0x70
 8011738:	af00      	add	r7, sp, #0
 801173a:	60f8      	str	r0, [r7, #12]
 801173c:	60b9      	str	r1, [r7, #8]
 801173e:	603b      	str	r3, [r7, #0]
 8011740:	4613      	mov	r3, r2
 8011742:	80fb      	strh	r3, [r7, #6]
    sh2_t *pSh2 = (sh2_t *)cookie;
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	66bb      	str	r3, [r7, #104]	@ 0x68
    sh2_SensorEvent_t event;
    uint16_t cursor = 0;
 8011748:	2300      	movs	r3, #0
 801174a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

    uint8_t reportId = SH2_GYRO_INTEGRATED_RV;
 801174e:	232a      	movs	r3, #42	@ 0x2a
 8011750:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    uint8_t reportLen = getReportLen(reportId);
 8011754:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011758:	4618      	mov	r0, r3
 801175a:	f7ff fda5 	bl	80112a8 <getReportLen>
 801175e:	4603      	mov	r3, r0
 8011760:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

    while (cursor < len) {
 8011764:	e02d      	b.n	80117c2 <sensorhubInputGyroRvHdlr+0x8e>
        event.timestamp_uS = timestamp;
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	2200      	movs	r2, #0
 801176a:	461c      	mov	r4, r3
 801176c:	4615      	mov	r5, r2
 801176e:	e9c7 4504 	strd	r4, r5, [r7, #16]
        event.reportId = reportId;
 8011772:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8011776:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        memcpy(event.report, payload+cursor, reportLen);
 801177a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801177e:	68ba      	ldr	r2, [r7, #8]
 8011780:	18d1      	adds	r1, r2, r3
 8011782:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8011786:	f107 0310 	add.w	r3, r7, #16
 801178a:	3312      	adds	r3, #18
 801178c:	4618      	mov	r0, r3
 801178e:	f003 fac8 	bl	8014d22 <memcpy>
        event.len = reportLen;
 8011792:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8011796:	f887 3020 	strb.w	r3, [r7, #32]

        if (pSh2->sensorCallback != 0) {
 801179a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d007      	beq.n	80117b2 <sensorhubInputGyroRvHdlr+0x7e>
            pSh2->sensorCallback(pSh2->sensorCookie, &event);
 80117a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80117a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80117a6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80117a8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80117aa:	f107 0110 	add.w	r1, r7, #16
 80117ae:	4610      	mov	r0, r2
 80117b0:	4798      	blx	r3
        }

        cursor += reportLen;
 80117b2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80117b6:	b29a      	uxth	r2, r3
 80117b8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80117bc:	4413      	add	r3, r2
 80117be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    while (cursor < len) {
 80117c2:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80117c6:	88fb      	ldrh	r3, [r7, #6]
 80117c8:	429a      	cmp	r2, r3
 80117ca:	d3cc      	bcc.n	8011766 <sensorhubInputGyroRvHdlr+0x32>
    }
}
 80117cc:	bf00      	nop
 80117ce:	bf00      	nop
 80117d0:	3770      	adds	r7, #112	@ 0x70
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080117d8 <executableDeviceHdlr>:

static void executableDeviceHdlr(void *cookie, uint8_t *payload, uint16_t len, uint32_t timestamp)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b086      	sub	sp, #24
 80117dc:	af00      	add	r7, sp, #0
 80117de:	60f8      	str	r0, [r7, #12]
 80117e0:	60b9      	str	r1, [r7, #8]
 80117e2:	603b      	str	r3, [r7, #0]
 80117e4:	4613      	mov	r3, r2
 80117e6:	80fb      	strh	r3, [r7, #6]
    (void)timestamp;  // unused
    
    sh2_t *pSh2 = (sh2_t *)cookie;
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	617b      	str	r3, [r7, #20]

    // Discard if length is bad
    if (len != 1) {
 80117ec:	88fb      	ldrh	r3, [r7, #6]
 80117ee:	2b01      	cmp	r3, #1
 80117f0:	d007      	beq.n	8011802 <executableDeviceHdlr+0x2a>
        pSh2->execBadPayload++;
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 80117f8:	1c5a      	adds	r2, r3, #1
 80117fa:	697b      	ldr	r3, [r7, #20]
 80117fc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        return;
 8011800:	e021      	b.n	8011846 <executableDeviceHdlr+0x6e>
    }
    
    switch (payload[0]) {
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	781b      	ldrb	r3, [r3, #0]
 8011806:	2b01      	cmp	r3, #1
 8011808:	d114      	bne.n	8011834 <executableDeviceHdlr+0x5c>
        case EXECUTABLE_DEVICE_RESP_RESET_COMPLETE:
            // reset process is now done.
            pSh2->resetComplete = true;
 801180a:	697b      	ldr	r3, [r7, #20]
 801180c:	2201      	movs	r2, #1
 801180e:	721a      	strb	r2, [r3, #8]
            
            // Send reset event to SH2 operation processor.
            // Some commands may handle themselves.  Most will be aborted with SH2_ERR.
            opOnReset(pSh2);
 8011810:	6978      	ldr	r0, [r7, #20]
 8011812:	f7ff fd2d 	bl	8011270 <opOnReset>

            // Notify client that reset is complete.
            sh2AsyncEvent.eventId = SH2_RESET;
 8011816:	4b0d      	ldr	r3, [pc, #52]	@ (801184c <executableDeviceHdlr+0x74>)
 8011818:	2200      	movs	r2, #0
 801181a:	601a      	str	r2, [r3, #0]
            if (pSh2->eventCallback) {
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011820:	2b00      	cmp	r3, #0
 8011822:	d00f      	beq.n	8011844 <executableDeviceHdlr+0x6c>
                pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011828:	697a      	ldr	r2, [r7, #20]
 801182a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801182c:	4907      	ldr	r1, [pc, #28]	@ (801184c <executableDeviceHdlr+0x74>)
 801182e:	4610      	mov	r0, r2
 8011830:	4798      	blx	r3
            }
            break;
 8011832:	e007      	b.n	8011844 <executableDeviceHdlr+0x6c>
        default:
            pSh2->execBadPayload++;
 8011834:	697b      	ldr	r3, [r7, #20]
 8011836:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 801183a:	1c5a      	adds	r2, r3, #1
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
            break;
 8011842:	e000      	b.n	8011846 <executableDeviceHdlr+0x6e>
            break;
 8011844:	bf00      	nop
    }
}
 8011846:	3718      	adds	r7, #24
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}
 801184c:	2000cabc 	.word	0x2000cabc

08011850 <sendCtrl>:
{
    return shtp_send(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, &cmd, 1);
}

static int sendCtrl(sh2_t *pSh2, const uint8_t *data, uint16_t len)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b084      	sub	sp, #16
 8011854:	af00      	add	r7, sp, #0
 8011856:	60f8      	str	r0, [r7, #12]
 8011858:	60b9      	str	r1, [r7, #8]
 801185a:	4613      	mov	r3, r2
 801185c:	80fb      	strh	r3, [r7, #6]
    return shtp_send(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, data, len);
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	6858      	ldr	r0, [r3, #4]
 8011862:	88fb      	ldrh	r3, [r7, #6]
 8011864:	68ba      	ldr	r2, [r7, #8]
 8011866:	2102      	movs	r1, #2
 8011868:	f001 ffbe 	bl	80137e8 <shtp_send>
 801186c:	4603      	mov	r3, r0
}
 801186e:	4618      	mov	r0, r3
 8011870:	3710      	adds	r7, #16
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}

08011876 <getProdIdStart>:
// ------------------------------------------------------------------------
// Get Product ID support

// Get Product ID Op handler
static int getProdIdStart(sh2_t *pSh2)
{
 8011876:	b580      	push	{r7, lr}
 8011878:	b084      	sub	sp, #16
 801187a:	af00      	add	r7, sp, #0
 801187c:	6078      	str	r0, [r7, #4]
    int rc = SH2_OK;
 801187e:	2300      	movs	r3, #0
 8011880:	60fb      	str	r3, [r7, #12]
    ProdIdReq_t req;
    
    pSh2->opData.getProdIds.nextEntry = 0;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2200      	movs	r2, #0
 8011886:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pSh2->opData.getProdIds.expectedEntries = 4;  // Most products supply 4 product ids.
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	2204      	movs	r2, #4
 801188e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
                                                // When the first arrives, we'll know if
                                                // we need to adjust this.
    
    // Set up request to issue
    memset(&req, 0, sizeof(req));
 8011892:	f107 0308 	add.w	r3, r7, #8
 8011896:	2202      	movs	r2, #2
 8011898:	2100      	movs	r1, #0
 801189a:	4618      	mov	r0, r3
 801189c:	f003 f954 	bl	8014b48 <memset>
    req.reportId = SENSORHUB_PROD_ID_REQ;
 80118a0:	23f9      	movs	r3, #249	@ 0xf9
 80118a2:	723b      	strb	r3, [r7, #8]
    rc = sendCtrl(pSh2, (uint8_t *)&req, sizeof(req));
 80118a4:	f107 0308 	add.w	r3, r7, #8
 80118a8:	2202      	movs	r2, #2
 80118aa:	4619      	mov	r1, r3
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	f7ff ffcf 	bl	8011850 <sendCtrl>
 80118b2:	60f8      	str	r0, [r7, #12]

    return rc;
 80118b4:	68fb      	ldr	r3, [r7, #12]
}
 80118b6:	4618      	mov	r0, r3
 80118b8:	3710      	adds	r7, #16
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}
	...

080118c0 <getProdIdRx>:

static void getProdIdRx(sh2_t *pSh2, const uint8_t *payload, uint16_t len)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b088      	sub	sp, #32
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	60f8      	str	r0, [r7, #12]
 80118c8:	60b9      	str	r1, [r7, #8]
 80118ca:	4613      	mov	r3, r2
 80118cc:	80fb      	strh	r3, [r7, #6]
    (void)len;  // unused
    
    ProdIdResp_t *resp = (ProdIdResp_t *)payload;
 80118ce:	68bb      	ldr	r3, [r7, #8]
 80118d0:	61fb      	str	r3, [r7, #28]
    
    // skip this if it isn't the product id response.
    if (resp->reportId != SENSORHUB_PROD_ID_RESP) return;
 80118d2:	69fb      	ldr	r3, [r7, #28]
 80118d4:	781b      	ldrb	r3, [r3, #0]
 80118d6:	2bf8      	cmp	r3, #248	@ 0xf8
 80118d8:	d168      	bne.n	80119ac <getProdIdRx+0xec>

    // Store this product id, if we can
    sh2_ProductIds_t *pProdIds = pSh2->opData.getProdIds.pProdIds;
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118de:	61bb      	str	r3, [r7, #24]
    
    if (pProdIds) {
 80118e0:	69bb      	ldr	r3, [r7, #24]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d04a      	beq.n	801197c <getProdIdRx+0xbc>
        // Store the product id response
        if (pSh2->opData.getProdIds.nextEntry < pSh2->opData.getProdIds.expectedEntries) {
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d242      	bcs.n	801197c <getProdIdRx+0xbc>
            sh2_ProductId_t *pProdId = &pProdIds->entry[pSh2->opData.getProdIds.nextEntry];
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80118fc:	011b      	lsls	r3, r3, #4
 80118fe:	69ba      	ldr	r2, [r7, #24]
 8011900:	4413      	add	r3, r2
 8011902:	617b      	str	r3, [r7, #20]
            
            pProdId->resetCause = resp->resetCause;
 8011904:	69fb      	ldr	r3, [r7, #28]
 8011906:	785a      	ldrb	r2, [r3, #1]
 8011908:	697b      	ldr	r3, [r7, #20]
 801190a:	701a      	strb	r2, [r3, #0]
            pProdId->swVersionMajor = resp->swVerMajor;
 801190c:	69fb      	ldr	r3, [r7, #28]
 801190e:	789a      	ldrb	r2, [r3, #2]
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	705a      	strb	r2, [r3, #1]
            pProdId->swVersionMinor = resp->swVerMinor;
 8011914:	69fb      	ldr	r3, [r7, #28]
 8011916:	78da      	ldrb	r2, [r3, #3]
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	709a      	strb	r2, [r3, #2]
            pProdId->swPartNumber = resp->swPartNumber;
 801191c:	69fb      	ldr	r3, [r7, #28]
 801191e:	685a      	ldr	r2, [r3, #4]
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	605a      	str	r2, [r3, #4]
            pProdId->swBuildNumber = resp->swBuildNumber;
 8011924:	69fb      	ldr	r3, [r7, #28]
 8011926:	689a      	ldr	r2, [r3, #8]
 8011928:	697b      	ldr	r3, [r7, #20]
 801192a:	609a      	str	r2, [r3, #8]
            pProdId->swVersionPatch = resp->swVerPatch;
 801192c:	69fb      	ldr	r3, [r7, #28]
 801192e:	899b      	ldrh	r3, [r3, #12]
 8011930:	b29a      	uxth	r2, r3
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	819a      	strh	r2, [r3, #12]
            pProdId->reserved0 = resp->reserved0;
 8011936:	69fb      	ldr	r3, [r7, #28]
 8011938:	7b9a      	ldrb	r2, [r3, #14]
 801193a:	697b      	ldr	r3, [r7, #20]
 801193c:	739a      	strb	r2, [r3, #14]
            pProdId->reserved1 = resp->reserved1;
 801193e:	69fb      	ldr	r3, [r7, #28]
 8011940:	7bda      	ldrb	r2, [r3, #15]
 8011942:	697b      	ldr	r3, [r7, #20]
 8011944:	73da      	strb	r2, [r3, #15]

            if ((pProdId->swPartNumber == 10004095) ||
 8011946:	697b      	ldr	r3, [r7, #20]
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	4a1b      	ldr	r2, [pc, #108]	@ (80119b8 <getProdIdRx+0xf8>)
 801194c:	4293      	cmp	r3, r2
 801194e:	d009      	beq.n	8011964 <getProdIdRx+0xa4>
                (pProdId->swPartNumber == 10004818) ||
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	685b      	ldr	r3, [r3, #4]
            if ((pProdId->swPartNumber == 10004095) ||
 8011954:	4a19      	ldr	r2, [pc, #100]	@ (80119bc <getProdIdRx+0xfc>)
 8011956:	4293      	cmp	r3, r2
 8011958:	d004      	beq.n	8011964 <getProdIdRx+0xa4>
                (pProdId->swPartNumber == 10005028)) {
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	685b      	ldr	r3, [r3, #4]
                (pProdId->swPartNumber == 10004818) ||
 801195e:	4a18      	ldr	r2, [pc, #96]	@ (80119c0 <getProdIdRx+0x100>)
 8011960:	4293      	cmp	r3, r2
 8011962:	d103      	bne.n	801196c <getProdIdRx+0xac>
                // FSP200 has 5 product id entries
                pSh2->opData.getProdIds.expectedEntries = 5;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	2205      	movs	r2, #5
 8011968:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
            }


            pSh2->opData.getProdIds.nextEntry++;
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011972:	3301      	adds	r3, #1
 8011974:	b2da      	uxtb	r2, r3
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }
    }

    // Complete this operation if there is no storage for more product ids
    if ((pSh2->opData.getProdIds.pProdIds == 0) ||
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011980:	2b00      	cmp	r3, #0
 8011982:	d007      	beq.n	8011994 <getProdIdRx+0xd4>
        (pSh2->opData.getProdIds.nextEntry >= pSh2->opData.getProdIds.expectedEntries)) {
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
    if ((pSh2->opData.getProdIds.pProdIds == 0) ||
 8011990:	429a      	cmp	r2, r3
 8011992:	d30d      	bcc.n	80119b0 <getProdIdRx+0xf0>
        
        pSh2->opData.getProdIds.pProdIds->numEntries = pSh2->opData.getProdIds.nextEntry;
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011998:	68fa      	ldr	r2, [r7, #12]
 801199a:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 801199e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        opCompleted(pSh2, SH2_OK);
 80119a2:	2100      	movs	r1, #0
 80119a4:	68f8      	ldr	r0, [r7, #12]
 80119a6:	f7ff fc51 	bl	801124c <opCompleted>
    }

    return;
 80119aa:	e001      	b.n	80119b0 <getProdIdRx+0xf0>
    if (resp->reportId != SENSORHUB_PROD_ID_RESP) return;
 80119ac:	bf00      	nop
 80119ae:	e000      	b.n	80119b2 <getProdIdRx+0xf2>
    return;
 80119b0:	bf00      	nop
}
 80119b2:	3720      	adds	r7, #32
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}
 80119b8:	0098a67f 	.word	0x0098a67f
 80119bc:	0098a952 	.word	0x0098a952
 80119c0:	0098aa24 	.word	0x0098aa24

080119c4 <setSensorConfigStart>:
    uint32_t batchInterval_uS;
    uint32_t sensorSpecific;
} SetFeatureReport_t;

static int setSensorConfigStart(sh2_t *pSh2)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b08a      	sub	sp, #40	@ 0x28
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
    SetFeatureReport_t req;
    uint8_t flags = 0;
 80119cc:	2300      	movs	r3, #0
 80119ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    int rc;
    sh2_SensorConfig_t *pConfig = pSh2->opData.getSensorConfig.pConfig;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119d6:	623b      	str	r3, [r7, #32]
    
    if (pConfig->changeSensitivityEnabled)  flags |= FEAT_CHANGE_SENSITIVITY_ENABLED;
 80119d8:	6a3b      	ldr	r3, [r7, #32]
 80119da:	781b      	ldrb	r3, [r3, #0]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d005      	beq.n	80119ec <setSensorConfigStart+0x28>
 80119e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80119e4:	f043 0302 	orr.w	r3, r3, #2
 80119e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->changeSensitivityRelative) flags |= FEAT_CHANGE_SENSITIVITY_RELATIVE;
 80119ec:	6a3b      	ldr	r3, [r7, #32]
 80119ee:	785b      	ldrb	r3, [r3, #1]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d005      	beq.n	8011a00 <setSensorConfigStart+0x3c>
 80119f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80119f8:	f043 0301 	orr.w	r3, r3, #1
 80119fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->wakeupEnabled)             flags |= FEAT_WAKE_ENABLED;
 8011a00:	6a3b      	ldr	r3, [r7, #32]
 8011a02:	789b      	ldrb	r3, [r3, #2]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d005      	beq.n	8011a14 <setSensorConfigStart+0x50>
 8011a08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a0c:	f043 0304 	orr.w	r3, r3, #4
 8011a10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->alwaysOnEnabled)           flags |= FEAT_ALWAYS_ON_ENABLED;
 8011a14:	6a3b      	ldr	r3, [r7, #32]
 8011a16:	78db      	ldrb	r3, [r3, #3]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d005      	beq.n	8011a28 <setSensorConfigStart+0x64>
 8011a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a20:	f043 0308 	orr.w	r3, r3, #8
 8011a24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pConfig->sniffEnabled)              flags |= FEAT_SNIFF_ENABLED;
 8011a28:	6a3b      	ldr	r3, [r7, #32]
 8011a2a:	791b      	ldrb	r3, [r3, #4]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d005      	beq.n	8011a3c <setSensorConfigStart+0x78>
 8011a30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a34:	f043 0310 	orr.w	r3, r3, #16
 8011a38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    memset(&req, 0, sizeof(req));
 8011a3c:	f107 0308 	add.w	r3, r7, #8
 8011a40:	2211      	movs	r2, #17
 8011a42:	2100      	movs	r1, #0
 8011a44:	4618      	mov	r0, r3
 8011a46:	f003 f87f 	bl	8014b48 <memset>
    req.reportId = SENSORHUB_SET_FEATURE_CMD;
 8011a4a:	23fd      	movs	r3, #253	@ 0xfd
 8011a4c:	723b      	strb	r3, [r7, #8]
    req.featureReportId = pSh2->opData.setSensorConfig.sensorId;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a54:	727b      	strb	r3, [r7, #9]
    req.flags = flags;
 8011a56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a5a:	72bb      	strb	r3, [r7, #10]
    req.changeSensitivity = pConfig->changeSensitivity;
 8011a5c:	6a3b      	ldr	r3, [r7, #32]
 8011a5e:	88db      	ldrh	r3, [r3, #6]
 8011a60:	f8a7 300b 	strh.w	r3, [r7, #11]
    req.reportInterval_uS = pConfig->reportInterval_us;
 8011a64:	6a3b      	ldr	r3, [r7, #32]
 8011a66:	689b      	ldr	r3, [r3, #8]
 8011a68:	f8c7 300d 	str.w	r3, [r7, #13]
    req.batchInterval_uS = pConfig->batchInterval_us;
 8011a6c:	6a3b      	ldr	r3, [r7, #32]
 8011a6e:	68db      	ldr	r3, [r3, #12]
 8011a70:	f8c7 3011 	str.w	r3, [r7, #17]
    req.sensorSpecific = pConfig->sensorSpecific;
 8011a74:	6a3b      	ldr	r3, [r7, #32]
 8011a76:	691b      	ldr	r3, [r3, #16]
 8011a78:	f8c7 3015 	str.w	r3, [r7, #21]

    rc = sendCtrl(pSh2, (uint8_t *)&req, sizeof(req));
 8011a7c:	f107 0308 	add.w	r3, r7, #8
 8011a80:	2211      	movs	r2, #17
 8011a82:	4619      	mov	r1, r3
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f7ff fee3 	bl	8011850 <sendCtrl>
 8011a8a:	61f8      	str	r0, [r7, #28]
    opCompleted(pSh2, rc);
 8011a8c:	69f9      	ldr	r1, [r7, #28]
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f7ff fbdc 	bl	801124c <opCompleted>

    return rc;
 8011a94:	69fb      	ldr	r3, [r7, #28]
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3728      	adds	r7, #40	@ 0x28
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}
	...

08011aa0 <shtpEventCallback>:


// ------------------------------------------------------------------------
// SHTP Event Callback

static void shtpEventCallback(void *cookie, shtp_Event_t shtpEvent) {
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b084      	sub	sp, #16
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	70fb      	strb	r3, [r7, #3]
    (void)cookie; // unused
    
    sh2_t *pSh2 = &_sh2;
 8011aac:	4b0b      	ldr	r3, [pc, #44]	@ (8011adc <shtpEventCallback+0x3c>)
 8011aae:	60fb      	str	r3, [r7, #12]

    sh2AsyncEvent.eventId = SH2_SHTP_EVENT;
 8011ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8011ae0 <shtpEventCallback+0x40>)
 8011ab2:	2201      	movs	r2, #1
 8011ab4:	601a      	str	r2, [r3, #0]
    sh2AsyncEvent.shtpEvent = shtpEvent;
 8011ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8011ae0 <shtpEventCallback+0x40>)
 8011ab8:	78fb      	ldrb	r3, [r7, #3]
 8011aba:	7113      	strb	r3, [r2, #4]
    if (pSh2->eventCallback) {
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d006      	beq.n	8011ad2 <shtpEventCallback+0x32>
        pSh2->eventCallback(pSh2->eventCookie, &sh2AsyncEvent);
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ac8:	68fa      	ldr	r2, [r7, #12]
 8011aca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8011acc:	4904      	ldr	r1, [pc, #16]	@ (8011ae0 <shtpEventCallback+0x40>)
 8011ace:	4610      	mov	r0, r2
 8011ad0:	4798      	blx	r3
    }
}
 8011ad2:	bf00      	nop
 8011ad4:	3710      	adds	r7, #16
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}
 8011ada:	bf00      	nop
 8011adc:	2000c944 	.word	0x2000c944
 8011ae0:	2000cabc 	.word	0x2000cabc

08011ae4 <sh2_open>:
 * @param  eventCookie Will be passed to eventCallback.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_open(sh2_Hal_t *pHal,
             sh2_EventCallback_t *eventCallback, void *eventCookie)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b088      	sub	sp, #32
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	60f8      	str	r0, [r7, #12]
 8011aec:	60b9      	str	r1, [r7, #8]
 8011aee:	607a      	str	r2, [r7, #4]
    sh2_t *pSh2 = &_sh2;
 8011af0:	4b41      	ldr	r3, [pc, #260]	@ (8011bf8 <sh2_open+0x114>)
 8011af2:	61bb      	str	r3, [r7, #24]
    
    // Validate parameters
    if (pHal == 0) return SH2_ERR_BAD_PARAM;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d102      	bne.n	8011b00 <sh2_open+0x1c>
 8011afa:	f06f 0301 	mvn.w	r3, #1
 8011afe:	e077      	b.n	8011bf0 <sh2_open+0x10c>

    // Clear everything in sh2 structure.
    memset(pSh2, 0, sizeof(sh2_t));
 8011b00:	f44f 72bc 	mov.w	r2, #376	@ 0x178
 8011b04:	2100      	movs	r1, #0
 8011b06:	69b8      	ldr	r0, [r7, #24]
 8011b08:	f003 f81e 	bl	8014b48 <memset>

    // will go true after reset response from SH.
    pSh2->resetComplete = false;
 8011b0c:	69bb      	ldr	r3, [r7, #24]
 8011b0e:	2200      	movs	r2, #0
 8011b10:	721a      	strb	r2, [r3, #8]
    
    // Store reference to HAL for future use.
    pSh2->pHal = pHal;
 8011b12:	69bb      	ldr	r3, [r7, #24]
 8011b14:	68fa      	ldr	r2, [r7, #12]
 8011b16:	601a      	str	r2, [r3, #0]
    pSh2->eventCallback = eventCallback;
 8011b18:	69bb      	ldr	r3, [r7, #24]
 8011b1a:	68ba      	ldr	r2, [r7, #8]
 8011b1c:	639a      	str	r2, [r3, #56]	@ 0x38
    pSh2->eventCookie = eventCookie;
 8011b1e:	69bb      	ldr	r3, [r7, #24]
 8011b20:	687a      	ldr	r2, [r7, #4]
 8011b22:	63da      	str	r2, [r3, #60]	@ 0x3c
    pSh2->sensorCallback = 0;
 8011b24:	69bb      	ldr	r3, [r7, #24]
 8011b26:	2200      	movs	r2, #0
 8011b28:	641a      	str	r2, [r3, #64]	@ 0x40
    pSh2->sensorCookie = 0;
 8011b2a:	69bb      	ldr	r3, [r7, #24]
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	645a      	str	r2, [r3, #68]	@ 0x44

    // Open SHTP layer
    pSh2->pShtp = shtp_open(pSh2->pHal);
 8011b30:	69bb      	ldr	r3, [r7, #24]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	4618      	mov	r0, r3
 8011b36:	f001 fddf 	bl	80136f8 <shtp_open>
 8011b3a:	4602      	mov	r2, r0
 8011b3c:	69bb      	ldr	r3, [r7, #24]
 8011b3e:	605a      	str	r2, [r3, #4]
    if (pSh2->pShtp == 0) {
 8011b40:	69bb      	ldr	r3, [r7, #24]
 8011b42:	685b      	ldr	r3, [r3, #4]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d102      	bne.n	8011b4e <sh2_open+0x6a>
        // Error opening SHTP
        return SH2_ERR;
 8011b48:	f04f 33ff 	mov.w	r3, #4294967295
 8011b4c:	e050      	b.n	8011bf0 <sh2_open+0x10c>
    }

    // Register SHTP event callback
    shtp_setEventCallback(pSh2->pShtp, shtpEventCallback, pSh2);
 8011b4e:	69bb      	ldr	r3, [r7, #24]
 8011b50:	685b      	ldr	r3, [r3, #4]
 8011b52:	69ba      	ldr	r2, [r7, #24]
 8011b54:	4929      	ldr	r1, [pc, #164]	@ (8011bfc <sh2_open+0x118>)
 8011b56:	4618      	mov	r0, r3
 8011b58:	f001 fe02 	bl	8013760 <shtp_setEventCallback>

    // Register with SHTP
    // Register SH2 handlers
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_CONTROL, sensorhubControlHdlr, pSh2);
 8011b5c:	69bb      	ldr	r3, [r7, #24]
 8011b5e:	6858      	ldr	r0, [r3, #4]
 8011b60:	69bb      	ldr	r3, [r7, #24]
 8011b62:	4a27      	ldr	r2, [pc, #156]	@ (8011c00 <sh2_open+0x11c>)
 8011b64:	2102      	movs	r1, #2
 8011b66:	f001 fe0f 	bl	8013788 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT, sensorhubInputNormalHdlr, pSh2);
 8011b6a:	69bb      	ldr	r3, [r7, #24]
 8011b6c:	6858      	ldr	r0, [r3, #4]
 8011b6e:	69bb      	ldr	r3, [r7, #24]
 8011b70:	4a24      	ldr	r2, [pc, #144]	@ (8011c04 <sh2_open+0x120>)
 8011b72:	2103      	movs	r1, #3
 8011b74:	f001 fe08 	bl	8013788 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_WAKE, sensorhubInputWakeHdlr, pSh2);
 8011b78:	69bb      	ldr	r3, [r7, #24]
 8011b7a:	6858      	ldr	r0, [r3, #4]
 8011b7c:	69bb      	ldr	r3, [r7, #24]
 8011b7e:	4a22      	ldr	r2, [pc, #136]	@ (8011c08 <sh2_open+0x124>)
 8011b80:	2104      	movs	r1, #4
 8011b82:	f001 fe01 	bl	8013788 <shtp_listenChan>
    shtp_listenChan(pSh2->pShtp, CHAN_SENSORHUB_INPUT_GIRV, sensorhubInputGyroRvHdlr, pSh2);
 8011b86:	69bb      	ldr	r3, [r7, #24]
 8011b88:	6858      	ldr	r0, [r3, #4]
 8011b8a:	69bb      	ldr	r3, [r7, #24]
 8011b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8011c0c <sh2_open+0x128>)
 8011b8e:	2105      	movs	r1, #5
 8011b90:	f001 fdfa 	bl	8013788 <shtp_listenChan>

    // Register EXECUTABLE handlers
    shtp_listenChan(pSh2->pShtp, CHAN_EXECUTABLE_DEVICE, executableDeviceHdlr, pSh2);
 8011b94:	69bb      	ldr	r3, [r7, #24]
 8011b96:	6858      	ldr	r0, [r3, #4]
 8011b98:	69bb      	ldr	r3, [r7, #24]
 8011b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8011c10 <sh2_open+0x12c>)
 8011b9c:	2101      	movs	r1, #1
 8011b9e:	f001 fdf3 	bl	8013788 <shtp_listenChan>

    // Wait for reset notifications to arrive.
    // The client can't talk to the sensor hub until that happens.
    uint32_t start_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8011ba2:	69bb      	ldr	r3, [r7, #24]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	691b      	ldr	r3, [r3, #16]
 8011ba8:	69ba      	ldr	r2, [r7, #24]
 8011baa:	6812      	ldr	r2, [r2, #0]
 8011bac:	4610      	mov	r0, r2
 8011bae:	4798      	blx	r3
 8011bb0:	6178      	str	r0, [r7, #20]
    uint32_t now_us = start_us;
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	61fb      	str	r3, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8011bb6:	e00c      	b.n	8011bd2 <sh2_open+0xee>
           (!pSh2->resetComplete))
    {
        shtp_service(pSh2->pShtp);
 8011bb8:	69bb      	ldr	r3, [r7, #24]
 8011bba:	685b      	ldr	r3, [r3, #4]
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f001 fe44 	bl	801384a <shtp_service>
        now_us = pSh2->pHal->getTimeUs(pSh2->pHal);
 8011bc2:	69bb      	ldr	r3, [r7, #24]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	691b      	ldr	r3, [r3, #16]
 8011bc8:	69ba      	ldr	r2, [r7, #24]
 8011bca:	6812      	ldr	r2, [r2, #0]
 8011bcc:	4610      	mov	r0, r2
 8011bce:	4798      	blx	r3
 8011bd0:	61f8      	str	r0, [r7, #28]
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8011bd2:	69fa      	ldr	r2, [r7, #28]
 8011bd4:	697b      	ldr	r3, [r7, #20]
 8011bd6:	1ad3      	subs	r3, r2, r3
 8011bd8:	4a0e      	ldr	r2, [pc, #56]	@ (8011c14 <sh2_open+0x130>)
 8011bda:	4293      	cmp	r3, r2
 8011bdc:	d807      	bhi.n	8011bee <sh2_open+0x10a>
           (!pSh2->resetComplete))
 8011bde:	69bb      	ldr	r3, [r7, #24]
 8011be0:	7a1b      	ldrb	r3, [r3, #8]
 8011be2:	b2db      	uxtb	r3, r3
 8011be4:	f083 0301 	eor.w	r3, r3, #1
 8011be8:	b2db      	uxtb	r3, r3
    while (((now_us - start_us) < ADVERT_TIMEOUT_US) &&
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d1e4      	bne.n	8011bb8 <sh2_open+0xd4>
    }
    
    // No errors.
    return SH2_OK;
 8011bee:	2300      	movs	r3, #0
}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3720      	adds	r7, #32
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}
 8011bf8:	2000c944 	.word	0x2000c944
 8011bfc:	08011aa1 	.word	0x08011aa1
 8011c00:	080112f1 	.word	0x080112f1
 8011c04:	080116e5 	.word	0x080116e5
 8011c08:	0801170d 	.word	0x0801170d
 8011c0c:	08011735 	.word	0x08011735
 8011c10:	080117d9 	.word	0x080117d9
 8011c14:	00030d3f 	.word	0x00030d3f

08011c18 <sh2_service>:
 * @brief Service the SH2 device, reading any data that is available and dispatching callbacks.
 *
 * This function should be called periodically by the host system to service an open sensor hub.
 */
void sh2_service(void)
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b082      	sub	sp, #8
 8011c1c:	af00      	add	r7, sp, #0
    sh2_t *pSh2 = &_sh2;
 8011c1e:	4b07      	ldr	r3, [pc, #28]	@ (8011c3c <sh2_service+0x24>)
 8011c20:	607b      	str	r3, [r7, #4]

    if (pSh2->pShtp != 0) {
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	685b      	ldr	r3, [r3, #4]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d004      	beq.n	8011c34 <sh2_service+0x1c>
        shtp_service(pSh2->pShtp);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	685b      	ldr	r3, [r3, #4]
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f001 fe0b 	bl	801384a <shtp_service>
    }
}
 8011c34:	bf00      	nop
 8011c36:	3708      	adds	r7, #8
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}
 8011c3c:	2000c944 	.word	0x2000c944

08011c40 <sh2_setSensorCallback>:
 * @param  callback A function that will be called each time a sensor event is received.
 * @param  cookie  A value that will be passed to the sensor callback function.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorCallback(sh2_SensorCallback_t *callback, void *cookie)
{
 8011c40:	b480      	push	{r7}
 8011c42:	b085      	sub	sp, #20
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
 8011c48:	6039      	str	r1, [r7, #0]
    sh2_t *pSh2 = &_sh2;
 8011c4a:	4b07      	ldr	r3, [pc, #28]	@ (8011c68 <sh2_setSensorCallback+0x28>)
 8011c4c:	60fb      	str	r3, [r7, #12]
    
    pSh2->sensorCallback = callback;
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	687a      	ldr	r2, [r7, #4]
 8011c52:	641a      	str	r2, [r3, #64]	@ 0x40
    pSh2->sensorCookie = cookie;
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	683a      	ldr	r2, [r7, #0]
 8011c58:	645a      	str	r2, [r3, #68]	@ 0x44

    return SH2_OK;
 8011c5a:	2300      	movs	r3, #0
}
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	3714      	adds	r7, #20
 8011c60:	46bd      	mov	sp, r7
 8011c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c66:	4770      	bx	lr
 8011c68:	2000c944 	.word	0x2000c944

08011c6c <sh2_getProdIds>:
 *
 * @param  prodIds Pointer to structure that will receive results.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_getProdIds(sh2_ProductIds_t *prodIds)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b084      	sub	sp, #16
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
    sh2_t *pSh2 = &_sh2;
 8011c74:	4b0d      	ldr	r3, [pc, #52]	@ (8011cac <sh2_getProdIds+0x40>)
 8011c76:	60fb      	str	r3, [r7, #12]
    
    if (pSh2->pShtp == 0) {
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d102      	bne.n	8011c86 <sh2_getProdIds+0x1a>
        return SH2_ERR;  // sh2 API isn't open
 8011c80:	f04f 33ff 	mov.w	r3, #4294967295
 8011c84:	e00e      	b.n	8011ca4 <sh2_getProdIds+0x38>
    }

    // clear opData
    memset(&pSh2->opData, 0, sizeof(sh2_OpData_t));
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	3324      	adds	r3, #36	@ 0x24
 8011c8a:	2210      	movs	r2, #16
 8011c8c:	2100      	movs	r1, #0
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f002 ff5a 	bl	8014b48 <memset>
    
    pSh2->opData.getProdIds.pProdIds = prodIds;
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	687a      	ldr	r2, [r7, #4]
 8011c98:	625a      	str	r2, [r3, #36]	@ 0x24

    return opProcess(pSh2, &getProdIdOp);
 8011c9a:	4905      	ldr	r1, [pc, #20]	@ (8011cb0 <sh2_getProdIds+0x44>)
 8011c9c:	68f8      	ldr	r0, [r7, #12]
 8011c9e:	f7ff fbd9 	bl	8011454 <opProcess>
 8011ca2:	4603      	mov	r3, r0
}
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	3710      	adds	r7, #16
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}
 8011cac:	2000c944 	.word	0x2000c944
 8011cb0:	08016eac 	.word	0x08016eac

08011cb4 <sh2_setSensorConfig>:
 * @param  sensorId Which sensor to configure.
 * @param  pConfig Pointer to structure holding sensor configuration.
 * @return SH2_OK (0), on success.  Negative value from sh2_err.h on error.
 */
int sh2_setSensorConfig(sh2_SensorId_t sensorId, const sh2_SensorConfig_t *pConfig)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b084      	sub	sp, #16
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	4603      	mov	r3, r0
 8011cbc:	6039      	str	r1, [r7, #0]
 8011cbe:	71fb      	strb	r3, [r7, #7]
    sh2_t *pSh2 = &_sh2;
 8011cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8011d00 <sh2_setSensorConfig+0x4c>)
 8011cc2:	60fb      	str	r3, [r7, #12]
    
    if (pSh2->pShtp == 0) {
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	685b      	ldr	r3, [r3, #4]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d102      	bne.n	8011cd2 <sh2_setSensorConfig+0x1e>
        return SH2_ERR;  // sh2 API isn't open
 8011ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8011cd0:	e012      	b.n	8011cf8 <sh2_setSensorConfig+0x44>
    }
 
    // clear opData
    memset(&pSh2->opData, 0, sizeof(sh2_OpData_t));
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	3324      	adds	r3, #36	@ 0x24
 8011cd6:	2210      	movs	r2, #16
 8011cd8:	2100      	movs	r1, #0
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f002 ff34 	bl	8014b48 <memset>
    
    // Set up operation
    pSh2->opData.setSensorConfig.sensorId = sensorId;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	79fa      	ldrb	r2, [r7, #7]
 8011ce4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    pSh2->opData.setSensorConfig.pConfig = pConfig;
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	683a      	ldr	r2, [r7, #0]
 8011cec:	625a      	str	r2, [r3, #36]	@ 0x24

    return opProcess(pSh2, &setSensorConfigOp);
 8011cee:	4905      	ldr	r1, [pc, #20]	@ (8011d04 <sh2_setSensorConfig+0x50>)
 8011cf0:	68f8      	ldr	r0, [r7, #12]
 8011cf2:	f7ff fbaf 	bl	8011454 <opProcess>
 8011cf6:	4603      	mov	r3, r0
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3710      	adds	r7, #16
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}
 8011d00:	2000c944 	.word	0x2000c944
 8011d04:	08016ebc 	.word	0x08016ebc

08011d08 <sh2_decodeSensorEvent>:

// ------------------------------------------------------------------------
// Public API

int sh2_decodeSensorEvent(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b084      	sub	sp, #16
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
 8011d10:	6039      	str	r1, [r7, #0]
    // Fill out fields of *value based on *event, converting data from message representation
    // to natural representation.

    int rc = SH2_OK;
 8011d12:	2300      	movs	r3, #0
 8011d14:	60fb      	str	r3, [r7, #12]

    value->sensorId = event->reportId;
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	7c5a      	ldrb	r2, [r3, #17]
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	701a      	strb	r2, [r3, #0]
    value->timestamp = event->timestamp_uS;
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d24:	6879      	ldr	r1, [r7, #4]
 8011d26:	e9c1 2302 	strd	r2, r3, [r1, #8]

    if (value->sensorId != SH2_GYRO_INTEGRATED_RV) {
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	781b      	ldrb	r3, [r3, #0]
 8011d2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d30:	d00b      	beq.n	8011d4a <sh2_decodeSensorEvent+0x42>
        value->sequence = event->report[1];
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	7cda      	ldrb	r2, [r3, #19]
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	705a      	strb	r2, [r3, #1]
        value->status = event->report[2] & 0x03;
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	7d1b      	ldrb	r3, [r3, #20]
 8011d3e:	f003 0303 	and.w	r3, r3, #3
 8011d42:	b2da      	uxtb	r2, r3
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	709a      	strb	r2, [r3, #2]
 8011d48:	e005      	b.n	8011d56 <sh2_decodeSensorEvent+0x4e>
    }
    else {
        value->sequence = 0;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	705a      	strb	r2, [r3, #1]
        value->status = 0;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2200      	movs	r2, #0
 8011d54:	709a      	strb	r2, [r3, #2]
    }

    // extract delay field (100uS units)
    
    
    switch (value->sensorId) {
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	781b      	ldrb	r3, [r3, #0]
 8011d5a:	3b01      	subs	r3, #1
 8011d5c:	2b2d      	cmp	r3, #45	@ 0x2d
 8011d5e:	f200 8155 	bhi.w	801200c <sh2_decodeSensorEvent+0x304>
 8011d62:	a201      	add	r2, pc, #4	@ (adr r2, 8011d68 <sh2_decodeSensorEvent+0x60>)
 8011d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d68:	08011e2d 	.word	0x08011e2d
 8011d6c:	08011e5d 	.word	0x08011e5d
 8011d70:	08011e81 	.word	0x08011e81
 8011d74:	08011e39 	.word	0x08011e39
 8011d78:	08011e99 	.word	0x08011e99
 8011d7c:	08011e45 	.word	0x08011e45
 8011d80:	08011e69 	.word	0x08011e69
 8011d84:	08011ea5 	.word	0x08011ea5
 8011d88:	08011eb1 	.word	0x08011eb1
 8011d8c:	08011ebd 	.word	0x08011ebd
 8011d90:	08011ec9 	.word	0x08011ec9
 8011d94:	08011ed5 	.word	0x08011ed5
 8011d98:	08011ee1 	.word	0x08011ee1
 8011d9c:	08011eed 	.word	0x08011eed
 8011da0:	08011e8d 	.word	0x08011e8d
 8011da4:	08011f05 	.word	0x08011f05
 8011da8:	08011f1d 	.word	0x08011f1d
 8011dac:	08011f29 	.word	0x08011f29
 8011db0:	08011f35 	.word	0x08011f35
 8011db4:	08011e21 	.word	0x08011e21
 8011db8:	08011e51 	.word	0x08011e51
 8011dbc:	08011e75 	.word	0x08011e75
 8011dc0:	08011ef9 	.word	0x08011ef9
 8011dc4:	08011f11 	.word	0x08011f11
 8011dc8:	08011f41 	.word	0x08011f41
 8011dcc:	08011f4d 	.word	0x08011f4d
 8011dd0:	08011f59 	.word	0x08011f59
 8011dd4:	08011f65 	.word	0x08011f65
 8011dd8:	0801200d 	.word	0x0801200d
 8011ddc:	08011f71 	.word	0x08011f71
 8011de0:	08011f7d 	.word	0x08011f7d
 8011de4:	08011f89 	.word	0x08011f89
 8011de8:	08011f95 	.word	0x08011f95
 8011dec:	08011fa1 	.word	0x08011fa1
 8011df0:	08011fad 	.word	0x08011fad
 8011df4:	0801200d 	.word	0x0801200d
 8011df8:	0801200d 	.word	0x0801200d
 8011dfc:	0801200d 	.word	0x0801200d
 8011e00:	0801200d 	.word	0x0801200d
 8011e04:	08011fb9 	.word	0x08011fb9
 8011e08:	08011fc5 	.word	0x08011fc5
 8011e0c:	08011fd1 	.word	0x08011fd1
 8011e10:	08011fdd 	.word	0x08011fdd
 8011e14:	08011fe9 	.word	0x08011fe9
 8011e18:	08011ff5 	.word	0x08011ff5
 8011e1c:	08012001 	.word	0x08012001
        case SH2_RAW_ACCELEROMETER:
            rc = decodeRawAccelerometer(value, event);
 8011e20:	6839      	ldr	r1, [r7, #0]
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	f000 f8fc 	bl	8012020 <decodeRawAccelerometer>
 8011e28:	60f8      	str	r0, [r7, #12]
            break;
 8011e2a:	e0f3      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_ACCELEROMETER:
            rc = decodeAccelerometer(value, event);
 8011e2c:	6839      	ldr	r1, [r7, #0]
 8011e2e:	6878      	ldr	r0, [r7, #4]
 8011e30:	f000 f924 	bl	801207c <decodeAccelerometer>
 8011e34:	60f8      	str	r0, [r7, #12]
            break;
 8011e36:	e0ed      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_LINEAR_ACCELERATION:
            rc = decodeLinearAcceleration(value, event);
 8011e38:	6839      	ldr	r1, [r7, #0]
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 f95e 	bl	80120fc <decodeLinearAcceleration>
 8011e40:	60f8      	str	r0, [r7, #12]
            break;
 8011e42:	e0e7      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_GRAVITY:
            rc = decodeGravity(value, event);
 8011e44:	6839      	ldr	r1, [r7, #0]
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f000 f998 	bl	801217c <decodeGravity>
 8011e4c:	60f8      	str	r0, [r7, #12]
            break;
 8011e4e:	e0e1      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_GYROSCOPE:
            rc = decodeRawGyroscope(value, event);
 8011e50:	6839      	ldr	r1, [r7, #0]
 8011e52:	6878      	ldr	r0, [r7, #4]
 8011e54:	f000 f9d2 	bl	80121fc <decodeRawGyroscope>
 8011e58:	60f8      	str	r0, [r7, #12]
            break;
 8011e5a:	e0db      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_CALIBRATED:
            rc = decodeGyroscopeCalibrated(value, event);
 8011e5c:	6839      	ldr	r1, [r7, #0]
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f000 fa04 	bl	801226c <decodeGyroscopeCalibrated>
 8011e64:	60f8      	str	r0, [r7, #12]
            break;
 8011e66:	e0d5      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYROSCOPE_UNCALIBRATED:
            rc = decodeGyroscopeUncal(value, event);
 8011e68:	6839      	ldr	r1, [r7, #0]
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f000 fa3e 	bl	80122ec <decodeGyroscopeUncal>
 8011e70:	60f8      	str	r0, [r7, #12]
            break;
 8011e72:	e0cf      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_MAGNETOMETER:
            rc = decodeRawMagnetometer(value, event);
 8011e74:	6839      	ldr	r1, [r7, #0]
 8011e76:	6878      	ldr	r0, [r7, #4]
 8011e78:	f000 faaa 	bl	80123d0 <decodeRawMagnetometer>
 8011e7c:	60f8      	str	r0, [r7, #12]
            break;
 8011e7e:	e0c9      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_CALIBRATED:
            rc = decodeMagneticFieldCalibrated(value, event);
 8011e80:	6839      	ldr	r1, [r7, #0]
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f000 fad2 	bl	801242c <decodeMagneticFieldCalibrated>
 8011e88:	60f8      	str	r0, [r7, #12]
            break;
 8011e8a:	e0c3      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_MAGNETIC_FIELD_UNCALIBRATED:
            rc = decodeMagneticFieldUncal(value, event);
 8011e8c:	6839      	ldr	r1, [r7, #0]
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f000 fb0c 	bl	80124ac <decodeMagneticFieldUncal>
 8011e94:	60f8      	str	r0, [r7, #12]
            break;
 8011e96:	e0bd      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_ROTATION_VECTOR:
            rc = decodeRotationVector(value, event);
 8011e98:	6839      	ldr	r1, [r7, #0]
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f000 fb78 	bl	8012590 <decodeRotationVector>
 8011ea0:	60f8      	str	r0, [r7, #12]
            break;
 8011ea2:	e0b7      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_GAME_ROTATION_VECTOR:
            rc = decodeGameRotationVector(value, event);
 8011ea4:	6839      	ldr	r1, [r7, #0]
 8011ea6:	6878      	ldr	r0, [r7, #4]
 8011ea8:	f000 fbd6 	bl	8012658 <decodeGameRotationVector>
 8011eac:	60f8      	str	r0, [r7, #12]
            break;
 8011eae:	e0b1      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_GEOMAGNETIC_ROTATION_VECTOR:
            rc = decodeGeomagneticRotationVector(value, event);
 8011eb0:	6839      	ldr	r1, [r7, #0]
 8011eb2:	6878      	ldr	r0, [r7, #4]
 8011eb4:	f000 fc20 	bl	80126f8 <decodeGeomagneticRotationVector>
 8011eb8:	60f8      	str	r0, [r7, #12]
            break;
 8011eba:	e0ab      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_PRESSURE:
            rc = decodePressure(value, event);
 8011ebc:	6839      	ldr	r1, [r7, #0]
 8011ebe:	6878      	ldr	r0, [r7, #4]
 8011ec0:	f000 fc7e 	bl	80127c0 <decodePressure>
 8011ec4:	60f8      	str	r0, [r7, #12]
            break;
 8011ec6:	e0a5      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_AMBIENT_LIGHT:
            rc = decodeAmbientLight(value, event);
 8011ec8:	6839      	ldr	r1, [r7, #0]
 8011eca:	6878      	ldr	r0, [r7, #4]
 8011ecc:	f000 fc94 	bl	80127f8 <decodeAmbientLight>
 8011ed0:	60f8      	str	r0, [r7, #12]
            break;
 8011ed2:	e09f      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_HUMIDITY:
            rc = decodeHumidity(value, event);
 8011ed4:	6839      	ldr	r1, [r7, #0]
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f000 fcaa 	bl	8012830 <decodeHumidity>
 8011edc:	60f8      	str	r0, [r7, #12]
            break;
 8011ede:	e099      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_PROXIMITY:
            rc = decodeProximity(value, event);
 8011ee0:	6839      	ldr	r1, [r7, #0]
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	f000 fcc2 	bl	801286c <decodeProximity>
 8011ee8:	60f8      	str	r0, [r7, #12]
            break;
 8011eea:	e093      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_TEMPERATURE:
            rc = decodeTemperature(value, event);
 8011eec:	6839      	ldr	r1, [r7, #0]
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	f000 fcda 	bl	80128a8 <decodeTemperature>
 8011ef4:	60f8      	str	r0, [r7, #12]
            break;
 8011ef6:	e08d      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_RESERVED:
            rc = decodeReserved(value, event);
 8011ef8:	6839      	ldr	r1, [r7, #0]
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f000 fcf2 	bl	80128e4 <decodeReserved>
 8011f00:	60f8      	str	r0, [r7, #12]
            break;
 8011f02:	e087      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_TAP_DETECTOR:
            rc = decodeTapDetector(value, event);
 8011f04:	6839      	ldr	r1, [r7, #0]
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f000 fd0a 	bl	8012920 <decodeTapDetector>
 8011f0c:	60f8      	str	r0, [r7, #12]
            break;
 8011f0e:	e081      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_DETECTOR:
            rc = decodeStepDetector(value, event);
 8011f10:	6839      	ldr	r1, [r7, #0]
 8011f12:	6878      	ldr	r0, [r7, #4]
 8011f14:	f000 fd14 	bl	8012940 <decodeStepDetector>
 8011f18:	60f8      	str	r0, [r7, #12]
            break;
 8011f1a:	e07b      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_STEP_COUNTER:
            rc = decodeStepCounter(value, event);
 8011f1c:	6839      	ldr	r1, [r7, #0]
 8011f1e:	6878      	ldr	r0, [r7, #4]
 8011f20:	f000 fd20 	bl	8012964 <decodeStepCounter>
 8011f24:	60f8      	str	r0, [r7, #12]
            break;
 8011f26:	e075      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_SIGNIFICANT_MOTION:
            rc = decodeSignificantMotion(value, event);
 8011f28:	6839      	ldr	r1, [r7, #0]
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f000 fd35 	bl	801299a <decodeSignificantMotion>
 8011f30:	60f8      	str	r0, [r7, #12]
            break;
 8011f32:	e06f      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_CLASSIFIER:
            rc = decodeStabilityClassifier(value, event);
 8011f34:	6839      	ldr	r1, [r7, #0]
 8011f36:	6878      	ldr	r0, [r7, #4]
 8011f38:	f000 fd42 	bl	80129c0 <decodeStabilityClassifier>
 8011f3c:	60f8      	str	r0, [r7, #12]
            break;
 8011f3e:	e069      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_SHAKE_DETECTOR:
            rc = decodeShakeDetector(value, event);
 8011f40:	6839      	ldr	r1, [r7, #0]
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f000 fd4c 	bl	80129e0 <decodeShakeDetector>
 8011f48:	60f8      	str	r0, [r7, #12]
            break;
 8011f4a:	e063      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_FLIP_DETECTOR:
            rc = decodeFlipDetector(value, event);
 8011f4c:	6839      	ldr	r1, [r7, #0]
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f000 fd59 	bl	8012a06 <decodeFlipDetector>
 8011f54:	60f8      	str	r0, [r7, #12]
            break;
 8011f56:	e05d      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_PICKUP_DETECTOR:
            rc = decodePickupDetector(value, event);
 8011f58:	6839      	ldr	r1, [r7, #0]
 8011f5a:	6878      	ldr	r0, [r7, #4]
 8011f5c:	f000 fd66 	bl	8012a2c <decodePickupDetector>
 8011f60:	60f8      	str	r0, [r7, #12]
            break;
 8011f62:	e057      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_STABILITY_DETECTOR:
            rc = decodeStabilityDetector(value, event);
 8011f64:	6839      	ldr	r1, [r7, #0]
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f000 fd73 	bl	8012a52 <decodeStabilityDetector>
 8011f6c:	60f8      	str	r0, [r7, #12]
            break;
 8011f6e:	e051      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_PERSONAL_ACTIVITY_CLASSIFIER:
            rc = decodePersonalActivityClassifier(value, event);
 8011f70:	6839      	ldr	r1, [r7, #0]
 8011f72:	6878      	ldr	r0, [r7, #4]
 8011f74:	f000 fd80 	bl	8012a78 <decodePersonalActivityClassifier>
 8011f78:	60f8      	str	r0, [r7, #12]
            break;
 8011f7a:	e04b      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_SLEEP_DETECTOR:
            rc = decodeSleepDetector(value, event);
 8011f7c:	6839      	ldr	r1, [r7, #0]
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f000 fdad 	bl	8012ade <decodeSleepDetector>
 8011f84:	60f8      	str	r0, [r7, #12]
            break;
 8011f86:	e045      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_TILT_DETECTOR:
            rc = decodeTiltDetector(value, event);
 8011f88:	6839      	ldr	r1, [r7, #0]
 8011f8a:	6878      	ldr	r0, [r7, #4]
 8011f8c:	f000 fdb7 	bl	8012afe <decodeTiltDetector>
 8011f90:	60f8      	str	r0, [r7, #12]
            break;
 8011f92:	e03f      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_POCKET_DETECTOR:
            rc = decodePocketDetector(value, event);
 8011f94:	6839      	ldr	r1, [r7, #0]
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f000 fdc4 	bl	8012b24 <decodePocketDetector>
 8011f9c:	60f8      	str	r0, [r7, #12]
            break;
 8011f9e:	e039      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_CIRCLE_DETECTOR:
            rc = decodeCircleDetector(value, event);
 8011fa0:	6839      	ldr	r1, [r7, #0]
 8011fa2:	6878      	ldr	r0, [r7, #4]
 8011fa4:	f000 fdd1 	bl	8012b4a <decodeCircleDetector>
 8011fa8:	60f8      	str	r0, [r7, #12]
            break;
 8011faa:	e033      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_HEART_RATE_MONITOR:
            rc = decodeHeartRateMonitor(value, event);
 8011fac:	6839      	ldr	r1, [r7, #0]
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f000 fdde 	bl	8012b70 <decodeHeartRateMonitor>
 8011fb4:	60f8      	str	r0, [r7, #12]
            break;
 8011fb6:	e02d      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_RV:
            rc = decodeArvrStabilizedRV(value, event);
 8011fb8:	6839      	ldr	r1, [r7, #0]
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f000 fdec 	bl	8012b98 <decodeArvrStabilizedRV>
 8011fc0:	60f8      	str	r0, [r7, #12]
            break;
 8011fc2:	e027      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_ARVR_STABILIZED_GRV:
            rc = decodeArvrStabilizedGRV(value, event);
 8011fc4:	6839      	ldr	r1, [r7, #0]
 8011fc6:	6878      	ldr	r0, [r7, #4]
 8011fc8:	f000 fe4a 	bl	8012c60 <decodeArvrStabilizedGRV>
 8011fcc:	60f8      	str	r0, [r7, #12]
            break;
 8011fce:	e021      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_GYRO_INTEGRATED_RV:
            rc = decodeGyroIntegratedRV(value, event);
 8011fd0:	6839      	ldr	r1, [r7, #0]
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f000 fe94 	bl	8012d00 <decodeGyroIntegratedRV>
 8011fd8:	60f8      	str	r0, [r7, #12]
            break;
 8011fda:	e01b      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_IZRO_MOTION_REQUEST:
            rc = decodeIZroRequest(value, event);
 8011fdc:	6839      	ldr	r1, [r7, #0]
 8011fde:	6878      	ldr	r0, [r7, #4]
 8011fe0:	f000 ff14 	bl	8012e0c <decodeIZroRequest>
 8011fe4:	60f8      	str	r0, [r7, #12]
            break;
 8011fe6:	e015      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_RAW_OPTICAL_FLOW:
            rc = decodeRawOptFlow(value, event);
 8011fe8:	6839      	ldr	r1, [r7, #0]
 8011fea:	6878      	ldr	r0, [r7, #4]
 8011fec:	f000 ff22 	bl	8012e34 <decodeRawOptFlow>
 8011ff0:	60f8      	str	r0, [r7, #12]
            break;
 8011ff2:	e00f      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_DEAD_RECKONING_POSE:
            rc = decodeDeadReckoningPose(value, event);
 8011ff4:	6839      	ldr	r1, [r7, #0]
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f000 ff9a 	bl	8012f30 <decodeDeadReckoningPose>
 8011ffc:	60f8      	str	r0, [r7, #12]
            break;
 8011ffe:	e009      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        case SH2_WHEEL_ENCODER:
            rc = decodeWheelEncoder(value, event);
 8012000:	6839      	ldr	r1, [r7, #0]
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f001 f87e 	bl	8013104 <decodeWheelEncoder>
 8012008:	60f8      	str	r0, [r7, #12]
            break;
 801200a:	e003      	b.n	8012014 <sh2_decodeSensorEvent+0x30c>
        default:
            // Unknown report id
            rc = SH2_ERR;
 801200c:	f04f 33ff 	mov.w	r3, #4294967295
 8012010:	60fb      	str	r3, [r7, #12]
            break;
 8012012:	bf00      	nop
    }

    return rc;
 8012014:	68fb      	ldr	r3, [r7, #12]
}
 8012016:	4618      	mov	r0, r3
 8012018:	3710      	adds	r7, #16
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}
 801201e:	bf00      	nop

08012020 <decodeRawAccelerometer>:

// ------------------------------------------------------------------------
// Private utility functions

static int decodeRawAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
 8012028:	6039      	str	r1, [r7, #0]
    value->un.rawAccelerometer.x = read16(&event->report[4]);
 801202a:	683b      	ldr	r3, [r7, #0]
 801202c:	3316      	adds	r3, #22
 801202e:	4618      	mov	r0, r3
 8012030:	f001 f8da 	bl	80131e8 <read16>
 8012034:	4603      	mov	r3, r0
 8012036:	461a      	mov	r2, r3
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	829a      	strh	r2, [r3, #20]
    value->un.rawAccelerometer.y = read16(&event->report[6]);
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	3318      	adds	r3, #24
 8012040:	4618      	mov	r0, r3
 8012042:	f001 f8d1 	bl	80131e8 <read16>
 8012046:	4603      	mov	r3, r0
 8012048:	461a      	mov	r2, r3
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	82da      	strh	r2, [r3, #22]
    value->un.rawAccelerometer.z = read16(&event->report[8]);
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	331a      	adds	r3, #26
 8012052:	4618      	mov	r0, r3
 8012054:	f001 f8c8 	bl	80131e8 <read16>
 8012058:	4603      	mov	r3, r0
 801205a:	461a      	mov	r2, r3
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	831a      	strh	r2, [r3, #24]
    value->un.rawAccelerometer.timestamp = read32(&event->report[12]);
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	331e      	adds	r3, #30
 8012064:	4618      	mov	r0, r3
 8012066:	f001 f8d6 	bl	8013216 <read32>
 801206a:	4603      	mov	r3, r0
 801206c:	461a      	mov	r2, r3
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8012072:	2300      	movs	r3, #0
}
 8012074:	4618      	mov	r0, r3
 8012076:	3708      	adds	r7, #8
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}

0801207c <decodeAccelerometer>:

static int decodeAccelerometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b082      	sub	sp, #8
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	6039      	str	r1, [r7, #0]
    value->un.accelerometer.x = read16(&event->report[4]) * SCALE_Q(8);
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	3316      	adds	r3, #22
 801208a:	4618      	mov	r0, r3
 801208c:	f001 f8ac 	bl	80131e8 <read16>
 8012090:	4603      	mov	r3, r0
 8012092:	ee07 3a90 	vmov	s15, r3
 8012096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801209a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80120f8 <decodeAccelerometer+0x7c>
 801209e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.accelerometer.y = read16(&event->report[6]) * SCALE_Q(8);
 80120a8:	683b      	ldr	r3, [r7, #0]
 80120aa:	3318      	adds	r3, #24
 80120ac:	4618      	mov	r0, r3
 80120ae:	f001 f89b 	bl	80131e8 <read16>
 80120b2:	4603      	mov	r3, r0
 80120b4:	ee07 3a90 	vmov	s15, r3
 80120b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120bc:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80120f8 <decodeAccelerometer+0x7c>
 80120c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.accelerometer.z = read16(&event->report[8]) * SCALE_Q(8);
 80120ca:	683b      	ldr	r3, [r7, #0]
 80120cc:	331a      	adds	r3, #26
 80120ce:	4618      	mov	r0, r3
 80120d0:	f001 f88a 	bl	80131e8 <read16>
 80120d4:	4603      	mov	r3, r0
 80120d6:	ee07 3a90 	vmov	s15, r3
 80120da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80120de:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80120f8 <decodeAccelerometer+0x7c>
 80120e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80120ec:	2300      	movs	r3, #0
}
 80120ee:	4618      	mov	r0, r3
 80120f0:	3708      	adds	r7, #8
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
 80120f6:	bf00      	nop
 80120f8:	3b800000 	.word	0x3b800000

080120fc <decodeLinearAcceleration>:

static int decodeLinearAcceleration(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b082      	sub	sp, #8
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
 8012104:	6039      	str	r1, [r7, #0]
    value->un.linearAcceleration.x = read16(&event->report[4]) * SCALE_Q(8);
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	3316      	adds	r3, #22
 801210a:	4618      	mov	r0, r3
 801210c:	f001 f86c 	bl	80131e8 <read16>
 8012110:	4603      	mov	r3, r0
 8012112:	ee07 3a90 	vmov	s15, r3
 8012116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801211a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8012178 <decodeLinearAcceleration+0x7c>
 801211e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.linearAcceleration.y = read16(&event->report[6]) * SCALE_Q(8);
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	3318      	adds	r3, #24
 801212c:	4618      	mov	r0, r3
 801212e:	f001 f85b 	bl	80131e8 <read16>
 8012132:	4603      	mov	r3, r0
 8012134:	ee07 3a90 	vmov	s15, r3
 8012138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801213c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8012178 <decodeLinearAcceleration+0x7c>
 8012140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.linearAcceleration.z = read16(&event->report[8]) * SCALE_Q(8);
 801214a:	683b      	ldr	r3, [r7, #0]
 801214c:	331a      	adds	r3, #26
 801214e:	4618      	mov	r0, r3
 8012150:	f001 f84a 	bl	80131e8 <read16>
 8012154:	4603      	mov	r3, r0
 8012156:	ee07 3a90 	vmov	s15, r3
 801215a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801215e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8012178 <decodeLinearAcceleration+0x7c>
 8012162:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 801216c:	2300      	movs	r3, #0
}
 801216e:	4618      	mov	r0, r3
 8012170:	3708      	adds	r7, #8
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	3b800000 	.word	0x3b800000

0801217c <decodeGravity>:

static int decodeGravity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b082      	sub	sp, #8
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
 8012184:	6039      	str	r1, [r7, #0]
    value->un.gravity.x = read16(&event->report[4]) * SCALE_Q(8);
 8012186:	683b      	ldr	r3, [r7, #0]
 8012188:	3316      	adds	r3, #22
 801218a:	4618      	mov	r0, r3
 801218c:	f001 f82c 	bl	80131e8 <read16>
 8012190:	4603      	mov	r3, r0
 8012192:	ee07 3a90 	vmov	s15, r3
 8012196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801219a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80121f8 <decodeGravity+0x7c>
 801219e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gravity.y = read16(&event->report[6]) * SCALE_Q(8);
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	3318      	adds	r3, #24
 80121ac:	4618      	mov	r0, r3
 80121ae:	f001 f81b 	bl	80131e8 <read16>
 80121b2:	4603      	mov	r3, r0
 80121b4:	ee07 3a90 	vmov	s15, r3
 80121b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121bc:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80121f8 <decodeGravity+0x7c>
 80121c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gravity.z = read16(&event->report[8]) * SCALE_Q(8);
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	331a      	adds	r3, #26
 80121ce:	4618      	mov	r0, r3
 80121d0:	f001 f80a 	bl	80131e8 <read16>
 80121d4:	4603      	mov	r3, r0
 80121d6:	ee07 3a90 	vmov	s15, r3
 80121da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121de:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80121f8 <decodeGravity+0x7c>
 80121e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80121ec:	2300      	movs	r3, #0
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	3708      	adds	r7, #8
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}
 80121f6:	bf00      	nop
 80121f8:	3b800000 	.word	0x3b800000

080121fc <decodeRawGyroscope>:

static int decodeRawGyroscope(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b082      	sub	sp, #8
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
 8012204:	6039      	str	r1, [r7, #0]
    value->un.rawGyroscope.x = read16(&event->report[4]);
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	3316      	adds	r3, #22
 801220a:	4618      	mov	r0, r3
 801220c:	f000 ffec 	bl	80131e8 <read16>
 8012210:	4603      	mov	r3, r0
 8012212:	461a      	mov	r2, r3
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	829a      	strh	r2, [r3, #20]
    value->un.rawGyroscope.y = read16(&event->report[6]);
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	3318      	adds	r3, #24
 801221c:	4618      	mov	r0, r3
 801221e:	f000 ffe3 	bl	80131e8 <read16>
 8012222:	4603      	mov	r3, r0
 8012224:	461a      	mov	r2, r3
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	82da      	strh	r2, [r3, #22]
    value->un.rawGyroscope.z = read16(&event->report[8]);
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	331a      	adds	r3, #26
 801222e:	4618      	mov	r0, r3
 8012230:	f000 ffda 	bl	80131e8 <read16>
 8012234:	4603      	mov	r3, r0
 8012236:	461a      	mov	r2, r3
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	831a      	strh	r2, [r3, #24]
    value->un.rawGyroscope.temperature = read16(&event->report[10]);
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	331c      	adds	r3, #28
 8012240:	4618      	mov	r0, r3
 8012242:	f000 ffd1 	bl	80131e8 <read16>
 8012246:	4603      	mov	r3, r0
 8012248:	461a      	mov	r2, r3
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	835a      	strh	r2, [r3, #26]
    value->un.rawGyroscope.timestamp = read32(&event->report[12]);
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	331e      	adds	r3, #30
 8012252:	4618      	mov	r0, r3
 8012254:	f000 ffdf 	bl	8013216 <read32>
 8012258:	4603      	mov	r3, r0
 801225a:	461a      	mov	r2, r3
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8012260:	2300      	movs	r3, #0
}
 8012262:	4618      	mov	r0, r3
 8012264:	3708      	adds	r7, #8
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}
	...

0801226c <decodeGyroscopeCalibrated>:

static int decodeGyroscopeCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b082      	sub	sp, #8
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
 8012274:	6039      	str	r1, [r7, #0]
    value->un.gyroscope.x = read16(&event->report[4]) * SCALE_Q(9);
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	3316      	adds	r3, #22
 801227a:	4618      	mov	r0, r3
 801227c:	f000 ffb4 	bl	80131e8 <read16>
 8012280:	4603      	mov	r3, r0
 8012282:	ee07 3a90 	vmov	s15, r3
 8012286:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801228a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80122e8 <decodeGyroscopeCalibrated+0x7c>
 801228e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscope.y = read16(&event->report[6]) * SCALE_Q(9);
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	3318      	adds	r3, #24
 801229c:	4618      	mov	r0, r3
 801229e:	f000 ffa3 	bl	80131e8 <read16>
 80122a2:	4603      	mov	r3, r0
 80122a4:	ee07 3a90 	vmov	s15, r3
 80122a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122ac:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80122e8 <decodeGyroscopeCalibrated+0x7c>
 80122b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscope.z = read16(&event->report[8]) * SCALE_Q(9);
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	331a      	adds	r3, #26
 80122be:	4618      	mov	r0, r3
 80122c0:	f000 ff92 	bl	80131e8 <read16>
 80122c4:	4603      	mov	r3, r0
 80122c6:	ee07 3a90 	vmov	s15, r3
 80122ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80122ce:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80122e8 <decodeGyroscopeCalibrated+0x7c>
 80122d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 80122dc:	2300      	movs	r3, #0
}
 80122de:	4618      	mov	r0, r3
 80122e0:	3708      	adds	r7, #8
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}
 80122e6:	bf00      	nop
 80122e8:	3b000000 	.word	0x3b000000

080122ec <decodeGyroscopeUncal>:

static int decodeGyroscopeUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	6039      	str	r1, [r7, #0]
    value->un.gyroscopeUncal.x = read16(&event->report[4]) * SCALE_Q(9);
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	3316      	adds	r3, #22
 80122fa:	4618      	mov	r0, r3
 80122fc:	f000 ff74 	bl	80131e8 <read16>
 8012300:	4603      	mov	r3, r0
 8012302:	ee07 3a90 	vmov	s15, r3
 8012306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801230a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80123cc <decodeGyroscopeUncal+0xe0>
 801230e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroscopeUncal.y = read16(&event->report[6]) * SCALE_Q(9);
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	3318      	adds	r3, #24
 801231c:	4618      	mov	r0, r3
 801231e:	f000 ff63 	bl	80131e8 <read16>
 8012322:	4603      	mov	r3, r0
 8012324:	ee07 3a90 	vmov	s15, r3
 8012328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801232c:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80123cc <decodeGyroscopeUncal+0xe0>
 8012330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroscopeUncal.z = read16(&event->report[8]) * SCALE_Q(9);
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	331a      	adds	r3, #26
 801233e:	4618      	mov	r0, r3
 8012340:	f000 ff52 	bl	80131e8 <read16>
 8012344:	4603      	mov	r3, r0
 8012346:	ee07 3a90 	vmov	s15, r3
 801234a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801234e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80123cc <decodeGyroscopeUncal+0xe0>
 8012352:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.gyroscopeUncal.biasX = read16(&event->report[10]) * SCALE_Q(9);
 801235c:	683b      	ldr	r3, [r7, #0]
 801235e:	331c      	adds	r3, #28
 8012360:	4618      	mov	r0, r3
 8012362:	f000 ff41 	bl	80131e8 <read16>
 8012366:	4603      	mov	r3, r0
 8012368:	ee07 3a90 	vmov	s15, r3
 801236c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012370:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80123cc <decodeGyroscopeUncal+0xe0>
 8012374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroscopeUncal.biasY = read16(&event->report[12]) * SCALE_Q(9);
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	331e      	adds	r3, #30
 8012382:	4618      	mov	r0, r3
 8012384:	f000 ff30 	bl	80131e8 <read16>
 8012388:	4603      	mov	r3, r0
 801238a:	ee07 3a90 	vmov	s15, r3
 801238e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012392:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80123cc <decodeGyroscopeUncal+0xe0>
 8012396:	ee67 7a87 	vmul.f32	s15, s15, s14
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.gyroscopeUncal.biasZ = read16(&event->report[14]) * SCALE_Q(9);
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	3320      	adds	r3, #32
 80123a4:	4618      	mov	r0, r3
 80123a6:	f000 ff1f 	bl	80131e8 <read16>
 80123aa:	4603      	mov	r3, r0
 80123ac:	ee07 3a90 	vmov	s15, r3
 80123b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123b4:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80123cc <decodeGyroscopeUncal+0xe0>
 80123b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    return SH2_OK;
 80123c2:	2300      	movs	r3, #0
}
 80123c4:	4618      	mov	r0, r3
 80123c6:	3708      	adds	r7, #8
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}
 80123cc:	3b000000 	.word	0x3b000000

080123d0 <decodeRawMagnetometer>:

static int decodeRawMagnetometer(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b082      	sub	sp, #8
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	6039      	str	r1, [r7, #0]
    value->un.rawMagnetometer.x = read16(&event->report[4]);
 80123da:	683b      	ldr	r3, [r7, #0]
 80123dc:	3316      	adds	r3, #22
 80123de:	4618      	mov	r0, r3
 80123e0:	f000 ff02 	bl	80131e8 <read16>
 80123e4:	4603      	mov	r3, r0
 80123e6:	461a      	mov	r2, r3
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	829a      	strh	r2, [r3, #20]
    value->un.rawMagnetometer.y = read16(&event->report[6]);
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	3318      	adds	r3, #24
 80123f0:	4618      	mov	r0, r3
 80123f2:	f000 fef9 	bl	80131e8 <read16>
 80123f6:	4603      	mov	r3, r0
 80123f8:	461a      	mov	r2, r3
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	82da      	strh	r2, [r3, #22]
    value->un.rawMagnetometer.z = read16(&event->report[8]);
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	331a      	adds	r3, #26
 8012402:	4618      	mov	r0, r3
 8012404:	f000 fef0 	bl	80131e8 <read16>
 8012408:	4603      	mov	r3, r0
 801240a:	461a      	mov	r2, r3
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	831a      	strh	r2, [r3, #24]
    value->un.rawMagnetometer.timestamp = read32(&event->report[12]);
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	331e      	adds	r3, #30
 8012414:	4618      	mov	r0, r3
 8012416:	f000 fefe 	bl	8013216 <read32>
 801241a:	4603      	mov	r3, r0
 801241c:	461a      	mov	r2, r3
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	61da      	str	r2, [r3, #28]

    return SH2_OK;
 8012422:	2300      	movs	r3, #0
}
 8012424:	4618      	mov	r0, r3
 8012426:	3708      	adds	r7, #8
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}

0801242c <decodeMagneticFieldCalibrated>:

static int decodeMagneticFieldCalibrated(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b082      	sub	sp, #8
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
 8012434:	6039      	str	r1, [r7, #0]
    value->un.magneticField.x = read16(&event->report[4]) * SCALE_Q(4);
 8012436:	683b      	ldr	r3, [r7, #0]
 8012438:	3316      	adds	r3, #22
 801243a:	4618      	mov	r0, r3
 801243c:	f000 fed4 	bl	80131e8 <read16>
 8012440:	4603      	mov	r3, r0
 8012442:	ee07 3a90 	vmov	s15, r3
 8012446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801244a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80124a8 <decodeMagneticFieldCalibrated+0x7c>
 801244e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticField.y = read16(&event->report[6]) * SCALE_Q(4);
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	3318      	adds	r3, #24
 801245c:	4618      	mov	r0, r3
 801245e:	f000 fec3 	bl	80131e8 <read16>
 8012462:	4603      	mov	r3, r0
 8012464:	ee07 3a90 	vmov	s15, r3
 8012468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801246c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80124a8 <decodeMagneticFieldCalibrated+0x7c>
 8012470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticField.z = read16(&event->report[8]) * SCALE_Q(4);
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	331a      	adds	r3, #26
 801247e:	4618      	mov	r0, r3
 8012480:	f000 feb2 	bl	80131e8 <read16>
 8012484:	4603      	mov	r3, r0
 8012486:	ee07 3a90 	vmov	s15, r3
 801248a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801248e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80124a8 <decodeMagneticFieldCalibrated+0x7c>
 8012492:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	edc3 7a07 	vstr	s15, [r3, #28]

    return SH2_OK;
 801249c:	2300      	movs	r3, #0
}
 801249e:	4618      	mov	r0, r3
 80124a0:	3708      	adds	r7, #8
 80124a2:	46bd      	mov	sp, r7
 80124a4:	bd80      	pop	{r7, pc}
 80124a6:	bf00      	nop
 80124a8:	3d800000 	.word	0x3d800000

080124ac <decodeMagneticFieldUncal>:

static int decodeMagneticFieldUncal(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b082      	sub	sp, #8
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	6039      	str	r1, [r7, #0]
    value->un.magneticFieldUncal.x = read16(&event->report[4]) * SCALE_Q(4);
 80124b6:	683b      	ldr	r3, [r7, #0]
 80124b8:	3316      	adds	r3, #22
 80124ba:	4618      	mov	r0, r3
 80124bc:	f000 fe94 	bl	80131e8 <read16>
 80124c0:	4603      	mov	r3, r0
 80124c2:	ee07 3a90 	vmov	s15, r3
 80124c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124ca:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801258c <decodeMagneticFieldUncal+0xe0>
 80124ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.magneticFieldUncal.y = read16(&event->report[6]) * SCALE_Q(4);
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	3318      	adds	r3, #24
 80124dc:	4618      	mov	r0, r3
 80124de:	f000 fe83 	bl	80131e8 <read16>
 80124e2:	4603      	mov	r3, r0
 80124e4:	ee07 3a90 	vmov	s15, r3
 80124e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80124ec:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 801258c <decodeMagneticFieldUncal+0xe0>
 80124f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.magneticFieldUncal.z = read16(&event->report[8]) * SCALE_Q(4);
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	331a      	adds	r3, #26
 80124fe:	4618      	mov	r0, r3
 8012500:	f000 fe72 	bl	80131e8 <read16>
 8012504:	4603      	mov	r3, r0
 8012506:	ee07 3a90 	vmov	s15, r3
 801250a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801250e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 801258c <decodeMagneticFieldUncal+0xe0>
 8012512:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	edc3 7a07 	vstr	s15, [r3, #28]

    value->un.magneticFieldUncal.biasX = read16(&event->report[10]) * SCALE_Q(4);
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	331c      	adds	r3, #28
 8012520:	4618      	mov	r0, r3
 8012522:	f000 fe61 	bl	80131e8 <read16>
 8012526:	4603      	mov	r3, r0
 8012528:	ee07 3a90 	vmov	s15, r3
 801252c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012530:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 801258c <decodeMagneticFieldUncal+0xe0>
 8012534:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.magneticFieldUncal.biasY = read16(&event->report[12]) * SCALE_Q(4);
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	331e      	adds	r3, #30
 8012542:	4618      	mov	r0, r3
 8012544:	f000 fe50 	bl	80131e8 <read16>
 8012548:	4603      	mov	r3, r0
 801254a:	ee07 3a90 	vmov	s15, r3
 801254e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012552:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 801258c <decodeMagneticFieldUncal+0xe0>
 8012556:	ee67 7a87 	vmul.f32	s15, s15, s14
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.magneticFieldUncal.biasZ = read16(&event->report[14]) * SCALE_Q(4);
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	3320      	adds	r3, #32
 8012564:	4618      	mov	r0, r3
 8012566:	f000 fe3f 	bl	80131e8 <read16>
 801256a:	4603      	mov	r3, r0
 801256c:	ee07 3a90 	vmov	s15, r3
 8012570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012574:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 801258c <decodeMagneticFieldUncal+0xe0>
 8012578:	ee67 7a87 	vmul.f32	s15, s15, s14
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    return SH2_OK;
 8012582:	2300      	movs	r3, #0
}
 8012584:	4618      	mov	r0, r3
 8012586:	3708      	adds	r7, #8
 8012588:	46bd      	mov	sp, r7
 801258a:	bd80      	pop	{r7, pc}
 801258c:	3d800000 	.word	0x3d800000

08012590 <decodeRotationVector>:

static int decodeRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b082      	sub	sp, #8
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	6039      	str	r1, [r7, #0]
    value->un.rotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	3316      	adds	r3, #22
 801259e:	4618      	mov	r0, r3
 80125a0:	f000 fe22 	bl	80131e8 <read16>
 80125a4:	4603      	mov	r3, r0
 80125a6:	ee07 3a90 	vmov	s15, r3
 80125aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80125ae:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8012650 <decodeRotationVector+0xc0>
 80125b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.rotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	3318      	adds	r3, #24
 80125c0:	4618      	mov	r0, r3
 80125c2:	f000 fe11 	bl	80131e8 <read16>
 80125c6:	4603      	mov	r3, r0
 80125c8:	ee07 3a90 	vmov	s15, r3
 80125cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80125d0:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8012650 <decodeRotationVector+0xc0>
 80125d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.rotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	331a      	adds	r3, #26
 80125e2:	4618      	mov	r0, r3
 80125e4:	f000 fe00 	bl	80131e8 <read16>
 80125e8:	4603      	mov	r3, r0
 80125ea:	ee07 3a90 	vmov	s15, r3
 80125ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80125f2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8012650 <decodeRotationVector+0xc0>
 80125f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.rotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8012600:	683b      	ldr	r3, [r7, #0]
 8012602:	331c      	adds	r3, #28
 8012604:	4618      	mov	r0, r3
 8012606:	f000 fdef 	bl	80131e8 <read16>
 801260a:	4603      	mov	r3, r0
 801260c:	ee07 3a90 	vmov	s15, r3
 8012610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012614:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8012650 <decodeRotationVector+0xc0>
 8012618:	ee67 7a87 	vmul.f32	s15, s15, s14
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.rotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	331e      	adds	r3, #30
 8012626:	4618      	mov	r0, r3
 8012628:	f000 fdde 	bl	80131e8 <read16>
 801262c:	4603      	mov	r3, r0
 801262e:	ee07 3a90 	vmov	s15, r3
 8012632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012636:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8012654 <decodeRotationVector+0xc4>
 801263a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return SH2_OK;
 8012644:	2300      	movs	r3, #0
}
 8012646:	4618      	mov	r0, r3
 8012648:	3708      	adds	r7, #8
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}
 801264e:	bf00      	nop
 8012650:	38800000 	.word	0x38800000
 8012654:	39800000 	.word	0x39800000

08012658 <decodeGameRotationVector>:

static int decodeGameRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012658:	b580      	push	{r7, lr}
 801265a:	b082      	sub	sp, #8
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
 8012660:	6039      	str	r1, [r7, #0]
    value->un.gameRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8012662:	683b      	ldr	r3, [r7, #0]
 8012664:	3316      	adds	r3, #22
 8012666:	4618      	mov	r0, r3
 8012668:	f000 fdbe 	bl	80131e8 <read16>
 801266c:	4603      	mov	r3, r0
 801266e:	ee07 3a90 	vmov	s15, r3
 8012672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012676:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80126f4 <decodeGameRotationVector+0x9c>
 801267a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gameRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	3318      	adds	r3, #24
 8012688:	4618      	mov	r0, r3
 801268a:	f000 fdad 	bl	80131e8 <read16>
 801268e:	4603      	mov	r3, r0
 8012690:	ee07 3a90 	vmov	s15, r3
 8012694:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012698:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80126f4 <decodeGameRotationVector+0x9c>
 801269c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gameRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	331a      	adds	r3, #26
 80126aa:	4618      	mov	r0, r3
 80126ac:	f000 fd9c 	bl	80131e8 <read16>
 80126b0:	4603      	mov	r3, r0
 80126b2:	ee07 3a90 	vmov	s15, r3
 80126b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80126ba:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80126f4 <decodeGameRotationVector+0x9c>
 80126be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gameRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	331c      	adds	r3, #28
 80126cc:	4618      	mov	r0, r3
 80126ce:	f000 fd8b 	bl	80131e8 <read16>
 80126d2:	4603      	mov	r3, r0
 80126d4:	ee07 3a90 	vmov	s15, r3
 80126d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80126dc:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80126f4 <decodeGameRotationVector+0x9c>
 80126e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 80126ea:	2300      	movs	r3, #0
}
 80126ec:	4618      	mov	r0, r3
 80126ee:	3708      	adds	r7, #8
 80126f0:	46bd      	mov	sp, r7
 80126f2:	bd80      	pop	{r7, pc}
 80126f4:	38800000 	.word	0x38800000

080126f8 <decodeGeomagneticRotationVector>:

static int decodeGeomagneticRotationVector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b082      	sub	sp, #8
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
 8012700:	6039      	str	r1, [r7, #0]
    value->un.geoMagRotationVector.i = read16(&event->report[4]) * SCALE_Q(14);
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	3316      	adds	r3, #22
 8012706:	4618      	mov	r0, r3
 8012708:	f000 fd6e 	bl	80131e8 <read16>
 801270c:	4603      	mov	r3, r0
 801270e:	ee07 3a90 	vmov	s15, r3
 8012712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012716:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80127b8 <decodeGeomagneticRotationVector+0xc0>
 801271a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.geoMagRotationVector.j = read16(&event->report[6]) * SCALE_Q(14);
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	3318      	adds	r3, #24
 8012728:	4618      	mov	r0, r3
 801272a:	f000 fd5d 	bl	80131e8 <read16>
 801272e:	4603      	mov	r3, r0
 8012730:	ee07 3a90 	vmov	s15, r3
 8012734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012738:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80127b8 <decodeGeomagneticRotationVector+0xc0>
 801273c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.geoMagRotationVector.k = read16(&event->report[8]) * SCALE_Q(14);
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	331a      	adds	r3, #26
 801274a:	4618      	mov	r0, r3
 801274c:	f000 fd4c 	bl	80131e8 <read16>
 8012750:	4603      	mov	r3, r0
 8012752:	ee07 3a90 	vmov	s15, r3
 8012756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801275a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80127b8 <decodeGeomagneticRotationVector+0xc0>
 801275e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.geoMagRotationVector.real = read16(&event->report[10]) * SCALE_Q(14);
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	331c      	adds	r3, #28
 801276c:	4618      	mov	r0, r3
 801276e:	f000 fd3b 	bl	80131e8 <read16>
 8012772:	4603      	mov	r3, r0
 8012774:	ee07 3a90 	vmov	s15, r3
 8012778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801277c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80127b8 <decodeGeomagneticRotationVector+0xc0>
 8012780:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.geoMagRotationVector.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	331e      	adds	r3, #30
 801278e:	4618      	mov	r0, r3
 8012790:	f000 fd2a 	bl	80131e8 <read16>
 8012794:	4603      	mov	r3, r0
 8012796:	ee07 3a90 	vmov	s15, r3
 801279a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801279e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80127bc <decodeGeomagneticRotationVector+0xc4>
 80127a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return SH2_OK;
 80127ac:	2300      	movs	r3, #0
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3708      	adds	r7, #8
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}
 80127b6:	bf00      	nop
 80127b8:	38800000 	.word	0x38800000
 80127bc:	39800000 	.word	0x39800000

080127c0 <decodePressure>:

static int decodePressure(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b082      	sub	sp, #8
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	6039      	str	r1, [r7, #0]
    value->un.pressure.value = read32(&event->report[4]) * SCALE_Q(20);
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	3316      	adds	r3, #22
 80127ce:	4618      	mov	r0, r3
 80127d0:	f000 fd21 	bl	8013216 <read32>
 80127d4:	ee07 0a90 	vmov	s15, r0
 80127d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80127dc:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80127f4 <decodePressure+0x34>
 80127e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 80127ea:	2300      	movs	r3, #0
}
 80127ec:	4618      	mov	r0, r3
 80127ee:	3708      	adds	r7, #8
 80127f0:	46bd      	mov	sp, r7
 80127f2:	bd80      	pop	{r7, pc}
 80127f4:	35800000 	.word	0x35800000

080127f8 <decodeAmbientLight>:

static int decodeAmbientLight(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b082      	sub	sp, #8
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
 8012800:	6039      	str	r1, [r7, #0]
    value->un.ambientLight.value = read32(&event->report[4]) * SCALE_Q(8);
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	3316      	adds	r3, #22
 8012806:	4618      	mov	r0, r3
 8012808:	f000 fd05 	bl	8013216 <read32>
 801280c:	ee07 0a90 	vmov	s15, r0
 8012810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012814:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 801282c <decodeAmbientLight+0x34>
 8012818:	ee67 7a87 	vmul.f32	s15, s15, s14
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8012822:	2300      	movs	r3, #0
}
 8012824:	4618      	mov	r0, r3
 8012826:	3708      	adds	r7, #8
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}
 801282c:	3b800000 	.word	0x3b800000

08012830 <decodeHumidity>:

static int decodeHumidity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b082      	sub	sp, #8
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	6039      	str	r1, [r7, #0]
    value->un.humidity.value = read16(&event->report[4]) * SCALE_Q(8);
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	3316      	adds	r3, #22
 801283e:	4618      	mov	r0, r3
 8012840:	f000 fcd2 	bl	80131e8 <read16>
 8012844:	4603      	mov	r3, r0
 8012846:	ee07 3a90 	vmov	s15, r3
 801284a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801284e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8012868 <decodeHumidity+0x38>
 8012852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 801285c:	2300      	movs	r3, #0
}
 801285e:	4618      	mov	r0, r3
 8012860:	3708      	adds	r7, #8
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}
 8012866:	bf00      	nop
 8012868:	3b800000 	.word	0x3b800000

0801286c <decodeProximity>:

static int decodeProximity(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b082      	sub	sp, #8
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	6039      	str	r1, [r7, #0]
    value->un.proximity.value = read16(&event->report[4]) * SCALE_Q(4);
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	3316      	adds	r3, #22
 801287a:	4618      	mov	r0, r3
 801287c:	f000 fcb4 	bl	80131e8 <read16>
 8012880:	4603      	mov	r3, r0
 8012882:	ee07 3a90 	vmov	s15, r3
 8012886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801288a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80128a4 <decodeProximity+0x38>
 801288e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8012898:	2300      	movs	r3, #0
}
 801289a:	4618      	mov	r0, r3
 801289c:	3708      	adds	r7, #8
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}
 80128a2:	bf00      	nop
 80128a4:	3d800000 	.word	0x3d800000

080128a8 <decodeTemperature>:

static int decodeTemperature(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b082      	sub	sp, #8
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
 80128b0:	6039      	str	r1, [r7, #0]
    value->un.temperature.value = read16(&event->report[4]) * SCALE_Q(7);
 80128b2:	683b      	ldr	r3, [r7, #0]
 80128b4:	3316      	adds	r3, #22
 80128b6:	4618      	mov	r0, r3
 80128b8:	f000 fc96 	bl	80131e8 <read16>
 80128bc:	4603      	mov	r3, r0
 80128be:	ee07 3a90 	vmov	s15, r3
 80128c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128c6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80128e0 <decodeTemperature+0x38>
 80128ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 80128d4:	2300      	movs	r3, #0
}
 80128d6:	4618      	mov	r0, r3
 80128d8:	3708      	adds	r7, #8
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}
 80128de:	bf00      	nop
 80128e0:	3c000000 	.word	0x3c000000

080128e4 <decodeReserved>:

static int decodeReserved(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
 80128ec:	6039      	str	r1, [r7, #0]
    value->un.reserved.tbd = read16(&event->report[4]) * SCALE_Q(7);
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	3316      	adds	r3, #22
 80128f2:	4618      	mov	r0, r3
 80128f4:	f000 fc78 	bl	80131e8 <read16>
 80128f8:	4603      	mov	r3, r0
 80128fa:	ee07 3a90 	vmov	s15, r3
 80128fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012902:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 801291c <decodeReserved+0x38>
 8012906:	ee67 7a87 	vmul.f32	s15, s15, s14
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	edc3 7a05 	vstr	s15, [r3, #20]

    return SH2_OK;
 8012910:	2300      	movs	r3, #0
}
 8012912:	4618      	mov	r0, r3
 8012914:	3708      	adds	r7, #8
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
 801291a:	bf00      	nop
 801291c:	3c000000 	.word	0x3c000000

08012920 <decodeTapDetector>:

static int decodeTapDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012920:	b480      	push	{r7}
 8012922:	b083      	sub	sp, #12
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
 8012928:	6039      	str	r1, [r7, #0]
    value->un.tapDetector.flags = event->report[4];
 801292a:	683b      	ldr	r3, [r7, #0]
 801292c:	7d9a      	ldrb	r2, [r3, #22]
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8012932:	2300      	movs	r3, #0
}
 8012934:	4618      	mov	r0, r3
 8012936:	370c      	adds	r7, #12
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr

08012940 <decodeStepDetector>:

static int decodeStepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
 8012948:	6039      	str	r1, [r7, #0]
    value->un.stepDetector.latency = readu32(&event->report[4]);
 801294a:	683b      	ldr	r3, [r7, #0]
 801294c:	3316      	adds	r3, #22
 801294e:	4618      	mov	r0, r3
 8012950:	f000 fc1d 	bl	801318e <readu32>
 8012954:	4602      	mov	r2, r0
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	615a      	str	r2, [r3, #20]

    return SH2_OK;
 801295a:	2300      	movs	r3, #0
}
 801295c:	4618      	mov	r0, r3
 801295e:	3708      	adds	r7, #8
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}

08012964 <decodeStepCounter>:

static int decodeStepCounter(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b082      	sub	sp, #8
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
 801296c:	6039      	str	r1, [r7, #0]
    value->un.stepCounter.latency = readu32(&event->report[4]);
 801296e:	683b      	ldr	r3, [r7, #0]
 8012970:	3316      	adds	r3, #22
 8012972:	4618      	mov	r0, r3
 8012974:	f000 fc0b 	bl	801318e <readu32>
 8012978:	4602      	mov	r2, r0
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	615a      	str	r2, [r3, #20]
    value->un.stepCounter.steps = readu32(&event->report[8]);
 801297e:	683b      	ldr	r3, [r7, #0]
 8012980:	331a      	adds	r3, #26
 8012982:	4618      	mov	r0, r3
 8012984:	f000 fc03 	bl	801318e <readu32>
 8012988:	4603      	mov	r3, r0
 801298a:	b29a      	uxth	r2, r3
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	831a      	strh	r2, [r3, #24]

    return SH2_OK;
 8012990:	2300      	movs	r3, #0
}
 8012992:	4618      	mov	r0, r3
 8012994:	3708      	adds	r7, #8
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}

0801299a <decodeSignificantMotion>:

static int decodeSignificantMotion(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 801299a:	b580      	push	{r7, lr}
 801299c:	b082      	sub	sp, #8
 801299e:	af00      	add	r7, sp, #0
 80129a0:	6078      	str	r0, [r7, #4]
 80129a2:	6039      	str	r1, [r7, #0]
    value->un.sigMotion.motion = readu16(&event->report[4]);
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	3316      	adds	r3, #22
 80129a8:	4618      	mov	r0, r3
 80129aa:	f000 fbd9 	bl	8013160 <readu16>
 80129ae:	4603      	mov	r3, r0
 80129b0:	461a      	mov	r2, r3
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80129b6:	2300      	movs	r3, #0
}
 80129b8:	4618      	mov	r0, r3
 80129ba:	3708      	adds	r7, #8
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}

080129c0 <decodeStabilityClassifier>:

static int decodeStabilityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80129c0:	b480      	push	{r7}
 80129c2:	b083      	sub	sp, #12
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	6039      	str	r1, [r7, #0]
    value->un.stabilityClassifier.classification = event->report[4];
 80129ca:	683b      	ldr	r3, [r7, #0]
 80129cc:	7d9a      	ldrb	r2, [r3, #22]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 80129d2:	2300      	movs	r3, #0
}
 80129d4:	4618      	mov	r0, r3
 80129d6:	370c      	adds	r7, #12
 80129d8:	46bd      	mov	sp, r7
 80129da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129de:	4770      	bx	lr

080129e0 <decodeShakeDetector>:

static int decodeShakeDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b082      	sub	sp, #8
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	6039      	str	r1, [r7, #0]
    value->un.shakeDetector.shake = readu16(&event->report[4]);
 80129ea:	683b      	ldr	r3, [r7, #0]
 80129ec:	3316      	adds	r3, #22
 80129ee:	4618      	mov	r0, r3
 80129f0:	f000 fbb6 	bl	8013160 <readu16>
 80129f4:	4603      	mov	r3, r0
 80129f6:	461a      	mov	r2, r3
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 80129fc:	2300      	movs	r3, #0
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	3708      	adds	r7, #8
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}

08012a06 <decodeFlipDetector>:

static int decodeFlipDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012a06:	b580      	push	{r7, lr}
 8012a08:	b082      	sub	sp, #8
 8012a0a:	af00      	add	r7, sp, #0
 8012a0c:	6078      	str	r0, [r7, #4]
 8012a0e:	6039      	str	r1, [r7, #0]
    value->un.flipDetector.flip = readu16(&event->report[4]);
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	3316      	adds	r3, #22
 8012a14:	4618      	mov	r0, r3
 8012a16:	f000 fba3 	bl	8013160 <readu16>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	461a      	mov	r2, r3
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8012a22:	2300      	movs	r3, #0
}
 8012a24:	4618      	mov	r0, r3
 8012a26:	3708      	adds	r7, #8
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}

08012a2c <decodePickupDetector>:

static int decodePickupDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b082      	sub	sp, #8
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
 8012a34:	6039      	str	r1, [r7, #0]
    value->un.pickupDetector.pickup = readu16(&event->report[4]);
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	3316      	adds	r3, #22
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f000 fb90 	bl	8013160 <readu16>
 8012a40:	4603      	mov	r3, r0
 8012a42:	461a      	mov	r2, r3
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8012a48:	2300      	movs	r3, #0
}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	3708      	adds	r7, #8
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}

08012a52 <decodeStabilityDetector>:

static int decodeStabilityDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012a52:	b580      	push	{r7, lr}
 8012a54:	b082      	sub	sp, #8
 8012a56:	af00      	add	r7, sp, #0
 8012a58:	6078      	str	r0, [r7, #4]
 8012a5a:	6039      	str	r1, [r7, #0]
    value->un.stabilityDetector.stability = readu16(&event->report[4]);
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	3316      	adds	r3, #22
 8012a60:	4618      	mov	r0, r3
 8012a62:	f000 fb7d 	bl	8013160 <readu16>
 8012a66:	4603      	mov	r3, r0
 8012a68:	461a      	mov	r2, r3
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8012a6e:	2300      	movs	r3, #0
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	3708      	adds	r7, #8
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}

08012a78 <decodePersonalActivityClassifier>:

static int decodePersonalActivityClassifier(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012a78:	b480      	push	{r7}
 8012a7a:	b085      	sub	sp, #20
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
 8012a80:	6039      	str	r1, [r7, #0]
    value->un.personalActivityClassifier.page = event->report[4] & 0x7F;
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	7d9b      	ldrb	r3, [r3, #22]
 8012a86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012a8a:	b2da      	uxtb	r2, r3
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	751a      	strb	r2, [r3, #20]
    value->un.personalActivityClassifier.lastPage = ((event->report[4] & 0x80) != 0);
 8012a90:	683b      	ldr	r3, [r7, #0]
 8012a92:	7d9b      	ldrb	r3, [r3, #22]
 8012a94:	b25b      	sxtb	r3, r3
 8012a96:	b2db      	uxtb	r3, r3
 8012a98:	09db      	lsrs	r3, r3, #7
 8012a9a:	b2da      	uxtb	r2, r3
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	755a      	strb	r2, [r3, #21]
    value->un.personalActivityClassifier.mostLikelyState = event->report[5];
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	7dda      	ldrb	r2, [r3, #23]
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	759a      	strb	r2, [r3, #22]
    for (int n = 0; n < 10; n++) {
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	60fb      	str	r3, [r7, #12]
 8012aac:	e00d      	b.n	8012aca <decodePersonalActivityClassifier+0x52>
        value->un.personalActivityClassifier.confidence[n] = event->report[6+n];
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	3306      	adds	r3, #6
 8012ab2:	683a      	ldr	r2, [r7, #0]
 8012ab4:	4413      	add	r3, r2
 8012ab6:	7c99      	ldrb	r1, [r3, #18]
 8012ab8:	687a      	ldr	r2, [r7, #4]
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	4413      	add	r3, r2
 8012abe:	3317      	adds	r3, #23
 8012ac0:	460a      	mov	r2, r1
 8012ac2:	701a      	strb	r2, [r3, #0]
    for (int n = 0; n < 10; n++) {
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	3301      	adds	r3, #1
 8012ac8:	60fb      	str	r3, [r7, #12]
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	2b09      	cmp	r3, #9
 8012ace:	ddee      	ble.n	8012aae <decodePersonalActivityClassifier+0x36>
    }
    
    return SH2_OK;
 8012ad0:	2300      	movs	r3, #0
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3714      	adds	r7, #20
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012adc:	4770      	bx	lr

08012ade <decodeSleepDetector>:

static int decodeSleepDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012ade:	b480      	push	{r7}
 8012ae0:	b083      	sub	sp, #12
 8012ae2:	af00      	add	r7, sp, #0
 8012ae4:	6078      	str	r0, [r7, #4]
 8012ae6:	6039      	str	r1, [r7, #0]
    value->un.sleepDetector.sleepState = event->report[4];
 8012ae8:	683b      	ldr	r3, [r7, #0]
 8012aea:	7d9a      	ldrb	r2, [r3, #22]
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	751a      	strb	r2, [r3, #20]

    return SH2_OK;
 8012af0:	2300      	movs	r3, #0
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	370c      	adds	r7, #12
 8012af6:	46bd      	mov	sp, r7
 8012af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afc:	4770      	bx	lr

08012afe <decodeTiltDetector>:

static int decodeTiltDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012afe:	b580      	push	{r7, lr}
 8012b00:	b082      	sub	sp, #8
 8012b02:	af00      	add	r7, sp, #0
 8012b04:	6078      	str	r0, [r7, #4]
 8012b06:	6039      	str	r1, [r7, #0]
    value->un.tiltDetector.tilt = readu16(&event->report[4]);
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	3316      	adds	r3, #22
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f000 fb27 	bl	8013160 <readu16>
 8012b12:	4603      	mov	r3, r0
 8012b14:	461a      	mov	r2, r3
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8012b1a:	2300      	movs	r3, #0
}
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	3708      	adds	r7, #8
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bd80      	pop	{r7, pc}

08012b24 <decodePocketDetector>:

static int decodePocketDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b082      	sub	sp, #8
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
 8012b2c:	6039      	str	r1, [r7, #0]
    value->un.pocketDetector.pocket = readu16(&event->report[4]);
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	3316      	adds	r3, #22
 8012b32:	4618      	mov	r0, r3
 8012b34:	f000 fb14 	bl	8013160 <readu16>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	461a      	mov	r2, r3
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8012b40:	2300      	movs	r3, #0
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	3708      	adds	r7, #8
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}

08012b4a <decodeCircleDetector>:

static int decodeCircleDetector(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012b4a:	b580      	push	{r7, lr}
 8012b4c:	b082      	sub	sp, #8
 8012b4e:	af00      	add	r7, sp, #0
 8012b50:	6078      	str	r0, [r7, #4]
 8012b52:	6039      	str	r1, [r7, #0]
    value->un.circleDetector.circle = readu16(&event->report[4]);
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	3316      	adds	r3, #22
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f000 fb01 	bl	8013160 <readu16>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	461a      	mov	r2, r3
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8012b66:	2300      	movs	r3, #0
}
 8012b68:	4618      	mov	r0, r3
 8012b6a:	3708      	adds	r7, #8
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	bd80      	pop	{r7, pc}

08012b70 <decodeHeartRateMonitor>:

static int decodeHeartRateMonitor(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b082      	sub	sp, #8
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
 8012b78:	6039      	str	r1, [r7, #0]
    value->un.heartRateMonitor.heartRate = readu16(&event->report[4]);
 8012b7a:	683b      	ldr	r3, [r7, #0]
 8012b7c:	3316      	adds	r3, #22
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f000 faee 	bl	8013160 <readu16>
 8012b84:	4603      	mov	r3, r0
 8012b86:	461a      	mov	r2, r3
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	829a      	strh	r2, [r3, #20]

    return SH2_OK;
 8012b8c:	2300      	movs	r3, #0
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	3708      	adds	r7, #8
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}
	...

08012b98 <decodeArvrStabilizedRV>:

static int decodeArvrStabilizedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b082      	sub	sp, #8
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
 8012ba0:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedRV.i = read16(&event->report[4]) * SCALE_Q(14);
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	3316      	adds	r3, #22
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f000 fb1e 	bl	80131e8 <read16>
 8012bac:	4603      	mov	r3, r0
 8012bae:	ee07 3a90 	vmov	s15, r3
 8012bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012bb6:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8012c58 <decodeArvrStabilizedRV+0xc0>
 8012bba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedRV.j = read16(&event->report[6]) * SCALE_Q(14);
 8012bc4:	683b      	ldr	r3, [r7, #0]
 8012bc6:	3318      	adds	r3, #24
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f000 fb0d 	bl	80131e8 <read16>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	ee07 3a90 	vmov	s15, r3
 8012bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012bd8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8012c58 <decodeArvrStabilizedRV+0xc0>
 8012bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedRV.k = read16(&event->report[8]) * SCALE_Q(14);
 8012be6:	683b      	ldr	r3, [r7, #0]
 8012be8:	331a      	adds	r3, #26
 8012bea:	4618      	mov	r0, r3
 8012bec:	f000 fafc 	bl	80131e8 <read16>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	ee07 3a90 	vmov	s15, r3
 8012bf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012bfa:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8012c58 <decodeArvrStabilizedRV+0xc0>
 8012bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedRV.real = read16(&event->report[10]) * SCALE_Q(14);
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	331c      	adds	r3, #28
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f000 faeb 	bl	80131e8 <read16>
 8012c12:	4603      	mov	r3, r0
 8012c14:	ee07 3a90 	vmov	s15, r3
 8012c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c1c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8012c58 <decodeArvrStabilizedRV+0xc0>
 8012c20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.arvrStabilizedRV.accuracy = read16(&event->report[12]) * SCALE_Q(12);
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	331e      	adds	r3, #30
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f000 fada 	bl	80131e8 <read16>
 8012c34:	4603      	mov	r3, r0
 8012c36:	ee07 3a90 	vmov	s15, r3
 8012c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c3e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8012c5c <decodeArvrStabilizedRV+0xc4>
 8012c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    return SH2_OK;
 8012c4c:	2300      	movs	r3, #0
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3708      	adds	r7, #8
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}
 8012c56:	bf00      	nop
 8012c58:	38800000 	.word	0x38800000
 8012c5c:	39800000 	.word	0x39800000

08012c60 <decodeArvrStabilizedGRV>:

static int decodeArvrStabilizedGRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b082      	sub	sp, #8
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
 8012c68:	6039      	str	r1, [r7, #0]
    value->un.arvrStabilizedGRV.i = read16(&event->report[4]) * SCALE_Q(14);
 8012c6a:	683b      	ldr	r3, [r7, #0]
 8012c6c:	3316      	adds	r3, #22
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f000 faba 	bl	80131e8 <read16>
 8012c74:	4603      	mov	r3, r0
 8012c76:	ee07 3a90 	vmov	s15, r3
 8012c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c7e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8012cfc <decodeArvrStabilizedGRV+0x9c>
 8012c82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.arvrStabilizedGRV.j = read16(&event->report[6]) * SCALE_Q(14);
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	3318      	adds	r3, #24
 8012c90:	4618      	mov	r0, r3
 8012c92:	f000 faa9 	bl	80131e8 <read16>
 8012c96:	4603      	mov	r3, r0
 8012c98:	ee07 3a90 	vmov	s15, r3
 8012c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ca0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8012cfc <decodeArvrStabilizedGRV+0x9c>
 8012ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.arvrStabilizedGRV.k = read16(&event->report[8]) * SCALE_Q(14);
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	331a      	adds	r3, #26
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f000 fa98 	bl	80131e8 <read16>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	ee07 3a90 	vmov	s15, r3
 8012cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012cc2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8012cfc <decodeArvrStabilizedGRV+0x9c>
 8012cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.arvrStabilizedGRV.real = read16(&event->report[10]) * SCALE_Q(14);
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	331c      	adds	r3, #28
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f000 fa87 	bl	80131e8 <read16>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	ee07 3a90 	vmov	s15, r3
 8012ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ce4:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8012cfc <decodeArvrStabilizedGRV+0x9c>
 8012ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	edc3 7a08 	vstr	s15, [r3, #32]

    return SH2_OK;
 8012cf2:	2300      	movs	r3, #0
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3708      	adds	r7, #8
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	38800000 	.word	0x38800000

08012d00 <decodeGyroIntegratedRV>:

static int decodeGyroIntegratedRV(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	6039      	str	r1, [r7, #0]
    value->un.gyroIntegratedRV.i = read16(&event->report[0]) * SCALE_Q(14);
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	3312      	adds	r3, #18
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f000 fa6a 	bl	80131e8 <read16>
 8012d14:	4603      	mov	r3, r0
 8012d16:	ee07 3a90 	vmov	s15, r3
 8012d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d1e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8012e04 <decodeGyroIntegratedRV+0x104>
 8012d22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	edc3 7a05 	vstr	s15, [r3, #20]
    value->un.gyroIntegratedRV.j = read16(&event->report[2]) * SCALE_Q(14);
 8012d2c:	683b      	ldr	r3, [r7, #0]
 8012d2e:	3314      	adds	r3, #20
 8012d30:	4618      	mov	r0, r3
 8012d32:	f000 fa59 	bl	80131e8 <read16>
 8012d36:	4603      	mov	r3, r0
 8012d38:	ee07 3a90 	vmov	s15, r3
 8012d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d40:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8012e04 <decodeGyroIntegratedRV+0x104>
 8012d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.gyroIntegratedRV.k = read16(&event->report[4]) * SCALE_Q(14);
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	3316      	adds	r3, #22
 8012d52:	4618      	mov	r0, r3
 8012d54:	f000 fa48 	bl	80131e8 <read16>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	ee07 3a90 	vmov	s15, r3
 8012d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d62:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8012e04 <decodeGyroIntegratedRV+0x104>
 8012d66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.gyroIntegratedRV.real = read16(&event->report[6]) * SCALE_Q(14);
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	3318      	adds	r3, #24
 8012d74:	4618      	mov	r0, r3
 8012d76:	f000 fa37 	bl	80131e8 <read16>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	ee07 3a90 	vmov	s15, r3
 8012d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d84:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8012e04 <decodeGyroIntegratedRV+0x104>
 8012d88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	edc3 7a08 	vstr	s15, [r3, #32]
    value->un.gyroIntegratedRV.angVelX = read16(&event->report[8]) * SCALE_Q(10);
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	331a      	adds	r3, #26
 8012d96:	4618      	mov	r0, r3
 8012d98:	f000 fa26 	bl	80131e8 <read16>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	ee07 3a90 	vmov	s15, r3
 8012da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012da6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8012e08 <decodeGyroIntegratedRV+0x108>
 8012daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.gyroIntegratedRV.angVelY = read16(&event->report[10]) * SCALE_Q(10);
 8012db4:	683b      	ldr	r3, [r7, #0]
 8012db6:	331c      	adds	r3, #28
 8012db8:	4618      	mov	r0, r3
 8012dba:	f000 fa15 	bl	80131e8 <read16>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	ee07 3a90 	vmov	s15, r3
 8012dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012dc8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8012e08 <decodeGyroIntegratedRV+0x108>
 8012dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    value->un.gyroIntegratedRV.angVelZ = read16(&event->report[12]) * SCALE_Q(10);
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	331e      	adds	r3, #30
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f000 fa04 	bl	80131e8 <read16>
 8012de0:	4603      	mov	r3, r0
 8012de2:	ee07 3a90 	vmov	s15, r3
 8012de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012dea:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8012e08 <decodeGyroIntegratedRV+0x108>
 8012dee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    return SH2_OK;
 8012df8:	2300      	movs	r3, #0
}
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	3708      	adds	r7, #8
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}
 8012e02:	bf00      	nop
 8012e04:	38800000 	.word	0x38800000
 8012e08:	3a800000 	.word	0x3a800000

08012e0c <decodeIZroRequest>:

static int decodeIZroRequest(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012e0c:	b480      	push	{r7}
 8012e0e:	b083      	sub	sp, #12
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
 8012e14:	6039      	str	r1, [r7, #0]
    value->un.izroRequest.intent = (sh2_IZroMotionIntent_t)event->report[4];
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	7d9a      	ldrb	r2, [r3, #22]
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	751a      	strb	r2, [r3, #20]
    value->un.izroRequest.request = (sh2_IZroMotionRequest_t)event->report[5];
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	7dda      	ldrb	r2, [r3, #23]
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	755a      	strb	r2, [r3, #21]

    return SH2_OK;
 8012e26:	2300      	movs	r3, #0
}
 8012e28:	4618      	mov	r0, r3
 8012e2a:	370c      	adds	r7, #12
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e32:	4770      	bx	lr

08012e34 <decodeRawOptFlow>:

static int decodeRawOptFlow(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event)
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b082      	sub	sp, #8
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
 8012e3c:	6039      	str	r1, [r7, #0]
    // Decode Raw optical flow
    value->un.rawOptFlow.dx = read16(&event->report[4]);
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	3316      	adds	r3, #22
 8012e42:	4618      	mov	r0, r3
 8012e44:	f000 f9d0 	bl	80131e8 <read16>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	461a      	mov	r2, r3
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	835a      	strh	r2, [r3, #26]
    value->un.rawOptFlow.dy = read16(&event->report[6]);
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	3318      	adds	r3, #24
 8012e54:	4618      	mov	r0, r3
 8012e56:	f000 f9c7 	bl	80131e8 <read16>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	839a      	strh	r2, [r3, #28]
    value->un.rawOptFlow.iq = read16(&event->report[8]);
 8012e62:	683b      	ldr	r3, [r7, #0]
 8012e64:	331a      	adds	r3, #26
 8012e66:	4618      	mov	r0, r3
 8012e68:	f000 f9be 	bl	80131e8 <read16>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	461a      	mov	r2, r3
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	83da      	strh	r2, [r3, #30]
    value->un.rawOptFlow.resX = read8(&event->report[10]);
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	331c      	adds	r3, #28
 8012e78:	4618      	mov	r0, r3
 8012e7a:	f000 f9a6 	bl	80131ca <read8>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	b2da      	uxtb	r2, r3
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	f883 2020 	strb.w	r2, [r3, #32]
    value->un.rawOptFlow.resY = read8(&event->report[11]);
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	331d      	adds	r3, #29
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f000 f99c 	bl	80131ca <read8>
 8012e92:	4603      	mov	r3, r0
 8012e94:	b2da      	uxtb	r2, r3
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    value->un.rawOptFlow.shutter = read8(&event->report[12]);
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	331e      	adds	r3, #30
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f000 f992 	bl	80131ca <read8>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	b2da      	uxtb	r2, r3
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    value->un.rawOptFlow.frameMax = read8(&event->report[13]);
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	331f      	adds	r3, #31
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f000 f988 	bl	80131ca <read8>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	b2da      	uxtb	r2, r3
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    value->un.rawOptFlow.frameAvg = read8(&event->report[14]);
 8012ec4:	683b      	ldr	r3, [r7, #0]
 8012ec6:	3320      	adds	r3, #32
 8012ec8:	4618      	mov	r0, r3
 8012eca:	f000 f97e 	bl	80131ca <read8>
 8012ece:	4603      	mov	r3, r0
 8012ed0:	b2da      	uxtb	r2, r3
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    value->un.rawOptFlow.frameMin = read8(&event->report[15]);
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	3321      	adds	r3, #33	@ 0x21
 8012edc:	4618      	mov	r0, r3
 8012ede:	f000 f974 	bl	80131ca <read8>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	b2da      	uxtb	r2, r3
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    value->un.rawOptFlow.laserOn = read8(&event->report[16]);
 8012eec:	683b      	ldr	r3, [r7, #0]
 8012eee:	3322      	adds	r3, #34	@ 0x22
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f000 f96a 	bl	80131ca <read8>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	b2da      	uxtb	r2, r3
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    value->un.rawOptFlow.dt = read16(&event->report[18]);
 8012f00:	683b      	ldr	r3, [r7, #0]
 8012f02:	3324      	adds	r3, #36	@ 0x24
 8012f04:	4618      	mov	r0, r3
 8012f06:	f000 f96f 	bl	80131e8 <read16>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	461a      	mov	r2, r3
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	831a      	strh	r2, [r3, #24]
    value->un.rawOptFlow.timestamp = read32(&event->report[20]);
 8012f12:	683b      	ldr	r3, [r7, #0]
 8012f14:	3326      	adds	r3, #38	@ 0x26
 8012f16:	4618      	mov	r0, r3
 8012f18:	f000 f97d 	bl	8013216 <read32>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	461a      	mov	r2, r3
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	615a      	str	r2, [r3, #20]
    
    return SH2_OK;
 8012f24:	2300      	movs	r3, #0
}
 8012f26:	4618      	mov	r0, r3
 8012f28:	3708      	adds	r7, #8
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}
	...

08012f30 <decodeDeadReckoningPose>:

static int decodeDeadReckoningPose(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 8012f30:	b580      	push	{r7, lr}
 8012f32:	b082      	sub	sp, #8
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
 8012f38:	6039      	str	r1, [r7, #0]
    value->un.deadReckoningPose.timestamp = read32(&event->report[4]);
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	3316      	adds	r3, #22
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f000 f969 	bl	8013216 <read32>
 8012f44:	4603      	mov	r3, r0
 8012f46:	461a      	mov	r2, r3
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	615a      	str	r2, [r3, #20]
    value->un.deadReckoningPose.linPosX = read32(&event->report[8]) * SCALE_Q(17);
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	331a      	adds	r3, #26
 8012f50:	4618      	mov	r0, r3
 8012f52:	f000 f960 	bl	8013216 <read32>
 8012f56:	ee07 0a90 	vmov	s15, r0
 8012f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f5e:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80130f8 <decodeDeadReckoningPose+0x1c8>
 8012f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	edc3 7a06 	vstr	s15, [r3, #24]
    value->un.deadReckoningPose.linPosY = read32(&event->report[12]) * SCALE_Q(17);
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	331e      	adds	r3, #30
 8012f70:	4618      	mov	r0, r3
 8012f72:	f000 f950 	bl	8013216 <read32>
 8012f76:	ee07 0a90 	vmov	s15, r0
 8012f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f7e:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80130f8 <decodeDeadReckoningPose+0x1c8>
 8012f82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	edc3 7a07 	vstr	s15, [r3, #28]
    value->un.deadReckoningPose.linPosZ = read32(&event->report[16]) * SCALE_Q(17);
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	3322      	adds	r3, #34	@ 0x22
 8012f90:	4618      	mov	r0, r3
 8012f92:	f000 f940 	bl	8013216 <read32>
 8012f96:	ee07 0a90 	vmov	s15, r0
 8012f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f9e:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80130f8 <decodeDeadReckoningPose+0x1c8>
 8012fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	edc3 7a08 	vstr	s15, [r3, #32]

    value->un.deadReckoningPose.i = read32(&event->report[20]) * SCALE_Q(30);
 8012fac:	683b      	ldr	r3, [r7, #0]
 8012fae:	3326      	adds	r3, #38	@ 0x26
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f000 f930 	bl	8013216 <read32>
 8012fb6:	ee07 0a90 	vmov	s15, r0
 8012fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012fbe:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80130fc <decodeDeadReckoningPose+0x1cc>
 8012fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    value->un.deadReckoningPose.j = read32(&event->report[24]) * SCALE_Q(30);
 8012fcc:	683b      	ldr	r3, [r7, #0]
 8012fce:	332a      	adds	r3, #42	@ 0x2a
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f000 f920 	bl	8013216 <read32>
 8012fd6:	ee07 0a90 	vmov	s15, r0
 8012fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012fde:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80130fc <decodeDeadReckoningPose+0x1cc>
 8012fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    value->un.deadReckoningPose.k = read32(&event->report[28]) * SCALE_Q(30);
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	332e      	adds	r3, #46	@ 0x2e
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f000 f910 	bl	8013216 <read32>
 8012ff6:	ee07 0a90 	vmov	s15, r0
 8012ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ffe:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80130fc <decodeDeadReckoningPose+0x1cc>
 8013002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    value->un.deadReckoningPose.real = read32(&event->report[32]) * SCALE_Q(30);
 801300c:	683b      	ldr	r3, [r7, #0]
 801300e:	3332      	adds	r3, #50	@ 0x32
 8013010:	4618      	mov	r0, r3
 8013012:	f000 f900 	bl	8013216 <read32>
 8013016:	ee07 0a90 	vmov	s15, r0
 801301a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801301e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80130fc <decodeDeadReckoningPose+0x1cc>
 8013022:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    value->un.deadReckoningPose.linVelX = read32(&event->report[36]) * SCALE_Q(25);
 801302c:	683b      	ldr	r3, [r7, #0]
 801302e:	3336      	adds	r3, #54	@ 0x36
 8013030:	4618      	mov	r0, r3
 8013032:	f000 f8f0 	bl	8013216 <read32>
 8013036:	ee07 0a90 	vmov	s15, r0
 801303a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801303e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8013100 <decodeDeadReckoningPose+0x1d0>
 8013042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    value->un.deadReckoningPose.linVelY = read32(&event->report[40]) * SCALE_Q(25);
 801304c:	683b      	ldr	r3, [r7, #0]
 801304e:	333a      	adds	r3, #58	@ 0x3a
 8013050:	4618      	mov	r0, r3
 8013052:	f000 f8e0 	bl	8013216 <read32>
 8013056:	ee07 0a90 	vmov	s15, r0
 801305a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801305e:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8013100 <decodeDeadReckoningPose+0x1d0>
 8013062:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    value->un.deadReckoningPose.linVelZ = read32(&event->report[44]) * SCALE_Q(25);
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	333e      	adds	r3, #62	@ 0x3e
 8013070:	4618      	mov	r0, r3
 8013072:	f000 f8d0 	bl	8013216 <read32>
 8013076:	ee07 0a90 	vmov	s15, r0
 801307a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801307e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8013100 <decodeDeadReckoningPose+0x1d0>
 8013082:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    value->un.deadReckoningPose.angVelX = read32(&event->report[48]) * SCALE_Q(25);
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	3342      	adds	r3, #66	@ 0x42
 8013090:	4618      	mov	r0, r3
 8013092:	f000 f8c0 	bl	8013216 <read32>
 8013096:	ee07 0a90 	vmov	s15, r0
 801309a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801309e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8013100 <decodeDeadReckoningPose+0x1d0>
 80130a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    value->un.deadReckoningPose.angVelY = read32(&event->report[52]) * SCALE_Q(25);
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	3346      	adds	r3, #70	@ 0x46
 80130b0:	4618      	mov	r0, r3
 80130b2:	f000 f8b0 	bl	8013216 <read32>
 80130b6:	ee07 0a90 	vmov	s15, r0
 80130ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130be:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8013100 <decodeDeadReckoningPose+0x1d0>
 80130c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    value->un.deadReckoningPose.angVelZ = read32(&event->report[56]) * SCALE_Q(25);
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	334a      	adds	r3, #74	@ 0x4a
 80130d0:	4618      	mov	r0, r3
 80130d2:	f000 f8a0 	bl	8013216 <read32>
 80130d6:	ee07 0a90 	vmov	s15, r0
 80130da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130de:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8013100 <decodeDeadReckoningPose+0x1d0>
 80130e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    return SH2_OK;
 80130ec:	2300      	movs	r3, #0
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	3708      	adds	r7, #8
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd80      	pop	{r7, pc}
 80130f6:	bf00      	nop
 80130f8:	37000000 	.word	0x37000000
 80130fc:	30800000 	.word	0x30800000
 8013100:	33000000 	.word	0x33000000

08013104 <decodeWheelEncoder>:

static int decodeWheelEncoder(sh2_SensorValue_t *value, const sh2_SensorEvent_t *event){
 8013104:	b580      	push	{r7, lr}
 8013106:	b082      	sub	sp, #8
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
 801310c:	6039      	str	r1, [r7, #0]
    value->un.wheelEncoder.timestamp = read32(&event->report[4]);
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	3316      	adds	r3, #22
 8013112:	4618      	mov	r0, r3
 8013114:	f000 f87f 	bl	8013216 <read32>
 8013118:	4603      	mov	r3, r0
 801311a:	461a      	mov	r2, r3
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	615a      	str	r2, [r3, #20]
    value->un.wheelEncoder.wheelIndex = read8(&event->report[8]);
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	331a      	adds	r3, #26
 8013124:	4618      	mov	r0, r3
 8013126:	f000 f850 	bl	80131ca <read8>
 801312a:	4603      	mov	r3, r0
 801312c:	b2da      	uxtb	r2, r3
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	761a      	strb	r2, [r3, #24]
    value->un.wheelEncoder.dataType = read8(&event->report[9]);
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	331b      	adds	r3, #27
 8013136:	4618      	mov	r0, r3
 8013138:	f000 f847 	bl	80131ca <read8>
 801313c:	4603      	mov	r3, r0
 801313e:	b2da      	uxtb	r2, r3
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	765a      	strb	r2, [r3, #25]
    value->un.wheelEncoder.data = read16(&event->report[10]);
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	331c      	adds	r3, #28
 8013148:	4618      	mov	r0, r3
 801314a:	f000 f84d 	bl	80131e8 <read16>
 801314e:	4603      	mov	r3, r0
 8013150:	b29a      	uxth	r2, r3
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	835a      	strh	r2, [r3, #26]
    return SH2_OK;
 8013156:	2300      	movs	r3, #0
}
 8013158:	4618      	mov	r0, r3
 801315a:	3708      	adds	r7, #8
 801315c:	46bd      	mov	sp, r7
 801315e:	bd80      	pop	{r7, pc}

08013160 <readu16>:
{
    *p = (uint8_t)(value & 0xFF);
}

uint16_t readu16(const uint8_t *p)
{
 8013160:	b480      	push	{r7}
 8013162:	b085      	sub	sp, #20
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
    uint16_t retval = p[0] | (p[1] << 8);
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	781b      	ldrb	r3, [r3, #0]
 801316c:	b21a      	sxth	r2, r3
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	3301      	adds	r3, #1
 8013172:	781b      	ldrb	r3, [r3, #0]
 8013174:	b21b      	sxth	r3, r3
 8013176:	021b      	lsls	r3, r3, #8
 8013178:	b21b      	sxth	r3, r3
 801317a:	4313      	orrs	r3, r2
 801317c:	b21b      	sxth	r3, r3
 801317e:	81fb      	strh	r3, [r7, #14]
    return retval;
 8013180:	89fb      	ldrh	r3, [r7, #14]
}
 8013182:	4618      	mov	r0, r3
 8013184:	3714      	adds	r7, #20
 8013186:	46bd      	mov	sp, r7
 8013188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318c:	4770      	bx	lr

0801318e <readu32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

uint32_t readu32(const uint8_t *p)
{
 801318e:	b480      	push	{r7}
 8013190:	b085      	sub	sp, #20
 8013192:	af00      	add	r7, sp, #0
 8013194:	6078      	str	r0, [r7, #4]
    uint32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	461a      	mov	r2, r3
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	3301      	adds	r3, #1
 80131a0:	781b      	ldrb	r3, [r3, #0]
 80131a2:	021b      	lsls	r3, r3, #8
 80131a4:	431a      	orrs	r2, r3
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	3302      	adds	r3, #2
 80131aa:	781b      	ldrb	r3, [r3, #0]
 80131ac:	041b      	lsls	r3, r3, #16
 80131ae:	431a      	orrs	r2, r3
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	3303      	adds	r3, #3
 80131b4:	781b      	ldrb	r3, [r3, #0]
 80131b6:	061b      	lsls	r3, r3, #24
 80131b8:	4313      	orrs	r3, r2
 80131ba:	60fb      	str	r3, [r7, #12]
    return retval;
 80131bc:	68fb      	ldr	r3, [r7, #12]
}
 80131be:	4618      	mov	r0, r3
 80131c0:	3714      	adds	r7, #20
 80131c2:	46bd      	mov	sp, r7
 80131c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c8:	4770      	bx	lr

080131ca <read8>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int8_t read8(const uint8_t *p)
{
 80131ca:	b480      	push	{r7}
 80131cc:	b085      	sub	sp, #20
 80131ce:	af00      	add	r7, sp, #0
 80131d0:	6078      	str	r0, [r7, #4]
    int8_t retval = p[0];
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	781b      	ldrb	r3, [r3, #0]
 80131d6:	73fb      	strb	r3, [r7, #15]
    return retval;
 80131d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80131dc:	4618      	mov	r0, r3
 80131de:	3714      	adds	r7, #20
 80131e0:	46bd      	mov	sp, r7
 80131e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e6:	4770      	bx	lr

080131e8 <read16>:
{
    *p = (uint8_t)(value & 0xFF);
}

int16_t read16(const uint8_t *p)
{
 80131e8:	b480      	push	{r7}
 80131ea:	b085      	sub	sp, #20
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
    int16_t retval = p[0] | (p[1] << 8);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	781b      	ldrb	r3, [r3, #0]
 80131f4:	b21a      	sxth	r2, r3
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	3301      	adds	r3, #1
 80131fa:	781b      	ldrb	r3, [r3, #0]
 80131fc:	b21b      	sxth	r3, r3
 80131fe:	021b      	lsls	r3, r3, #8
 8013200:	b21b      	sxth	r3, r3
 8013202:	4313      	orrs	r3, r2
 8013204:	81fb      	strh	r3, [r7, #14]
    return retval;
 8013206:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801320a:	4618      	mov	r0, r3
 801320c:	3714      	adds	r7, #20
 801320e:	46bd      	mov	sp, r7
 8013210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013214:	4770      	bx	lr

08013216 <read32>:
    value >>= 8;
    *p = (uint8_t)(value & 0xFF);
}

int32_t read32(const uint8_t *p)
{
 8013216:	b480      	push	{r7}
 8013218:	b085      	sub	sp, #20
 801321a:	af00      	add	r7, sp, #0
 801321c:	6078      	str	r0, [r7, #4]
    int32_t retval = p[0] | (p[1] << 8) | (p[2] << 16) | (p[3] << 24);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	781b      	ldrb	r3, [r3, #0]
 8013222:	461a      	mov	r2, r3
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	3301      	adds	r3, #1
 8013228:	781b      	ldrb	r3, [r3, #0]
 801322a:	021b      	lsls	r3, r3, #8
 801322c:	431a      	orrs	r2, r3
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	3302      	adds	r3, #2
 8013232:	781b      	ldrb	r3, [r3, #0]
 8013234:	041b      	lsls	r3, r3, #16
 8013236:	431a      	orrs	r2, r3
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	3303      	adds	r3, #3
 801323c:	781b      	ldrb	r3, [r3, #0]
 801323e:	061b      	lsls	r3, r3, #24
 8013240:	4313      	orrs	r3, r2
 8013242:	60fb      	str	r3, [r7, #12]
    return retval;
 8013244:	68fb      	ldr	r3, [r7, #12]
}
 8013246:	4618      	mov	r0, r3
 8013248:	3714      	adds	r7, #20
 801324a:	46bd      	mov	sp, r7
 801324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013250:	4770      	bx	lr
	...

08013254 <shtp_init>:

// ------------------------------------------------------------------------
// Private functions

static void shtp_init(void)
{
 8013254:	b480      	push	{r7}
 8013256:	b083      	sub	sp, #12
 8013258:	af00      	add	r7, sp, #0
    // Clear pHal pointer in every instance.  This marks them as unallocated.
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 801325a:	2300      	movs	r3, #0
 801325c:	607b      	str	r3, [r7, #4]
 801325e:	e00b      	b.n	8013278 <shtp_init+0x24>
        instances[n].pHal = 0;
 8013260:	4a0b      	ldr	r2, [pc, #44]	@ (8013290 <shtp_init+0x3c>)
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	f640 1114 	movw	r1, #2324	@ 0x914
 8013268:	fb01 f303 	mul.w	r3, r1, r3
 801326c:	4413      	add	r3, r2
 801326e:	2200      	movs	r2, #0
 8013270:	601a      	str	r2, [r3, #0]
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	3301      	adds	r3, #1
 8013276:	607b      	str	r3, [r7, #4]
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	2b00      	cmp	r3, #0
 801327c:	ddf0      	ble.n	8013260 <shtp_init+0xc>
    }

    // Set the initialized flag so this doesn't happen again.
    shtp_initialized = true;
 801327e:	4b05      	ldr	r3, [pc, #20]	@ (8013294 <shtp_init+0x40>)
 8013280:	2201      	movs	r2, #1
 8013282:	701a      	strb	r2, [r3, #0]
}
 8013284:	bf00      	nop
 8013286:	370c      	adds	r7, #12
 8013288:	46bd      	mov	sp, r7
 801328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328e:	4770      	bx	lr
 8013290:	2000cae0 	.word	0x2000cae0
 8013294:	2000d3f4 	.word	0x2000d3f4

08013298 <getInstance>:

static shtp_t *getInstance(void)
{
 8013298:	b480      	push	{r7}
 801329a:	b083      	sub	sp, #12
 801329c:	af00      	add	r7, sp, #0
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 801329e:	2300      	movs	r3, #0
 80132a0:	607b      	str	r3, [r7, #4]
 80132a2:	e014      	b.n	80132ce <getInstance+0x36>
        if (instances[n].pHal == 0) {
 80132a4:	4a0f      	ldr	r2, [pc, #60]	@ (80132e4 <getInstance+0x4c>)
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	f640 1114 	movw	r1, #2324	@ 0x914
 80132ac:	fb01 f303 	mul.w	r3, r1, r3
 80132b0:	4413      	add	r3, r2
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d107      	bne.n	80132c8 <getInstance+0x30>
            // This instance is free
            return &instances[n];
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f640 1214 	movw	r2, #2324	@ 0x914
 80132be:	fb02 f303 	mul.w	r3, r2, r3
 80132c2:	4a08      	ldr	r2, [pc, #32]	@ (80132e4 <getInstance+0x4c>)
 80132c4:	4413      	add	r3, r2
 80132c6:	e006      	b.n	80132d6 <getInstance+0x3e>
    for (int n = 0; n < SHTP_INSTANCES; n++) {
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	3301      	adds	r3, #1
 80132cc:	607b      	str	r3, [r7, #4]
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	dde7      	ble.n	80132a4 <getInstance+0xc>
        }
    }

    // Can't give an instance, none are free
    return 0;
 80132d4:	2300      	movs	r3, #0
}
 80132d6:	4618      	mov	r0, r3
 80132d8:	370c      	adds	r7, #12
 80132da:	46bd      	mov	sp, r7
 80132dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e0:	4770      	bx	lr
 80132e2:	bf00      	nop
 80132e4:	2000cae0 	.word	0x2000cae0

080132e8 <min_u16>:


static inline uint16_t min_u16(uint16_t a, uint16_t b)
{
 80132e8:	b480      	push	{r7}
 80132ea:	b083      	sub	sp, #12
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	4603      	mov	r3, r0
 80132f0:	460a      	mov	r2, r1
 80132f2:	80fb      	strh	r3, [r7, #6]
 80132f4:	4613      	mov	r3, r2
 80132f6:	80bb      	strh	r3, [r7, #4]
    if (a < b) {
 80132f8:	88fa      	ldrh	r2, [r7, #6]
 80132fa:	88bb      	ldrh	r3, [r7, #4]
 80132fc:	429a      	cmp	r2, r3
 80132fe:	d201      	bcs.n	8013304 <min_u16+0x1c>
        return a;
 8013300:	88fb      	ldrh	r3, [r7, #6]
 8013302:	e000      	b.n	8013306 <min_u16+0x1e>
    }
    else {
        return b;
 8013304:	88bb      	ldrh	r3, [r7, #4]
    }
}
 8013306:	4618      	mov	r0, r3
 8013308:	370c      	adds	r7, #12
 801330a:	46bd      	mov	sp, r7
 801330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013310:	4770      	bx	lr

08013312 <txProcess>:

// Send a cargo as a sequence of transports
static int txProcess(shtp_t *pShtp, uint8_t chan, const uint8_t* pData, uint32_t len)
{
 8013312:	b590      	push	{r4, r7, lr}
 8013314:	b089      	sub	sp, #36	@ 0x24
 8013316:	af00      	add	r7, sp, #0
 8013318:	60f8      	str	r0, [r7, #12]
 801331a:	607a      	str	r2, [r7, #4]
 801331c:	603b      	str	r3, [r7, #0]
 801331e:	460b      	mov	r3, r1
 8013320:	72fb      	strb	r3, [r7, #11]
    int status = SH2_OK;
 8013322:	2300      	movs	r3, #0
 8013324:	61fb      	str	r3, [r7, #28]
    
    bool continuation = false;
 8013326:	2300      	movs	r3, #0
 8013328:	76fb      	strb	r3, [r7, #27]
    uint16_t cursor = 0;
 801332a:	2300      	movs	r3, #0
 801332c:	833b      	strh	r3, [r7, #24]
    uint16_t remaining;
    uint16_t transferLen;  // length of transfer, minus the header
    uint16_t lenField;

    cursor = 0;
 801332e:	2300      	movs	r3, #0
 8013330:	833b      	strh	r3, [r7, #24]
    remaining = len;
 8013332:	683b      	ldr	r3, [r7, #0]
 8013334:	82fb      	strh	r3, [r7, #22]
    while (remaining > 0) {
 8013336:	e079      	b.n	801342c <txProcess+0x11a>
        // How much data (not header) can we send in next transfer
        transferLen = min_u16(remaining, SH2_HAL_MAX_TRANSFER_OUT-SHTP_HDR_LEN);
 8013338:	8afb      	ldrh	r3, [r7, #22]
 801333a:	217c      	movs	r1, #124	@ 0x7c
 801333c:	4618      	mov	r0, r3
 801333e:	f7ff ffd3 	bl	80132e8 <min_u16>
 8013342:	4603      	mov	r3, r0
 8013344:	82bb      	strh	r3, [r7, #20]
        
        // Length field will be transferLen + SHTP_HDR_LEN
        lenField = transferLen + SHTP_HDR_LEN;
 8013346:	8abb      	ldrh	r3, [r7, #20]
 8013348:	3304      	adds	r3, #4
 801334a:	827b      	strh	r3, [r7, #18]

        // Put the header in the out buffer
        pShtp->outTransfer[0] = lenField & 0xFF;
 801334c:	8a7b      	ldrh	r3, [r7, #18]
 801334e:	b2da      	uxtb	r2, r3
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	731a      	strb	r2, [r3, #12]
        pShtp->outTransfer[1] = (lenField >> 8) & 0x7F;
 8013354:	8a7b      	ldrh	r3, [r7, #18]
 8013356:	0a1b      	lsrs	r3, r3, #8
 8013358:	b29b      	uxth	r3, r3
 801335a:	b2db      	uxtb	r3, r3
 801335c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013360:	b2da      	uxtb	r2, r3
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	735a      	strb	r2, [r3, #13]
        if (continuation) {
 8013366:	7efb      	ldrb	r3, [r7, #27]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d006      	beq.n	801337a <txProcess+0x68>
            pShtp->outTransfer[1] |= 0x80;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	7b5b      	ldrb	r3, [r3, #13]
 8013370:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013374:	b2da      	uxtb	r2, r3
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	735a      	strb	r2, [r3, #13]
        }
        pShtp->outTransfer[2] = chan;
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	7afa      	ldrb	r2, [r7, #11]
 801337e:	739a      	strb	r2, [r3, #14]
        pShtp->outTransfer[3] = pShtp->chan[chan].nextOutSeq++;
 8013380:	7afa      	ldrb	r2, [r7, #11]
 8013382:	68f9      	ldr	r1, [r7, #12]
 8013384:	4613      	mov	r3, r2
 8013386:	005b      	lsls	r3, r3, #1
 8013388:	4413      	add	r3, r2
 801338a:	009b      	lsls	r3, r3, #2
 801338c:	440b      	add	r3, r1
 801338e:	f603 0398 	addw	r3, r3, #2200	@ 0x898
 8013392:	7819      	ldrb	r1, [r3, #0]
 8013394:	1c4b      	adds	r3, r1, #1
 8013396:	b2dc      	uxtb	r4, r3
 8013398:	68f8      	ldr	r0, [r7, #12]
 801339a:	4613      	mov	r3, r2
 801339c:	005b      	lsls	r3, r3, #1
 801339e:	4413      	add	r3, r2
 80133a0:	009b      	lsls	r3, r3, #2
 80133a2:	4403      	add	r3, r0
 80133a4:	f603 0398 	addw	r3, r3, #2200	@ 0x898
 80133a8:	4622      	mov	r2, r4
 80133aa:	701a      	strb	r2, [r3, #0]
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	460a      	mov	r2, r1
 80133b0:	73da      	strb	r2, [r3, #15]

        // Stage one tranfer in the out buffer
        memcpy(pShtp->outTransfer+SHTP_HDR_LEN, pData+cursor, transferLen);
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	330c      	adds	r3, #12
 80133b6:	1d18      	adds	r0, r3, #4
 80133b8:	8b3b      	ldrh	r3, [r7, #24]
 80133ba:	687a      	ldr	r2, [r7, #4]
 80133bc:	4413      	add	r3, r2
 80133be:	8aba      	ldrh	r2, [r7, #20]
 80133c0:	4619      	mov	r1, r3
 80133c2:	f001 fcae 	bl	8014d22 <memcpy>
        remaining -= transferLen;
 80133c6:	8afa      	ldrh	r2, [r7, #22]
 80133c8:	8abb      	ldrh	r3, [r7, #20]
 80133ca:	1ad3      	subs	r3, r2, r3
 80133cc:	82fb      	strh	r3, [r7, #22]
        cursor += transferLen;
 80133ce:	8b3a      	ldrh	r2, [r7, #24]
 80133d0:	8abb      	ldrh	r3, [r7, #20]
 80133d2:	4413      	add	r3, r2
 80133d4:	833b      	strh	r3, [r7, #24]

        // Transmit (try repeatedly while HAL write returns 0)
        status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	68db      	ldr	r3, [r3, #12]
 80133dc:	68fa      	ldr	r2, [r7, #12]
 80133de:	6810      	ldr	r0, [r2, #0]
 80133e0:	68fa      	ldr	r2, [r7, #12]
 80133e2:	f102 010c 	add.w	r1, r2, #12
 80133e6:	8a7a      	ldrh	r2, [r7, #18]
 80133e8:	4798      	blx	r3
 80133ea:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 80133ec:	e00d      	b.n	801340a <txProcess+0xf8>
        {
            shtp_service(pShtp);
 80133ee:	68f8      	ldr	r0, [r7, #12]
 80133f0:	f000 fa2b 	bl	801384a <shtp_service>
            status = pShtp->pHal->write(pShtp->pHal, pShtp->outTransfer, lenField);
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	68db      	ldr	r3, [r3, #12]
 80133fa:	68fa      	ldr	r2, [r7, #12]
 80133fc:	6810      	ldr	r0, [r2, #0]
 80133fe:	68fa      	ldr	r2, [r7, #12]
 8013400:	f102 010c 	add.w	r1, r2, #12
 8013404:	8a7a      	ldrh	r2, [r7, #18]
 8013406:	4798      	blx	r3
 8013408:	61f8      	str	r0, [r7, #28]
        while (status == 0)
 801340a:	69fb      	ldr	r3, [r7, #28]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d0ee      	beq.n	80133ee <txProcess+0xdc>
        }
        
        if (status < 0)
 8013410:	69fb      	ldr	r3, [r7, #28]
 8013412:	2b00      	cmp	r3, #0
 8013414:	da08      	bge.n	8013428 <txProcess+0x116>
        {
            // Error, throw away this cargo
            pShtp->txDiscards++;
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 801341c:	1c5a      	adds	r2, r3, #1
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
            return status;
 8013424:	69fb      	ldr	r3, [r7, #28]
 8013426:	e005      	b.n	8013434 <txProcess+0x122>
        }

        // For the rest of this transmission, packets are continuations.
        continuation = true;
 8013428:	2301      	movs	r3, #1
 801342a:	76fb      	strb	r3, [r7, #27]
    while (remaining > 0) {
 801342c:	8afb      	ldrh	r3, [r7, #22]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d182      	bne.n	8013338 <txProcess+0x26>
    }

    return SH2_OK;
 8013432:	2300      	movs	r3, #0
}
 8013434:	4618      	mov	r0, r3
 8013436:	3724      	adds	r7, #36	@ 0x24
 8013438:	46bd      	mov	sp, r7
 801343a:	bd90      	pop	{r4, r7, pc}

0801343c <rxAssemble>:

static void rxAssemble(shtp_t *pShtp, uint8_t *in, uint16_t len, uint32_t t_us)
{
 801343c:	b590      	push	{r4, r7, lr}
 801343e:	b087      	sub	sp, #28
 8013440:	af00      	add	r7, sp, #0
 8013442:	60f8      	str	r0, [r7, #12]
 8013444:	60b9      	str	r1, [r7, #8]
 8013446:	603b      	str	r3, [r7, #0]
 8013448:	4613      	mov	r3, r2
 801344a:	80fb      	strh	r3, [r7, #6]
    uint16_t payloadLen;
    bool continuation;
    uint8_t chan = 0;
 801344c:	2300      	movs	r3, #0
 801344e:	75fb      	strb	r3, [r7, #23]
    uint8_t seq = 0;
 8013450:	2300      	movs	r3, #0
 8013452:	75bb      	strb	r3, [r7, #22]

    // discard invalid short fragments
    if (len < SHTP_HDR_LEN) {
 8013454:	88fb      	ldrh	r3, [r7, #6]
 8013456:	2b03      	cmp	r3, #3
 8013458:	d813      	bhi.n	8013482 <rxAssemble+0x46>
        pShtp->rxShortFragments++;
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8013460:	1c5a      	adds	r2, r3, #1
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
        if (pShtp->eventCallback) {
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	685b      	ldr	r3, [r3, #4]
 801346c:	2b00      	cmp	r3, #0
 801346e:	f000 8139 	beq.w	80136e4 <rxAssemble+0x2a8>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	685b      	ldr	r3, [r3, #4]
 8013476:	68fa      	ldr	r2, [r7, #12]
 8013478:	6892      	ldr	r2, [r2, #8]
 801347a:	2101      	movs	r1, #1
 801347c:	4610      	mov	r0, r2
 801347e:	4798      	blx	r3
        }
        return;
 8013480:	e130      	b.n	80136e4 <rxAssemble+0x2a8>
    }
    
    // Interpret header fields
    payloadLen = (in[0] + (in[1] << 8)) & (~0x8000);
 8013482:	68bb      	ldr	r3, [r7, #8]
 8013484:	781b      	ldrb	r3, [r3, #0]
 8013486:	461a      	mov	r2, r3
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	3301      	adds	r3, #1
 801348c:	781b      	ldrb	r3, [r3, #0]
 801348e:	021b      	lsls	r3, r3, #8
 8013490:	b29b      	uxth	r3, r3
 8013492:	4413      	add	r3, r2
 8013494:	b29b      	uxth	r3, r3
 8013496:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801349a:	82bb      	strh	r3, [r7, #20]
    continuation = ((in[1] & 0x80) != 0);
 801349c:	68bb      	ldr	r3, [r7, #8]
 801349e:	3301      	adds	r3, #1
 80134a0:	781b      	ldrb	r3, [r3, #0]
 80134a2:	b25b      	sxtb	r3, r3
 80134a4:	b2db      	uxtb	r3, r3
 80134a6:	09db      	lsrs	r3, r3, #7
 80134a8:	74fb      	strb	r3, [r7, #19]
    chan = in[2];
 80134aa:	68bb      	ldr	r3, [r7, #8]
 80134ac:	789b      	ldrb	r3, [r3, #2]
 80134ae:	75fb      	strb	r3, [r7, #23]
    seq = in[3];
 80134b0:	68bb      	ldr	r3, [r7, #8]
 80134b2:	78db      	ldrb	r3, [r3, #3]
 80134b4:	75bb      	strb	r3, [r7, #22]

    if (seq != pShtp->chan[chan].nextInSeq){
 80134b6:	7dfa      	ldrb	r2, [r7, #23]
 80134b8:	68f9      	ldr	r1, [r7, #12]
 80134ba:	4613      	mov	r3, r2
 80134bc:	005b      	lsls	r3, r3, #1
 80134be:	4413      	add	r3, r2
 80134c0:	009b      	lsls	r3, r3, #2
 80134c2:	440b      	add	r3, r1
 80134c4:	f603 0399 	addw	r3, r3, #2201	@ 0x899
 80134c8:	781b      	ldrb	r3, [r3, #0]
 80134ca:	7dba      	ldrb	r2, [r7, #22]
 80134cc:	429a      	cmp	r2, r3
 80134ce:	d00a      	beq.n	80134e6 <rxAssemble+0xaa>
        if (pShtp->eventCallback) {
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	685b      	ldr	r3, [r3, #4]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d006      	beq.n	80134e6 <rxAssemble+0xaa>
            pShtp->eventCallback(pShtp->eventCookie,
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	685b      	ldr	r3, [r3, #4]
 80134dc:	68fa      	ldr	r2, [r7, #12]
 80134de:	6892      	ldr	r2, [r2, #8]
 80134e0:	2106      	movs	r1, #6
 80134e2:	4610      	mov	r0, r2
 80134e4:	4798      	blx	r3
                                 SHTP_BAD_SN);
        }
    }
    
    if (payloadLen < SHTP_HDR_LEN) {
 80134e6:	8abb      	ldrh	r3, [r7, #20]
 80134e8:	2b03      	cmp	r3, #3
 80134ea:	d813      	bhi.n	8013514 <rxAssemble+0xd8>
        pShtp->rxShortFragments++;
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 80134f2:	1c5a      	adds	r2, r3, #1
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
        if (pShtp->eventCallback) {
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	685b      	ldr	r3, [r3, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	f000 80f2 	beq.w	80136e8 <rxAssemble+0x2ac>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_SHORT_FRAGMENT);
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	685b      	ldr	r3, [r3, #4]
 8013508:	68fa      	ldr	r2, [r7, #12]
 801350a:	6892      	ldr	r2, [r2, #8]
 801350c:	2101      	movs	r1, #1
 801350e:	4610      	mov	r0, r2
 8013510:	4798      	blx	r3
        }
        return;
 8013512:	e0e9      	b.n	80136e8 <rxAssemble+0x2ac>
    }
        
    if (chan >= SHTP_MAX_CHANS) {
 8013514:	7dfb      	ldrb	r3, [r7, #23]
 8013516:	2b07      	cmp	r3, #7
 8013518:	d913      	bls.n	8013542 <rxAssemble+0x106>
        // Invalid channel id.
        pShtp->rxBadChan++;
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8013520:	1c5a      	adds	r2, r3, #1
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8

        if (pShtp->eventCallback) {
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	685b      	ldr	r3, [r3, #4]
 801352c:	2b00      	cmp	r3, #0
 801352e:	f000 80dd 	beq.w	80136ec <rxAssemble+0x2b0>
            pShtp->eventCallback(pShtp->eventCookie, SHTP_BAD_RX_CHAN);
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	685b      	ldr	r3, [r3, #4]
 8013536:	68fa      	ldr	r2, [r7, #12]
 8013538:	6892      	ldr	r2, [r2, #8]
 801353a:	2103      	movs	r1, #3
 801353c:	4610      	mov	r0, r2
 801353e:	4798      	blx	r3
        }
        return;
 8013540:	e0d4      	b.n	80136ec <rxAssemble+0x2b0>
    }

    // Discard earlier assembly in progress if the received data doesn't match it.
    if (pShtp->inRemaining) {
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8013548:	2b00      	cmp	r3, #0
 801354a:	d040      	beq.n	80135ce <rxAssemble+0x192>
        // Check this against previously received data.
        if (!continuation ||
 801354c:	7cfb      	ldrb	r3, [r7, #19]
 801354e:	f083 0301 	eor.w	r3, r3, #1
 8013552:	b2db      	uxtb	r3, r3
 8013554:	2b00      	cmp	r3, #0
 8013556:	d119      	bne.n	801358c <rxAssemble+0x150>
            (chan != pShtp->inChan) ||
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
        if (!continuation ||
 801355e:	7dfa      	ldrb	r2, [r7, #23]
 8013560:	429a      	cmp	r2, r3
 8013562:	d113      	bne.n	801358c <rxAssemble+0x150>
            (seq != pShtp->chan[chan].nextInSeq) ||
 8013564:	7dfa      	ldrb	r2, [r7, #23]
 8013566:	68f9      	ldr	r1, [r7, #12]
 8013568:	4613      	mov	r3, r2
 801356a:	005b      	lsls	r3, r3, #1
 801356c:	4413      	add	r3, r2
 801356e:	009b      	lsls	r3, r3, #2
 8013570:	440b      	add	r3, r1
 8013572:	f603 0399 	addw	r3, r3, #2201	@ 0x899
 8013576:	781b      	ldrb	r3, [r3, #0]
            (chan != pShtp->inChan) ||
 8013578:	7dba      	ldrb	r2, [r7, #22]
 801357a:	429a      	cmp	r2, r3
 801357c:	d106      	bne.n	801358c <rxAssemble+0x150>
            (payloadLen-SHTP_HDR_LEN != pShtp->inRemaining)) {
 801357e:	8abb      	ldrh	r3, [r7, #20]
 8013580:	3b04      	subs	r3, #4
 8013582:	68fa      	ldr	r2, [r7, #12]
 8013584:	f8b2 208c 	ldrh.w	r2, [r2, #140]	@ 0x8c
            (seq != pShtp->chan[chan].nextInSeq) ||
 8013588:	4293      	cmp	r3, r2
 801358a:	d020      	beq.n	80135ce <rxAssemble+0x192>
            
            if (pShtp->eventCallback) {
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	685b      	ldr	r3, [r3, #4]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d006      	beq.n	80135a2 <rxAssemble+0x166>
                pShtp->eventCallback(pShtp->eventCookie,
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	685b      	ldr	r3, [r3, #4]
 8013598:	68fa      	ldr	r2, [r7, #12]
 801359a:	6892      	ldr	r2, [r2, #8]
 801359c:	2105      	movs	r1, #5
 801359e:	4610      	mov	r0, r2
 80135a0:	4798      	blx	r3
                                     SHTP_BAD_FRAGMENT);
            }
            
            // This fragment doesn't fit with previous one, discard earlier data
            pShtp->inRemaining = 0;
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	2200      	movs	r2, #0
 80135a6:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

            pShtp->rxInterruptedPayloads++;
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 80135b0:	1c5a      	adds	r2, r3, #1
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            if (pShtp->eventCallback) {
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	685b      	ldr	r3, [r3, #4]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d006      	beq.n	80135ce <rxAssemble+0x192>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_INTERRUPTED_PAYLOAD);
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	685b      	ldr	r3, [r3, #4]
 80135c4:	68fa      	ldr	r2, [r7, #12]
 80135c6:	6892      	ldr	r2, [r2, #8]
 80135c8:	2107      	movs	r1, #7
 80135ca:	4610      	mov	r0, r2
 80135cc:	4798      	blx	r3
            }
        }
    }
    
    // Remember next sequence number we expect for this channel.
    pShtp->chan[chan].nextInSeq = seq + 1;
 80135ce:	7dfa      	ldrb	r2, [r7, #23]
 80135d0:	7dbb      	ldrb	r3, [r7, #22]
 80135d2:	3301      	adds	r3, #1
 80135d4:	b2d8      	uxtb	r0, r3
 80135d6:	68f9      	ldr	r1, [r7, #12]
 80135d8:	4613      	mov	r3, r2
 80135da:	005b      	lsls	r3, r3, #1
 80135dc:	4413      	add	r3, r2
 80135de:	009b      	lsls	r3, r3, #2
 80135e0:	440b      	add	r3, r1
 80135e2:	f603 0399 	addw	r3, r3, #2201	@ 0x899
 80135e6:	4602      	mov	r2, r0
 80135e8:	701a      	strb	r2, [r3, #0]

    if (pShtp->inRemaining == 0) {
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d122      	bne.n	801363a <rxAssemble+0x1fe>
        if (payloadLen > sizeof(pShtp->inPayload)) {
 80135f4:	8abb      	ldrh	r3, [r7, #20]
 80135f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80135fa:	d912      	bls.n	8013622 <rxAssemble+0x1e6>
            // Error: This payload won't fit! Discard it.
            pShtp->rxTooLargePayloads++;
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8013602:	1c5a      	adds	r2, r3, #1
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
            
            if (pShtp->eventCallback) {
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	685b      	ldr	r3, [r3, #4]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d06e      	beq.n	80136f0 <rxAssemble+0x2b4>
                pShtp->eventCallback(pShtp->eventCookie, SHTP_TOO_LARGE_PAYLOADS);
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	685b      	ldr	r3, [r3, #4]
 8013616:	68fa      	ldr	r2, [r7, #12]
 8013618:	6892      	ldr	r2, [r2, #8]
 801361a:	2102      	movs	r1, #2
 801361c:	4610      	mov	r0, r2
 801361e:	4798      	blx	r3
            }

            return;
 8013620:	e066      	b.n	80136f0 <rxAssemble+0x2b4>
        }

        // This represents a new payload

        // Store timestamp
        pShtp->inTimestamp = t_us;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	683a      	ldr	r2, [r7, #0]
 8013626:	f8c3 2494 	str.w	r2, [r3, #1172]	@ 0x494

        // Start a new assembly.
        pShtp->inCursor = 0;
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	2200      	movs	r2, #0
 801362e:	f8a3 2490 	strh.w	r2, [r3, #1168]	@ 0x490
        pShtp->inChan = chan;
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	7dfa      	ldrb	r2, [r7, #23]
 8013636:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
    }

    // Append the new fragment to the payload under construction.
    if (len > payloadLen) {
 801363a:	88fa      	ldrh	r2, [r7, #6]
 801363c:	8abb      	ldrh	r3, [r7, #20]
 801363e:	429a      	cmp	r2, r3
 8013640:	d901      	bls.n	8013646 <rxAssemble+0x20a>
        // Only use the valid portion of the transfer
        len = payloadLen;
 8013642:	8abb      	ldrh	r3, [r7, #20]
 8013644:	80fb      	strh	r3, [r7, #6]
    }
    memcpy(pShtp->inPayload + pShtp->inCursor, in+SHTP_HDR_LEN, len-SHTP_HDR_LEN);
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	338f      	adds	r3, #143	@ 0x8f
 801364a:	68fa      	ldr	r2, [r7, #12]
 801364c:	f8b2 2490 	ldrh.w	r2, [r2, #1168]	@ 0x490
 8013650:	1898      	adds	r0, r3, r2
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	1d19      	adds	r1, r3, #4
 8013656:	88fb      	ldrh	r3, [r7, #6]
 8013658:	3b04      	subs	r3, #4
 801365a:	461a      	mov	r2, r3
 801365c:	f001 fb61 	bl	8014d22 <memcpy>
    pShtp->inCursor += len-SHTP_HDR_LEN;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	@ 0x490
 8013666:	88fb      	ldrh	r3, [r7, #6]
 8013668:	4413      	add	r3, r2
 801366a:	b29b      	uxth	r3, r3
 801366c:	3b04      	subs	r3, #4
 801366e:	b29a      	uxth	r2, r3
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	f8a3 2490 	strh.w	r2, [r3, #1168]	@ 0x490
    pShtp->inRemaining = payloadLen - len;
 8013676:	8aba      	ldrh	r2, [r7, #20]
 8013678:	88fb      	ldrh	r3, [r7, #6]
 801367a:	1ad3      	subs	r3, r2, r3
 801367c:	b29a      	uxth	r2, r3
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c

    // If whole payload received, deliver it to channel listener.
    if (pShtp->inRemaining == 0) {
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 801368a:	2b00      	cmp	r3, #0
 801368c:	d131      	bne.n	80136f2 <rxAssemble+0x2b6>

        // Call callback if there is one.
        if (pShtp->chan[chan].callback != 0) {
 801368e:	7dfa      	ldrb	r2, [r7, #23]
 8013690:	68f9      	ldr	r1, [r7, #12]
 8013692:	4613      	mov	r3, r2
 8013694:	005b      	lsls	r3, r3, #1
 8013696:	4413      	add	r3, r2
 8013698:	009b      	lsls	r3, r3, #2
 801369a:	440b      	add	r3, r1
 801369c:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d025      	beq.n	80136f2 <rxAssemble+0x2b6>
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 80136a6:	7dfa      	ldrb	r2, [r7, #23]
 80136a8:	68f9      	ldr	r1, [r7, #12]
 80136aa:	4613      	mov	r3, r2
 80136ac:	005b      	lsls	r3, r3, #1
 80136ae:	4413      	add	r3, r2
 80136b0:	009b      	lsls	r3, r3, #2
 80136b2:	440b      	add	r3, r1
 80136b4:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 80136b8:	681c      	ldr	r4, [r3, #0]
 80136ba:	7dfa      	ldrb	r2, [r7, #23]
 80136bc:	68f9      	ldr	r1, [r7, #12]
 80136be:	4613      	mov	r3, r2
 80136c0:	005b      	lsls	r3, r3, #1
 80136c2:	4413      	add	r3, r2
 80136c4:	009b      	lsls	r3, r3, #2
 80136c6:	440b      	add	r3, r1
 80136c8:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 80136cc:	6818      	ldr	r0, [r3, #0]
                                       pShtp->inPayload, pShtp->inCursor,
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	f103 018f 	add.w	r1, r3, #143	@ 0x8f
            pShtp->chan[chan].callback(pShtp->chan[chan].cookie,
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	f8b3 2490 	ldrh.w	r2, [r3, #1168]	@ 0x490
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 80136e0:	47a0      	blx	r4
 80136e2:	e006      	b.n	80136f2 <rxAssemble+0x2b6>
        return;
 80136e4:	bf00      	nop
 80136e6:	e004      	b.n	80136f2 <rxAssemble+0x2b6>
        return;
 80136e8:	bf00      	nop
 80136ea:	e002      	b.n	80136f2 <rxAssemble+0x2b6>
        return;
 80136ec:	bf00      	nop
 80136ee:	e000      	b.n	80136f2 <rxAssemble+0x2b6>
            return;
 80136f0:	bf00      	nop
                                       pShtp->inTimestamp);
        }
    }
}
 80136f2:	371c      	adds	r7, #28
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bd90      	pop	{r4, r7, pc}

080136f8 <shtp_open>:
// Public functions

// Takes HAL pointer, returns shtp ID for use in future calls.
// HAL will be opened by this call.
void *shtp_open(sh2_Hal_t *pHal)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b084      	sub	sp, #16
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
    if (!shtp_initialized) {
 8013700:	4b16      	ldr	r3, [pc, #88]	@ (801375c <shtp_open+0x64>)
 8013702:	781b      	ldrb	r3, [r3, #0]
 8013704:	f083 0301 	eor.w	r3, r3, #1
 8013708:	b2db      	uxtb	r3, r3
 801370a:	2b00      	cmp	r3, #0
 801370c:	d001      	beq.n	8013712 <shtp_open+0x1a>
        // Perform one-time module initialization
        shtp_init();
 801370e:	f7ff fda1 	bl	8013254 <shtp_init>
    }
    
    // Validate params
    if (pHal == 0) {
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d101      	bne.n	801371c <shtp_open+0x24>
        // Error
        return 0;
 8013718:	2300      	movs	r3, #0
 801371a:	e01b      	b.n	8013754 <shtp_open+0x5c>
    }

    // Find an available instance for this open
    shtp_t *pShtp = getInstance();
 801371c:	f7ff fdbc 	bl	8013298 <getInstance>
 8013720:	60f8      	str	r0, [r7, #12]
    if (pShtp == 0) {
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d101      	bne.n	801372c <shtp_open+0x34>
        // No instances available, return error
        return 0;
 8013728:	2300      	movs	r3, #0
 801372a:	e013      	b.n	8013754 <shtp_open+0x5c>
    }

    // Clear the SHTP instance as a shortcut to initializing all fields
    memset(pShtp, 0, sizeof(shtp_t));
 801372c:	f640 1214 	movw	r2, #2324	@ 0x914
 8013730:	2100      	movs	r1, #0
 8013732:	68f8      	ldr	r0, [r7, #12]
 8013734:	f001 fa08 	bl	8014b48 <memset>
    
    // Open HAL
    int status = pHal->open(pHal);
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	6878      	ldr	r0, [r7, #4]
 801373e:	4798      	blx	r3
 8013740:	60b8      	str	r0, [r7, #8]
    if (status != SH2_OK) {
 8013742:	68bb      	ldr	r3, [r7, #8]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d001      	beq.n	801374c <shtp_open+0x54>
        return 0;
 8013748:	2300      	movs	r3, #0
 801374a:	e003      	b.n	8013754 <shtp_open+0x5c>
    }

    // Store reference to the HAL
    pShtp->pHal = pHal;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	687a      	ldr	r2, [r7, #4]
 8013750:	601a      	str	r2, [r3, #0]

    return pShtp;
 8013752:	68fb      	ldr	r3, [r7, #12]
}
 8013754:	4618      	mov	r0, r3
 8013756:	3710      	adds	r7, #16
 8013758:	46bd      	mov	sp, r7
 801375a:	bd80      	pop	{r7, pc}
 801375c:	2000d3f4 	.word	0x2000d3f4

08013760 <shtp_setEventCallback>:
}

// Register the pointer of the callback function for reporting asynchronous events
void shtp_setEventCallback(void *pInstance, 
                           shtp_EventCallback_t * eventCallback, 
                           void *eventCookie) {
 8013760:	b480      	push	{r7}
 8013762:	b087      	sub	sp, #28
 8013764:	af00      	add	r7, sp, #0
 8013766:	60f8      	str	r0, [r7, #12]
 8013768:	60b9      	str	r1, [r7, #8]
 801376a:	607a      	str	r2, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	617b      	str	r3, [r7, #20]

    pShtp->eventCallback = eventCallback;
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	68ba      	ldr	r2, [r7, #8]
 8013774:	605a      	str	r2, [r3, #4]
    pShtp->eventCookie = eventCookie;
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	687a      	ldr	r2, [r7, #4]
 801377a:	609a      	str	r2, [r3, #8]
}
 801377c:	bf00      	nop
 801377e:	371c      	adds	r7, #28
 8013780:	46bd      	mov	sp, r7
 8013782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013786:	4770      	bx	lr

08013788 <shtp_listenChan>:

// Register a listener for an SHTP channel
int shtp_listenChan(void *pInstance,
                    uint8_t channel,
                    shtp_Callback_t *callback, void * cookie)
{
 8013788:	b480      	push	{r7}
 801378a:	b087      	sub	sp, #28
 801378c:	af00      	add	r7, sp, #0
 801378e:	60f8      	str	r0, [r7, #12]
 8013790:	607a      	str	r2, [r7, #4]
 8013792:	603b      	str	r3, [r7, #0]
 8013794:	460b      	mov	r3, r1
 8013796:	72fb      	strb	r3, [r7, #11]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	617b      	str	r3, [r7, #20]
    
    // Balk if channel is invalid
    if ((channel == 0) || (channel >= SHTP_MAX_CHANS)) {
 801379c:	7afb      	ldrb	r3, [r7, #11]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d002      	beq.n	80137a8 <shtp_listenChan+0x20>
 80137a2:	7afb      	ldrb	r3, [r7, #11]
 80137a4:	2b07      	cmp	r3, #7
 80137a6:	d902      	bls.n	80137ae <shtp_listenChan+0x26>
        return SH2_ERR_BAD_PARAM;
 80137a8:	f06f 0301 	mvn.w	r3, #1
 80137ac:	e016      	b.n	80137dc <shtp_listenChan+0x54>
    }

    pShtp->chan[channel].callback = callback;
 80137ae:	7afa      	ldrb	r2, [r7, #11]
 80137b0:	6979      	ldr	r1, [r7, #20]
 80137b2:	4613      	mov	r3, r2
 80137b4:	005b      	lsls	r3, r3, #1
 80137b6:	4413      	add	r3, r2
 80137b8:	009b      	lsls	r3, r3, #2
 80137ba:	440b      	add	r3, r1
 80137bc:	f603 039c 	addw	r3, r3, #2204	@ 0x89c
 80137c0:	687a      	ldr	r2, [r7, #4]
 80137c2:	601a      	str	r2, [r3, #0]
    pShtp->chan[channel].cookie = cookie;
 80137c4:	7afa      	ldrb	r2, [r7, #11]
 80137c6:	6979      	ldr	r1, [r7, #20]
 80137c8:	4613      	mov	r3, r2
 80137ca:	005b      	lsls	r3, r3, #1
 80137cc:	4413      	add	r3, r2
 80137ce:	009b      	lsls	r3, r3, #2
 80137d0:	440b      	add	r3, r1
 80137d2:	f503 630a 	add.w	r3, r3, #2208	@ 0x8a0
 80137d6:	683a      	ldr	r2, [r7, #0]
 80137d8:	601a      	str	r2, [r3, #0]

    return SH2_OK;
 80137da:	2300      	movs	r3, #0
}
 80137dc:	4618      	mov	r0, r3
 80137de:	371c      	adds	r7, #28
 80137e0:	46bd      	mov	sp, r7
 80137e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e6:	4770      	bx	lr

080137e8 <shtp_send>:

// Send an SHTP payload on a particular channel
int shtp_send(void *pInstance,
              uint8_t channel,
              const uint8_t *payload, uint16_t len)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b086      	sub	sp, #24
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	60f8      	str	r0, [r7, #12]
 80137f0:	607a      	str	r2, [r7, #4]
 80137f2:	461a      	mov	r2, r3
 80137f4:	460b      	mov	r3, r1
 80137f6:	72fb      	strb	r3, [r7, #11]
 80137f8:	4613      	mov	r3, r2
 80137fa:	813b      	strh	r3, [r7, #8]
    shtp_t *pShtp = (shtp_t *)pInstance;
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	617b      	str	r3, [r7, #20]
    
    if (len > SH2_HAL_MAX_PAYLOAD_OUT) {
 8013800:	893b      	ldrh	r3, [r7, #8]
 8013802:	2b80      	cmp	r3, #128	@ 0x80
 8013804:	d909      	bls.n	801381a <shtp_send+0x32>
        pShtp->txTooLargePayloads++;
 8013806:	697b      	ldr	r3, [r7, #20]
 8013808:	f8d3 3910 	ldr.w	r3, [r3, #2320]	@ 0x910
 801380c:	1c5a      	adds	r2, r3, #1
 801380e:	697b      	ldr	r3, [r7, #20]
 8013810:	f8c3 2910 	str.w	r2, [r3, #2320]	@ 0x910
        return SH2_ERR_BAD_PARAM;
 8013814:	f06f 0301 	mvn.w	r3, #1
 8013818:	e013      	b.n	8013842 <shtp_send+0x5a>
    }
    if (channel >= SHTP_MAX_CHANS) {
 801381a:	7afb      	ldrb	r3, [r7, #11]
 801381c:	2b07      	cmp	r3, #7
 801381e:	d909      	bls.n	8013834 <shtp_send+0x4c>
        pShtp->badTxChan++;
 8013820:	697b      	ldr	r3, [r7, #20]
 8013822:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 8013826:	1c5a      	adds	r2, r3, #1
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
        return SH2_ERR_BAD_PARAM;
 801382e:	f06f 0301 	mvn.w	r3, #1
 8013832:	e006      	b.n	8013842 <shtp_send+0x5a>
    }

    return txProcess(pShtp, channel, payload, len);
 8013834:	893b      	ldrh	r3, [r7, #8]
 8013836:	7af9      	ldrb	r1, [r7, #11]
 8013838:	687a      	ldr	r2, [r7, #4]
 801383a:	6978      	ldr	r0, [r7, #20]
 801383c:	f7ff fd69 	bl	8013312 <txProcess>
 8013840:	4603      	mov	r3, r0
}
 8013842:	4618      	mov	r0, r3
 8013844:	3718      	adds	r7, #24
 8013846:	46bd      	mov	sp, r7
 8013848:	bd80      	pop	{r7, pc}

0801384a <shtp_service>:

// Check for received data and process it.
void shtp_service(void *pInstance)
{
 801384a:	b590      	push	{r4, r7, lr}
 801384c:	b087      	sub	sp, #28
 801384e:	af00      	add	r7, sp, #0
 8013850:	6078      	str	r0, [r7, #4]
    shtp_t *pShtp = (shtp_t *)pInstance;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	617b      	str	r3, [r7, #20]
    uint32_t t_us = 0;
 8013856:	2300      	movs	r3, #0
 8013858:	60fb      	str	r3, [r7, #12]
    
    int len = pShtp->pHal->read(pShtp->pHal, pShtp->inTransfer, sizeof(pShtp->inTransfer), &t_us);
 801385a:	697b      	ldr	r3, [r7, #20]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	689c      	ldr	r4, [r3, #8]
 8013860:	697b      	ldr	r3, [r7, #20]
 8013862:	6818      	ldr	r0, [r3, #0]
 8013864:	697b      	ldr	r3, [r7, #20]
 8013866:	f503 6193 	add.w	r1, r3, #1176	@ 0x498
 801386a:	f107 030c 	add.w	r3, r7, #12
 801386e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8013872:	47a0      	blx	r4
 8013874:	6138      	str	r0, [r7, #16]
    if (len > 0) {
 8013876:	693b      	ldr	r3, [r7, #16]
 8013878:	2b00      	cmp	r3, #0
 801387a:	dd08      	ble.n	801388e <shtp_service+0x44>
        rxAssemble(pShtp, pShtp->inTransfer, len, t_us);
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	f503 6193 	add.w	r1, r3, #1176	@ 0x498
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	b29a      	uxth	r2, r3
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	6978      	ldr	r0, [r7, #20]
 801388a:	f7ff fdd7 	bl	801343c <rxAssemble>
    }
}
 801388e:	bf00      	nop
 8013890:	371c      	adds	r7, #28
 8013892:	46bd      	mov	sp, r7
 8013894:	bd90      	pop	{r4, r7, pc}

08013896 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013896:	b580      	push	{r7, lr}
 8013898:	b082      	sub	sp, #8
 801389a:	af00      	add	r7, sp, #0
 801389c:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80138aa:	4619      	mov	r1, r3
 80138ac:	4610      	mov	r0, r2
 80138ae:	f7f8 fc68 	bl	800c182 <USBD_LL_SetupStage>
}
 80138b2:	bf00      	nop
 80138b4:	3708      	adds	r7, #8
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}

080138ba <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80138ba:	b580      	push	{r7, lr}
 80138bc:	b082      	sub	sp, #8
 80138be:	af00      	add	r7, sp, #0
 80138c0:	6078      	str	r0, [r7, #4]
 80138c2:	460b      	mov	r3, r1
 80138c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 80138cc:	78fa      	ldrb	r2, [r7, #3]
 80138ce:	6879      	ldr	r1, [r7, #4]
 80138d0:	4613      	mov	r3, r2
 80138d2:	00db      	lsls	r3, r3, #3
 80138d4:	4413      	add	r3, r2
 80138d6:	009b      	lsls	r3, r3, #2
 80138d8:	440b      	add	r3, r1
 80138da:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80138de:	681a      	ldr	r2, [r3, #0]
 80138e0:	78fb      	ldrb	r3, [r7, #3]
 80138e2:	4619      	mov	r1, r3
 80138e4:	f7f8 fca2 	bl	800c22c <USBD_LL_DataOutStage>
}
 80138e8:	bf00      	nop
 80138ea:	3708      	adds	r7, #8
 80138ec:	46bd      	mov	sp, r7
 80138ee:	bd80      	pop	{r7, pc}

080138f0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b082      	sub	sp, #8
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
 80138f8:	460b      	mov	r3, r1
 80138fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 8013902:	78fa      	ldrb	r2, [r7, #3]
 8013904:	6879      	ldr	r1, [r7, #4]
 8013906:	4613      	mov	r3, r2
 8013908:	00db      	lsls	r3, r3, #3
 801390a:	4413      	add	r3, r2
 801390c:	009b      	lsls	r3, r3, #2
 801390e:	440b      	add	r3, r1
 8013910:	3320      	adds	r3, #32
 8013912:	681a      	ldr	r2, [r3, #0]
 8013914:	78fb      	ldrb	r3, [r7, #3]
 8013916:	4619      	mov	r1, r3
 8013918:	f7f8 fd44 	bl	800c3a4 <USBD_LL_DataInStage>
}
 801391c:	bf00      	nop
 801391e:	3708      	adds	r7, #8
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}

08013924 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b082      	sub	sp, #8
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8013932:	4618      	mov	r0, r3
 8013934:	f7f8 fe88 	bl	800c648 <USBD_LL_SOF>
}
 8013938:	bf00      	nop
 801393a:	3708      	adds	r7, #8
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}

08013940 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b084      	sub	sp, #16
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013948:	2301      	movs	r3, #1
 801394a:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	79db      	ldrb	r3, [r3, #7]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d102      	bne.n	801395a <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8013954:	2300      	movs	r3, #0
 8013956:	73fb      	strb	r3, [r7, #15]
 8013958:	e008      	b.n	801396c <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	79db      	ldrb	r3, [r3, #7]
 801395e:	2b02      	cmp	r3, #2
 8013960:	d102      	bne.n	8013968 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8013962:	2301      	movs	r3, #1
 8013964:	73fb      	strb	r3, [r7, #15]
 8013966:	e001      	b.n	801396c <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8013968:	f7ef fd8c 	bl	8003484 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8013972:	7bfa      	ldrb	r2, [r7, #15]
 8013974:	4611      	mov	r1, r2
 8013976:	4618      	mov	r0, r3
 8013978:	f7f8 fe22 	bl	800c5c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8013982:	4618      	mov	r0, r3
 8013984:	f7f8 fdc9 	bl	800c51a <USBD_LL_Reset>
}
 8013988:	bf00      	nop
 801398a:	3710      	adds	r7, #16
 801398c:	46bd      	mov	sp, r7
 801398e:	bd80      	pop	{r7, pc}

08013990 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b082      	sub	sp, #8
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801399e:	4618      	mov	r0, r3
 80139a0:	f7f8 fe1e 	bl	800c5e0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	687a      	ldr	r2, [r7, #4]
 80139b0:	6812      	ldr	r2, [r2, #0]
 80139b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80139b6:	f043 0301 	orr.w	r3, r3, #1
 80139ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	7adb      	ldrb	r3, [r3, #11]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d005      	beq.n	80139d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80139c4:	4b04      	ldr	r3, [pc, #16]	@ (80139d8 <HAL_PCD_SuspendCallback+0x48>)
 80139c6:	691b      	ldr	r3, [r3, #16]
 80139c8:	4a03      	ldr	r2, [pc, #12]	@ (80139d8 <HAL_PCD_SuspendCallback+0x48>)
 80139ca:	f043 0306 	orr.w	r3, r3, #6
 80139ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80139d0:	bf00      	nop
 80139d2:	3708      	adds	r7, #8
 80139d4:	46bd      	mov	sp, r7
 80139d6:	bd80      	pop	{r7, pc}
 80139d8:	e000ed00 	.word	0xe000ed00

080139dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b082      	sub	sp, #8
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 80139ea:	4618      	mov	r0, r3
 80139ec:	f7f8 fe14 	bl	800c618 <USBD_LL_Resume>
}
 80139f0:	bf00      	nop
 80139f2:	3708      	adds	r7, #8
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}

080139f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80139f8:	b580      	push	{r7, lr}
 80139fa:	b082      	sub	sp, #8
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
 8013a00:	460b      	mov	r3, r1
 8013a02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8013a0a:	78fa      	ldrb	r2, [r7, #3]
 8013a0c:	4611      	mov	r1, r2
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f7f8 fe6c 	bl	800c6ec <USBD_LL_IsoOUTIncomplete>
}
 8013a14:	bf00      	nop
 8013a16:	3708      	adds	r7, #8
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bd80      	pop	{r7, pc}

08013a1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b082      	sub	sp, #8
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
 8013a24:	460b      	mov	r3, r1
 8013a26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8013a2e:	78fa      	ldrb	r2, [r7, #3]
 8013a30:	4611      	mov	r1, r2
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7f8 fe28 	bl	800c688 <USBD_LL_IsoINIncomplete>
}
 8013a38:	bf00      	nop
 8013a3a:	3708      	adds	r7, #8
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}

08013a40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b082      	sub	sp, #8
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f7f8 fe7e 	bl	800c750 <USBD_LL_DevConnected>
}
 8013a54:	bf00      	nop
 8013a56:	3708      	adds	r7, #8
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	bd80      	pop	{r7, pc}

08013a5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b082      	sub	sp, #8
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f7f8 fe7b 	bl	800c766 <USBD_LL_DevDisconnected>
}
 8013a70:	bf00      	nop
 8013a72:	3708      	adds	r7, #8
 8013a74:	46bd      	mov	sp, r7
 8013a76:	bd80      	pop	{r7, pc}

08013a78 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b084      	sub	sp, #16
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
 8013a80:	4608      	mov	r0, r1
 8013a82:	4611      	mov	r1, r2
 8013a84:	461a      	mov	r2, r3
 8013a86:	4603      	mov	r3, r0
 8013a88:	70fb      	strb	r3, [r7, #3]
 8013a8a:	460b      	mov	r3, r1
 8013a8c:	70bb      	strb	r3, [r7, #2]
 8013a8e:	4613      	mov	r3, r2
 8013a90:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a92:	2300      	movs	r3, #0
 8013a94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a96:	2300      	movs	r3, #0
 8013a98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013aa0:	78bb      	ldrb	r3, [r7, #2]
 8013aa2:	883a      	ldrh	r2, [r7, #0]
 8013aa4:	78f9      	ldrb	r1, [r7, #3]
 8013aa6:	f7f2 fe69 	bl	800677c <HAL_PCD_EP_Open>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013aae:	7bfb      	ldrb	r3, [r7, #15]
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f000 f927 	bl	8013d04 <USBD_Get_USB_Status>
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013aba:	7bbb      	ldrb	r3, [r7, #14]
}
 8013abc:	4618      	mov	r0, r3
 8013abe:	3710      	adds	r7, #16
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd80      	pop	{r7, pc}

08013ac4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b084      	sub	sp, #16
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
 8013acc:	460b      	mov	r3, r1
 8013ace:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013ade:	78fa      	ldrb	r2, [r7, #3]
 8013ae0:	4611      	mov	r1, r2
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7f2 ff29 	bl	800693a <HAL_PCD_EP_SetStall>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013aec:	7bfb      	ldrb	r3, [r7, #15]
 8013aee:	4618      	mov	r0, r3
 8013af0:	f000 f908 	bl	8013d04 <USBD_Get_USB_Status>
 8013af4:	4603      	mov	r3, r0
 8013af6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013af8:	7bbb      	ldrb	r3, [r7, #14]
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	3710      	adds	r7, #16
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}

08013b02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b02:	b580      	push	{r7, lr}
 8013b04:	b084      	sub	sp, #16
 8013b06:	af00      	add	r7, sp, #0
 8013b08:	6078      	str	r0, [r7, #4]
 8013b0a:	460b      	mov	r3, r1
 8013b0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b12:	2300      	movs	r3, #0
 8013b14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013b1c:	78fa      	ldrb	r2, [r7, #3]
 8013b1e:	4611      	mov	r1, r2
 8013b20:	4618      	mov	r0, r3
 8013b22:	f7f2 ff6d 	bl	8006a00 <HAL_PCD_EP_ClrStall>
 8013b26:	4603      	mov	r3, r0
 8013b28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b2a:	7bfb      	ldrb	r3, [r7, #15]
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f000 f8e9 	bl	8013d04 <USBD_Get_USB_Status>
 8013b32:	4603      	mov	r3, r0
 8013b34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013b36:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b38:	4618      	mov	r0, r3
 8013b3a:	3710      	adds	r7, #16
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bd80      	pop	{r7, pc}

08013b40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b40:	b480      	push	{r7}
 8013b42:	b085      	sub	sp, #20
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
 8013b48:	460b      	mov	r3, r1
 8013b4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013b52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013b54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	da0b      	bge.n	8013b74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013b5c:	78fb      	ldrb	r3, [r7, #3]
 8013b5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013b62:	68f9      	ldr	r1, [r7, #12]
 8013b64:	4613      	mov	r3, r2
 8013b66:	00db      	lsls	r3, r3, #3
 8013b68:	4413      	add	r3, r2
 8013b6a:	009b      	lsls	r3, r3, #2
 8013b6c:	440b      	add	r3, r1
 8013b6e:	3316      	adds	r3, #22
 8013b70:	781b      	ldrb	r3, [r3, #0]
 8013b72:	e00b      	b.n	8013b8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013b74:	78fb      	ldrb	r3, [r7, #3]
 8013b76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013b7a:	68f9      	ldr	r1, [r7, #12]
 8013b7c:	4613      	mov	r3, r2
 8013b7e:	00db      	lsls	r3, r3, #3
 8013b80:	4413      	add	r3, r2
 8013b82:	009b      	lsls	r3, r3, #2
 8013b84:	440b      	add	r3, r1
 8013b86:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8013b8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	3714      	adds	r7, #20
 8013b90:	46bd      	mov	sp, r7
 8013b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b96:	4770      	bx	lr

08013b98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b084      	sub	sp, #16
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
 8013ba0:	460b      	mov	r3, r1
 8013ba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013bb2:	78fa      	ldrb	r2, [r7, #3]
 8013bb4:	4611      	mov	r1, r2
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7f2 fdbc 	bl	8006734 <HAL_PCD_SetAddress>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013bc0:	7bfb      	ldrb	r3, [r7, #15]
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f000 f89e 	bl	8013d04 <USBD_Get_USB_Status>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013bcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8013bce:	4618      	mov	r0, r3
 8013bd0:	3710      	adds	r7, #16
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	bd80      	pop	{r7, pc}

08013bd6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013bd6:	b580      	push	{r7, lr}
 8013bd8:	b086      	sub	sp, #24
 8013bda:	af00      	add	r7, sp, #0
 8013bdc:	60f8      	str	r0, [r7, #12]
 8013bde:	607a      	str	r2, [r7, #4]
 8013be0:	603b      	str	r3, [r7, #0]
 8013be2:	460b      	mov	r3, r1
 8013be4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013be6:	2300      	movs	r3, #0
 8013be8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013bea:	2300      	movs	r3, #0
 8013bec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013bf4:	7af9      	ldrb	r1, [r7, #11]
 8013bf6:	683b      	ldr	r3, [r7, #0]
 8013bf8:	687a      	ldr	r2, [r7, #4]
 8013bfa:	f7f2 fe64 	bl	80068c6 <HAL_PCD_EP_Transmit>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c02:	7dfb      	ldrb	r3, [r7, #23]
 8013c04:	4618      	mov	r0, r3
 8013c06:	f000 f87d 	bl	8013d04 <USBD_Get_USB_Status>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013c0e:	7dbb      	ldrb	r3, [r7, #22]
}
 8013c10:	4618      	mov	r0, r3
 8013c12:	3718      	adds	r7, #24
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}

08013c18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b086      	sub	sp, #24
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	60f8      	str	r0, [r7, #12]
 8013c20:	607a      	str	r2, [r7, #4]
 8013c22:	603b      	str	r3, [r7, #0]
 8013c24:	460b      	mov	r3, r1
 8013c26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013c28:	2300      	movs	r3, #0
 8013c2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8013c36:	7af9      	ldrb	r1, [r7, #11]
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	687a      	ldr	r2, [r7, #4]
 8013c3c:	f7f2 fe08 	bl	8006850 <HAL_PCD_EP_Receive>
 8013c40:	4603      	mov	r3, r0
 8013c42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013c44:	7dfb      	ldrb	r3, [r7, #23]
 8013c46:	4618      	mov	r0, r3
 8013c48:	f000 f85c 	bl	8013d04 <USBD_Get_USB_Status>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013c50:	7dbb      	ldrb	r3, [r7, #22]
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	3718      	adds	r7, #24
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}
	...

08013c5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b082      	sub	sp, #8
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
 8013c64:	460b      	mov	r3, r1
 8013c66:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8013c68:	78fb      	ldrb	r3, [r7, #3]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d002      	beq.n	8013c74 <HAL_PCDEx_LPM_Callback+0x18>
 8013c6e:	2b01      	cmp	r3, #1
 8013c70:	d01f      	beq.n	8013cb2 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8013c72:	e03b      	b.n	8013cec <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	7adb      	ldrb	r3, [r3, #11]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d007      	beq.n	8013c8c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8013c7c:	f000 f83c 	bl	8013cf8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013c80:	4b1c      	ldr	r3, [pc, #112]	@ (8013cf4 <HAL_PCDEx_LPM_Callback+0x98>)
 8013c82:	691b      	ldr	r3, [r3, #16]
 8013c84:	4a1b      	ldr	r2, [pc, #108]	@ (8013cf4 <HAL_PCDEx_LPM_Callback+0x98>)
 8013c86:	f023 0306 	bic.w	r3, r3, #6
 8013c8a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	687a      	ldr	r2, [r7, #4]
 8013c98:	6812      	ldr	r2, [r2, #0]
 8013c9a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8013c9e:	f023 0301 	bic.w	r3, r3, #1
 8013ca2:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7f8 fcb4 	bl	800c618 <USBD_LL_Resume>
    break;
 8013cb0:	e01c      	b.n	8013cec <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	687a      	ldr	r2, [r7, #4]
 8013cbe:	6812      	ldr	r2, [r2, #0]
 8013cc0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8013cc4:	f043 0301 	orr.w	r3, r3, #1
 8013cc8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f7f8 fc85 	bl	800c5e0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	7adb      	ldrb	r3, [r3, #11]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d005      	beq.n	8013cea <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013cde:	4b05      	ldr	r3, [pc, #20]	@ (8013cf4 <HAL_PCDEx_LPM_Callback+0x98>)
 8013ce0:	691b      	ldr	r3, [r3, #16]
 8013ce2:	4a04      	ldr	r2, [pc, #16]	@ (8013cf4 <HAL_PCDEx_LPM_Callback+0x98>)
 8013ce4:	f043 0306 	orr.w	r3, r3, #6
 8013ce8:	6113      	str	r3, [r2, #16]
    break;
 8013cea:	bf00      	nop
}
 8013cec:	bf00      	nop
 8013cee:	3708      	adds	r7, #8
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}
 8013cf4:	e000ed00 	.word	0xe000ed00

08013cf8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8013cfc:	f7ef fa9a 	bl	8003234 <SystemClock_Config>
}
 8013d00:	bf00      	nop
 8013d02:	bd80      	pop	{r7, pc}

08013d04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013d04:	b480      	push	{r7}
 8013d06:	b085      	sub	sp, #20
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013d12:	79fb      	ldrb	r3, [r7, #7]
 8013d14:	2b03      	cmp	r3, #3
 8013d16:	d817      	bhi.n	8013d48 <USBD_Get_USB_Status+0x44>
 8013d18:	a201      	add	r2, pc, #4	@ (adr r2, 8013d20 <USBD_Get_USB_Status+0x1c>)
 8013d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d1e:	bf00      	nop
 8013d20:	08013d31 	.word	0x08013d31
 8013d24:	08013d37 	.word	0x08013d37
 8013d28:	08013d3d 	.word	0x08013d3d
 8013d2c:	08013d43 	.word	0x08013d43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013d30:	2300      	movs	r3, #0
 8013d32:	73fb      	strb	r3, [r7, #15]
    break;
 8013d34:	e00b      	b.n	8013d4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013d36:	2303      	movs	r3, #3
 8013d38:	73fb      	strb	r3, [r7, #15]
    break;
 8013d3a:	e008      	b.n	8013d4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8013d40:	e005      	b.n	8013d4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013d42:	2303      	movs	r3, #3
 8013d44:	73fb      	strb	r3, [r7, #15]
    break;
 8013d46:	e002      	b.n	8013d4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013d48:	2303      	movs	r3, #3
 8013d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8013d4c:	bf00      	nop
  }
  return usb_status;
 8013d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d50:	4618      	mov	r0, r3
 8013d52:	3714      	adds	r7, #20
 8013d54:	46bd      	mov	sp, r7
 8013d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d5a:	4770      	bx	lr

08013d5c <malloc>:
 8013d5c:	4b02      	ldr	r3, [pc, #8]	@ (8013d68 <malloc+0xc>)
 8013d5e:	4601      	mov	r1, r0
 8013d60:	6818      	ldr	r0, [r3, #0]
 8013d62:	f000 b825 	b.w	8013db0 <_malloc_r>
 8013d66:	bf00      	nop
 8013d68:	200000fc 	.word	0x200000fc

08013d6c <sbrk_aligned>:
 8013d6c:	b570      	push	{r4, r5, r6, lr}
 8013d6e:	4e0f      	ldr	r6, [pc, #60]	@ (8013dac <sbrk_aligned+0x40>)
 8013d70:	460c      	mov	r4, r1
 8013d72:	6831      	ldr	r1, [r6, #0]
 8013d74:	4605      	mov	r5, r0
 8013d76:	b911      	cbnz	r1, 8013d7e <sbrk_aligned+0x12>
 8013d78:	f000 ff84 	bl	8014c84 <_sbrk_r>
 8013d7c:	6030      	str	r0, [r6, #0]
 8013d7e:	4621      	mov	r1, r4
 8013d80:	4628      	mov	r0, r5
 8013d82:	f000 ff7f 	bl	8014c84 <_sbrk_r>
 8013d86:	1c43      	adds	r3, r0, #1
 8013d88:	d103      	bne.n	8013d92 <sbrk_aligned+0x26>
 8013d8a:	f04f 34ff 	mov.w	r4, #4294967295
 8013d8e:	4620      	mov	r0, r4
 8013d90:	bd70      	pop	{r4, r5, r6, pc}
 8013d92:	1cc4      	adds	r4, r0, #3
 8013d94:	f024 0403 	bic.w	r4, r4, #3
 8013d98:	42a0      	cmp	r0, r4
 8013d9a:	d0f8      	beq.n	8013d8e <sbrk_aligned+0x22>
 8013d9c:	1a21      	subs	r1, r4, r0
 8013d9e:	4628      	mov	r0, r5
 8013da0:	f000 ff70 	bl	8014c84 <_sbrk_r>
 8013da4:	3001      	adds	r0, #1
 8013da6:	d1f2      	bne.n	8013d8e <sbrk_aligned+0x22>
 8013da8:	e7ef      	b.n	8013d8a <sbrk_aligned+0x1e>
 8013daa:	bf00      	nop
 8013dac:	2000d8d8 	.word	0x2000d8d8

08013db0 <_malloc_r>:
 8013db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013db4:	1ccd      	adds	r5, r1, #3
 8013db6:	f025 0503 	bic.w	r5, r5, #3
 8013dba:	3508      	adds	r5, #8
 8013dbc:	2d0c      	cmp	r5, #12
 8013dbe:	bf38      	it	cc
 8013dc0:	250c      	movcc	r5, #12
 8013dc2:	2d00      	cmp	r5, #0
 8013dc4:	4606      	mov	r6, r0
 8013dc6:	db01      	blt.n	8013dcc <_malloc_r+0x1c>
 8013dc8:	42a9      	cmp	r1, r5
 8013dca:	d904      	bls.n	8013dd6 <_malloc_r+0x26>
 8013dcc:	230c      	movs	r3, #12
 8013dce:	6033      	str	r3, [r6, #0]
 8013dd0:	2000      	movs	r0, #0
 8013dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013dd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013eac <_malloc_r+0xfc>
 8013dda:	f000 f869 	bl	8013eb0 <__malloc_lock>
 8013dde:	f8d8 3000 	ldr.w	r3, [r8]
 8013de2:	461c      	mov	r4, r3
 8013de4:	bb44      	cbnz	r4, 8013e38 <_malloc_r+0x88>
 8013de6:	4629      	mov	r1, r5
 8013de8:	4630      	mov	r0, r6
 8013dea:	f7ff ffbf 	bl	8013d6c <sbrk_aligned>
 8013dee:	1c43      	adds	r3, r0, #1
 8013df0:	4604      	mov	r4, r0
 8013df2:	d158      	bne.n	8013ea6 <_malloc_r+0xf6>
 8013df4:	f8d8 4000 	ldr.w	r4, [r8]
 8013df8:	4627      	mov	r7, r4
 8013dfa:	2f00      	cmp	r7, #0
 8013dfc:	d143      	bne.n	8013e86 <_malloc_r+0xd6>
 8013dfe:	2c00      	cmp	r4, #0
 8013e00:	d04b      	beq.n	8013e9a <_malloc_r+0xea>
 8013e02:	6823      	ldr	r3, [r4, #0]
 8013e04:	4639      	mov	r1, r7
 8013e06:	4630      	mov	r0, r6
 8013e08:	eb04 0903 	add.w	r9, r4, r3
 8013e0c:	f000 ff3a 	bl	8014c84 <_sbrk_r>
 8013e10:	4581      	cmp	r9, r0
 8013e12:	d142      	bne.n	8013e9a <_malloc_r+0xea>
 8013e14:	6821      	ldr	r1, [r4, #0]
 8013e16:	1a6d      	subs	r5, r5, r1
 8013e18:	4629      	mov	r1, r5
 8013e1a:	4630      	mov	r0, r6
 8013e1c:	f7ff ffa6 	bl	8013d6c <sbrk_aligned>
 8013e20:	3001      	adds	r0, #1
 8013e22:	d03a      	beq.n	8013e9a <_malloc_r+0xea>
 8013e24:	6823      	ldr	r3, [r4, #0]
 8013e26:	442b      	add	r3, r5
 8013e28:	6023      	str	r3, [r4, #0]
 8013e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8013e2e:	685a      	ldr	r2, [r3, #4]
 8013e30:	bb62      	cbnz	r2, 8013e8c <_malloc_r+0xdc>
 8013e32:	f8c8 7000 	str.w	r7, [r8]
 8013e36:	e00f      	b.n	8013e58 <_malloc_r+0xa8>
 8013e38:	6822      	ldr	r2, [r4, #0]
 8013e3a:	1b52      	subs	r2, r2, r5
 8013e3c:	d420      	bmi.n	8013e80 <_malloc_r+0xd0>
 8013e3e:	2a0b      	cmp	r2, #11
 8013e40:	d917      	bls.n	8013e72 <_malloc_r+0xc2>
 8013e42:	1961      	adds	r1, r4, r5
 8013e44:	42a3      	cmp	r3, r4
 8013e46:	6025      	str	r5, [r4, #0]
 8013e48:	bf18      	it	ne
 8013e4a:	6059      	strne	r1, [r3, #4]
 8013e4c:	6863      	ldr	r3, [r4, #4]
 8013e4e:	bf08      	it	eq
 8013e50:	f8c8 1000 	streq.w	r1, [r8]
 8013e54:	5162      	str	r2, [r4, r5]
 8013e56:	604b      	str	r3, [r1, #4]
 8013e58:	4630      	mov	r0, r6
 8013e5a:	f000 f82f 	bl	8013ebc <__malloc_unlock>
 8013e5e:	f104 000b 	add.w	r0, r4, #11
 8013e62:	1d23      	adds	r3, r4, #4
 8013e64:	f020 0007 	bic.w	r0, r0, #7
 8013e68:	1ac2      	subs	r2, r0, r3
 8013e6a:	bf1c      	itt	ne
 8013e6c:	1a1b      	subne	r3, r3, r0
 8013e6e:	50a3      	strne	r3, [r4, r2]
 8013e70:	e7af      	b.n	8013dd2 <_malloc_r+0x22>
 8013e72:	6862      	ldr	r2, [r4, #4]
 8013e74:	42a3      	cmp	r3, r4
 8013e76:	bf0c      	ite	eq
 8013e78:	f8c8 2000 	streq.w	r2, [r8]
 8013e7c:	605a      	strne	r2, [r3, #4]
 8013e7e:	e7eb      	b.n	8013e58 <_malloc_r+0xa8>
 8013e80:	4623      	mov	r3, r4
 8013e82:	6864      	ldr	r4, [r4, #4]
 8013e84:	e7ae      	b.n	8013de4 <_malloc_r+0x34>
 8013e86:	463c      	mov	r4, r7
 8013e88:	687f      	ldr	r7, [r7, #4]
 8013e8a:	e7b6      	b.n	8013dfa <_malloc_r+0x4a>
 8013e8c:	461a      	mov	r2, r3
 8013e8e:	685b      	ldr	r3, [r3, #4]
 8013e90:	42a3      	cmp	r3, r4
 8013e92:	d1fb      	bne.n	8013e8c <_malloc_r+0xdc>
 8013e94:	2300      	movs	r3, #0
 8013e96:	6053      	str	r3, [r2, #4]
 8013e98:	e7de      	b.n	8013e58 <_malloc_r+0xa8>
 8013e9a:	230c      	movs	r3, #12
 8013e9c:	6033      	str	r3, [r6, #0]
 8013e9e:	4630      	mov	r0, r6
 8013ea0:	f000 f80c 	bl	8013ebc <__malloc_unlock>
 8013ea4:	e794      	b.n	8013dd0 <_malloc_r+0x20>
 8013ea6:	6005      	str	r5, [r0, #0]
 8013ea8:	e7d6      	b.n	8013e58 <_malloc_r+0xa8>
 8013eaa:	bf00      	nop
 8013eac:	2000d8dc 	.word	0x2000d8dc

08013eb0 <__malloc_lock>:
 8013eb0:	4801      	ldr	r0, [pc, #4]	@ (8013eb8 <__malloc_lock+0x8>)
 8013eb2:	f000 bf34 	b.w	8014d1e <__retarget_lock_acquire_recursive>
 8013eb6:	bf00      	nop
 8013eb8:	2000da20 	.word	0x2000da20

08013ebc <__malloc_unlock>:
 8013ebc:	4801      	ldr	r0, [pc, #4]	@ (8013ec4 <__malloc_unlock+0x8>)
 8013ebe:	f000 bf2f 	b.w	8014d20 <__retarget_lock_release_recursive>
 8013ec2:	bf00      	nop
 8013ec4:	2000da20 	.word	0x2000da20

08013ec8 <__cvt>:
 8013ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013eca:	ed2d 8b02 	vpush	{d8}
 8013ece:	eeb0 8b40 	vmov.f64	d8, d0
 8013ed2:	b085      	sub	sp, #20
 8013ed4:	4617      	mov	r7, r2
 8013ed6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8013ed8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013eda:	ee18 2a90 	vmov	r2, s17
 8013ede:	f025 0520 	bic.w	r5, r5, #32
 8013ee2:	2a00      	cmp	r2, #0
 8013ee4:	bfb6      	itet	lt
 8013ee6:	222d      	movlt	r2, #45	@ 0x2d
 8013ee8:	2200      	movge	r2, #0
 8013eea:	eeb1 8b40 	vneglt.f64	d8, d0
 8013eee:	2d46      	cmp	r5, #70	@ 0x46
 8013ef0:	460c      	mov	r4, r1
 8013ef2:	701a      	strb	r2, [r3, #0]
 8013ef4:	d004      	beq.n	8013f00 <__cvt+0x38>
 8013ef6:	2d45      	cmp	r5, #69	@ 0x45
 8013ef8:	d100      	bne.n	8013efc <__cvt+0x34>
 8013efa:	3401      	adds	r4, #1
 8013efc:	2102      	movs	r1, #2
 8013efe:	e000      	b.n	8013f02 <__cvt+0x3a>
 8013f00:	2103      	movs	r1, #3
 8013f02:	ab03      	add	r3, sp, #12
 8013f04:	9301      	str	r3, [sp, #4]
 8013f06:	ab02      	add	r3, sp, #8
 8013f08:	9300      	str	r3, [sp, #0]
 8013f0a:	4622      	mov	r2, r4
 8013f0c:	4633      	mov	r3, r6
 8013f0e:	eeb0 0b48 	vmov.f64	d0, d8
 8013f12:	f000 ff9d 	bl	8014e50 <_dtoa_r>
 8013f16:	2d47      	cmp	r5, #71	@ 0x47
 8013f18:	d114      	bne.n	8013f44 <__cvt+0x7c>
 8013f1a:	07fb      	lsls	r3, r7, #31
 8013f1c:	d50a      	bpl.n	8013f34 <__cvt+0x6c>
 8013f1e:	1902      	adds	r2, r0, r4
 8013f20:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f28:	bf08      	it	eq
 8013f2a:	9203      	streq	r2, [sp, #12]
 8013f2c:	2130      	movs	r1, #48	@ 0x30
 8013f2e:	9b03      	ldr	r3, [sp, #12]
 8013f30:	4293      	cmp	r3, r2
 8013f32:	d319      	bcc.n	8013f68 <__cvt+0xa0>
 8013f34:	9b03      	ldr	r3, [sp, #12]
 8013f36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013f38:	1a1b      	subs	r3, r3, r0
 8013f3a:	6013      	str	r3, [r2, #0]
 8013f3c:	b005      	add	sp, #20
 8013f3e:	ecbd 8b02 	vpop	{d8}
 8013f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f44:	2d46      	cmp	r5, #70	@ 0x46
 8013f46:	eb00 0204 	add.w	r2, r0, r4
 8013f4a:	d1e9      	bne.n	8013f20 <__cvt+0x58>
 8013f4c:	7803      	ldrb	r3, [r0, #0]
 8013f4e:	2b30      	cmp	r3, #48	@ 0x30
 8013f50:	d107      	bne.n	8013f62 <__cvt+0x9a>
 8013f52:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f5a:	bf1c      	itt	ne
 8013f5c:	f1c4 0401 	rsbne	r4, r4, #1
 8013f60:	6034      	strne	r4, [r6, #0]
 8013f62:	6833      	ldr	r3, [r6, #0]
 8013f64:	441a      	add	r2, r3
 8013f66:	e7db      	b.n	8013f20 <__cvt+0x58>
 8013f68:	1c5c      	adds	r4, r3, #1
 8013f6a:	9403      	str	r4, [sp, #12]
 8013f6c:	7019      	strb	r1, [r3, #0]
 8013f6e:	e7de      	b.n	8013f2e <__cvt+0x66>

08013f70 <__exponent>:
 8013f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013f72:	2900      	cmp	r1, #0
 8013f74:	bfba      	itte	lt
 8013f76:	4249      	neglt	r1, r1
 8013f78:	232d      	movlt	r3, #45	@ 0x2d
 8013f7a:	232b      	movge	r3, #43	@ 0x2b
 8013f7c:	2909      	cmp	r1, #9
 8013f7e:	7002      	strb	r2, [r0, #0]
 8013f80:	7043      	strb	r3, [r0, #1]
 8013f82:	dd29      	ble.n	8013fd8 <__exponent+0x68>
 8013f84:	f10d 0307 	add.w	r3, sp, #7
 8013f88:	461d      	mov	r5, r3
 8013f8a:	270a      	movs	r7, #10
 8013f8c:	461a      	mov	r2, r3
 8013f8e:	fbb1 f6f7 	udiv	r6, r1, r7
 8013f92:	fb07 1416 	mls	r4, r7, r6, r1
 8013f96:	3430      	adds	r4, #48	@ 0x30
 8013f98:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013f9c:	460c      	mov	r4, r1
 8013f9e:	2c63      	cmp	r4, #99	@ 0x63
 8013fa0:	f103 33ff 	add.w	r3, r3, #4294967295
 8013fa4:	4631      	mov	r1, r6
 8013fa6:	dcf1      	bgt.n	8013f8c <__exponent+0x1c>
 8013fa8:	3130      	adds	r1, #48	@ 0x30
 8013faa:	1e94      	subs	r4, r2, #2
 8013fac:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013fb0:	1c41      	adds	r1, r0, #1
 8013fb2:	4623      	mov	r3, r4
 8013fb4:	42ab      	cmp	r3, r5
 8013fb6:	d30a      	bcc.n	8013fce <__exponent+0x5e>
 8013fb8:	f10d 0309 	add.w	r3, sp, #9
 8013fbc:	1a9b      	subs	r3, r3, r2
 8013fbe:	42ac      	cmp	r4, r5
 8013fc0:	bf88      	it	hi
 8013fc2:	2300      	movhi	r3, #0
 8013fc4:	3302      	adds	r3, #2
 8013fc6:	4403      	add	r3, r0
 8013fc8:	1a18      	subs	r0, r3, r0
 8013fca:	b003      	add	sp, #12
 8013fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fce:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013fd2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013fd6:	e7ed      	b.n	8013fb4 <__exponent+0x44>
 8013fd8:	2330      	movs	r3, #48	@ 0x30
 8013fda:	3130      	adds	r1, #48	@ 0x30
 8013fdc:	7083      	strb	r3, [r0, #2]
 8013fde:	70c1      	strb	r1, [r0, #3]
 8013fe0:	1d03      	adds	r3, r0, #4
 8013fe2:	e7f1      	b.n	8013fc8 <__exponent+0x58>
 8013fe4:	0000      	movs	r0, r0
	...

08013fe8 <_printf_float>:
 8013fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fec:	b08d      	sub	sp, #52	@ 0x34
 8013fee:	460c      	mov	r4, r1
 8013ff0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013ff4:	4616      	mov	r6, r2
 8013ff6:	461f      	mov	r7, r3
 8013ff8:	4605      	mov	r5, r0
 8013ffa:	f000 fdad 	bl	8014b58 <_localeconv_r>
 8013ffe:	f8d0 b000 	ldr.w	fp, [r0]
 8014002:	4658      	mov	r0, fp
 8014004:	f7ec f96c 	bl	80002e0 <strlen>
 8014008:	2300      	movs	r3, #0
 801400a:	930a      	str	r3, [sp, #40]	@ 0x28
 801400c:	f8d8 3000 	ldr.w	r3, [r8]
 8014010:	f894 9018 	ldrb.w	r9, [r4, #24]
 8014014:	6822      	ldr	r2, [r4, #0]
 8014016:	9005      	str	r0, [sp, #20]
 8014018:	3307      	adds	r3, #7
 801401a:	f023 0307 	bic.w	r3, r3, #7
 801401e:	f103 0108 	add.w	r1, r3, #8
 8014022:	f8c8 1000 	str.w	r1, [r8]
 8014026:	ed93 0b00 	vldr	d0, [r3]
 801402a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8014288 <_printf_float+0x2a0>
 801402e:	eeb0 7bc0 	vabs.f64	d7, d0
 8014032:	eeb4 7b46 	vcmp.f64	d7, d6
 8014036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801403a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801403e:	dd24      	ble.n	801408a <_printf_float+0xa2>
 8014040:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014048:	d502      	bpl.n	8014050 <_printf_float+0x68>
 801404a:	232d      	movs	r3, #45	@ 0x2d
 801404c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014050:	498f      	ldr	r1, [pc, #572]	@ (8014290 <_printf_float+0x2a8>)
 8014052:	4b90      	ldr	r3, [pc, #576]	@ (8014294 <_printf_float+0x2ac>)
 8014054:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8014058:	bf8c      	ite	hi
 801405a:	4688      	movhi	r8, r1
 801405c:	4698      	movls	r8, r3
 801405e:	f022 0204 	bic.w	r2, r2, #4
 8014062:	2303      	movs	r3, #3
 8014064:	6123      	str	r3, [r4, #16]
 8014066:	6022      	str	r2, [r4, #0]
 8014068:	f04f 0a00 	mov.w	sl, #0
 801406c:	9700      	str	r7, [sp, #0]
 801406e:	4633      	mov	r3, r6
 8014070:	aa0b      	add	r2, sp, #44	@ 0x2c
 8014072:	4621      	mov	r1, r4
 8014074:	4628      	mov	r0, r5
 8014076:	f000 f9d1 	bl	801441c <_printf_common>
 801407a:	3001      	adds	r0, #1
 801407c:	f040 8089 	bne.w	8014192 <_printf_float+0x1aa>
 8014080:	f04f 30ff 	mov.w	r0, #4294967295
 8014084:	b00d      	add	sp, #52	@ 0x34
 8014086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801408a:	eeb4 0b40 	vcmp.f64	d0, d0
 801408e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014092:	d709      	bvc.n	80140a8 <_printf_float+0xc0>
 8014094:	ee10 3a90 	vmov	r3, s1
 8014098:	2b00      	cmp	r3, #0
 801409a:	bfbc      	itt	lt
 801409c:	232d      	movlt	r3, #45	@ 0x2d
 801409e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80140a2:	497d      	ldr	r1, [pc, #500]	@ (8014298 <_printf_float+0x2b0>)
 80140a4:	4b7d      	ldr	r3, [pc, #500]	@ (801429c <_printf_float+0x2b4>)
 80140a6:	e7d5      	b.n	8014054 <_printf_float+0x6c>
 80140a8:	6863      	ldr	r3, [r4, #4]
 80140aa:	1c59      	adds	r1, r3, #1
 80140ac:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80140b0:	d139      	bne.n	8014126 <_printf_float+0x13e>
 80140b2:	2306      	movs	r3, #6
 80140b4:	6063      	str	r3, [r4, #4]
 80140b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80140ba:	2300      	movs	r3, #0
 80140bc:	6022      	str	r2, [r4, #0]
 80140be:	9303      	str	r3, [sp, #12]
 80140c0:	ab0a      	add	r3, sp, #40	@ 0x28
 80140c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80140c6:	ab09      	add	r3, sp, #36	@ 0x24
 80140c8:	9300      	str	r3, [sp, #0]
 80140ca:	6861      	ldr	r1, [r4, #4]
 80140cc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80140d0:	4628      	mov	r0, r5
 80140d2:	f7ff fef9 	bl	8013ec8 <__cvt>
 80140d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80140da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80140dc:	4680      	mov	r8, r0
 80140de:	d129      	bne.n	8014134 <_printf_float+0x14c>
 80140e0:	1cc8      	adds	r0, r1, #3
 80140e2:	db02      	blt.n	80140ea <_printf_float+0x102>
 80140e4:	6863      	ldr	r3, [r4, #4]
 80140e6:	4299      	cmp	r1, r3
 80140e8:	dd41      	ble.n	801416e <_printf_float+0x186>
 80140ea:	f1a9 0902 	sub.w	r9, r9, #2
 80140ee:	fa5f f989 	uxtb.w	r9, r9
 80140f2:	3901      	subs	r1, #1
 80140f4:	464a      	mov	r2, r9
 80140f6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80140fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80140fc:	f7ff ff38 	bl	8013f70 <__exponent>
 8014100:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014102:	1813      	adds	r3, r2, r0
 8014104:	2a01      	cmp	r2, #1
 8014106:	4682      	mov	sl, r0
 8014108:	6123      	str	r3, [r4, #16]
 801410a:	dc02      	bgt.n	8014112 <_printf_float+0x12a>
 801410c:	6822      	ldr	r2, [r4, #0]
 801410e:	07d2      	lsls	r2, r2, #31
 8014110:	d501      	bpl.n	8014116 <_printf_float+0x12e>
 8014112:	3301      	adds	r3, #1
 8014114:	6123      	str	r3, [r4, #16]
 8014116:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801411a:	2b00      	cmp	r3, #0
 801411c:	d0a6      	beq.n	801406c <_printf_float+0x84>
 801411e:	232d      	movs	r3, #45	@ 0x2d
 8014120:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014124:	e7a2      	b.n	801406c <_printf_float+0x84>
 8014126:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801412a:	d1c4      	bne.n	80140b6 <_printf_float+0xce>
 801412c:	2b00      	cmp	r3, #0
 801412e:	d1c2      	bne.n	80140b6 <_printf_float+0xce>
 8014130:	2301      	movs	r3, #1
 8014132:	e7bf      	b.n	80140b4 <_printf_float+0xcc>
 8014134:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8014138:	d9db      	bls.n	80140f2 <_printf_float+0x10a>
 801413a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801413e:	d118      	bne.n	8014172 <_printf_float+0x18a>
 8014140:	2900      	cmp	r1, #0
 8014142:	6863      	ldr	r3, [r4, #4]
 8014144:	dd0b      	ble.n	801415e <_printf_float+0x176>
 8014146:	6121      	str	r1, [r4, #16]
 8014148:	b913      	cbnz	r3, 8014150 <_printf_float+0x168>
 801414a:	6822      	ldr	r2, [r4, #0]
 801414c:	07d0      	lsls	r0, r2, #31
 801414e:	d502      	bpl.n	8014156 <_printf_float+0x16e>
 8014150:	3301      	adds	r3, #1
 8014152:	440b      	add	r3, r1
 8014154:	6123      	str	r3, [r4, #16]
 8014156:	65a1      	str	r1, [r4, #88]	@ 0x58
 8014158:	f04f 0a00 	mov.w	sl, #0
 801415c:	e7db      	b.n	8014116 <_printf_float+0x12e>
 801415e:	b913      	cbnz	r3, 8014166 <_printf_float+0x17e>
 8014160:	6822      	ldr	r2, [r4, #0]
 8014162:	07d2      	lsls	r2, r2, #31
 8014164:	d501      	bpl.n	801416a <_printf_float+0x182>
 8014166:	3302      	adds	r3, #2
 8014168:	e7f4      	b.n	8014154 <_printf_float+0x16c>
 801416a:	2301      	movs	r3, #1
 801416c:	e7f2      	b.n	8014154 <_printf_float+0x16c>
 801416e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8014172:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014174:	4299      	cmp	r1, r3
 8014176:	db05      	blt.n	8014184 <_printf_float+0x19c>
 8014178:	6823      	ldr	r3, [r4, #0]
 801417a:	6121      	str	r1, [r4, #16]
 801417c:	07d8      	lsls	r0, r3, #31
 801417e:	d5ea      	bpl.n	8014156 <_printf_float+0x16e>
 8014180:	1c4b      	adds	r3, r1, #1
 8014182:	e7e7      	b.n	8014154 <_printf_float+0x16c>
 8014184:	2900      	cmp	r1, #0
 8014186:	bfd4      	ite	le
 8014188:	f1c1 0202 	rsble	r2, r1, #2
 801418c:	2201      	movgt	r2, #1
 801418e:	4413      	add	r3, r2
 8014190:	e7e0      	b.n	8014154 <_printf_float+0x16c>
 8014192:	6823      	ldr	r3, [r4, #0]
 8014194:	055a      	lsls	r2, r3, #21
 8014196:	d407      	bmi.n	80141a8 <_printf_float+0x1c0>
 8014198:	6923      	ldr	r3, [r4, #16]
 801419a:	4642      	mov	r2, r8
 801419c:	4631      	mov	r1, r6
 801419e:	4628      	mov	r0, r5
 80141a0:	47b8      	blx	r7
 80141a2:	3001      	adds	r0, #1
 80141a4:	d12a      	bne.n	80141fc <_printf_float+0x214>
 80141a6:	e76b      	b.n	8014080 <_printf_float+0x98>
 80141a8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80141ac:	f240 80e0 	bls.w	8014370 <_printf_float+0x388>
 80141b0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80141b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80141b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141bc:	d133      	bne.n	8014226 <_printf_float+0x23e>
 80141be:	4a38      	ldr	r2, [pc, #224]	@ (80142a0 <_printf_float+0x2b8>)
 80141c0:	2301      	movs	r3, #1
 80141c2:	4631      	mov	r1, r6
 80141c4:	4628      	mov	r0, r5
 80141c6:	47b8      	blx	r7
 80141c8:	3001      	adds	r0, #1
 80141ca:	f43f af59 	beq.w	8014080 <_printf_float+0x98>
 80141ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80141d2:	4543      	cmp	r3, r8
 80141d4:	db02      	blt.n	80141dc <_printf_float+0x1f4>
 80141d6:	6823      	ldr	r3, [r4, #0]
 80141d8:	07d8      	lsls	r0, r3, #31
 80141da:	d50f      	bpl.n	80141fc <_printf_float+0x214>
 80141dc:	9b05      	ldr	r3, [sp, #20]
 80141de:	465a      	mov	r2, fp
 80141e0:	4631      	mov	r1, r6
 80141e2:	4628      	mov	r0, r5
 80141e4:	47b8      	blx	r7
 80141e6:	3001      	adds	r0, #1
 80141e8:	f43f af4a 	beq.w	8014080 <_printf_float+0x98>
 80141ec:	f04f 0900 	mov.w	r9, #0
 80141f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80141f4:	f104 0a1a 	add.w	sl, r4, #26
 80141f8:	45c8      	cmp	r8, r9
 80141fa:	dc09      	bgt.n	8014210 <_printf_float+0x228>
 80141fc:	6823      	ldr	r3, [r4, #0]
 80141fe:	079b      	lsls	r3, r3, #30
 8014200:	f100 8107 	bmi.w	8014412 <_printf_float+0x42a>
 8014204:	68e0      	ldr	r0, [r4, #12]
 8014206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014208:	4298      	cmp	r0, r3
 801420a:	bfb8      	it	lt
 801420c:	4618      	movlt	r0, r3
 801420e:	e739      	b.n	8014084 <_printf_float+0x9c>
 8014210:	2301      	movs	r3, #1
 8014212:	4652      	mov	r2, sl
 8014214:	4631      	mov	r1, r6
 8014216:	4628      	mov	r0, r5
 8014218:	47b8      	blx	r7
 801421a:	3001      	adds	r0, #1
 801421c:	f43f af30 	beq.w	8014080 <_printf_float+0x98>
 8014220:	f109 0901 	add.w	r9, r9, #1
 8014224:	e7e8      	b.n	80141f8 <_printf_float+0x210>
 8014226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014228:	2b00      	cmp	r3, #0
 801422a:	dc3b      	bgt.n	80142a4 <_printf_float+0x2bc>
 801422c:	4a1c      	ldr	r2, [pc, #112]	@ (80142a0 <_printf_float+0x2b8>)
 801422e:	2301      	movs	r3, #1
 8014230:	4631      	mov	r1, r6
 8014232:	4628      	mov	r0, r5
 8014234:	47b8      	blx	r7
 8014236:	3001      	adds	r0, #1
 8014238:	f43f af22 	beq.w	8014080 <_printf_float+0x98>
 801423c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8014240:	ea59 0303 	orrs.w	r3, r9, r3
 8014244:	d102      	bne.n	801424c <_printf_float+0x264>
 8014246:	6823      	ldr	r3, [r4, #0]
 8014248:	07d9      	lsls	r1, r3, #31
 801424a:	d5d7      	bpl.n	80141fc <_printf_float+0x214>
 801424c:	9b05      	ldr	r3, [sp, #20]
 801424e:	465a      	mov	r2, fp
 8014250:	4631      	mov	r1, r6
 8014252:	4628      	mov	r0, r5
 8014254:	47b8      	blx	r7
 8014256:	3001      	adds	r0, #1
 8014258:	f43f af12 	beq.w	8014080 <_printf_float+0x98>
 801425c:	f04f 0a00 	mov.w	sl, #0
 8014260:	f104 0b1a 	add.w	fp, r4, #26
 8014264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014266:	425b      	negs	r3, r3
 8014268:	4553      	cmp	r3, sl
 801426a:	dc01      	bgt.n	8014270 <_printf_float+0x288>
 801426c:	464b      	mov	r3, r9
 801426e:	e794      	b.n	801419a <_printf_float+0x1b2>
 8014270:	2301      	movs	r3, #1
 8014272:	465a      	mov	r2, fp
 8014274:	4631      	mov	r1, r6
 8014276:	4628      	mov	r0, r5
 8014278:	47b8      	blx	r7
 801427a:	3001      	adds	r0, #1
 801427c:	f43f af00 	beq.w	8014080 <_printf_float+0x98>
 8014280:	f10a 0a01 	add.w	sl, sl, #1
 8014284:	e7ee      	b.n	8014264 <_printf_float+0x27c>
 8014286:	bf00      	nop
 8014288:	ffffffff 	.word	0xffffffff
 801428c:	7fefffff 	.word	0x7fefffff
 8014290:	08016ed0 	.word	0x08016ed0
 8014294:	08016ecc 	.word	0x08016ecc
 8014298:	08016ed8 	.word	0x08016ed8
 801429c:	08016ed4 	.word	0x08016ed4
 80142a0:	08016edc 	.word	0x08016edc
 80142a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80142a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80142aa:	4553      	cmp	r3, sl
 80142ac:	bfa8      	it	ge
 80142ae:	4653      	movge	r3, sl
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	4699      	mov	r9, r3
 80142b4:	dc37      	bgt.n	8014326 <_printf_float+0x33e>
 80142b6:	2300      	movs	r3, #0
 80142b8:	9307      	str	r3, [sp, #28]
 80142ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80142be:	f104 021a 	add.w	r2, r4, #26
 80142c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80142c4:	9907      	ldr	r1, [sp, #28]
 80142c6:	9306      	str	r3, [sp, #24]
 80142c8:	eba3 0309 	sub.w	r3, r3, r9
 80142cc:	428b      	cmp	r3, r1
 80142ce:	dc31      	bgt.n	8014334 <_printf_float+0x34c>
 80142d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142d2:	459a      	cmp	sl, r3
 80142d4:	dc3b      	bgt.n	801434e <_printf_float+0x366>
 80142d6:	6823      	ldr	r3, [r4, #0]
 80142d8:	07da      	lsls	r2, r3, #31
 80142da:	d438      	bmi.n	801434e <_printf_float+0x366>
 80142dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142de:	ebaa 0903 	sub.w	r9, sl, r3
 80142e2:	9b06      	ldr	r3, [sp, #24]
 80142e4:	ebaa 0303 	sub.w	r3, sl, r3
 80142e8:	4599      	cmp	r9, r3
 80142ea:	bfa8      	it	ge
 80142ec:	4699      	movge	r9, r3
 80142ee:	f1b9 0f00 	cmp.w	r9, #0
 80142f2:	dc34      	bgt.n	801435e <_printf_float+0x376>
 80142f4:	f04f 0800 	mov.w	r8, #0
 80142f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80142fc:	f104 0b1a 	add.w	fp, r4, #26
 8014300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014302:	ebaa 0303 	sub.w	r3, sl, r3
 8014306:	eba3 0309 	sub.w	r3, r3, r9
 801430a:	4543      	cmp	r3, r8
 801430c:	f77f af76 	ble.w	80141fc <_printf_float+0x214>
 8014310:	2301      	movs	r3, #1
 8014312:	465a      	mov	r2, fp
 8014314:	4631      	mov	r1, r6
 8014316:	4628      	mov	r0, r5
 8014318:	47b8      	blx	r7
 801431a:	3001      	adds	r0, #1
 801431c:	f43f aeb0 	beq.w	8014080 <_printf_float+0x98>
 8014320:	f108 0801 	add.w	r8, r8, #1
 8014324:	e7ec      	b.n	8014300 <_printf_float+0x318>
 8014326:	4642      	mov	r2, r8
 8014328:	4631      	mov	r1, r6
 801432a:	4628      	mov	r0, r5
 801432c:	47b8      	blx	r7
 801432e:	3001      	adds	r0, #1
 8014330:	d1c1      	bne.n	80142b6 <_printf_float+0x2ce>
 8014332:	e6a5      	b.n	8014080 <_printf_float+0x98>
 8014334:	2301      	movs	r3, #1
 8014336:	4631      	mov	r1, r6
 8014338:	4628      	mov	r0, r5
 801433a:	9206      	str	r2, [sp, #24]
 801433c:	47b8      	blx	r7
 801433e:	3001      	adds	r0, #1
 8014340:	f43f ae9e 	beq.w	8014080 <_printf_float+0x98>
 8014344:	9b07      	ldr	r3, [sp, #28]
 8014346:	9a06      	ldr	r2, [sp, #24]
 8014348:	3301      	adds	r3, #1
 801434a:	9307      	str	r3, [sp, #28]
 801434c:	e7b9      	b.n	80142c2 <_printf_float+0x2da>
 801434e:	9b05      	ldr	r3, [sp, #20]
 8014350:	465a      	mov	r2, fp
 8014352:	4631      	mov	r1, r6
 8014354:	4628      	mov	r0, r5
 8014356:	47b8      	blx	r7
 8014358:	3001      	adds	r0, #1
 801435a:	d1bf      	bne.n	80142dc <_printf_float+0x2f4>
 801435c:	e690      	b.n	8014080 <_printf_float+0x98>
 801435e:	9a06      	ldr	r2, [sp, #24]
 8014360:	464b      	mov	r3, r9
 8014362:	4442      	add	r2, r8
 8014364:	4631      	mov	r1, r6
 8014366:	4628      	mov	r0, r5
 8014368:	47b8      	blx	r7
 801436a:	3001      	adds	r0, #1
 801436c:	d1c2      	bne.n	80142f4 <_printf_float+0x30c>
 801436e:	e687      	b.n	8014080 <_printf_float+0x98>
 8014370:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8014374:	f1b9 0f01 	cmp.w	r9, #1
 8014378:	dc01      	bgt.n	801437e <_printf_float+0x396>
 801437a:	07db      	lsls	r3, r3, #31
 801437c:	d536      	bpl.n	80143ec <_printf_float+0x404>
 801437e:	2301      	movs	r3, #1
 8014380:	4642      	mov	r2, r8
 8014382:	4631      	mov	r1, r6
 8014384:	4628      	mov	r0, r5
 8014386:	47b8      	blx	r7
 8014388:	3001      	adds	r0, #1
 801438a:	f43f ae79 	beq.w	8014080 <_printf_float+0x98>
 801438e:	9b05      	ldr	r3, [sp, #20]
 8014390:	465a      	mov	r2, fp
 8014392:	4631      	mov	r1, r6
 8014394:	4628      	mov	r0, r5
 8014396:	47b8      	blx	r7
 8014398:	3001      	adds	r0, #1
 801439a:	f43f ae71 	beq.w	8014080 <_printf_float+0x98>
 801439e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80143a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80143a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143aa:	f109 39ff 	add.w	r9, r9, #4294967295
 80143ae:	d018      	beq.n	80143e2 <_printf_float+0x3fa>
 80143b0:	464b      	mov	r3, r9
 80143b2:	f108 0201 	add.w	r2, r8, #1
 80143b6:	4631      	mov	r1, r6
 80143b8:	4628      	mov	r0, r5
 80143ba:	47b8      	blx	r7
 80143bc:	3001      	adds	r0, #1
 80143be:	d10c      	bne.n	80143da <_printf_float+0x3f2>
 80143c0:	e65e      	b.n	8014080 <_printf_float+0x98>
 80143c2:	2301      	movs	r3, #1
 80143c4:	465a      	mov	r2, fp
 80143c6:	4631      	mov	r1, r6
 80143c8:	4628      	mov	r0, r5
 80143ca:	47b8      	blx	r7
 80143cc:	3001      	adds	r0, #1
 80143ce:	f43f ae57 	beq.w	8014080 <_printf_float+0x98>
 80143d2:	f108 0801 	add.w	r8, r8, #1
 80143d6:	45c8      	cmp	r8, r9
 80143d8:	dbf3      	blt.n	80143c2 <_printf_float+0x3da>
 80143da:	4653      	mov	r3, sl
 80143dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80143e0:	e6dc      	b.n	801419c <_printf_float+0x1b4>
 80143e2:	f04f 0800 	mov.w	r8, #0
 80143e6:	f104 0b1a 	add.w	fp, r4, #26
 80143ea:	e7f4      	b.n	80143d6 <_printf_float+0x3ee>
 80143ec:	2301      	movs	r3, #1
 80143ee:	4642      	mov	r2, r8
 80143f0:	e7e1      	b.n	80143b6 <_printf_float+0x3ce>
 80143f2:	2301      	movs	r3, #1
 80143f4:	464a      	mov	r2, r9
 80143f6:	4631      	mov	r1, r6
 80143f8:	4628      	mov	r0, r5
 80143fa:	47b8      	blx	r7
 80143fc:	3001      	adds	r0, #1
 80143fe:	f43f ae3f 	beq.w	8014080 <_printf_float+0x98>
 8014402:	f108 0801 	add.w	r8, r8, #1
 8014406:	68e3      	ldr	r3, [r4, #12]
 8014408:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801440a:	1a5b      	subs	r3, r3, r1
 801440c:	4543      	cmp	r3, r8
 801440e:	dcf0      	bgt.n	80143f2 <_printf_float+0x40a>
 8014410:	e6f8      	b.n	8014204 <_printf_float+0x21c>
 8014412:	f04f 0800 	mov.w	r8, #0
 8014416:	f104 0919 	add.w	r9, r4, #25
 801441a:	e7f4      	b.n	8014406 <_printf_float+0x41e>

0801441c <_printf_common>:
 801441c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014420:	4616      	mov	r6, r2
 8014422:	4698      	mov	r8, r3
 8014424:	688a      	ldr	r2, [r1, #8]
 8014426:	690b      	ldr	r3, [r1, #16]
 8014428:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801442c:	4293      	cmp	r3, r2
 801442e:	bfb8      	it	lt
 8014430:	4613      	movlt	r3, r2
 8014432:	6033      	str	r3, [r6, #0]
 8014434:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014438:	4607      	mov	r7, r0
 801443a:	460c      	mov	r4, r1
 801443c:	b10a      	cbz	r2, 8014442 <_printf_common+0x26>
 801443e:	3301      	adds	r3, #1
 8014440:	6033      	str	r3, [r6, #0]
 8014442:	6823      	ldr	r3, [r4, #0]
 8014444:	0699      	lsls	r1, r3, #26
 8014446:	bf42      	ittt	mi
 8014448:	6833      	ldrmi	r3, [r6, #0]
 801444a:	3302      	addmi	r3, #2
 801444c:	6033      	strmi	r3, [r6, #0]
 801444e:	6825      	ldr	r5, [r4, #0]
 8014450:	f015 0506 	ands.w	r5, r5, #6
 8014454:	d106      	bne.n	8014464 <_printf_common+0x48>
 8014456:	f104 0a19 	add.w	sl, r4, #25
 801445a:	68e3      	ldr	r3, [r4, #12]
 801445c:	6832      	ldr	r2, [r6, #0]
 801445e:	1a9b      	subs	r3, r3, r2
 8014460:	42ab      	cmp	r3, r5
 8014462:	dc26      	bgt.n	80144b2 <_printf_common+0x96>
 8014464:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014468:	6822      	ldr	r2, [r4, #0]
 801446a:	3b00      	subs	r3, #0
 801446c:	bf18      	it	ne
 801446e:	2301      	movne	r3, #1
 8014470:	0692      	lsls	r2, r2, #26
 8014472:	d42b      	bmi.n	80144cc <_printf_common+0xb0>
 8014474:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014478:	4641      	mov	r1, r8
 801447a:	4638      	mov	r0, r7
 801447c:	47c8      	blx	r9
 801447e:	3001      	adds	r0, #1
 8014480:	d01e      	beq.n	80144c0 <_printf_common+0xa4>
 8014482:	6823      	ldr	r3, [r4, #0]
 8014484:	6922      	ldr	r2, [r4, #16]
 8014486:	f003 0306 	and.w	r3, r3, #6
 801448a:	2b04      	cmp	r3, #4
 801448c:	bf02      	ittt	eq
 801448e:	68e5      	ldreq	r5, [r4, #12]
 8014490:	6833      	ldreq	r3, [r6, #0]
 8014492:	1aed      	subeq	r5, r5, r3
 8014494:	68a3      	ldr	r3, [r4, #8]
 8014496:	bf0c      	ite	eq
 8014498:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801449c:	2500      	movne	r5, #0
 801449e:	4293      	cmp	r3, r2
 80144a0:	bfc4      	itt	gt
 80144a2:	1a9b      	subgt	r3, r3, r2
 80144a4:	18ed      	addgt	r5, r5, r3
 80144a6:	2600      	movs	r6, #0
 80144a8:	341a      	adds	r4, #26
 80144aa:	42b5      	cmp	r5, r6
 80144ac:	d11a      	bne.n	80144e4 <_printf_common+0xc8>
 80144ae:	2000      	movs	r0, #0
 80144b0:	e008      	b.n	80144c4 <_printf_common+0xa8>
 80144b2:	2301      	movs	r3, #1
 80144b4:	4652      	mov	r2, sl
 80144b6:	4641      	mov	r1, r8
 80144b8:	4638      	mov	r0, r7
 80144ba:	47c8      	blx	r9
 80144bc:	3001      	adds	r0, #1
 80144be:	d103      	bne.n	80144c8 <_printf_common+0xac>
 80144c0:	f04f 30ff 	mov.w	r0, #4294967295
 80144c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144c8:	3501      	adds	r5, #1
 80144ca:	e7c6      	b.n	801445a <_printf_common+0x3e>
 80144cc:	18e1      	adds	r1, r4, r3
 80144ce:	1c5a      	adds	r2, r3, #1
 80144d0:	2030      	movs	r0, #48	@ 0x30
 80144d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80144d6:	4422      	add	r2, r4
 80144d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80144dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80144e0:	3302      	adds	r3, #2
 80144e2:	e7c7      	b.n	8014474 <_printf_common+0x58>
 80144e4:	2301      	movs	r3, #1
 80144e6:	4622      	mov	r2, r4
 80144e8:	4641      	mov	r1, r8
 80144ea:	4638      	mov	r0, r7
 80144ec:	47c8      	blx	r9
 80144ee:	3001      	adds	r0, #1
 80144f0:	d0e6      	beq.n	80144c0 <_printf_common+0xa4>
 80144f2:	3601      	adds	r6, #1
 80144f4:	e7d9      	b.n	80144aa <_printf_common+0x8e>
	...

080144f8 <_printf_i>:
 80144f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80144fc:	7e0f      	ldrb	r7, [r1, #24]
 80144fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014500:	2f78      	cmp	r7, #120	@ 0x78
 8014502:	4691      	mov	r9, r2
 8014504:	4680      	mov	r8, r0
 8014506:	460c      	mov	r4, r1
 8014508:	469a      	mov	sl, r3
 801450a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801450e:	d807      	bhi.n	8014520 <_printf_i+0x28>
 8014510:	2f62      	cmp	r7, #98	@ 0x62
 8014512:	d80a      	bhi.n	801452a <_printf_i+0x32>
 8014514:	2f00      	cmp	r7, #0
 8014516:	f000 80d1 	beq.w	80146bc <_printf_i+0x1c4>
 801451a:	2f58      	cmp	r7, #88	@ 0x58
 801451c:	f000 80b8 	beq.w	8014690 <_printf_i+0x198>
 8014520:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014524:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014528:	e03a      	b.n	80145a0 <_printf_i+0xa8>
 801452a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801452e:	2b15      	cmp	r3, #21
 8014530:	d8f6      	bhi.n	8014520 <_printf_i+0x28>
 8014532:	a101      	add	r1, pc, #4	@ (adr r1, 8014538 <_printf_i+0x40>)
 8014534:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014538:	08014591 	.word	0x08014591
 801453c:	080145a5 	.word	0x080145a5
 8014540:	08014521 	.word	0x08014521
 8014544:	08014521 	.word	0x08014521
 8014548:	08014521 	.word	0x08014521
 801454c:	08014521 	.word	0x08014521
 8014550:	080145a5 	.word	0x080145a5
 8014554:	08014521 	.word	0x08014521
 8014558:	08014521 	.word	0x08014521
 801455c:	08014521 	.word	0x08014521
 8014560:	08014521 	.word	0x08014521
 8014564:	080146a3 	.word	0x080146a3
 8014568:	080145cf 	.word	0x080145cf
 801456c:	0801465d 	.word	0x0801465d
 8014570:	08014521 	.word	0x08014521
 8014574:	08014521 	.word	0x08014521
 8014578:	080146c5 	.word	0x080146c5
 801457c:	08014521 	.word	0x08014521
 8014580:	080145cf 	.word	0x080145cf
 8014584:	08014521 	.word	0x08014521
 8014588:	08014521 	.word	0x08014521
 801458c:	08014665 	.word	0x08014665
 8014590:	6833      	ldr	r3, [r6, #0]
 8014592:	1d1a      	adds	r2, r3, #4
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	6032      	str	r2, [r6, #0]
 8014598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801459c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80145a0:	2301      	movs	r3, #1
 80145a2:	e09c      	b.n	80146de <_printf_i+0x1e6>
 80145a4:	6833      	ldr	r3, [r6, #0]
 80145a6:	6820      	ldr	r0, [r4, #0]
 80145a8:	1d19      	adds	r1, r3, #4
 80145aa:	6031      	str	r1, [r6, #0]
 80145ac:	0606      	lsls	r6, r0, #24
 80145ae:	d501      	bpl.n	80145b4 <_printf_i+0xbc>
 80145b0:	681d      	ldr	r5, [r3, #0]
 80145b2:	e003      	b.n	80145bc <_printf_i+0xc4>
 80145b4:	0645      	lsls	r5, r0, #25
 80145b6:	d5fb      	bpl.n	80145b0 <_printf_i+0xb8>
 80145b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80145bc:	2d00      	cmp	r5, #0
 80145be:	da03      	bge.n	80145c8 <_printf_i+0xd0>
 80145c0:	232d      	movs	r3, #45	@ 0x2d
 80145c2:	426d      	negs	r5, r5
 80145c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80145c8:	4858      	ldr	r0, [pc, #352]	@ (801472c <_printf_i+0x234>)
 80145ca:	230a      	movs	r3, #10
 80145cc:	e011      	b.n	80145f2 <_printf_i+0xfa>
 80145ce:	6821      	ldr	r1, [r4, #0]
 80145d0:	6833      	ldr	r3, [r6, #0]
 80145d2:	0608      	lsls	r0, r1, #24
 80145d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80145d8:	d402      	bmi.n	80145e0 <_printf_i+0xe8>
 80145da:	0649      	lsls	r1, r1, #25
 80145dc:	bf48      	it	mi
 80145de:	b2ad      	uxthmi	r5, r5
 80145e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80145e2:	4852      	ldr	r0, [pc, #328]	@ (801472c <_printf_i+0x234>)
 80145e4:	6033      	str	r3, [r6, #0]
 80145e6:	bf14      	ite	ne
 80145e8:	230a      	movne	r3, #10
 80145ea:	2308      	moveq	r3, #8
 80145ec:	2100      	movs	r1, #0
 80145ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80145f2:	6866      	ldr	r6, [r4, #4]
 80145f4:	60a6      	str	r6, [r4, #8]
 80145f6:	2e00      	cmp	r6, #0
 80145f8:	db05      	blt.n	8014606 <_printf_i+0x10e>
 80145fa:	6821      	ldr	r1, [r4, #0]
 80145fc:	432e      	orrs	r6, r5
 80145fe:	f021 0104 	bic.w	r1, r1, #4
 8014602:	6021      	str	r1, [r4, #0]
 8014604:	d04b      	beq.n	801469e <_printf_i+0x1a6>
 8014606:	4616      	mov	r6, r2
 8014608:	fbb5 f1f3 	udiv	r1, r5, r3
 801460c:	fb03 5711 	mls	r7, r3, r1, r5
 8014610:	5dc7      	ldrb	r7, [r0, r7]
 8014612:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014616:	462f      	mov	r7, r5
 8014618:	42bb      	cmp	r3, r7
 801461a:	460d      	mov	r5, r1
 801461c:	d9f4      	bls.n	8014608 <_printf_i+0x110>
 801461e:	2b08      	cmp	r3, #8
 8014620:	d10b      	bne.n	801463a <_printf_i+0x142>
 8014622:	6823      	ldr	r3, [r4, #0]
 8014624:	07df      	lsls	r7, r3, #31
 8014626:	d508      	bpl.n	801463a <_printf_i+0x142>
 8014628:	6923      	ldr	r3, [r4, #16]
 801462a:	6861      	ldr	r1, [r4, #4]
 801462c:	4299      	cmp	r1, r3
 801462e:	bfde      	ittt	le
 8014630:	2330      	movle	r3, #48	@ 0x30
 8014632:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014636:	f106 36ff 	addle.w	r6, r6, #4294967295
 801463a:	1b92      	subs	r2, r2, r6
 801463c:	6122      	str	r2, [r4, #16]
 801463e:	f8cd a000 	str.w	sl, [sp]
 8014642:	464b      	mov	r3, r9
 8014644:	aa03      	add	r2, sp, #12
 8014646:	4621      	mov	r1, r4
 8014648:	4640      	mov	r0, r8
 801464a:	f7ff fee7 	bl	801441c <_printf_common>
 801464e:	3001      	adds	r0, #1
 8014650:	d14a      	bne.n	80146e8 <_printf_i+0x1f0>
 8014652:	f04f 30ff 	mov.w	r0, #4294967295
 8014656:	b004      	add	sp, #16
 8014658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801465c:	6823      	ldr	r3, [r4, #0]
 801465e:	f043 0320 	orr.w	r3, r3, #32
 8014662:	6023      	str	r3, [r4, #0]
 8014664:	4832      	ldr	r0, [pc, #200]	@ (8014730 <_printf_i+0x238>)
 8014666:	2778      	movs	r7, #120	@ 0x78
 8014668:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801466c:	6823      	ldr	r3, [r4, #0]
 801466e:	6831      	ldr	r1, [r6, #0]
 8014670:	061f      	lsls	r7, r3, #24
 8014672:	f851 5b04 	ldr.w	r5, [r1], #4
 8014676:	d402      	bmi.n	801467e <_printf_i+0x186>
 8014678:	065f      	lsls	r7, r3, #25
 801467a:	bf48      	it	mi
 801467c:	b2ad      	uxthmi	r5, r5
 801467e:	6031      	str	r1, [r6, #0]
 8014680:	07d9      	lsls	r1, r3, #31
 8014682:	bf44      	itt	mi
 8014684:	f043 0320 	orrmi.w	r3, r3, #32
 8014688:	6023      	strmi	r3, [r4, #0]
 801468a:	b11d      	cbz	r5, 8014694 <_printf_i+0x19c>
 801468c:	2310      	movs	r3, #16
 801468e:	e7ad      	b.n	80145ec <_printf_i+0xf4>
 8014690:	4826      	ldr	r0, [pc, #152]	@ (801472c <_printf_i+0x234>)
 8014692:	e7e9      	b.n	8014668 <_printf_i+0x170>
 8014694:	6823      	ldr	r3, [r4, #0]
 8014696:	f023 0320 	bic.w	r3, r3, #32
 801469a:	6023      	str	r3, [r4, #0]
 801469c:	e7f6      	b.n	801468c <_printf_i+0x194>
 801469e:	4616      	mov	r6, r2
 80146a0:	e7bd      	b.n	801461e <_printf_i+0x126>
 80146a2:	6833      	ldr	r3, [r6, #0]
 80146a4:	6825      	ldr	r5, [r4, #0]
 80146a6:	6961      	ldr	r1, [r4, #20]
 80146a8:	1d18      	adds	r0, r3, #4
 80146aa:	6030      	str	r0, [r6, #0]
 80146ac:	062e      	lsls	r6, r5, #24
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	d501      	bpl.n	80146b6 <_printf_i+0x1be>
 80146b2:	6019      	str	r1, [r3, #0]
 80146b4:	e002      	b.n	80146bc <_printf_i+0x1c4>
 80146b6:	0668      	lsls	r0, r5, #25
 80146b8:	d5fb      	bpl.n	80146b2 <_printf_i+0x1ba>
 80146ba:	8019      	strh	r1, [r3, #0]
 80146bc:	2300      	movs	r3, #0
 80146be:	6123      	str	r3, [r4, #16]
 80146c0:	4616      	mov	r6, r2
 80146c2:	e7bc      	b.n	801463e <_printf_i+0x146>
 80146c4:	6833      	ldr	r3, [r6, #0]
 80146c6:	1d1a      	adds	r2, r3, #4
 80146c8:	6032      	str	r2, [r6, #0]
 80146ca:	681e      	ldr	r6, [r3, #0]
 80146cc:	6862      	ldr	r2, [r4, #4]
 80146ce:	2100      	movs	r1, #0
 80146d0:	4630      	mov	r0, r6
 80146d2:	f7eb fdb5 	bl	8000240 <memchr>
 80146d6:	b108      	cbz	r0, 80146dc <_printf_i+0x1e4>
 80146d8:	1b80      	subs	r0, r0, r6
 80146da:	6060      	str	r0, [r4, #4]
 80146dc:	6863      	ldr	r3, [r4, #4]
 80146de:	6123      	str	r3, [r4, #16]
 80146e0:	2300      	movs	r3, #0
 80146e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80146e6:	e7aa      	b.n	801463e <_printf_i+0x146>
 80146e8:	6923      	ldr	r3, [r4, #16]
 80146ea:	4632      	mov	r2, r6
 80146ec:	4649      	mov	r1, r9
 80146ee:	4640      	mov	r0, r8
 80146f0:	47d0      	blx	sl
 80146f2:	3001      	adds	r0, #1
 80146f4:	d0ad      	beq.n	8014652 <_printf_i+0x15a>
 80146f6:	6823      	ldr	r3, [r4, #0]
 80146f8:	079b      	lsls	r3, r3, #30
 80146fa:	d413      	bmi.n	8014724 <_printf_i+0x22c>
 80146fc:	68e0      	ldr	r0, [r4, #12]
 80146fe:	9b03      	ldr	r3, [sp, #12]
 8014700:	4298      	cmp	r0, r3
 8014702:	bfb8      	it	lt
 8014704:	4618      	movlt	r0, r3
 8014706:	e7a6      	b.n	8014656 <_printf_i+0x15e>
 8014708:	2301      	movs	r3, #1
 801470a:	4632      	mov	r2, r6
 801470c:	4649      	mov	r1, r9
 801470e:	4640      	mov	r0, r8
 8014710:	47d0      	blx	sl
 8014712:	3001      	adds	r0, #1
 8014714:	d09d      	beq.n	8014652 <_printf_i+0x15a>
 8014716:	3501      	adds	r5, #1
 8014718:	68e3      	ldr	r3, [r4, #12]
 801471a:	9903      	ldr	r1, [sp, #12]
 801471c:	1a5b      	subs	r3, r3, r1
 801471e:	42ab      	cmp	r3, r5
 8014720:	dcf2      	bgt.n	8014708 <_printf_i+0x210>
 8014722:	e7eb      	b.n	80146fc <_printf_i+0x204>
 8014724:	2500      	movs	r5, #0
 8014726:	f104 0619 	add.w	r6, r4, #25
 801472a:	e7f5      	b.n	8014718 <_printf_i+0x220>
 801472c:	08016ede 	.word	0x08016ede
 8014730:	08016eef 	.word	0x08016eef

08014734 <std>:
 8014734:	2300      	movs	r3, #0
 8014736:	b510      	push	{r4, lr}
 8014738:	4604      	mov	r4, r0
 801473a:	e9c0 3300 	strd	r3, r3, [r0]
 801473e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014742:	6083      	str	r3, [r0, #8]
 8014744:	8181      	strh	r1, [r0, #12]
 8014746:	6643      	str	r3, [r0, #100]	@ 0x64
 8014748:	81c2      	strh	r2, [r0, #14]
 801474a:	6183      	str	r3, [r0, #24]
 801474c:	4619      	mov	r1, r3
 801474e:	2208      	movs	r2, #8
 8014750:	305c      	adds	r0, #92	@ 0x5c
 8014752:	f000 f9f9 	bl	8014b48 <memset>
 8014756:	4b0d      	ldr	r3, [pc, #52]	@ (801478c <std+0x58>)
 8014758:	6263      	str	r3, [r4, #36]	@ 0x24
 801475a:	4b0d      	ldr	r3, [pc, #52]	@ (8014790 <std+0x5c>)
 801475c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801475e:	4b0d      	ldr	r3, [pc, #52]	@ (8014794 <std+0x60>)
 8014760:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014762:	4b0d      	ldr	r3, [pc, #52]	@ (8014798 <std+0x64>)
 8014764:	6323      	str	r3, [r4, #48]	@ 0x30
 8014766:	4b0d      	ldr	r3, [pc, #52]	@ (801479c <std+0x68>)
 8014768:	6224      	str	r4, [r4, #32]
 801476a:	429c      	cmp	r4, r3
 801476c:	d006      	beq.n	801477c <std+0x48>
 801476e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014772:	4294      	cmp	r4, r2
 8014774:	d002      	beq.n	801477c <std+0x48>
 8014776:	33d0      	adds	r3, #208	@ 0xd0
 8014778:	429c      	cmp	r4, r3
 801477a:	d105      	bne.n	8014788 <std+0x54>
 801477c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014784:	f000 baca 	b.w	8014d1c <__retarget_lock_init_recursive>
 8014788:	bd10      	pop	{r4, pc}
 801478a:	bf00      	nop
 801478c:	08014999 	.word	0x08014999
 8014790:	080149bb 	.word	0x080149bb
 8014794:	080149f3 	.word	0x080149f3
 8014798:	08014a17 	.word	0x08014a17
 801479c:	2000d8e0 	.word	0x2000d8e0

080147a0 <stdio_exit_handler>:
 80147a0:	4a02      	ldr	r2, [pc, #8]	@ (80147ac <stdio_exit_handler+0xc>)
 80147a2:	4903      	ldr	r1, [pc, #12]	@ (80147b0 <stdio_exit_handler+0x10>)
 80147a4:	4803      	ldr	r0, [pc, #12]	@ (80147b4 <stdio_exit_handler+0x14>)
 80147a6:	f000 b869 	b.w	801487c <_fwalk_sglue>
 80147aa:	bf00      	nop
 80147ac:	200000f0 	.word	0x200000f0
 80147b0:	08016421 	.word	0x08016421
 80147b4:	20000100 	.word	0x20000100

080147b8 <cleanup_stdio>:
 80147b8:	6841      	ldr	r1, [r0, #4]
 80147ba:	4b0c      	ldr	r3, [pc, #48]	@ (80147ec <cleanup_stdio+0x34>)
 80147bc:	4299      	cmp	r1, r3
 80147be:	b510      	push	{r4, lr}
 80147c0:	4604      	mov	r4, r0
 80147c2:	d001      	beq.n	80147c8 <cleanup_stdio+0x10>
 80147c4:	f001 fe2c 	bl	8016420 <_fflush_r>
 80147c8:	68a1      	ldr	r1, [r4, #8]
 80147ca:	4b09      	ldr	r3, [pc, #36]	@ (80147f0 <cleanup_stdio+0x38>)
 80147cc:	4299      	cmp	r1, r3
 80147ce:	d002      	beq.n	80147d6 <cleanup_stdio+0x1e>
 80147d0:	4620      	mov	r0, r4
 80147d2:	f001 fe25 	bl	8016420 <_fflush_r>
 80147d6:	68e1      	ldr	r1, [r4, #12]
 80147d8:	4b06      	ldr	r3, [pc, #24]	@ (80147f4 <cleanup_stdio+0x3c>)
 80147da:	4299      	cmp	r1, r3
 80147dc:	d004      	beq.n	80147e8 <cleanup_stdio+0x30>
 80147de:	4620      	mov	r0, r4
 80147e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147e4:	f001 be1c 	b.w	8016420 <_fflush_r>
 80147e8:	bd10      	pop	{r4, pc}
 80147ea:	bf00      	nop
 80147ec:	2000d8e0 	.word	0x2000d8e0
 80147f0:	2000d948 	.word	0x2000d948
 80147f4:	2000d9b0 	.word	0x2000d9b0

080147f8 <global_stdio_init.part.0>:
 80147f8:	b510      	push	{r4, lr}
 80147fa:	4b0b      	ldr	r3, [pc, #44]	@ (8014828 <global_stdio_init.part.0+0x30>)
 80147fc:	4c0b      	ldr	r4, [pc, #44]	@ (801482c <global_stdio_init.part.0+0x34>)
 80147fe:	4a0c      	ldr	r2, [pc, #48]	@ (8014830 <global_stdio_init.part.0+0x38>)
 8014800:	601a      	str	r2, [r3, #0]
 8014802:	4620      	mov	r0, r4
 8014804:	2200      	movs	r2, #0
 8014806:	2104      	movs	r1, #4
 8014808:	f7ff ff94 	bl	8014734 <std>
 801480c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014810:	2201      	movs	r2, #1
 8014812:	2109      	movs	r1, #9
 8014814:	f7ff ff8e 	bl	8014734 <std>
 8014818:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801481c:	2202      	movs	r2, #2
 801481e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014822:	2112      	movs	r1, #18
 8014824:	f7ff bf86 	b.w	8014734 <std>
 8014828:	2000da18 	.word	0x2000da18
 801482c:	2000d8e0 	.word	0x2000d8e0
 8014830:	080147a1 	.word	0x080147a1

08014834 <__sfp_lock_acquire>:
 8014834:	4801      	ldr	r0, [pc, #4]	@ (801483c <__sfp_lock_acquire+0x8>)
 8014836:	f000 ba72 	b.w	8014d1e <__retarget_lock_acquire_recursive>
 801483a:	bf00      	nop
 801483c:	2000da21 	.word	0x2000da21

08014840 <__sfp_lock_release>:
 8014840:	4801      	ldr	r0, [pc, #4]	@ (8014848 <__sfp_lock_release+0x8>)
 8014842:	f000 ba6d 	b.w	8014d20 <__retarget_lock_release_recursive>
 8014846:	bf00      	nop
 8014848:	2000da21 	.word	0x2000da21

0801484c <__sinit>:
 801484c:	b510      	push	{r4, lr}
 801484e:	4604      	mov	r4, r0
 8014850:	f7ff fff0 	bl	8014834 <__sfp_lock_acquire>
 8014854:	6a23      	ldr	r3, [r4, #32]
 8014856:	b11b      	cbz	r3, 8014860 <__sinit+0x14>
 8014858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801485c:	f7ff bff0 	b.w	8014840 <__sfp_lock_release>
 8014860:	4b04      	ldr	r3, [pc, #16]	@ (8014874 <__sinit+0x28>)
 8014862:	6223      	str	r3, [r4, #32]
 8014864:	4b04      	ldr	r3, [pc, #16]	@ (8014878 <__sinit+0x2c>)
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d1f5      	bne.n	8014858 <__sinit+0xc>
 801486c:	f7ff ffc4 	bl	80147f8 <global_stdio_init.part.0>
 8014870:	e7f2      	b.n	8014858 <__sinit+0xc>
 8014872:	bf00      	nop
 8014874:	080147b9 	.word	0x080147b9
 8014878:	2000da18 	.word	0x2000da18

0801487c <_fwalk_sglue>:
 801487c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014880:	4607      	mov	r7, r0
 8014882:	4688      	mov	r8, r1
 8014884:	4614      	mov	r4, r2
 8014886:	2600      	movs	r6, #0
 8014888:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801488c:	f1b9 0901 	subs.w	r9, r9, #1
 8014890:	d505      	bpl.n	801489e <_fwalk_sglue+0x22>
 8014892:	6824      	ldr	r4, [r4, #0]
 8014894:	2c00      	cmp	r4, #0
 8014896:	d1f7      	bne.n	8014888 <_fwalk_sglue+0xc>
 8014898:	4630      	mov	r0, r6
 801489a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801489e:	89ab      	ldrh	r3, [r5, #12]
 80148a0:	2b01      	cmp	r3, #1
 80148a2:	d907      	bls.n	80148b4 <_fwalk_sglue+0x38>
 80148a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80148a8:	3301      	adds	r3, #1
 80148aa:	d003      	beq.n	80148b4 <_fwalk_sglue+0x38>
 80148ac:	4629      	mov	r1, r5
 80148ae:	4638      	mov	r0, r7
 80148b0:	47c0      	blx	r8
 80148b2:	4306      	orrs	r6, r0
 80148b4:	3568      	adds	r5, #104	@ 0x68
 80148b6:	e7e9      	b.n	801488c <_fwalk_sglue+0x10>

080148b8 <iprintf>:
 80148b8:	b40f      	push	{r0, r1, r2, r3}
 80148ba:	b507      	push	{r0, r1, r2, lr}
 80148bc:	4906      	ldr	r1, [pc, #24]	@ (80148d8 <iprintf+0x20>)
 80148be:	ab04      	add	r3, sp, #16
 80148c0:	6808      	ldr	r0, [r1, #0]
 80148c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80148c6:	6881      	ldr	r1, [r0, #8]
 80148c8:	9301      	str	r3, [sp, #4]
 80148ca:	f001 fc0d 	bl	80160e8 <_vfiprintf_r>
 80148ce:	b003      	add	sp, #12
 80148d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80148d4:	b004      	add	sp, #16
 80148d6:	4770      	bx	lr
 80148d8:	200000fc 	.word	0x200000fc

080148dc <_puts_r>:
 80148dc:	6a03      	ldr	r3, [r0, #32]
 80148de:	b570      	push	{r4, r5, r6, lr}
 80148e0:	6884      	ldr	r4, [r0, #8]
 80148e2:	4605      	mov	r5, r0
 80148e4:	460e      	mov	r6, r1
 80148e6:	b90b      	cbnz	r3, 80148ec <_puts_r+0x10>
 80148e8:	f7ff ffb0 	bl	801484c <__sinit>
 80148ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80148ee:	07db      	lsls	r3, r3, #31
 80148f0:	d405      	bmi.n	80148fe <_puts_r+0x22>
 80148f2:	89a3      	ldrh	r3, [r4, #12]
 80148f4:	0598      	lsls	r0, r3, #22
 80148f6:	d402      	bmi.n	80148fe <_puts_r+0x22>
 80148f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80148fa:	f000 fa10 	bl	8014d1e <__retarget_lock_acquire_recursive>
 80148fe:	89a3      	ldrh	r3, [r4, #12]
 8014900:	0719      	lsls	r1, r3, #28
 8014902:	d502      	bpl.n	801490a <_puts_r+0x2e>
 8014904:	6923      	ldr	r3, [r4, #16]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d135      	bne.n	8014976 <_puts_r+0x9a>
 801490a:	4621      	mov	r1, r4
 801490c:	4628      	mov	r0, r5
 801490e:	f000 f8c5 	bl	8014a9c <__swsetup_r>
 8014912:	b380      	cbz	r0, 8014976 <_puts_r+0x9a>
 8014914:	f04f 35ff 	mov.w	r5, #4294967295
 8014918:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801491a:	07da      	lsls	r2, r3, #31
 801491c:	d405      	bmi.n	801492a <_puts_r+0x4e>
 801491e:	89a3      	ldrh	r3, [r4, #12]
 8014920:	059b      	lsls	r3, r3, #22
 8014922:	d402      	bmi.n	801492a <_puts_r+0x4e>
 8014924:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014926:	f000 f9fb 	bl	8014d20 <__retarget_lock_release_recursive>
 801492a:	4628      	mov	r0, r5
 801492c:	bd70      	pop	{r4, r5, r6, pc}
 801492e:	2b00      	cmp	r3, #0
 8014930:	da04      	bge.n	801493c <_puts_r+0x60>
 8014932:	69a2      	ldr	r2, [r4, #24]
 8014934:	429a      	cmp	r2, r3
 8014936:	dc17      	bgt.n	8014968 <_puts_r+0x8c>
 8014938:	290a      	cmp	r1, #10
 801493a:	d015      	beq.n	8014968 <_puts_r+0x8c>
 801493c:	6823      	ldr	r3, [r4, #0]
 801493e:	1c5a      	adds	r2, r3, #1
 8014940:	6022      	str	r2, [r4, #0]
 8014942:	7019      	strb	r1, [r3, #0]
 8014944:	68a3      	ldr	r3, [r4, #8]
 8014946:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801494a:	3b01      	subs	r3, #1
 801494c:	60a3      	str	r3, [r4, #8]
 801494e:	2900      	cmp	r1, #0
 8014950:	d1ed      	bne.n	801492e <_puts_r+0x52>
 8014952:	2b00      	cmp	r3, #0
 8014954:	da11      	bge.n	801497a <_puts_r+0x9e>
 8014956:	4622      	mov	r2, r4
 8014958:	210a      	movs	r1, #10
 801495a:	4628      	mov	r0, r5
 801495c:	f000 f85f 	bl	8014a1e <__swbuf_r>
 8014960:	3001      	adds	r0, #1
 8014962:	d0d7      	beq.n	8014914 <_puts_r+0x38>
 8014964:	250a      	movs	r5, #10
 8014966:	e7d7      	b.n	8014918 <_puts_r+0x3c>
 8014968:	4622      	mov	r2, r4
 801496a:	4628      	mov	r0, r5
 801496c:	f000 f857 	bl	8014a1e <__swbuf_r>
 8014970:	3001      	adds	r0, #1
 8014972:	d1e7      	bne.n	8014944 <_puts_r+0x68>
 8014974:	e7ce      	b.n	8014914 <_puts_r+0x38>
 8014976:	3e01      	subs	r6, #1
 8014978:	e7e4      	b.n	8014944 <_puts_r+0x68>
 801497a:	6823      	ldr	r3, [r4, #0]
 801497c:	1c5a      	adds	r2, r3, #1
 801497e:	6022      	str	r2, [r4, #0]
 8014980:	220a      	movs	r2, #10
 8014982:	701a      	strb	r2, [r3, #0]
 8014984:	e7ee      	b.n	8014964 <_puts_r+0x88>
	...

08014988 <puts>:
 8014988:	4b02      	ldr	r3, [pc, #8]	@ (8014994 <puts+0xc>)
 801498a:	4601      	mov	r1, r0
 801498c:	6818      	ldr	r0, [r3, #0]
 801498e:	f7ff bfa5 	b.w	80148dc <_puts_r>
 8014992:	bf00      	nop
 8014994:	200000fc 	.word	0x200000fc

08014998 <__sread>:
 8014998:	b510      	push	{r4, lr}
 801499a:	460c      	mov	r4, r1
 801499c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149a0:	f000 f95e 	bl	8014c60 <_read_r>
 80149a4:	2800      	cmp	r0, #0
 80149a6:	bfab      	itete	ge
 80149a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80149aa:	89a3      	ldrhlt	r3, [r4, #12]
 80149ac:	181b      	addge	r3, r3, r0
 80149ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80149b2:	bfac      	ite	ge
 80149b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80149b6:	81a3      	strhlt	r3, [r4, #12]
 80149b8:	bd10      	pop	{r4, pc}

080149ba <__swrite>:
 80149ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149be:	461f      	mov	r7, r3
 80149c0:	898b      	ldrh	r3, [r1, #12]
 80149c2:	05db      	lsls	r3, r3, #23
 80149c4:	4605      	mov	r5, r0
 80149c6:	460c      	mov	r4, r1
 80149c8:	4616      	mov	r6, r2
 80149ca:	d505      	bpl.n	80149d8 <__swrite+0x1e>
 80149cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149d0:	2302      	movs	r3, #2
 80149d2:	2200      	movs	r2, #0
 80149d4:	f000 f932 	bl	8014c3c <_lseek_r>
 80149d8:	89a3      	ldrh	r3, [r4, #12]
 80149da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80149de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80149e2:	81a3      	strh	r3, [r4, #12]
 80149e4:	4632      	mov	r2, r6
 80149e6:	463b      	mov	r3, r7
 80149e8:	4628      	mov	r0, r5
 80149ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149ee:	f000 b959 	b.w	8014ca4 <_write_r>

080149f2 <__sseek>:
 80149f2:	b510      	push	{r4, lr}
 80149f4:	460c      	mov	r4, r1
 80149f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149fa:	f000 f91f 	bl	8014c3c <_lseek_r>
 80149fe:	1c43      	adds	r3, r0, #1
 8014a00:	89a3      	ldrh	r3, [r4, #12]
 8014a02:	bf15      	itete	ne
 8014a04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014a06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014a0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014a0e:	81a3      	strheq	r3, [r4, #12]
 8014a10:	bf18      	it	ne
 8014a12:	81a3      	strhne	r3, [r4, #12]
 8014a14:	bd10      	pop	{r4, pc}

08014a16 <__sclose>:
 8014a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a1a:	f000 b8a1 	b.w	8014b60 <_close_r>

08014a1e <__swbuf_r>:
 8014a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a20:	460e      	mov	r6, r1
 8014a22:	4614      	mov	r4, r2
 8014a24:	4605      	mov	r5, r0
 8014a26:	b118      	cbz	r0, 8014a30 <__swbuf_r+0x12>
 8014a28:	6a03      	ldr	r3, [r0, #32]
 8014a2a:	b90b      	cbnz	r3, 8014a30 <__swbuf_r+0x12>
 8014a2c:	f7ff ff0e 	bl	801484c <__sinit>
 8014a30:	69a3      	ldr	r3, [r4, #24]
 8014a32:	60a3      	str	r3, [r4, #8]
 8014a34:	89a3      	ldrh	r3, [r4, #12]
 8014a36:	071a      	lsls	r2, r3, #28
 8014a38:	d501      	bpl.n	8014a3e <__swbuf_r+0x20>
 8014a3a:	6923      	ldr	r3, [r4, #16]
 8014a3c:	b943      	cbnz	r3, 8014a50 <__swbuf_r+0x32>
 8014a3e:	4621      	mov	r1, r4
 8014a40:	4628      	mov	r0, r5
 8014a42:	f000 f82b 	bl	8014a9c <__swsetup_r>
 8014a46:	b118      	cbz	r0, 8014a50 <__swbuf_r+0x32>
 8014a48:	f04f 37ff 	mov.w	r7, #4294967295
 8014a4c:	4638      	mov	r0, r7
 8014a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a50:	6823      	ldr	r3, [r4, #0]
 8014a52:	6922      	ldr	r2, [r4, #16]
 8014a54:	1a98      	subs	r0, r3, r2
 8014a56:	6963      	ldr	r3, [r4, #20]
 8014a58:	b2f6      	uxtb	r6, r6
 8014a5a:	4283      	cmp	r3, r0
 8014a5c:	4637      	mov	r7, r6
 8014a5e:	dc05      	bgt.n	8014a6c <__swbuf_r+0x4e>
 8014a60:	4621      	mov	r1, r4
 8014a62:	4628      	mov	r0, r5
 8014a64:	f001 fcdc 	bl	8016420 <_fflush_r>
 8014a68:	2800      	cmp	r0, #0
 8014a6a:	d1ed      	bne.n	8014a48 <__swbuf_r+0x2a>
 8014a6c:	68a3      	ldr	r3, [r4, #8]
 8014a6e:	3b01      	subs	r3, #1
 8014a70:	60a3      	str	r3, [r4, #8]
 8014a72:	6823      	ldr	r3, [r4, #0]
 8014a74:	1c5a      	adds	r2, r3, #1
 8014a76:	6022      	str	r2, [r4, #0]
 8014a78:	701e      	strb	r6, [r3, #0]
 8014a7a:	6962      	ldr	r2, [r4, #20]
 8014a7c:	1c43      	adds	r3, r0, #1
 8014a7e:	429a      	cmp	r2, r3
 8014a80:	d004      	beq.n	8014a8c <__swbuf_r+0x6e>
 8014a82:	89a3      	ldrh	r3, [r4, #12]
 8014a84:	07db      	lsls	r3, r3, #31
 8014a86:	d5e1      	bpl.n	8014a4c <__swbuf_r+0x2e>
 8014a88:	2e0a      	cmp	r6, #10
 8014a8a:	d1df      	bne.n	8014a4c <__swbuf_r+0x2e>
 8014a8c:	4621      	mov	r1, r4
 8014a8e:	4628      	mov	r0, r5
 8014a90:	f001 fcc6 	bl	8016420 <_fflush_r>
 8014a94:	2800      	cmp	r0, #0
 8014a96:	d0d9      	beq.n	8014a4c <__swbuf_r+0x2e>
 8014a98:	e7d6      	b.n	8014a48 <__swbuf_r+0x2a>
	...

08014a9c <__swsetup_r>:
 8014a9c:	b538      	push	{r3, r4, r5, lr}
 8014a9e:	4b29      	ldr	r3, [pc, #164]	@ (8014b44 <__swsetup_r+0xa8>)
 8014aa0:	4605      	mov	r5, r0
 8014aa2:	6818      	ldr	r0, [r3, #0]
 8014aa4:	460c      	mov	r4, r1
 8014aa6:	b118      	cbz	r0, 8014ab0 <__swsetup_r+0x14>
 8014aa8:	6a03      	ldr	r3, [r0, #32]
 8014aaa:	b90b      	cbnz	r3, 8014ab0 <__swsetup_r+0x14>
 8014aac:	f7ff fece 	bl	801484c <__sinit>
 8014ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ab4:	0719      	lsls	r1, r3, #28
 8014ab6:	d422      	bmi.n	8014afe <__swsetup_r+0x62>
 8014ab8:	06da      	lsls	r2, r3, #27
 8014aba:	d407      	bmi.n	8014acc <__swsetup_r+0x30>
 8014abc:	2209      	movs	r2, #9
 8014abe:	602a      	str	r2, [r5, #0]
 8014ac0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ac4:	81a3      	strh	r3, [r4, #12]
 8014ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8014aca:	e033      	b.n	8014b34 <__swsetup_r+0x98>
 8014acc:	0758      	lsls	r0, r3, #29
 8014ace:	d512      	bpl.n	8014af6 <__swsetup_r+0x5a>
 8014ad0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014ad2:	b141      	cbz	r1, 8014ae6 <__swsetup_r+0x4a>
 8014ad4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014ad8:	4299      	cmp	r1, r3
 8014ada:	d002      	beq.n	8014ae2 <__swsetup_r+0x46>
 8014adc:	4628      	mov	r0, r5
 8014ade:	f000 ff15 	bl	801590c <_free_r>
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	6363      	str	r3, [r4, #52]	@ 0x34
 8014ae6:	89a3      	ldrh	r3, [r4, #12]
 8014ae8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014aec:	81a3      	strh	r3, [r4, #12]
 8014aee:	2300      	movs	r3, #0
 8014af0:	6063      	str	r3, [r4, #4]
 8014af2:	6923      	ldr	r3, [r4, #16]
 8014af4:	6023      	str	r3, [r4, #0]
 8014af6:	89a3      	ldrh	r3, [r4, #12]
 8014af8:	f043 0308 	orr.w	r3, r3, #8
 8014afc:	81a3      	strh	r3, [r4, #12]
 8014afe:	6923      	ldr	r3, [r4, #16]
 8014b00:	b94b      	cbnz	r3, 8014b16 <__swsetup_r+0x7a>
 8014b02:	89a3      	ldrh	r3, [r4, #12]
 8014b04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014b0c:	d003      	beq.n	8014b16 <__swsetup_r+0x7a>
 8014b0e:	4621      	mov	r1, r4
 8014b10:	4628      	mov	r0, r5
 8014b12:	f001 fcd3 	bl	80164bc <__smakebuf_r>
 8014b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b1a:	f013 0201 	ands.w	r2, r3, #1
 8014b1e:	d00a      	beq.n	8014b36 <__swsetup_r+0x9a>
 8014b20:	2200      	movs	r2, #0
 8014b22:	60a2      	str	r2, [r4, #8]
 8014b24:	6962      	ldr	r2, [r4, #20]
 8014b26:	4252      	negs	r2, r2
 8014b28:	61a2      	str	r2, [r4, #24]
 8014b2a:	6922      	ldr	r2, [r4, #16]
 8014b2c:	b942      	cbnz	r2, 8014b40 <__swsetup_r+0xa4>
 8014b2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014b32:	d1c5      	bne.n	8014ac0 <__swsetup_r+0x24>
 8014b34:	bd38      	pop	{r3, r4, r5, pc}
 8014b36:	0799      	lsls	r1, r3, #30
 8014b38:	bf58      	it	pl
 8014b3a:	6962      	ldrpl	r2, [r4, #20]
 8014b3c:	60a2      	str	r2, [r4, #8]
 8014b3e:	e7f4      	b.n	8014b2a <__swsetup_r+0x8e>
 8014b40:	2000      	movs	r0, #0
 8014b42:	e7f7      	b.n	8014b34 <__swsetup_r+0x98>
 8014b44:	200000fc 	.word	0x200000fc

08014b48 <memset>:
 8014b48:	4402      	add	r2, r0
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	4293      	cmp	r3, r2
 8014b4e:	d100      	bne.n	8014b52 <memset+0xa>
 8014b50:	4770      	bx	lr
 8014b52:	f803 1b01 	strb.w	r1, [r3], #1
 8014b56:	e7f9      	b.n	8014b4c <memset+0x4>

08014b58 <_localeconv_r>:
 8014b58:	4800      	ldr	r0, [pc, #0]	@ (8014b5c <_localeconv_r+0x4>)
 8014b5a:	4770      	bx	lr
 8014b5c:	2000023c 	.word	0x2000023c

08014b60 <_close_r>:
 8014b60:	b538      	push	{r3, r4, r5, lr}
 8014b62:	4d06      	ldr	r5, [pc, #24]	@ (8014b7c <_close_r+0x1c>)
 8014b64:	2300      	movs	r3, #0
 8014b66:	4604      	mov	r4, r0
 8014b68:	4608      	mov	r0, r1
 8014b6a:	602b      	str	r3, [r5, #0]
 8014b6c:	f7ef f88c 	bl	8003c88 <_close>
 8014b70:	1c43      	adds	r3, r0, #1
 8014b72:	d102      	bne.n	8014b7a <_close_r+0x1a>
 8014b74:	682b      	ldr	r3, [r5, #0]
 8014b76:	b103      	cbz	r3, 8014b7a <_close_r+0x1a>
 8014b78:	6023      	str	r3, [r4, #0]
 8014b7a:	bd38      	pop	{r3, r4, r5, pc}
 8014b7c:	2000da1c 	.word	0x2000da1c

08014b80 <_reclaim_reent>:
 8014b80:	4b2d      	ldr	r3, [pc, #180]	@ (8014c38 <_reclaim_reent+0xb8>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	4283      	cmp	r3, r0
 8014b86:	b570      	push	{r4, r5, r6, lr}
 8014b88:	4604      	mov	r4, r0
 8014b8a:	d053      	beq.n	8014c34 <_reclaim_reent+0xb4>
 8014b8c:	69c3      	ldr	r3, [r0, #28]
 8014b8e:	b31b      	cbz	r3, 8014bd8 <_reclaim_reent+0x58>
 8014b90:	68db      	ldr	r3, [r3, #12]
 8014b92:	b163      	cbz	r3, 8014bae <_reclaim_reent+0x2e>
 8014b94:	2500      	movs	r5, #0
 8014b96:	69e3      	ldr	r3, [r4, #28]
 8014b98:	68db      	ldr	r3, [r3, #12]
 8014b9a:	5959      	ldr	r1, [r3, r5]
 8014b9c:	b9b1      	cbnz	r1, 8014bcc <_reclaim_reent+0x4c>
 8014b9e:	3504      	adds	r5, #4
 8014ba0:	2d80      	cmp	r5, #128	@ 0x80
 8014ba2:	d1f8      	bne.n	8014b96 <_reclaim_reent+0x16>
 8014ba4:	69e3      	ldr	r3, [r4, #28]
 8014ba6:	4620      	mov	r0, r4
 8014ba8:	68d9      	ldr	r1, [r3, #12]
 8014baa:	f000 feaf 	bl	801590c <_free_r>
 8014bae:	69e3      	ldr	r3, [r4, #28]
 8014bb0:	6819      	ldr	r1, [r3, #0]
 8014bb2:	b111      	cbz	r1, 8014bba <_reclaim_reent+0x3a>
 8014bb4:	4620      	mov	r0, r4
 8014bb6:	f000 fea9 	bl	801590c <_free_r>
 8014bba:	69e3      	ldr	r3, [r4, #28]
 8014bbc:	689d      	ldr	r5, [r3, #8]
 8014bbe:	b15d      	cbz	r5, 8014bd8 <_reclaim_reent+0x58>
 8014bc0:	4629      	mov	r1, r5
 8014bc2:	4620      	mov	r0, r4
 8014bc4:	682d      	ldr	r5, [r5, #0]
 8014bc6:	f000 fea1 	bl	801590c <_free_r>
 8014bca:	e7f8      	b.n	8014bbe <_reclaim_reent+0x3e>
 8014bcc:	680e      	ldr	r6, [r1, #0]
 8014bce:	4620      	mov	r0, r4
 8014bd0:	f000 fe9c 	bl	801590c <_free_r>
 8014bd4:	4631      	mov	r1, r6
 8014bd6:	e7e1      	b.n	8014b9c <_reclaim_reent+0x1c>
 8014bd8:	6961      	ldr	r1, [r4, #20]
 8014bda:	b111      	cbz	r1, 8014be2 <_reclaim_reent+0x62>
 8014bdc:	4620      	mov	r0, r4
 8014bde:	f000 fe95 	bl	801590c <_free_r>
 8014be2:	69e1      	ldr	r1, [r4, #28]
 8014be4:	b111      	cbz	r1, 8014bec <_reclaim_reent+0x6c>
 8014be6:	4620      	mov	r0, r4
 8014be8:	f000 fe90 	bl	801590c <_free_r>
 8014bec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014bee:	b111      	cbz	r1, 8014bf6 <_reclaim_reent+0x76>
 8014bf0:	4620      	mov	r0, r4
 8014bf2:	f000 fe8b 	bl	801590c <_free_r>
 8014bf6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014bf8:	b111      	cbz	r1, 8014c00 <_reclaim_reent+0x80>
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	f000 fe86 	bl	801590c <_free_r>
 8014c00:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8014c02:	b111      	cbz	r1, 8014c0a <_reclaim_reent+0x8a>
 8014c04:	4620      	mov	r0, r4
 8014c06:	f000 fe81 	bl	801590c <_free_r>
 8014c0a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014c0c:	b111      	cbz	r1, 8014c14 <_reclaim_reent+0x94>
 8014c0e:	4620      	mov	r0, r4
 8014c10:	f000 fe7c 	bl	801590c <_free_r>
 8014c14:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8014c16:	b111      	cbz	r1, 8014c1e <_reclaim_reent+0x9e>
 8014c18:	4620      	mov	r0, r4
 8014c1a:	f000 fe77 	bl	801590c <_free_r>
 8014c1e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014c20:	b111      	cbz	r1, 8014c28 <_reclaim_reent+0xa8>
 8014c22:	4620      	mov	r0, r4
 8014c24:	f000 fe72 	bl	801590c <_free_r>
 8014c28:	6a23      	ldr	r3, [r4, #32]
 8014c2a:	b11b      	cbz	r3, 8014c34 <_reclaim_reent+0xb4>
 8014c2c:	4620      	mov	r0, r4
 8014c2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c32:	4718      	bx	r3
 8014c34:	bd70      	pop	{r4, r5, r6, pc}
 8014c36:	bf00      	nop
 8014c38:	200000fc 	.word	0x200000fc

08014c3c <_lseek_r>:
 8014c3c:	b538      	push	{r3, r4, r5, lr}
 8014c3e:	4d07      	ldr	r5, [pc, #28]	@ (8014c5c <_lseek_r+0x20>)
 8014c40:	4604      	mov	r4, r0
 8014c42:	4608      	mov	r0, r1
 8014c44:	4611      	mov	r1, r2
 8014c46:	2200      	movs	r2, #0
 8014c48:	602a      	str	r2, [r5, #0]
 8014c4a:	461a      	mov	r2, r3
 8014c4c:	f7ef f843 	bl	8003cd6 <_lseek>
 8014c50:	1c43      	adds	r3, r0, #1
 8014c52:	d102      	bne.n	8014c5a <_lseek_r+0x1e>
 8014c54:	682b      	ldr	r3, [r5, #0]
 8014c56:	b103      	cbz	r3, 8014c5a <_lseek_r+0x1e>
 8014c58:	6023      	str	r3, [r4, #0]
 8014c5a:	bd38      	pop	{r3, r4, r5, pc}
 8014c5c:	2000da1c 	.word	0x2000da1c

08014c60 <_read_r>:
 8014c60:	b538      	push	{r3, r4, r5, lr}
 8014c62:	4d07      	ldr	r5, [pc, #28]	@ (8014c80 <_read_r+0x20>)
 8014c64:	4604      	mov	r4, r0
 8014c66:	4608      	mov	r0, r1
 8014c68:	4611      	mov	r1, r2
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	602a      	str	r2, [r5, #0]
 8014c6e:	461a      	mov	r2, r3
 8014c70:	f7ee ffed 	bl	8003c4e <_read>
 8014c74:	1c43      	adds	r3, r0, #1
 8014c76:	d102      	bne.n	8014c7e <_read_r+0x1e>
 8014c78:	682b      	ldr	r3, [r5, #0]
 8014c7a:	b103      	cbz	r3, 8014c7e <_read_r+0x1e>
 8014c7c:	6023      	str	r3, [r4, #0]
 8014c7e:	bd38      	pop	{r3, r4, r5, pc}
 8014c80:	2000da1c 	.word	0x2000da1c

08014c84 <_sbrk_r>:
 8014c84:	b538      	push	{r3, r4, r5, lr}
 8014c86:	4d06      	ldr	r5, [pc, #24]	@ (8014ca0 <_sbrk_r+0x1c>)
 8014c88:	2300      	movs	r3, #0
 8014c8a:	4604      	mov	r4, r0
 8014c8c:	4608      	mov	r0, r1
 8014c8e:	602b      	str	r3, [r5, #0]
 8014c90:	f7ef f82e 	bl	8003cf0 <_sbrk>
 8014c94:	1c43      	adds	r3, r0, #1
 8014c96:	d102      	bne.n	8014c9e <_sbrk_r+0x1a>
 8014c98:	682b      	ldr	r3, [r5, #0]
 8014c9a:	b103      	cbz	r3, 8014c9e <_sbrk_r+0x1a>
 8014c9c:	6023      	str	r3, [r4, #0]
 8014c9e:	bd38      	pop	{r3, r4, r5, pc}
 8014ca0:	2000da1c 	.word	0x2000da1c

08014ca4 <_write_r>:
 8014ca4:	b538      	push	{r3, r4, r5, lr}
 8014ca6:	4d07      	ldr	r5, [pc, #28]	@ (8014cc4 <_write_r+0x20>)
 8014ca8:	4604      	mov	r4, r0
 8014caa:	4608      	mov	r0, r1
 8014cac:	4611      	mov	r1, r2
 8014cae:	2200      	movs	r2, #0
 8014cb0:	602a      	str	r2, [r5, #0]
 8014cb2:	461a      	mov	r2, r3
 8014cb4:	f7ee fbec 	bl	8003490 <_write>
 8014cb8:	1c43      	adds	r3, r0, #1
 8014cba:	d102      	bne.n	8014cc2 <_write_r+0x1e>
 8014cbc:	682b      	ldr	r3, [r5, #0]
 8014cbe:	b103      	cbz	r3, 8014cc2 <_write_r+0x1e>
 8014cc0:	6023      	str	r3, [r4, #0]
 8014cc2:	bd38      	pop	{r3, r4, r5, pc}
 8014cc4:	2000da1c 	.word	0x2000da1c

08014cc8 <__errno>:
 8014cc8:	4b01      	ldr	r3, [pc, #4]	@ (8014cd0 <__errno+0x8>)
 8014cca:	6818      	ldr	r0, [r3, #0]
 8014ccc:	4770      	bx	lr
 8014cce:	bf00      	nop
 8014cd0:	200000fc 	.word	0x200000fc

08014cd4 <__libc_init_array>:
 8014cd4:	b570      	push	{r4, r5, r6, lr}
 8014cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8014d0c <__libc_init_array+0x38>)
 8014cd8:	4c0d      	ldr	r4, [pc, #52]	@ (8014d10 <__libc_init_array+0x3c>)
 8014cda:	1b64      	subs	r4, r4, r5
 8014cdc:	10a4      	asrs	r4, r4, #2
 8014cde:	2600      	movs	r6, #0
 8014ce0:	42a6      	cmp	r6, r4
 8014ce2:	d109      	bne.n	8014cf8 <__libc_init_array+0x24>
 8014ce4:	4d0b      	ldr	r5, [pc, #44]	@ (8014d14 <__libc_init_array+0x40>)
 8014ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8014d18 <__libc_init_array+0x44>)
 8014ce8:	f001 fcf6 	bl	80166d8 <_init>
 8014cec:	1b64      	subs	r4, r4, r5
 8014cee:	10a4      	asrs	r4, r4, #2
 8014cf0:	2600      	movs	r6, #0
 8014cf2:	42a6      	cmp	r6, r4
 8014cf4:	d105      	bne.n	8014d02 <__libc_init_array+0x2e>
 8014cf6:	bd70      	pop	{r4, r5, r6, pc}
 8014cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8014cfc:	4798      	blx	r3
 8014cfe:	3601      	adds	r6, #1
 8014d00:	e7ee      	b.n	8014ce0 <__libc_init_array+0xc>
 8014d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d06:	4798      	blx	r3
 8014d08:	3601      	adds	r6, #1
 8014d0a:	e7f2      	b.n	8014cf2 <__libc_init_array+0x1e>
 8014d0c:	0801724c 	.word	0x0801724c
 8014d10:	0801724c 	.word	0x0801724c
 8014d14:	0801724c 	.word	0x0801724c
 8014d18:	08017250 	.word	0x08017250

08014d1c <__retarget_lock_init_recursive>:
 8014d1c:	4770      	bx	lr

08014d1e <__retarget_lock_acquire_recursive>:
 8014d1e:	4770      	bx	lr

08014d20 <__retarget_lock_release_recursive>:
 8014d20:	4770      	bx	lr

08014d22 <memcpy>:
 8014d22:	440a      	add	r2, r1
 8014d24:	4291      	cmp	r1, r2
 8014d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8014d2a:	d100      	bne.n	8014d2e <memcpy+0xc>
 8014d2c:	4770      	bx	lr
 8014d2e:	b510      	push	{r4, lr}
 8014d30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d38:	4291      	cmp	r1, r2
 8014d3a:	d1f9      	bne.n	8014d30 <memcpy+0xe>
 8014d3c:	bd10      	pop	{r4, pc}

08014d3e <quorem>:
 8014d3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d42:	6903      	ldr	r3, [r0, #16]
 8014d44:	690c      	ldr	r4, [r1, #16]
 8014d46:	42a3      	cmp	r3, r4
 8014d48:	4607      	mov	r7, r0
 8014d4a:	db7e      	blt.n	8014e4a <quorem+0x10c>
 8014d4c:	3c01      	subs	r4, #1
 8014d4e:	f101 0814 	add.w	r8, r1, #20
 8014d52:	00a3      	lsls	r3, r4, #2
 8014d54:	f100 0514 	add.w	r5, r0, #20
 8014d58:	9300      	str	r3, [sp, #0]
 8014d5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014d5e:	9301      	str	r3, [sp, #4]
 8014d60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014d64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014d68:	3301      	adds	r3, #1
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014d70:	fbb2 f6f3 	udiv	r6, r2, r3
 8014d74:	d32e      	bcc.n	8014dd4 <quorem+0x96>
 8014d76:	f04f 0a00 	mov.w	sl, #0
 8014d7a:	46c4      	mov	ip, r8
 8014d7c:	46ae      	mov	lr, r5
 8014d7e:	46d3      	mov	fp, sl
 8014d80:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014d84:	b298      	uxth	r0, r3
 8014d86:	fb06 a000 	mla	r0, r6, r0, sl
 8014d8a:	0c02      	lsrs	r2, r0, #16
 8014d8c:	0c1b      	lsrs	r3, r3, #16
 8014d8e:	fb06 2303 	mla	r3, r6, r3, r2
 8014d92:	f8de 2000 	ldr.w	r2, [lr]
 8014d96:	b280      	uxth	r0, r0
 8014d98:	b292      	uxth	r2, r2
 8014d9a:	1a12      	subs	r2, r2, r0
 8014d9c:	445a      	add	r2, fp
 8014d9e:	f8de 0000 	ldr.w	r0, [lr]
 8014da2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014da6:	b29b      	uxth	r3, r3
 8014da8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014dac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014db0:	b292      	uxth	r2, r2
 8014db2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014db6:	45e1      	cmp	r9, ip
 8014db8:	f84e 2b04 	str.w	r2, [lr], #4
 8014dbc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014dc0:	d2de      	bcs.n	8014d80 <quorem+0x42>
 8014dc2:	9b00      	ldr	r3, [sp, #0]
 8014dc4:	58eb      	ldr	r3, [r5, r3]
 8014dc6:	b92b      	cbnz	r3, 8014dd4 <quorem+0x96>
 8014dc8:	9b01      	ldr	r3, [sp, #4]
 8014dca:	3b04      	subs	r3, #4
 8014dcc:	429d      	cmp	r5, r3
 8014dce:	461a      	mov	r2, r3
 8014dd0:	d32f      	bcc.n	8014e32 <quorem+0xf4>
 8014dd2:	613c      	str	r4, [r7, #16]
 8014dd4:	4638      	mov	r0, r7
 8014dd6:	f001 f855 	bl	8015e84 <__mcmp>
 8014dda:	2800      	cmp	r0, #0
 8014ddc:	db25      	blt.n	8014e2a <quorem+0xec>
 8014dde:	4629      	mov	r1, r5
 8014de0:	2000      	movs	r0, #0
 8014de2:	f858 2b04 	ldr.w	r2, [r8], #4
 8014de6:	f8d1 c000 	ldr.w	ip, [r1]
 8014dea:	fa1f fe82 	uxth.w	lr, r2
 8014dee:	fa1f f38c 	uxth.w	r3, ip
 8014df2:	eba3 030e 	sub.w	r3, r3, lr
 8014df6:	4403      	add	r3, r0
 8014df8:	0c12      	lsrs	r2, r2, #16
 8014dfa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014dfe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014e02:	b29b      	uxth	r3, r3
 8014e04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e08:	45c1      	cmp	r9, r8
 8014e0a:	f841 3b04 	str.w	r3, [r1], #4
 8014e0e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014e12:	d2e6      	bcs.n	8014de2 <quorem+0xa4>
 8014e14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014e18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014e1c:	b922      	cbnz	r2, 8014e28 <quorem+0xea>
 8014e1e:	3b04      	subs	r3, #4
 8014e20:	429d      	cmp	r5, r3
 8014e22:	461a      	mov	r2, r3
 8014e24:	d30b      	bcc.n	8014e3e <quorem+0x100>
 8014e26:	613c      	str	r4, [r7, #16]
 8014e28:	3601      	adds	r6, #1
 8014e2a:	4630      	mov	r0, r6
 8014e2c:	b003      	add	sp, #12
 8014e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e32:	6812      	ldr	r2, [r2, #0]
 8014e34:	3b04      	subs	r3, #4
 8014e36:	2a00      	cmp	r2, #0
 8014e38:	d1cb      	bne.n	8014dd2 <quorem+0x94>
 8014e3a:	3c01      	subs	r4, #1
 8014e3c:	e7c6      	b.n	8014dcc <quorem+0x8e>
 8014e3e:	6812      	ldr	r2, [r2, #0]
 8014e40:	3b04      	subs	r3, #4
 8014e42:	2a00      	cmp	r2, #0
 8014e44:	d1ef      	bne.n	8014e26 <quorem+0xe8>
 8014e46:	3c01      	subs	r4, #1
 8014e48:	e7ea      	b.n	8014e20 <quorem+0xe2>
 8014e4a:	2000      	movs	r0, #0
 8014e4c:	e7ee      	b.n	8014e2c <quorem+0xee>
	...

08014e50 <_dtoa_r>:
 8014e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e54:	ed2d 8b02 	vpush	{d8}
 8014e58:	69c7      	ldr	r7, [r0, #28]
 8014e5a:	b091      	sub	sp, #68	@ 0x44
 8014e5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014e60:	ec55 4b10 	vmov	r4, r5, d0
 8014e64:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8014e66:	9107      	str	r1, [sp, #28]
 8014e68:	4681      	mov	r9, r0
 8014e6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8014e6c:	930d      	str	r3, [sp, #52]	@ 0x34
 8014e6e:	b97f      	cbnz	r7, 8014e90 <_dtoa_r+0x40>
 8014e70:	2010      	movs	r0, #16
 8014e72:	f7fe ff73 	bl	8013d5c <malloc>
 8014e76:	4602      	mov	r2, r0
 8014e78:	f8c9 001c 	str.w	r0, [r9, #28]
 8014e7c:	b920      	cbnz	r0, 8014e88 <_dtoa_r+0x38>
 8014e7e:	4ba0      	ldr	r3, [pc, #640]	@ (8015100 <_dtoa_r+0x2b0>)
 8014e80:	21ef      	movs	r1, #239	@ 0xef
 8014e82:	48a0      	ldr	r0, [pc, #640]	@ (8015104 <_dtoa_r+0x2b4>)
 8014e84:	f001 fb78 	bl	8016578 <__assert_func>
 8014e88:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014e8c:	6007      	str	r7, [r0, #0]
 8014e8e:	60c7      	str	r7, [r0, #12]
 8014e90:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014e94:	6819      	ldr	r1, [r3, #0]
 8014e96:	b159      	cbz	r1, 8014eb0 <_dtoa_r+0x60>
 8014e98:	685a      	ldr	r2, [r3, #4]
 8014e9a:	604a      	str	r2, [r1, #4]
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	4093      	lsls	r3, r2
 8014ea0:	608b      	str	r3, [r1, #8]
 8014ea2:	4648      	mov	r0, r9
 8014ea4:	f000 fdbc 	bl	8015a20 <_Bfree>
 8014ea8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014eac:	2200      	movs	r2, #0
 8014eae:	601a      	str	r2, [r3, #0]
 8014eb0:	1e2b      	subs	r3, r5, #0
 8014eb2:	bfbb      	ittet	lt
 8014eb4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014eb8:	9303      	strlt	r3, [sp, #12]
 8014eba:	2300      	movge	r3, #0
 8014ebc:	2201      	movlt	r2, #1
 8014ebe:	bfac      	ite	ge
 8014ec0:	6033      	strge	r3, [r6, #0]
 8014ec2:	6032      	strlt	r2, [r6, #0]
 8014ec4:	4b90      	ldr	r3, [pc, #576]	@ (8015108 <_dtoa_r+0x2b8>)
 8014ec6:	9e03      	ldr	r6, [sp, #12]
 8014ec8:	43b3      	bics	r3, r6
 8014eca:	d110      	bne.n	8014eee <_dtoa_r+0x9e>
 8014ecc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014ece:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014ed2:	6013      	str	r3, [r2, #0]
 8014ed4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8014ed8:	4323      	orrs	r3, r4
 8014eda:	f000 84e6 	beq.w	80158aa <_dtoa_r+0xa5a>
 8014ede:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014ee0:	4f8a      	ldr	r7, [pc, #552]	@ (801510c <_dtoa_r+0x2bc>)
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	f000 84e8 	beq.w	80158b8 <_dtoa_r+0xa68>
 8014ee8:	1cfb      	adds	r3, r7, #3
 8014eea:	f000 bce3 	b.w	80158b4 <_dtoa_r+0xa64>
 8014eee:	ed9d 8b02 	vldr	d8, [sp, #8]
 8014ef2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014efa:	d10a      	bne.n	8014f12 <_dtoa_r+0xc2>
 8014efc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014efe:	2301      	movs	r3, #1
 8014f00:	6013      	str	r3, [r2, #0]
 8014f02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8014f04:	b113      	cbz	r3, 8014f0c <_dtoa_r+0xbc>
 8014f06:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8014f08:	4b81      	ldr	r3, [pc, #516]	@ (8015110 <_dtoa_r+0x2c0>)
 8014f0a:	6013      	str	r3, [r2, #0]
 8014f0c:	4f81      	ldr	r7, [pc, #516]	@ (8015114 <_dtoa_r+0x2c4>)
 8014f0e:	f000 bcd3 	b.w	80158b8 <_dtoa_r+0xa68>
 8014f12:	aa0e      	add	r2, sp, #56	@ 0x38
 8014f14:	a90f      	add	r1, sp, #60	@ 0x3c
 8014f16:	4648      	mov	r0, r9
 8014f18:	eeb0 0b48 	vmov.f64	d0, d8
 8014f1c:	f001 f862 	bl	8015fe4 <__d2b>
 8014f20:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8014f24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014f26:	9001      	str	r0, [sp, #4]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d045      	beq.n	8014fb8 <_dtoa_r+0x168>
 8014f2c:	eeb0 7b48 	vmov.f64	d7, d8
 8014f30:	ee18 1a90 	vmov	r1, s17
 8014f34:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014f38:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8014f3c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8014f40:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8014f44:	2500      	movs	r5, #0
 8014f46:	ee07 1a90 	vmov	s15, r1
 8014f4a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8014f4e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80150e8 <_dtoa_r+0x298>
 8014f52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014f56:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80150f0 <_dtoa_r+0x2a0>
 8014f5a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014f5e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80150f8 <_dtoa_r+0x2a8>
 8014f62:	ee07 3a90 	vmov	s15, r3
 8014f66:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014f6a:	eeb0 7b46 	vmov.f64	d7, d6
 8014f6e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8014f72:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014f76:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f7e:	ee16 8a90 	vmov	r8, s13
 8014f82:	d508      	bpl.n	8014f96 <_dtoa_r+0x146>
 8014f84:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014f88:	eeb4 6b47 	vcmp.f64	d6, d7
 8014f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f90:	bf18      	it	ne
 8014f92:	f108 38ff 	addne.w	r8, r8, #4294967295
 8014f96:	f1b8 0f16 	cmp.w	r8, #22
 8014f9a:	d82b      	bhi.n	8014ff4 <_dtoa_r+0x1a4>
 8014f9c:	495e      	ldr	r1, [pc, #376]	@ (8015118 <_dtoa_r+0x2c8>)
 8014f9e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8014fa2:	ed91 7b00 	vldr	d7, [r1]
 8014fa6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fae:	d501      	bpl.n	8014fb4 <_dtoa_r+0x164>
 8014fb0:	f108 38ff 	add.w	r8, r8, #4294967295
 8014fb4:	2100      	movs	r1, #0
 8014fb6:	e01e      	b.n	8014ff6 <_dtoa_r+0x1a6>
 8014fb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014fba:	4413      	add	r3, r2
 8014fbc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8014fc0:	2920      	cmp	r1, #32
 8014fc2:	bfc1      	itttt	gt
 8014fc4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8014fc8:	408e      	lslgt	r6, r1
 8014fca:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8014fce:	fa24 f101 	lsrgt.w	r1, r4, r1
 8014fd2:	bfd6      	itet	le
 8014fd4:	f1c1 0120 	rsble	r1, r1, #32
 8014fd8:	4331      	orrgt	r1, r6
 8014fda:	fa04 f101 	lslle.w	r1, r4, r1
 8014fde:	ee07 1a90 	vmov	s15, r1
 8014fe2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014fe6:	3b01      	subs	r3, #1
 8014fe8:	ee17 1a90 	vmov	r1, s15
 8014fec:	2501      	movs	r5, #1
 8014fee:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8014ff2:	e7a8      	b.n	8014f46 <_dtoa_r+0xf6>
 8014ff4:	2101      	movs	r1, #1
 8014ff6:	1ad2      	subs	r2, r2, r3
 8014ff8:	1e53      	subs	r3, r2, #1
 8014ffa:	9306      	str	r3, [sp, #24]
 8014ffc:	bf45      	ittet	mi
 8014ffe:	f1c2 0301 	rsbmi	r3, r2, #1
 8015002:	9304      	strmi	r3, [sp, #16]
 8015004:	2300      	movpl	r3, #0
 8015006:	2300      	movmi	r3, #0
 8015008:	bf4c      	ite	mi
 801500a:	9306      	strmi	r3, [sp, #24]
 801500c:	9304      	strpl	r3, [sp, #16]
 801500e:	f1b8 0f00 	cmp.w	r8, #0
 8015012:	910c      	str	r1, [sp, #48]	@ 0x30
 8015014:	db18      	blt.n	8015048 <_dtoa_r+0x1f8>
 8015016:	9b06      	ldr	r3, [sp, #24]
 8015018:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801501c:	4443      	add	r3, r8
 801501e:	9306      	str	r3, [sp, #24]
 8015020:	2300      	movs	r3, #0
 8015022:	9a07      	ldr	r2, [sp, #28]
 8015024:	2a09      	cmp	r2, #9
 8015026:	d845      	bhi.n	80150b4 <_dtoa_r+0x264>
 8015028:	2a05      	cmp	r2, #5
 801502a:	bfc4      	itt	gt
 801502c:	3a04      	subgt	r2, #4
 801502e:	9207      	strgt	r2, [sp, #28]
 8015030:	9a07      	ldr	r2, [sp, #28]
 8015032:	f1a2 0202 	sub.w	r2, r2, #2
 8015036:	bfcc      	ite	gt
 8015038:	2400      	movgt	r4, #0
 801503a:	2401      	movle	r4, #1
 801503c:	2a03      	cmp	r2, #3
 801503e:	d844      	bhi.n	80150ca <_dtoa_r+0x27a>
 8015040:	e8df f002 	tbb	[pc, r2]
 8015044:	0b173634 	.word	0x0b173634
 8015048:	9b04      	ldr	r3, [sp, #16]
 801504a:	2200      	movs	r2, #0
 801504c:	eba3 0308 	sub.w	r3, r3, r8
 8015050:	9304      	str	r3, [sp, #16]
 8015052:	920a      	str	r2, [sp, #40]	@ 0x28
 8015054:	f1c8 0300 	rsb	r3, r8, #0
 8015058:	e7e3      	b.n	8015022 <_dtoa_r+0x1d2>
 801505a:	2201      	movs	r2, #1
 801505c:	9208      	str	r2, [sp, #32]
 801505e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015060:	eb08 0b02 	add.w	fp, r8, r2
 8015064:	f10b 0a01 	add.w	sl, fp, #1
 8015068:	4652      	mov	r2, sl
 801506a:	2a01      	cmp	r2, #1
 801506c:	bfb8      	it	lt
 801506e:	2201      	movlt	r2, #1
 8015070:	e006      	b.n	8015080 <_dtoa_r+0x230>
 8015072:	2201      	movs	r2, #1
 8015074:	9208      	str	r2, [sp, #32]
 8015076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015078:	2a00      	cmp	r2, #0
 801507a:	dd29      	ble.n	80150d0 <_dtoa_r+0x280>
 801507c:	4693      	mov	fp, r2
 801507e:	4692      	mov	sl, r2
 8015080:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8015084:	2100      	movs	r1, #0
 8015086:	2004      	movs	r0, #4
 8015088:	f100 0614 	add.w	r6, r0, #20
 801508c:	4296      	cmp	r6, r2
 801508e:	d926      	bls.n	80150de <_dtoa_r+0x28e>
 8015090:	6079      	str	r1, [r7, #4]
 8015092:	4648      	mov	r0, r9
 8015094:	9305      	str	r3, [sp, #20]
 8015096:	f000 fc83 	bl	80159a0 <_Balloc>
 801509a:	9b05      	ldr	r3, [sp, #20]
 801509c:	4607      	mov	r7, r0
 801509e:	2800      	cmp	r0, #0
 80150a0:	d13e      	bne.n	8015120 <_dtoa_r+0x2d0>
 80150a2:	4b1e      	ldr	r3, [pc, #120]	@ (801511c <_dtoa_r+0x2cc>)
 80150a4:	4602      	mov	r2, r0
 80150a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80150aa:	e6ea      	b.n	8014e82 <_dtoa_r+0x32>
 80150ac:	2200      	movs	r2, #0
 80150ae:	e7e1      	b.n	8015074 <_dtoa_r+0x224>
 80150b0:	2200      	movs	r2, #0
 80150b2:	e7d3      	b.n	801505c <_dtoa_r+0x20c>
 80150b4:	2401      	movs	r4, #1
 80150b6:	2200      	movs	r2, #0
 80150b8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80150bc:	f04f 3bff 	mov.w	fp, #4294967295
 80150c0:	2100      	movs	r1, #0
 80150c2:	46da      	mov	sl, fp
 80150c4:	2212      	movs	r2, #18
 80150c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80150c8:	e7da      	b.n	8015080 <_dtoa_r+0x230>
 80150ca:	2201      	movs	r2, #1
 80150cc:	9208      	str	r2, [sp, #32]
 80150ce:	e7f5      	b.n	80150bc <_dtoa_r+0x26c>
 80150d0:	f04f 0b01 	mov.w	fp, #1
 80150d4:	46da      	mov	sl, fp
 80150d6:	465a      	mov	r2, fp
 80150d8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80150dc:	e7d0      	b.n	8015080 <_dtoa_r+0x230>
 80150de:	3101      	adds	r1, #1
 80150e0:	0040      	lsls	r0, r0, #1
 80150e2:	e7d1      	b.n	8015088 <_dtoa_r+0x238>
 80150e4:	f3af 8000 	nop.w
 80150e8:	636f4361 	.word	0x636f4361
 80150ec:	3fd287a7 	.word	0x3fd287a7
 80150f0:	8b60c8b3 	.word	0x8b60c8b3
 80150f4:	3fc68a28 	.word	0x3fc68a28
 80150f8:	509f79fb 	.word	0x509f79fb
 80150fc:	3fd34413 	.word	0x3fd34413
 8015100:	08016f0d 	.word	0x08016f0d
 8015104:	08016f24 	.word	0x08016f24
 8015108:	7ff00000 	.word	0x7ff00000
 801510c:	08016f09 	.word	0x08016f09
 8015110:	08016edd 	.word	0x08016edd
 8015114:	08016edc 	.word	0x08016edc
 8015118:	08017078 	.word	0x08017078
 801511c:	08016f7c 	.word	0x08016f7c
 8015120:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8015124:	f1ba 0f0e 	cmp.w	sl, #14
 8015128:	6010      	str	r0, [r2, #0]
 801512a:	d86e      	bhi.n	801520a <_dtoa_r+0x3ba>
 801512c:	2c00      	cmp	r4, #0
 801512e:	d06c      	beq.n	801520a <_dtoa_r+0x3ba>
 8015130:	f1b8 0f00 	cmp.w	r8, #0
 8015134:	f340 80b4 	ble.w	80152a0 <_dtoa_r+0x450>
 8015138:	4ac8      	ldr	r2, [pc, #800]	@ (801545c <_dtoa_r+0x60c>)
 801513a:	f008 010f 	and.w	r1, r8, #15
 801513e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8015142:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8015146:	ed92 7b00 	vldr	d7, [r2]
 801514a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801514e:	f000 809b 	beq.w	8015288 <_dtoa_r+0x438>
 8015152:	4ac3      	ldr	r2, [pc, #780]	@ (8015460 <_dtoa_r+0x610>)
 8015154:	ed92 6b08 	vldr	d6, [r2, #32]
 8015158:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801515c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015160:	f001 010f 	and.w	r1, r1, #15
 8015164:	2203      	movs	r2, #3
 8015166:	48be      	ldr	r0, [pc, #760]	@ (8015460 <_dtoa_r+0x610>)
 8015168:	2900      	cmp	r1, #0
 801516a:	f040 808f 	bne.w	801528c <_dtoa_r+0x43c>
 801516e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015172:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015176:	ed8d 7b02 	vstr	d7, [sp, #8]
 801517a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801517c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015180:	2900      	cmp	r1, #0
 8015182:	f000 80b3 	beq.w	80152ec <_dtoa_r+0x49c>
 8015186:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801518a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801518e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015192:	f140 80ab 	bpl.w	80152ec <_dtoa_r+0x49c>
 8015196:	f1ba 0f00 	cmp.w	sl, #0
 801519a:	f000 80a7 	beq.w	80152ec <_dtoa_r+0x49c>
 801519e:	f1bb 0f00 	cmp.w	fp, #0
 80151a2:	dd30      	ble.n	8015206 <_dtoa_r+0x3b6>
 80151a4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80151a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80151ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80151b0:	f108 31ff 	add.w	r1, r8, #4294967295
 80151b4:	9105      	str	r1, [sp, #20]
 80151b6:	3201      	adds	r2, #1
 80151b8:	465c      	mov	r4, fp
 80151ba:	ed9d 6b02 	vldr	d6, [sp, #8]
 80151be:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80151c2:	ee07 2a90 	vmov	s15, r2
 80151c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80151ca:	eea7 5b06 	vfma.f64	d5, d7, d6
 80151ce:	ee15 2a90 	vmov	r2, s11
 80151d2:	ec51 0b15 	vmov	r0, r1, d5
 80151d6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80151da:	2c00      	cmp	r4, #0
 80151dc:	f040 808a 	bne.w	80152f4 <_dtoa_r+0x4a4>
 80151e0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80151e4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80151e8:	ec41 0b17 	vmov	d7, r0, r1
 80151ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80151f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151f4:	f300 826a 	bgt.w	80156cc <_dtoa_r+0x87c>
 80151f8:	eeb1 7b47 	vneg.f64	d7, d7
 80151fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015204:	d423      	bmi.n	801524e <_dtoa_r+0x3fe>
 8015206:	ed8d 8b02 	vstr	d8, [sp, #8]
 801520a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801520c:	2a00      	cmp	r2, #0
 801520e:	f2c0 8129 	blt.w	8015464 <_dtoa_r+0x614>
 8015212:	f1b8 0f0e 	cmp.w	r8, #14
 8015216:	f300 8125 	bgt.w	8015464 <_dtoa_r+0x614>
 801521a:	4b90      	ldr	r3, [pc, #576]	@ (801545c <_dtoa_r+0x60c>)
 801521c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015220:	ed93 6b00 	vldr	d6, [r3]
 8015224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015226:	2b00      	cmp	r3, #0
 8015228:	f280 80c8 	bge.w	80153bc <_dtoa_r+0x56c>
 801522c:	f1ba 0f00 	cmp.w	sl, #0
 8015230:	f300 80c4 	bgt.w	80153bc <_dtoa_r+0x56c>
 8015234:	d10b      	bne.n	801524e <_dtoa_r+0x3fe>
 8015236:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801523a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801523e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015242:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801524a:	f2c0 823c 	blt.w	80156c6 <_dtoa_r+0x876>
 801524e:	2400      	movs	r4, #0
 8015250:	4625      	mov	r5, r4
 8015252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015254:	43db      	mvns	r3, r3
 8015256:	9305      	str	r3, [sp, #20]
 8015258:	463e      	mov	r6, r7
 801525a:	f04f 0800 	mov.w	r8, #0
 801525e:	4621      	mov	r1, r4
 8015260:	4648      	mov	r0, r9
 8015262:	f000 fbdd 	bl	8015a20 <_Bfree>
 8015266:	2d00      	cmp	r5, #0
 8015268:	f000 80a2 	beq.w	80153b0 <_dtoa_r+0x560>
 801526c:	f1b8 0f00 	cmp.w	r8, #0
 8015270:	d005      	beq.n	801527e <_dtoa_r+0x42e>
 8015272:	45a8      	cmp	r8, r5
 8015274:	d003      	beq.n	801527e <_dtoa_r+0x42e>
 8015276:	4641      	mov	r1, r8
 8015278:	4648      	mov	r0, r9
 801527a:	f000 fbd1 	bl	8015a20 <_Bfree>
 801527e:	4629      	mov	r1, r5
 8015280:	4648      	mov	r0, r9
 8015282:	f000 fbcd 	bl	8015a20 <_Bfree>
 8015286:	e093      	b.n	80153b0 <_dtoa_r+0x560>
 8015288:	2202      	movs	r2, #2
 801528a:	e76c      	b.n	8015166 <_dtoa_r+0x316>
 801528c:	07cc      	lsls	r4, r1, #31
 801528e:	d504      	bpl.n	801529a <_dtoa_r+0x44a>
 8015290:	ed90 6b00 	vldr	d6, [r0]
 8015294:	3201      	adds	r2, #1
 8015296:	ee27 7b06 	vmul.f64	d7, d7, d6
 801529a:	1049      	asrs	r1, r1, #1
 801529c:	3008      	adds	r0, #8
 801529e:	e763      	b.n	8015168 <_dtoa_r+0x318>
 80152a0:	d022      	beq.n	80152e8 <_dtoa_r+0x498>
 80152a2:	f1c8 0100 	rsb	r1, r8, #0
 80152a6:	4a6d      	ldr	r2, [pc, #436]	@ (801545c <_dtoa_r+0x60c>)
 80152a8:	f001 000f 	and.w	r0, r1, #15
 80152ac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80152b0:	ed92 7b00 	vldr	d7, [r2]
 80152b4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80152b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80152bc:	4868      	ldr	r0, [pc, #416]	@ (8015460 <_dtoa_r+0x610>)
 80152be:	1109      	asrs	r1, r1, #4
 80152c0:	2400      	movs	r4, #0
 80152c2:	2202      	movs	r2, #2
 80152c4:	b929      	cbnz	r1, 80152d2 <_dtoa_r+0x482>
 80152c6:	2c00      	cmp	r4, #0
 80152c8:	f43f af57 	beq.w	801517a <_dtoa_r+0x32a>
 80152cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80152d0:	e753      	b.n	801517a <_dtoa_r+0x32a>
 80152d2:	07ce      	lsls	r6, r1, #31
 80152d4:	d505      	bpl.n	80152e2 <_dtoa_r+0x492>
 80152d6:	ed90 6b00 	vldr	d6, [r0]
 80152da:	3201      	adds	r2, #1
 80152dc:	2401      	movs	r4, #1
 80152de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80152e2:	1049      	asrs	r1, r1, #1
 80152e4:	3008      	adds	r0, #8
 80152e6:	e7ed      	b.n	80152c4 <_dtoa_r+0x474>
 80152e8:	2202      	movs	r2, #2
 80152ea:	e746      	b.n	801517a <_dtoa_r+0x32a>
 80152ec:	f8cd 8014 	str.w	r8, [sp, #20]
 80152f0:	4654      	mov	r4, sl
 80152f2:	e762      	b.n	80151ba <_dtoa_r+0x36a>
 80152f4:	4a59      	ldr	r2, [pc, #356]	@ (801545c <_dtoa_r+0x60c>)
 80152f6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80152fa:	ed12 4b02 	vldr	d4, [r2, #-8]
 80152fe:	9a08      	ldr	r2, [sp, #32]
 8015300:	ec41 0b17 	vmov	d7, r0, r1
 8015304:	443c      	add	r4, r7
 8015306:	b34a      	cbz	r2, 801535c <_dtoa_r+0x50c>
 8015308:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801530c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8015310:	463e      	mov	r6, r7
 8015312:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015316:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801531a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801531e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015322:	ee14 2a90 	vmov	r2, s9
 8015326:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801532a:	3230      	adds	r2, #48	@ 0x30
 801532c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015330:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015338:	f806 2b01 	strb.w	r2, [r6], #1
 801533c:	d438      	bmi.n	80153b0 <_dtoa_r+0x560>
 801533e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015342:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801534a:	d46e      	bmi.n	801542a <_dtoa_r+0x5da>
 801534c:	42a6      	cmp	r6, r4
 801534e:	f43f af5a 	beq.w	8015206 <_dtoa_r+0x3b6>
 8015352:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015356:	ee26 6b03 	vmul.f64	d6, d6, d3
 801535a:	e7e0      	b.n	801531e <_dtoa_r+0x4ce>
 801535c:	4621      	mov	r1, r4
 801535e:	463e      	mov	r6, r7
 8015360:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015364:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8015368:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801536c:	ee14 2a90 	vmov	r2, s9
 8015370:	3230      	adds	r2, #48	@ 0x30
 8015372:	f806 2b01 	strb.w	r2, [r6], #1
 8015376:	42a6      	cmp	r6, r4
 8015378:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801537c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015380:	d119      	bne.n	80153b6 <_dtoa_r+0x566>
 8015382:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8015386:	ee37 4b05 	vadd.f64	d4, d7, d5
 801538a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801538e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015392:	dc4a      	bgt.n	801542a <_dtoa_r+0x5da>
 8015394:	ee35 5b47 	vsub.f64	d5, d5, d7
 8015398:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801539c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153a0:	f57f af31 	bpl.w	8015206 <_dtoa_r+0x3b6>
 80153a4:	460e      	mov	r6, r1
 80153a6:	3901      	subs	r1, #1
 80153a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80153ac:	2b30      	cmp	r3, #48	@ 0x30
 80153ae:	d0f9      	beq.n	80153a4 <_dtoa_r+0x554>
 80153b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80153b4:	e027      	b.n	8015406 <_dtoa_r+0x5b6>
 80153b6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80153ba:	e7d5      	b.n	8015368 <_dtoa_r+0x518>
 80153bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80153c0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80153c4:	463e      	mov	r6, r7
 80153c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80153ca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80153ce:	ee15 3a10 	vmov	r3, s10
 80153d2:	3330      	adds	r3, #48	@ 0x30
 80153d4:	f806 3b01 	strb.w	r3, [r6], #1
 80153d8:	1bf3      	subs	r3, r6, r7
 80153da:	459a      	cmp	sl, r3
 80153dc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80153e0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80153e4:	d132      	bne.n	801544c <_dtoa_r+0x5fc>
 80153e6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80153ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80153ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153f2:	dc18      	bgt.n	8015426 <_dtoa_r+0x5d6>
 80153f4:	eeb4 7b46 	vcmp.f64	d7, d6
 80153f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153fc:	d103      	bne.n	8015406 <_dtoa_r+0x5b6>
 80153fe:	ee15 3a10 	vmov	r3, s10
 8015402:	07db      	lsls	r3, r3, #31
 8015404:	d40f      	bmi.n	8015426 <_dtoa_r+0x5d6>
 8015406:	9901      	ldr	r1, [sp, #4]
 8015408:	4648      	mov	r0, r9
 801540a:	f000 fb09 	bl	8015a20 <_Bfree>
 801540e:	2300      	movs	r3, #0
 8015410:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015412:	7033      	strb	r3, [r6, #0]
 8015414:	f108 0301 	add.w	r3, r8, #1
 8015418:	6013      	str	r3, [r2, #0]
 801541a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801541c:	2b00      	cmp	r3, #0
 801541e:	f000 824b 	beq.w	80158b8 <_dtoa_r+0xa68>
 8015422:	601e      	str	r6, [r3, #0]
 8015424:	e248      	b.n	80158b8 <_dtoa_r+0xa68>
 8015426:	f8cd 8014 	str.w	r8, [sp, #20]
 801542a:	4633      	mov	r3, r6
 801542c:	461e      	mov	r6, r3
 801542e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015432:	2a39      	cmp	r2, #57	@ 0x39
 8015434:	d106      	bne.n	8015444 <_dtoa_r+0x5f4>
 8015436:	429f      	cmp	r7, r3
 8015438:	d1f8      	bne.n	801542c <_dtoa_r+0x5dc>
 801543a:	9a05      	ldr	r2, [sp, #20]
 801543c:	3201      	adds	r2, #1
 801543e:	9205      	str	r2, [sp, #20]
 8015440:	2230      	movs	r2, #48	@ 0x30
 8015442:	703a      	strb	r2, [r7, #0]
 8015444:	781a      	ldrb	r2, [r3, #0]
 8015446:	3201      	adds	r2, #1
 8015448:	701a      	strb	r2, [r3, #0]
 801544a:	e7b1      	b.n	80153b0 <_dtoa_r+0x560>
 801544c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015450:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015458:	d1b5      	bne.n	80153c6 <_dtoa_r+0x576>
 801545a:	e7d4      	b.n	8015406 <_dtoa_r+0x5b6>
 801545c:	08017078 	.word	0x08017078
 8015460:	08017050 	.word	0x08017050
 8015464:	9908      	ldr	r1, [sp, #32]
 8015466:	2900      	cmp	r1, #0
 8015468:	f000 80e9 	beq.w	801563e <_dtoa_r+0x7ee>
 801546c:	9907      	ldr	r1, [sp, #28]
 801546e:	2901      	cmp	r1, #1
 8015470:	f300 80cb 	bgt.w	801560a <_dtoa_r+0x7ba>
 8015474:	2d00      	cmp	r5, #0
 8015476:	f000 80c4 	beq.w	8015602 <_dtoa_r+0x7b2>
 801547a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801547e:	9e04      	ldr	r6, [sp, #16]
 8015480:	461c      	mov	r4, r3
 8015482:	9305      	str	r3, [sp, #20]
 8015484:	9b04      	ldr	r3, [sp, #16]
 8015486:	4413      	add	r3, r2
 8015488:	9304      	str	r3, [sp, #16]
 801548a:	9b06      	ldr	r3, [sp, #24]
 801548c:	2101      	movs	r1, #1
 801548e:	4413      	add	r3, r2
 8015490:	4648      	mov	r0, r9
 8015492:	9306      	str	r3, [sp, #24]
 8015494:	f000 fb78 	bl	8015b88 <__i2b>
 8015498:	9b05      	ldr	r3, [sp, #20]
 801549a:	4605      	mov	r5, r0
 801549c:	b166      	cbz	r6, 80154b8 <_dtoa_r+0x668>
 801549e:	9a06      	ldr	r2, [sp, #24]
 80154a0:	2a00      	cmp	r2, #0
 80154a2:	dd09      	ble.n	80154b8 <_dtoa_r+0x668>
 80154a4:	42b2      	cmp	r2, r6
 80154a6:	9904      	ldr	r1, [sp, #16]
 80154a8:	bfa8      	it	ge
 80154aa:	4632      	movge	r2, r6
 80154ac:	1a89      	subs	r1, r1, r2
 80154ae:	9104      	str	r1, [sp, #16]
 80154b0:	9906      	ldr	r1, [sp, #24]
 80154b2:	1ab6      	subs	r6, r6, r2
 80154b4:	1a8a      	subs	r2, r1, r2
 80154b6:	9206      	str	r2, [sp, #24]
 80154b8:	b30b      	cbz	r3, 80154fe <_dtoa_r+0x6ae>
 80154ba:	9a08      	ldr	r2, [sp, #32]
 80154bc:	2a00      	cmp	r2, #0
 80154be:	f000 80c5 	beq.w	801564c <_dtoa_r+0x7fc>
 80154c2:	2c00      	cmp	r4, #0
 80154c4:	f000 80bf 	beq.w	8015646 <_dtoa_r+0x7f6>
 80154c8:	4629      	mov	r1, r5
 80154ca:	4622      	mov	r2, r4
 80154cc:	4648      	mov	r0, r9
 80154ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80154d0:	f000 fc12 	bl	8015cf8 <__pow5mult>
 80154d4:	9a01      	ldr	r2, [sp, #4]
 80154d6:	4601      	mov	r1, r0
 80154d8:	4605      	mov	r5, r0
 80154da:	4648      	mov	r0, r9
 80154dc:	f000 fb6a 	bl	8015bb4 <__multiply>
 80154e0:	9901      	ldr	r1, [sp, #4]
 80154e2:	9005      	str	r0, [sp, #20]
 80154e4:	4648      	mov	r0, r9
 80154e6:	f000 fa9b 	bl	8015a20 <_Bfree>
 80154ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80154ec:	1b1b      	subs	r3, r3, r4
 80154ee:	f000 80b0 	beq.w	8015652 <_dtoa_r+0x802>
 80154f2:	9905      	ldr	r1, [sp, #20]
 80154f4:	461a      	mov	r2, r3
 80154f6:	4648      	mov	r0, r9
 80154f8:	f000 fbfe 	bl	8015cf8 <__pow5mult>
 80154fc:	9001      	str	r0, [sp, #4]
 80154fe:	2101      	movs	r1, #1
 8015500:	4648      	mov	r0, r9
 8015502:	f000 fb41 	bl	8015b88 <__i2b>
 8015506:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015508:	4604      	mov	r4, r0
 801550a:	2b00      	cmp	r3, #0
 801550c:	f000 81da 	beq.w	80158c4 <_dtoa_r+0xa74>
 8015510:	461a      	mov	r2, r3
 8015512:	4601      	mov	r1, r0
 8015514:	4648      	mov	r0, r9
 8015516:	f000 fbef 	bl	8015cf8 <__pow5mult>
 801551a:	9b07      	ldr	r3, [sp, #28]
 801551c:	2b01      	cmp	r3, #1
 801551e:	4604      	mov	r4, r0
 8015520:	f300 80a0 	bgt.w	8015664 <_dtoa_r+0x814>
 8015524:	9b02      	ldr	r3, [sp, #8]
 8015526:	2b00      	cmp	r3, #0
 8015528:	f040 8096 	bne.w	8015658 <_dtoa_r+0x808>
 801552c:	9b03      	ldr	r3, [sp, #12]
 801552e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8015532:	2a00      	cmp	r2, #0
 8015534:	f040 8092 	bne.w	801565c <_dtoa_r+0x80c>
 8015538:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801553c:	0d12      	lsrs	r2, r2, #20
 801553e:	0512      	lsls	r2, r2, #20
 8015540:	2a00      	cmp	r2, #0
 8015542:	f000 808d 	beq.w	8015660 <_dtoa_r+0x810>
 8015546:	9b04      	ldr	r3, [sp, #16]
 8015548:	3301      	adds	r3, #1
 801554a:	9304      	str	r3, [sp, #16]
 801554c:	9b06      	ldr	r3, [sp, #24]
 801554e:	3301      	adds	r3, #1
 8015550:	9306      	str	r3, [sp, #24]
 8015552:	2301      	movs	r3, #1
 8015554:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015556:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015558:	2b00      	cmp	r3, #0
 801555a:	f000 81b9 	beq.w	80158d0 <_dtoa_r+0xa80>
 801555e:	6922      	ldr	r2, [r4, #16]
 8015560:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015564:	6910      	ldr	r0, [r2, #16]
 8015566:	f000 fac3 	bl	8015af0 <__hi0bits>
 801556a:	f1c0 0020 	rsb	r0, r0, #32
 801556e:	9b06      	ldr	r3, [sp, #24]
 8015570:	4418      	add	r0, r3
 8015572:	f010 001f 	ands.w	r0, r0, #31
 8015576:	f000 8081 	beq.w	801567c <_dtoa_r+0x82c>
 801557a:	f1c0 0220 	rsb	r2, r0, #32
 801557e:	2a04      	cmp	r2, #4
 8015580:	dd73      	ble.n	801566a <_dtoa_r+0x81a>
 8015582:	9b04      	ldr	r3, [sp, #16]
 8015584:	f1c0 001c 	rsb	r0, r0, #28
 8015588:	4403      	add	r3, r0
 801558a:	9304      	str	r3, [sp, #16]
 801558c:	9b06      	ldr	r3, [sp, #24]
 801558e:	4406      	add	r6, r0
 8015590:	4403      	add	r3, r0
 8015592:	9306      	str	r3, [sp, #24]
 8015594:	9b04      	ldr	r3, [sp, #16]
 8015596:	2b00      	cmp	r3, #0
 8015598:	dd05      	ble.n	80155a6 <_dtoa_r+0x756>
 801559a:	9901      	ldr	r1, [sp, #4]
 801559c:	461a      	mov	r2, r3
 801559e:	4648      	mov	r0, r9
 80155a0:	f000 fc04 	bl	8015dac <__lshift>
 80155a4:	9001      	str	r0, [sp, #4]
 80155a6:	9b06      	ldr	r3, [sp, #24]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	dd05      	ble.n	80155b8 <_dtoa_r+0x768>
 80155ac:	4621      	mov	r1, r4
 80155ae:	461a      	mov	r2, r3
 80155b0:	4648      	mov	r0, r9
 80155b2:	f000 fbfb 	bl	8015dac <__lshift>
 80155b6:	4604      	mov	r4, r0
 80155b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d060      	beq.n	8015680 <_dtoa_r+0x830>
 80155be:	9801      	ldr	r0, [sp, #4]
 80155c0:	4621      	mov	r1, r4
 80155c2:	f000 fc5f 	bl	8015e84 <__mcmp>
 80155c6:	2800      	cmp	r0, #0
 80155c8:	da5a      	bge.n	8015680 <_dtoa_r+0x830>
 80155ca:	f108 33ff 	add.w	r3, r8, #4294967295
 80155ce:	9305      	str	r3, [sp, #20]
 80155d0:	9901      	ldr	r1, [sp, #4]
 80155d2:	2300      	movs	r3, #0
 80155d4:	220a      	movs	r2, #10
 80155d6:	4648      	mov	r0, r9
 80155d8:	f000 fa44 	bl	8015a64 <__multadd>
 80155dc:	9b08      	ldr	r3, [sp, #32]
 80155de:	9001      	str	r0, [sp, #4]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	f000 8177 	beq.w	80158d4 <_dtoa_r+0xa84>
 80155e6:	4629      	mov	r1, r5
 80155e8:	2300      	movs	r3, #0
 80155ea:	220a      	movs	r2, #10
 80155ec:	4648      	mov	r0, r9
 80155ee:	f000 fa39 	bl	8015a64 <__multadd>
 80155f2:	f1bb 0f00 	cmp.w	fp, #0
 80155f6:	4605      	mov	r5, r0
 80155f8:	dc6e      	bgt.n	80156d8 <_dtoa_r+0x888>
 80155fa:	9b07      	ldr	r3, [sp, #28]
 80155fc:	2b02      	cmp	r3, #2
 80155fe:	dc48      	bgt.n	8015692 <_dtoa_r+0x842>
 8015600:	e06a      	b.n	80156d8 <_dtoa_r+0x888>
 8015602:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015604:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8015608:	e739      	b.n	801547e <_dtoa_r+0x62e>
 801560a:	f10a 34ff 	add.w	r4, sl, #4294967295
 801560e:	42a3      	cmp	r3, r4
 8015610:	db07      	blt.n	8015622 <_dtoa_r+0x7d2>
 8015612:	f1ba 0f00 	cmp.w	sl, #0
 8015616:	eba3 0404 	sub.w	r4, r3, r4
 801561a:	db0b      	blt.n	8015634 <_dtoa_r+0x7e4>
 801561c:	9e04      	ldr	r6, [sp, #16]
 801561e:	4652      	mov	r2, sl
 8015620:	e72f      	b.n	8015482 <_dtoa_r+0x632>
 8015622:	1ae2      	subs	r2, r4, r3
 8015624:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015626:	9e04      	ldr	r6, [sp, #16]
 8015628:	4413      	add	r3, r2
 801562a:	930a      	str	r3, [sp, #40]	@ 0x28
 801562c:	4652      	mov	r2, sl
 801562e:	4623      	mov	r3, r4
 8015630:	2400      	movs	r4, #0
 8015632:	e726      	b.n	8015482 <_dtoa_r+0x632>
 8015634:	9a04      	ldr	r2, [sp, #16]
 8015636:	eba2 060a 	sub.w	r6, r2, sl
 801563a:	2200      	movs	r2, #0
 801563c:	e721      	b.n	8015482 <_dtoa_r+0x632>
 801563e:	9e04      	ldr	r6, [sp, #16]
 8015640:	9d08      	ldr	r5, [sp, #32]
 8015642:	461c      	mov	r4, r3
 8015644:	e72a      	b.n	801549c <_dtoa_r+0x64c>
 8015646:	9a01      	ldr	r2, [sp, #4]
 8015648:	9205      	str	r2, [sp, #20]
 801564a:	e752      	b.n	80154f2 <_dtoa_r+0x6a2>
 801564c:	9901      	ldr	r1, [sp, #4]
 801564e:	461a      	mov	r2, r3
 8015650:	e751      	b.n	80154f6 <_dtoa_r+0x6a6>
 8015652:	9b05      	ldr	r3, [sp, #20]
 8015654:	9301      	str	r3, [sp, #4]
 8015656:	e752      	b.n	80154fe <_dtoa_r+0x6ae>
 8015658:	2300      	movs	r3, #0
 801565a:	e77b      	b.n	8015554 <_dtoa_r+0x704>
 801565c:	9b02      	ldr	r3, [sp, #8]
 801565e:	e779      	b.n	8015554 <_dtoa_r+0x704>
 8015660:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015662:	e778      	b.n	8015556 <_dtoa_r+0x706>
 8015664:	2300      	movs	r3, #0
 8015666:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015668:	e779      	b.n	801555e <_dtoa_r+0x70e>
 801566a:	d093      	beq.n	8015594 <_dtoa_r+0x744>
 801566c:	9b04      	ldr	r3, [sp, #16]
 801566e:	321c      	adds	r2, #28
 8015670:	4413      	add	r3, r2
 8015672:	9304      	str	r3, [sp, #16]
 8015674:	9b06      	ldr	r3, [sp, #24]
 8015676:	4416      	add	r6, r2
 8015678:	4413      	add	r3, r2
 801567a:	e78a      	b.n	8015592 <_dtoa_r+0x742>
 801567c:	4602      	mov	r2, r0
 801567e:	e7f5      	b.n	801566c <_dtoa_r+0x81c>
 8015680:	f1ba 0f00 	cmp.w	sl, #0
 8015684:	f8cd 8014 	str.w	r8, [sp, #20]
 8015688:	46d3      	mov	fp, sl
 801568a:	dc21      	bgt.n	80156d0 <_dtoa_r+0x880>
 801568c:	9b07      	ldr	r3, [sp, #28]
 801568e:	2b02      	cmp	r3, #2
 8015690:	dd1e      	ble.n	80156d0 <_dtoa_r+0x880>
 8015692:	f1bb 0f00 	cmp.w	fp, #0
 8015696:	f47f addc 	bne.w	8015252 <_dtoa_r+0x402>
 801569a:	4621      	mov	r1, r4
 801569c:	465b      	mov	r3, fp
 801569e:	2205      	movs	r2, #5
 80156a0:	4648      	mov	r0, r9
 80156a2:	f000 f9df 	bl	8015a64 <__multadd>
 80156a6:	4601      	mov	r1, r0
 80156a8:	4604      	mov	r4, r0
 80156aa:	9801      	ldr	r0, [sp, #4]
 80156ac:	f000 fbea 	bl	8015e84 <__mcmp>
 80156b0:	2800      	cmp	r0, #0
 80156b2:	f77f adce 	ble.w	8015252 <_dtoa_r+0x402>
 80156b6:	463e      	mov	r6, r7
 80156b8:	2331      	movs	r3, #49	@ 0x31
 80156ba:	f806 3b01 	strb.w	r3, [r6], #1
 80156be:	9b05      	ldr	r3, [sp, #20]
 80156c0:	3301      	adds	r3, #1
 80156c2:	9305      	str	r3, [sp, #20]
 80156c4:	e5c9      	b.n	801525a <_dtoa_r+0x40a>
 80156c6:	f8cd 8014 	str.w	r8, [sp, #20]
 80156ca:	4654      	mov	r4, sl
 80156cc:	4625      	mov	r5, r4
 80156ce:	e7f2      	b.n	80156b6 <_dtoa_r+0x866>
 80156d0:	9b08      	ldr	r3, [sp, #32]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	f000 8102 	beq.w	80158dc <_dtoa_r+0xa8c>
 80156d8:	2e00      	cmp	r6, #0
 80156da:	dd05      	ble.n	80156e8 <_dtoa_r+0x898>
 80156dc:	4629      	mov	r1, r5
 80156de:	4632      	mov	r2, r6
 80156e0:	4648      	mov	r0, r9
 80156e2:	f000 fb63 	bl	8015dac <__lshift>
 80156e6:	4605      	mov	r5, r0
 80156e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d058      	beq.n	80157a0 <_dtoa_r+0x950>
 80156ee:	6869      	ldr	r1, [r5, #4]
 80156f0:	4648      	mov	r0, r9
 80156f2:	f000 f955 	bl	80159a0 <_Balloc>
 80156f6:	4606      	mov	r6, r0
 80156f8:	b928      	cbnz	r0, 8015706 <_dtoa_r+0x8b6>
 80156fa:	4b82      	ldr	r3, [pc, #520]	@ (8015904 <_dtoa_r+0xab4>)
 80156fc:	4602      	mov	r2, r0
 80156fe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8015702:	f7ff bbbe 	b.w	8014e82 <_dtoa_r+0x32>
 8015706:	692a      	ldr	r2, [r5, #16]
 8015708:	3202      	adds	r2, #2
 801570a:	0092      	lsls	r2, r2, #2
 801570c:	f105 010c 	add.w	r1, r5, #12
 8015710:	300c      	adds	r0, #12
 8015712:	f7ff fb06 	bl	8014d22 <memcpy>
 8015716:	2201      	movs	r2, #1
 8015718:	4631      	mov	r1, r6
 801571a:	4648      	mov	r0, r9
 801571c:	f000 fb46 	bl	8015dac <__lshift>
 8015720:	1c7b      	adds	r3, r7, #1
 8015722:	9304      	str	r3, [sp, #16]
 8015724:	eb07 030b 	add.w	r3, r7, fp
 8015728:	9309      	str	r3, [sp, #36]	@ 0x24
 801572a:	9b02      	ldr	r3, [sp, #8]
 801572c:	f003 0301 	and.w	r3, r3, #1
 8015730:	46a8      	mov	r8, r5
 8015732:	9308      	str	r3, [sp, #32]
 8015734:	4605      	mov	r5, r0
 8015736:	9b04      	ldr	r3, [sp, #16]
 8015738:	9801      	ldr	r0, [sp, #4]
 801573a:	4621      	mov	r1, r4
 801573c:	f103 3bff 	add.w	fp, r3, #4294967295
 8015740:	f7ff fafd 	bl	8014d3e <quorem>
 8015744:	4641      	mov	r1, r8
 8015746:	9002      	str	r0, [sp, #8]
 8015748:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801574c:	9801      	ldr	r0, [sp, #4]
 801574e:	f000 fb99 	bl	8015e84 <__mcmp>
 8015752:	462a      	mov	r2, r5
 8015754:	9006      	str	r0, [sp, #24]
 8015756:	4621      	mov	r1, r4
 8015758:	4648      	mov	r0, r9
 801575a:	f000 fbaf 	bl	8015ebc <__mdiff>
 801575e:	68c2      	ldr	r2, [r0, #12]
 8015760:	4606      	mov	r6, r0
 8015762:	b9fa      	cbnz	r2, 80157a4 <_dtoa_r+0x954>
 8015764:	4601      	mov	r1, r0
 8015766:	9801      	ldr	r0, [sp, #4]
 8015768:	f000 fb8c 	bl	8015e84 <__mcmp>
 801576c:	4602      	mov	r2, r0
 801576e:	4631      	mov	r1, r6
 8015770:	4648      	mov	r0, r9
 8015772:	920a      	str	r2, [sp, #40]	@ 0x28
 8015774:	f000 f954 	bl	8015a20 <_Bfree>
 8015778:	9b07      	ldr	r3, [sp, #28]
 801577a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801577c:	9e04      	ldr	r6, [sp, #16]
 801577e:	ea42 0103 	orr.w	r1, r2, r3
 8015782:	9b08      	ldr	r3, [sp, #32]
 8015784:	4319      	orrs	r1, r3
 8015786:	d10f      	bne.n	80157a8 <_dtoa_r+0x958>
 8015788:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801578c:	d028      	beq.n	80157e0 <_dtoa_r+0x990>
 801578e:	9b06      	ldr	r3, [sp, #24]
 8015790:	2b00      	cmp	r3, #0
 8015792:	dd02      	ble.n	801579a <_dtoa_r+0x94a>
 8015794:	9b02      	ldr	r3, [sp, #8]
 8015796:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801579a:	f88b a000 	strb.w	sl, [fp]
 801579e:	e55e      	b.n	801525e <_dtoa_r+0x40e>
 80157a0:	4628      	mov	r0, r5
 80157a2:	e7bd      	b.n	8015720 <_dtoa_r+0x8d0>
 80157a4:	2201      	movs	r2, #1
 80157a6:	e7e2      	b.n	801576e <_dtoa_r+0x91e>
 80157a8:	9b06      	ldr	r3, [sp, #24]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	db04      	blt.n	80157b8 <_dtoa_r+0x968>
 80157ae:	9907      	ldr	r1, [sp, #28]
 80157b0:	430b      	orrs	r3, r1
 80157b2:	9908      	ldr	r1, [sp, #32]
 80157b4:	430b      	orrs	r3, r1
 80157b6:	d120      	bne.n	80157fa <_dtoa_r+0x9aa>
 80157b8:	2a00      	cmp	r2, #0
 80157ba:	ddee      	ble.n	801579a <_dtoa_r+0x94a>
 80157bc:	9901      	ldr	r1, [sp, #4]
 80157be:	2201      	movs	r2, #1
 80157c0:	4648      	mov	r0, r9
 80157c2:	f000 faf3 	bl	8015dac <__lshift>
 80157c6:	4621      	mov	r1, r4
 80157c8:	9001      	str	r0, [sp, #4]
 80157ca:	f000 fb5b 	bl	8015e84 <__mcmp>
 80157ce:	2800      	cmp	r0, #0
 80157d0:	dc03      	bgt.n	80157da <_dtoa_r+0x98a>
 80157d2:	d1e2      	bne.n	801579a <_dtoa_r+0x94a>
 80157d4:	f01a 0f01 	tst.w	sl, #1
 80157d8:	d0df      	beq.n	801579a <_dtoa_r+0x94a>
 80157da:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80157de:	d1d9      	bne.n	8015794 <_dtoa_r+0x944>
 80157e0:	2339      	movs	r3, #57	@ 0x39
 80157e2:	f88b 3000 	strb.w	r3, [fp]
 80157e6:	4633      	mov	r3, r6
 80157e8:	461e      	mov	r6, r3
 80157ea:	3b01      	subs	r3, #1
 80157ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80157f0:	2a39      	cmp	r2, #57	@ 0x39
 80157f2:	d052      	beq.n	801589a <_dtoa_r+0xa4a>
 80157f4:	3201      	adds	r2, #1
 80157f6:	701a      	strb	r2, [r3, #0]
 80157f8:	e531      	b.n	801525e <_dtoa_r+0x40e>
 80157fa:	2a00      	cmp	r2, #0
 80157fc:	dd07      	ble.n	801580e <_dtoa_r+0x9be>
 80157fe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8015802:	d0ed      	beq.n	80157e0 <_dtoa_r+0x990>
 8015804:	f10a 0301 	add.w	r3, sl, #1
 8015808:	f88b 3000 	strb.w	r3, [fp]
 801580c:	e527      	b.n	801525e <_dtoa_r+0x40e>
 801580e:	9b04      	ldr	r3, [sp, #16]
 8015810:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015812:	f803 ac01 	strb.w	sl, [r3, #-1]
 8015816:	4293      	cmp	r3, r2
 8015818:	d029      	beq.n	801586e <_dtoa_r+0xa1e>
 801581a:	9901      	ldr	r1, [sp, #4]
 801581c:	2300      	movs	r3, #0
 801581e:	220a      	movs	r2, #10
 8015820:	4648      	mov	r0, r9
 8015822:	f000 f91f 	bl	8015a64 <__multadd>
 8015826:	45a8      	cmp	r8, r5
 8015828:	9001      	str	r0, [sp, #4]
 801582a:	f04f 0300 	mov.w	r3, #0
 801582e:	f04f 020a 	mov.w	r2, #10
 8015832:	4641      	mov	r1, r8
 8015834:	4648      	mov	r0, r9
 8015836:	d107      	bne.n	8015848 <_dtoa_r+0x9f8>
 8015838:	f000 f914 	bl	8015a64 <__multadd>
 801583c:	4680      	mov	r8, r0
 801583e:	4605      	mov	r5, r0
 8015840:	9b04      	ldr	r3, [sp, #16]
 8015842:	3301      	adds	r3, #1
 8015844:	9304      	str	r3, [sp, #16]
 8015846:	e776      	b.n	8015736 <_dtoa_r+0x8e6>
 8015848:	f000 f90c 	bl	8015a64 <__multadd>
 801584c:	4629      	mov	r1, r5
 801584e:	4680      	mov	r8, r0
 8015850:	2300      	movs	r3, #0
 8015852:	220a      	movs	r2, #10
 8015854:	4648      	mov	r0, r9
 8015856:	f000 f905 	bl	8015a64 <__multadd>
 801585a:	4605      	mov	r5, r0
 801585c:	e7f0      	b.n	8015840 <_dtoa_r+0x9f0>
 801585e:	f1bb 0f00 	cmp.w	fp, #0
 8015862:	bfcc      	ite	gt
 8015864:	465e      	movgt	r6, fp
 8015866:	2601      	movle	r6, #1
 8015868:	443e      	add	r6, r7
 801586a:	f04f 0800 	mov.w	r8, #0
 801586e:	9901      	ldr	r1, [sp, #4]
 8015870:	2201      	movs	r2, #1
 8015872:	4648      	mov	r0, r9
 8015874:	f000 fa9a 	bl	8015dac <__lshift>
 8015878:	4621      	mov	r1, r4
 801587a:	9001      	str	r0, [sp, #4]
 801587c:	f000 fb02 	bl	8015e84 <__mcmp>
 8015880:	2800      	cmp	r0, #0
 8015882:	dcb0      	bgt.n	80157e6 <_dtoa_r+0x996>
 8015884:	d102      	bne.n	801588c <_dtoa_r+0xa3c>
 8015886:	f01a 0f01 	tst.w	sl, #1
 801588a:	d1ac      	bne.n	80157e6 <_dtoa_r+0x996>
 801588c:	4633      	mov	r3, r6
 801588e:	461e      	mov	r6, r3
 8015890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015894:	2a30      	cmp	r2, #48	@ 0x30
 8015896:	d0fa      	beq.n	801588e <_dtoa_r+0xa3e>
 8015898:	e4e1      	b.n	801525e <_dtoa_r+0x40e>
 801589a:	429f      	cmp	r7, r3
 801589c:	d1a4      	bne.n	80157e8 <_dtoa_r+0x998>
 801589e:	9b05      	ldr	r3, [sp, #20]
 80158a0:	3301      	adds	r3, #1
 80158a2:	9305      	str	r3, [sp, #20]
 80158a4:	2331      	movs	r3, #49	@ 0x31
 80158a6:	703b      	strb	r3, [r7, #0]
 80158a8:	e4d9      	b.n	801525e <_dtoa_r+0x40e>
 80158aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80158ac:	4f16      	ldr	r7, [pc, #88]	@ (8015908 <_dtoa_r+0xab8>)
 80158ae:	b11b      	cbz	r3, 80158b8 <_dtoa_r+0xa68>
 80158b0:	f107 0308 	add.w	r3, r7, #8
 80158b4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80158b6:	6013      	str	r3, [r2, #0]
 80158b8:	4638      	mov	r0, r7
 80158ba:	b011      	add	sp, #68	@ 0x44
 80158bc:	ecbd 8b02 	vpop	{d8}
 80158c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158c4:	9b07      	ldr	r3, [sp, #28]
 80158c6:	2b01      	cmp	r3, #1
 80158c8:	f77f ae2c 	ble.w	8015524 <_dtoa_r+0x6d4>
 80158cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80158ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80158d0:	2001      	movs	r0, #1
 80158d2:	e64c      	b.n	801556e <_dtoa_r+0x71e>
 80158d4:	f1bb 0f00 	cmp.w	fp, #0
 80158d8:	f77f aed8 	ble.w	801568c <_dtoa_r+0x83c>
 80158dc:	463e      	mov	r6, r7
 80158de:	9801      	ldr	r0, [sp, #4]
 80158e0:	4621      	mov	r1, r4
 80158e2:	f7ff fa2c 	bl	8014d3e <quorem>
 80158e6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80158ea:	f806 ab01 	strb.w	sl, [r6], #1
 80158ee:	1bf2      	subs	r2, r6, r7
 80158f0:	4593      	cmp	fp, r2
 80158f2:	ddb4      	ble.n	801585e <_dtoa_r+0xa0e>
 80158f4:	9901      	ldr	r1, [sp, #4]
 80158f6:	2300      	movs	r3, #0
 80158f8:	220a      	movs	r2, #10
 80158fa:	4648      	mov	r0, r9
 80158fc:	f000 f8b2 	bl	8015a64 <__multadd>
 8015900:	9001      	str	r0, [sp, #4]
 8015902:	e7ec      	b.n	80158de <_dtoa_r+0xa8e>
 8015904:	08016f7c 	.word	0x08016f7c
 8015908:	08016f00 	.word	0x08016f00

0801590c <_free_r>:
 801590c:	b538      	push	{r3, r4, r5, lr}
 801590e:	4605      	mov	r5, r0
 8015910:	2900      	cmp	r1, #0
 8015912:	d041      	beq.n	8015998 <_free_r+0x8c>
 8015914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015918:	1f0c      	subs	r4, r1, #4
 801591a:	2b00      	cmp	r3, #0
 801591c:	bfb8      	it	lt
 801591e:	18e4      	addlt	r4, r4, r3
 8015920:	f7fe fac6 	bl	8013eb0 <__malloc_lock>
 8015924:	4a1d      	ldr	r2, [pc, #116]	@ (801599c <_free_r+0x90>)
 8015926:	6813      	ldr	r3, [r2, #0]
 8015928:	b933      	cbnz	r3, 8015938 <_free_r+0x2c>
 801592a:	6063      	str	r3, [r4, #4]
 801592c:	6014      	str	r4, [r2, #0]
 801592e:	4628      	mov	r0, r5
 8015930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015934:	f7fe bac2 	b.w	8013ebc <__malloc_unlock>
 8015938:	42a3      	cmp	r3, r4
 801593a:	d908      	bls.n	801594e <_free_r+0x42>
 801593c:	6820      	ldr	r0, [r4, #0]
 801593e:	1821      	adds	r1, r4, r0
 8015940:	428b      	cmp	r3, r1
 8015942:	bf01      	itttt	eq
 8015944:	6819      	ldreq	r1, [r3, #0]
 8015946:	685b      	ldreq	r3, [r3, #4]
 8015948:	1809      	addeq	r1, r1, r0
 801594a:	6021      	streq	r1, [r4, #0]
 801594c:	e7ed      	b.n	801592a <_free_r+0x1e>
 801594e:	461a      	mov	r2, r3
 8015950:	685b      	ldr	r3, [r3, #4]
 8015952:	b10b      	cbz	r3, 8015958 <_free_r+0x4c>
 8015954:	42a3      	cmp	r3, r4
 8015956:	d9fa      	bls.n	801594e <_free_r+0x42>
 8015958:	6811      	ldr	r1, [r2, #0]
 801595a:	1850      	adds	r0, r2, r1
 801595c:	42a0      	cmp	r0, r4
 801595e:	d10b      	bne.n	8015978 <_free_r+0x6c>
 8015960:	6820      	ldr	r0, [r4, #0]
 8015962:	4401      	add	r1, r0
 8015964:	1850      	adds	r0, r2, r1
 8015966:	4283      	cmp	r3, r0
 8015968:	6011      	str	r1, [r2, #0]
 801596a:	d1e0      	bne.n	801592e <_free_r+0x22>
 801596c:	6818      	ldr	r0, [r3, #0]
 801596e:	685b      	ldr	r3, [r3, #4]
 8015970:	6053      	str	r3, [r2, #4]
 8015972:	4408      	add	r0, r1
 8015974:	6010      	str	r0, [r2, #0]
 8015976:	e7da      	b.n	801592e <_free_r+0x22>
 8015978:	d902      	bls.n	8015980 <_free_r+0x74>
 801597a:	230c      	movs	r3, #12
 801597c:	602b      	str	r3, [r5, #0]
 801597e:	e7d6      	b.n	801592e <_free_r+0x22>
 8015980:	6820      	ldr	r0, [r4, #0]
 8015982:	1821      	adds	r1, r4, r0
 8015984:	428b      	cmp	r3, r1
 8015986:	bf04      	itt	eq
 8015988:	6819      	ldreq	r1, [r3, #0]
 801598a:	685b      	ldreq	r3, [r3, #4]
 801598c:	6063      	str	r3, [r4, #4]
 801598e:	bf04      	itt	eq
 8015990:	1809      	addeq	r1, r1, r0
 8015992:	6021      	streq	r1, [r4, #0]
 8015994:	6054      	str	r4, [r2, #4]
 8015996:	e7ca      	b.n	801592e <_free_r+0x22>
 8015998:	bd38      	pop	{r3, r4, r5, pc}
 801599a:	bf00      	nop
 801599c:	2000d8dc 	.word	0x2000d8dc

080159a0 <_Balloc>:
 80159a0:	b570      	push	{r4, r5, r6, lr}
 80159a2:	69c6      	ldr	r6, [r0, #28]
 80159a4:	4604      	mov	r4, r0
 80159a6:	460d      	mov	r5, r1
 80159a8:	b976      	cbnz	r6, 80159c8 <_Balloc+0x28>
 80159aa:	2010      	movs	r0, #16
 80159ac:	f7fe f9d6 	bl	8013d5c <malloc>
 80159b0:	4602      	mov	r2, r0
 80159b2:	61e0      	str	r0, [r4, #28]
 80159b4:	b920      	cbnz	r0, 80159c0 <_Balloc+0x20>
 80159b6:	4b18      	ldr	r3, [pc, #96]	@ (8015a18 <_Balloc+0x78>)
 80159b8:	4818      	ldr	r0, [pc, #96]	@ (8015a1c <_Balloc+0x7c>)
 80159ba:	216b      	movs	r1, #107	@ 0x6b
 80159bc:	f000 fddc 	bl	8016578 <__assert_func>
 80159c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80159c4:	6006      	str	r6, [r0, #0]
 80159c6:	60c6      	str	r6, [r0, #12]
 80159c8:	69e6      	ldr	r6, [r4, #28]
 80159ca:	68f3      	ldr	r3, [r6, #12]
 80159cc:	b183      	cbz	r3, 80159f0 <_Balloc+0x50>
 80159ce:	69e3      	ldr	r3, [r4, #28]
 80159d0:	68db      	ldr	r3, [r3, #12]
 80159d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80159d6:	b9b8      	cbnz	r0, 8015a08 <_Balloc+0x68>
 80159d8:	2101      	movs	r1, #1
 80159da:	fa01 f605 	lsl.w	r6, r1, r5
 80159de:	1d72      	adds	r2, r6, #5
 80159e0:	0092      	lsls	r2, r2, #2
 80159e2:	4620      	mov	r0, r4
 80159e4:	f000 fde6 	bl	80165b4 <_calloc_r>
 80159e8:	b160      	cbz	r0, 8015a04 <_Balloc+0x64>
 80159ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80159ee:	e00e      	b.n	8015a0e <_Balloc+0x6e>
 80159f0:	2221      	movs	r2, #33	@ 0x21
 80159f2:	2104      	movs	r1, #4
 80159f4:	4620      	mov	r0, r4
 80159f6:	f000 fddd 	bl	80165b4 <_calloc_r>
 80159fa:	69e3      	ldr	r3, [r4, #28]
 80159fc:	60f0      	str	r0, [r6, #12]
 80159fe:	68db      	ldr	r3, [r3, #12]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d1e4      	bne.n	80159ce <_Balloc+0x2e>
 8015a04:	2000      	movs	r0, #0
 8015a06:	bd70      	pop	{r4, r5, r6, pc}
 8015a08:	6802      	ldr	r2, [r0, #0]
 8015a0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015a0e:	2300      	movs	r3, #0
 8015a10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015a14:	e7f7      	b.n	8015a06 <_Balloc+0x66>
 8015a16:	bf00      	nop
 8015a18:	08016f0d 	.word	0x08016f0d
 8015a1c:	08016f8d 	.word	0x08016f8d

08015a20 <_Bfree>:
 8015a20:	b570      	push	{r4, r5, r6, lr}
 8015a22:	69c6      	ldr	r6, [r0, #28]
 8015a24:	4605      	mov	r5, r0
 8015a26:	460c      	mov	r4, r1
 8015a28:	b976      	cbnz	r6, 8015a48 <_Bfree+0x28>
 8015a2a:	2010      	movs	r0, #16
 8015a2c:	f7fe f996 	bl	8013d5c <malloc>
 8015a30:	4602      	mov	r2, r0
 8015a32:	61e8      	str	r0, [r5, #28]
 8015a34:	b920      	cbnz	r0, 8015a40 <_Bfree+0x20>
 8015a36:	4b09      	ldr	r3, [pc, #36]	@ (8015a5c <_Bfree+0x3c>)
 8015a38:	4809      	ldr	r0, [pc, #36]	@ (8015a60 <_Bfree+0x40>)
 8015a3a:	218f      	movs	r1, #143	@ 0x8f
 8015a3c:	f000 fd9c 	bl	8016578 <__assert_func>
 8015a40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015a44:	6006      	str	r6, [r0, #0]
 8015a46:	60c6      	str	r6, [r0, #12]
 8015a48:	b13c      	cbz	r4, 8015a5a <_Bfree+0x3a>
 8015a4a:	69eb      	ldr	r3, [r5, #28]
 8015a4c:	6862      	ldr	r2, [r4, #4]
 8015a4e:	68db      	ldr	r3, [r3, #12]
 8015a50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015a54:	6021      	str	r1, [r4, #0]
 8015a56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015a5a:	bd70      	pop	{r4, r5, r6, pc}
 8015a5c:	08016f0d 	.word	0x08016f0d
 8015a60:	08016f8d 	.word	0x08016f8d

08015a64 <__multadd>:
 8015a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a68:	690d      	ldr	r5, [r1, #16]
 8015a6a:	4607      	mov	r7, r0
 8015a6c:	460c      	mov	r4, r1
 8015a6e:	461e      	mov	r6, r3
 8015a70:	f101 0c14 	add.w	ip, r1, #20
 8015a74:	2000      	movs	r0, #0
 8015a76:	f8dc 3000 	ldr.w	r3, [ip]
 8015a7a:	b299      	uxth	r1, r3
 8015a7c:	fb02 6101 	mla	r1, r2, r1, r6
 8015a80:	0c1e      	lsrs	r6, r3, #16
 8015a82:	0c0b      	lsrs	r3, r1, #16
 8015a84:	fb02 3306 	mla	r3, r2, r6, r3
 8015a88:	b289      	uxth	r1, r1
 8015a8a:	3001      	adds	r0, #1
 8015a8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015a90:	4285      	cmp	r5, r0
 8015a92:	f84c 1b04 	str.w	r1, [ip], #4
 8015a96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015a9a:	dcec      	bgt.n	8015a76 <__multadd+0x12>
 8015a9c:	b30e      	cbz	r6, 8015ae2 <__multadd+0x7e>
 8015a9e:	68a3      	ldr	r3, [r4, #8]
 8015aa0:	42ab      	cmp	r3, r5
 8015aa2:	dc19      	bgt.n	8015ad8 <__multadd+0x74>
 8015aa4:	6861      	ldr	r1, [r4, #4]
 8015aa6:	4638      	mov	r0, r7
 8015aa8:	3101      	adds	r1, #1
 8015aaa:	f7ff ff79 	bl	80159a0 <_Balloc>
 8015aae:	4680      	mov	r8, r0
 8015ab0:	b928      	cbnz	r0, 8015abe <__multadd+0x5a>
 8015ab2:	4602      	mov	r2, r0
 8015ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8015ae8 <__multadd+0x84>)
 8015ab6:	480d      	ldr	r0, [pc, #52]	@ (8015aec <__multadd+0x88>)
 8015ab8:	21ba      	movs	r1, #186	@ 0xba
 8015aba:	f000 fd5d 	bl	8016578 <__assert_func>
 8015abe:	6922      	ldr	r2, [r4, #16]
 8015ac0:	3202      	adds	r2, #2
 8015ac2:	f104 010c 	add.w	r1, r4, #12
 8015ac6:	0092      	lsls	r2, r2, #2
 8015ac8:	300c      	adds	r0, #12
 8015aca:	f7ff f92a 	bl	8014d22 <memcpy>
 8015ace:	4621      	mov	r1, r4
 8015ad0:	4638      	mov	r0, r7
 8015ad2:	f7ff ffa5 	bl	8015a20 <_Bfree>
 8015ad6:	4644      	mov	r4, r8
 8015ad8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015adc:	3501      	adds	r5, #1
 8015ade:	615e      	str	r6, [r3, #20]
 8015ae0:	6125      	str	r5, [r4, #16]
 8015ae2:	4620      	mov	r0, r4
 8015ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ae8:	08016f7c 	.word	0x08016f7c
 8015aec:	08016f8d 	.word	0x08016f8d

08015af0 <__hi0bits>:
 8015af0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015af4:	4603      	mov	r3, r0
 8015af6:	bf36      	itet	cc
 8015af8:	0403      	lslcc	r3, r0, #16
 8015afa:	2000      	movcs	r0, #0
 8015afc:	2010      	movcc	r0, #16
 8015afe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015b02:	bf3c      	itt	cc
 8015b04:	021b      	lslcc	r3, r3, #8
 8015b06:	3008      	addcc	r0, #8
 8015b08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015b0c:	bf3c      	itt	cc
 8015b0e:	011b      	lslcc	r3, r3, #4
 8015b10:	3004      	addcc	r0, #4
 8015b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015b16:	bf3c      	itt	cc
 8015b18:	009b      	lslcc	r3, r3, #2
 8015b1a:	3002      	addcc	r0, #2
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	db05      	blt.n	8015b2c <__hi0bits+0x3c>
 8015b20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015b24:	f100 0001 	add.w	r0, r0, #1
 8015b28:	bf08      	it	eq
 8015b2a:	2020      	moveq	r0, #32
 8015b2c:	4770      	bx	lr

08015b2e <__lo0bits>:
 8015b2e:	6803      	ldr	r3, [r0, #0]
 8015b30:	4602      	mov	r2, r0
 8015b32:	f013 0007 	ands.w	r0, r3, #7
 8015b36:	d00b      	beq.n	8015b50 <__lo0bits+0x22>
 8015b38:	07d9      	lsls	r1, r3, #31
 8015b3a:	d421      	bmi.n	8015b80 <__lo0bits+0x52>
 8015b3c:	0798      	lsls	r0, r3, #30
 8015b3e:	bf49      	itett	mi
 8015b40:	085b      	lsrmi	r3, r3, #1
 8015b42:	089b      	lsrpl	r3, r3, #2
 8015b44:	2001      	movmi	r0, #1
 8015b46:	6013      	strmi	r3, [r2, #0]
 8015b48:	bf5c      	itt	pl
 8015b4a:	6013      	strpl	r3, [r2, #0]
 8015b4c:	2002      	movpl	r0, #2
 8015b4e:	4770      	bx	lr
 8015b50:	b299      	uxth	r1, r3
 8015b52:	b909      	cbnz	r1, 8015b58 <__lo0bits+0x2a>
 8015b54:	0c1b      	lsrs	r3, r3, #16
 8015b56:	2010      	movs	r0, #16
 8015b58:	b2d9      	uxtb	r1, r3
 8015b5a:	b909      	cbnz	r1, 8015b60 <__lo0bits+0x32>
 8015b5c:	3008      	adds	r0, #8
 8015b5e:	0a1b      	lsrs	r3, r3, #8
 8015b60:	0719      	lsls	r1, r3, #28
 8015b62:	bf04      	itt	eq
 8015b64:	091b      	lsreq	r3, r3, #4
 8015b66:	3004      	addeq	r0, #4
 8015b68:	0799      	lsls	r1, r3, #30
 8015b6a:	bf04      	itt	eq
 8015b6c:	089b      	lsreq	r3, r3, #2
 8015b6e:	3002      	addeq	r0, #2
 8015b70:	07d9      	lsls	r1, r3, #31
 8015b72:	d403      	bmi.n	8015b7c <__lo0bits+0x4e>
 8015b74:	085b      	lsrs	r3, r3, #1
 8015b76:	f100 0001 	add.w	r0, r0, #1
 8015b7a:	d003      	beq.n	8015b84 <__lo0bits+0x56>
 8015b7c:	6013      	str	r3, [r2, #0]
 8015b7e:	4770      	bx	lr
 8015b80:	2000      	movs	r0, #0
 8015b82:	4770      	bx	lr
 8015b84:	2020      	movs	r0, #32
 8015b86:	4770      	bx	lr

08015b88 <__i2b>:
 8015b88:	b510      	push	{r4, lr}
 8015b8a:	460c      	mov	r4, r1
 8015b8c:	2101      	movs	r1, #1
 8015b8e:	f7ff ff07 	bl	80159a0 <_Balloc>
 8015b92:	4602      	mov	r2, r0
 8015b94:	b928      	cbnz	r0, 8015ba2 <__i2b+0x1a>
 8015b96:	4b05      	ldr	r3, [pc, #20]	@ (8015bac <__i2b+0x24>)
 8015b98:	4805      	ldr	r0, [pc, #20]	@ (8015bb0 <__i2b+0x28>)
 8015b9a:	f240 1145 	movw	r1, #325	@ 0x145
 8015b9e:	f000 fceb 	bl	8016578 <__assert_func>
 8015ba2:	2301      	movs	r3, #1
 8015ba4:	6144      	str	r4, [r0, #20]
 8015ba6:	6103      	str	r3, [r0, #16]
 8015ba8:	bd10      	pop	{r4, pc}
 8015baa:	bf00      	nop
 8015bac:	08016f7c 	.word	0x08016f7c
 8015bb0:	08016f8d 	.word	0x08016f8d

08015bb4 <__multiply>:
 8015bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bb8:	4617      	mov	r7, r2
 8015bba:	690a      	ldr	r2, [r1, #16]
 8015bbc:	693b      	ldr	r3, [r7, #16]
 8015bbe:	429a      	cmp	r2, r3
 8015bc0:	bfa8      	it	ge
 8015bc2:	463b      	movge	r3, r7
 8015bc4:	4689      	mov	r9, r1
 8015bc6:	bfa4      	itt	ge
 8015bc8:	460f      	movge	r7, r1
 8015bca:	4699      	movge	r9, r3
 8015bcc:	693d      	ldr	r5, [r7, #16]
 8015bce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015bd2:	68bb      	ldr	r3, [r7, #8]
 8015bd4:	6879      	ldr	r1, [r7, #4]
 8015bd6:	eb05 060a 	add.w	r6, r5, sl
 8015bda:	42b3      	cmp	r3, r6
 8015bdc:	b085      	sub	sp, #20
 8015bde:	bfb8      	it	lt
 8015be0:	3101      	addlt	r1, #1
 8015be2:	f7ff fedd 	bl	80159a0 <_Balloc>
 8015be6:	b930      	cbnz	r0, 8015bf6 <__multiply+0x42>
 8015be8:	4602      	mov	r2, r0
 8015bea:	4b41      	ldr	r3, [pc, #260]	@ (8015cf0 <__multiply+0x13c>)
 8015bec:	4841      	ldr	r0, [pc, #260]	@ (8015cf4 <__multiply+0x140>)
 8015bee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015bf2:	f000 fcc1 	bl	8016578 <__assert_func>
 8015bf6:	f100 0414 	add.w	r4, r0, #20
 8015bfa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8015bfe:	4623      	mov	r3, r4
 8015c00:	2200      	movs	r2, #0
 8015c02:	4573      	cmp	r3, lr
 8015c04:	d320      	bcc.n	8015c48 <__multiply+0x94>
 8015c06:	f107 0814 	add.w	r8, r7, #20
 8015c0a:	f109 0114 	add.w	r1, r9, #20
 8015c0e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8015c12:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8015c16:	9302      	str	r3, [sp, #8]
 8015c18:	1beb      	subs	r3, r5, r7
 8015c1a:	3b15      	subs	r3, #21
 8015c1c:	f023 0303 	bic.w	r3, r3, #3
 8015c20:	3304      	adds	r3, #4
 8015c22:	3715      	adds	r7, #21
 8015c24:	42bd      	cmp	r5, r7
 8015c26:	bf38      	it	cc
 8015c28:	2304      	movcc	r3, #4
 8015c2a:	9301      	str	r3, [sp, #4]
 8015c2c:	9b02      	ldr	r3, [sp, #8]
 8015c2e:	9103      	str	r1, [sp, #12]
 8015c30:	428b      	cmp	r3, r1
 8015c32:	d80c      	bhi.n	8015c4e <__multiply+0x9a>
 8015c34:	2e00      	cmp	r6, #0
 8015c36:	dd03      	ble.n	8015c40 <__multiply+0x8c>
 8015c38:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d055      	beq.n	8015cec <__multiply+0x138>
 8015c40:	6106      	str	r6, [r0, #16]
 8015c42:	b005      	add	sp, #20
 8015c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c48:	f843 2b04 	str.w	r2, [r3], #4
 8015c4c:	e7d9      	b.n	8015c02 <__multiply+0x4e>
 8015c4e:	f8b1 a000 	ldrh.w	sl, [r1]
 8015c52:	f1ba 0f00 	cmp.w	sl, #0
 8015c56:	d01f      	beq.n	8015c98 <__multiply+0xe4>
 8015c58:	46c4      	mov	ip, r8
 8015c5a:	46a1      	mov	r9, r4
 8015c5c:	2700      	movs	r7, #0
 8015c5e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015c62:	f8d9 3000 	ldr.w	r3, [r9]
 8015c66:	fa1f fb82 	uxth.w	fp, r2
 8015c6a:	b29b      	uxth	r3, r3
 8015c6c:	fb0a 330b 	mla	r3, sl, fp, r3
 8015c70:	443b      	add	r3, r7
 8015c72:	f8d9 7000 	ldr.w	r7, [r9]
 8015c76:	0c12      	lsrs	r2, r2, #16
 8015c78:	0c3f      	lsrs	r7, r7, #16
 8015c7a:	fb0a 7202 	mla	r2, sl, r2, r7
 8015c7e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8015c82:	b29b      	uxth	r3, r3
 8015c84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015c88:	4565      	cmp	r5, ip
 8015c8a:	f849 3b04 	str.w	r3, [r9], #4
 8015c8e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8015c92:	d8e4      	bhi.n	8015c5e <__multiply+0xaa>
 8015c94:	9b01      	ldr	r3, [sp, #4]
 8015c96:	50e7      	str	r7, [r4, r3]
 8015c98:	9b03      	ldr	r3, [sp, #12]
 8015c9a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015c9e:	3104      	adds	r1, #4
 8015ca0:	f1b9 0f00 	cmp.w	r9, #0
 8015ca4:	d020      	beq.n	8015ce8 <__multiply+0x134>
 8015ca6:	6823      	ldr	r3, [r4, #0]
 8015ca8:	4647      	mov	r7, r8
 8015caa:	46a4      	mov	ip, r4
 8015cac:	f04f 0a00 	mov.w	sl, #0
 8015cb0:	f8b7 b000 	ldrh.w	fp, [r7]
 8015cb4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8015cb8:	fb09 220b 	mla	r2, r9, fp, r2
 8015cbc:	4452      	add	r2, sl
 8015cbe:	b29b      	uxth	r3, r3
 8015cc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015cc4:	f84c 3b04 	str.w	r3, [ip], #4
 8015cc8:	f857 3b04 	ldr.w	r3, [r7], #4
 8015ccc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015cd0:	f8bc 3000 	ldrh.w	r3, [ip]
 8015cd4:	fb09 330a 	mla	r3, r9, sl, r3
 8015cd8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8015cdc:	42bd      	cmp	r5, r7
 8015cde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015ce2:	d8e5      	bhi.n	8015cb0 <__multiply+0xfc>
 8015ce4:	9a01      	ldr	r2, [sp, #4]
 8015ce6:	50a3      	str	r3, [r4, r2]
 8015ce8:	3404      	adds	r4, #4
 8015cea:	e79f      	b.n	8015c2c <__multiply+0x78>
 8015cec:	3e01      	subs	r6, #1
 8015cee:	e7a1      	b.n	8015c34 <__multiply+0x80>
 8015cf0:	08016f7c 	.word	0x08016f7c
 8015cf4:	08016f8d 	.word	0x08016f8d

08015cf8 <__pow5mult>:
 8015cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015cfc:	4615      	mov	r5, r2
 8015cfe:	f012 0203 	ands.w	r2, r2, #3
 8015d02:	4607      	mov	r7, r0
 8015d04:	460e      	mov	r6, r1
 8015d06:	d007      	beq.n	8015d18 <__pow5mult+0x20>
 8015d08:	4c25      	ldr	r4, [pc, #148]	@ (8015da0 <__pow5mult+0xa8>)
 8015d0a:	3a01      	subs	r2, #1
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015d12:	f7ff fea7 	bl	8015a64 <__multadd>
 8015d16:	4606      	mov	r6, r0
 8015d18:	10ad      	asrs	r5, r5, #2
 8015d1a:	d03d      	beq.n	8015d98 <__pow5mult+0xa0>
 8015d1c:	69fc      	ldr	r4, [r7, #28]
 8015d1e:	b97c      	cbnz	r4, 8015d40 <__pow5mult+0x48>
 8015d20:	2010      	movs	r0, #16
 8015d22:	f7fe f81b 	bl	8013d5c <malloc>
 8015d26:	4602      	mov	r2, r0
 8015d28:	61f8      	str	r0, [r7, #28]
 8015d2a:	b928      	cbnz	r0, 8015d38 <__pow5mult+0x40>
 8015d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8015da4 <__pow5mult+0xac>)
 8015d2e:	481e      	ldr	r0, [pc, #120]	@ (8015da8 <__pow5mult+0xb0>)
 8015d30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015d34:	f000 fc20 	bl	8016578 <__assert_func>
 8015d38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015d3c:	6004      	str	r4, [r0, #0]
 8015d3e:	60c4      	str	r4, [r0, #12]
 8015d40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015d44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015d48:	b94c      	cbnz	r4, 8015d5e <__pow5mult+0x66>
 8015d4a:	f240 2171 	movw	r1, #625	@ 0x271
 8015d4e:	4638      	mov	r0, r7
 8015d50:	f7ff ff1a 	bl	8015b88 <__i2b>
 8015d54:	2300      	movs	r3, #0
 8015d56:	f8c8 0008 	str.w	r0, [r8, #8]
 8015d5a:	4604      	mov	r4, r0
 8015d5c:	6003      	str	r3, [r0, #0]
 8015d5e:	f04f 0900 	mov.w	r9, #0
 8015d62:	07eb      	lsls	r3, r5, #31
 8015d64:	d50a      	bpl.n	8015d7c <__pow5mult+0x84>
 8015d66:	4631      	mov	r1, r6
 8015d68:	4622      	mov	r2, r4
 8015d6a:	4638      	mov	r0, r7
 8015d6c:	f7ff ff22 	bl	8015bb4 <__multiply>
 8015d70:	4631      	mov	r1, r6
 8015d72:	4680      	mov	r8, r0
 8015d74:	4638      	mov	r0, r7
 8015d76:	f7ff fe53 	bl	8015a20 <_Bfree>
 8015d7a:	4646      	mov	r6, r8
 8015d7c:	106d      	asrs	r5, r5, #1
 8015d7e:	d00b      	beq.n	8015d98 <__pow5mult+0xa0>
 8015d80:	6820      	ldr	r0, [r4, #0]
 8015d82:	b938      	cbnz	r0, 8015d94 <__pow5mult+0x9c>
 8015d84:	4622      	mov	r2, r4
 8015d86:	4621      	mov	r1, r4
 8015d88:	4638      	mov	r0, r7
 8015d8a:	f7ff ff13 	bl	8015bb4 <__multiply>
 8015d8e:	6020      	str	r0, [r4, #0]
 8015d90:	f8c0 9000 	str.w	r9, [r0]
 8015d94:	4604      	mov	r4, r0
 8015d96:	e7e4      	b.n	8015d62 <__pow5mult+0x6a>
 8015d98:	4630      	mov	r0, r6
 8015d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d9e:	bf00      	nop
 8015da0:	08017040 	.word	0x08017040
 8015da4:	08016f0d 	.word	0x08016f0d
 8015da8:	08016f8d 	.word	0x08016f8d

08015dac <__lshift>:
 8015dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015db0:	460c      	mov	r4, r1
 8015db2:	6849      	ldr	r1, [r1, #4]
 8015db4:	6923      	ldr	r3, [r4, #16]
 8015db6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015dba:	68a3      	ldr	r3, [r4, #8]
 8015dbc:	4607      	mov	r7, r0
 8015dbe:	4691      	mov	r9, r2
 8015dc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015dc4:	f108 0601 	add.w	r6, r8, #1
 8015dc8:	42b3      	cmp	r3, r6
 8015dca:	db0b      	blt.n	8015de4 <__lshift+0x38>
 8015dcc:	4638      	mov	r0, r7
 8015dce:	f7ff fde7 	bl	80159a0 <_Balloc>
 8015dd2:	4605      	mov	r5, r0
 8015dd4:	b948      	cbnz	r0, 8015dea <__lshift+0x3e>
 8015dd6:	4602      	mov	r2, r0
 8015dd8:	4b28      	ldr	r3, [pc, #160]	@ (8015e7c <__lshift+0xd0>)
 8015dda:	4829      	ldr	r0, [pc, #164]	@ (8015e80 <__lshift+0xd4>)
 8015ddc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015de0:	f000 fbca 	bl	8016578 <__assert_func>
 8015de4:	3101      	adds	r1, #1
 8015de6:	005b      	lsls	r3, r3, #1
 8015de8:	e7ee      	b.n	8015dc8 <__lshift+0x1c>
 8015dea:	2300      	movs	r3, #0
 8015dec:	f100 0114 	add.w	r1, r0, #20
 8015df0:	f100 0210 	add.w	r2, r0, #16
 8015df4:	4618      	mov	r0, r3
 8015df6:	4553      	cmp	r3, sl
 8015df8:	db33      	blt.n	8015e62 <__lshift+0xb6>
 8015dfa:	6920      	ldr	r0, [r4, #16]
 8015dfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015e00:	f104 0314 	add.w	r3, r4, #20
 8015e04:	f019 091f 	ands.w	r9, r9, #31
 8015e08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015e0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015e10:	d02b      	beq.n	8015e6a <__lshift+0xbe>
 8015e12:	f1c9 0e20 	rsb	lr, r9, #32
 8015e16:	468a      	mov	sl, r1
 8015e18:	2200      	movs	r2, #0
 8015e1a:	6818      	ldr	r0, [r3, #0]
 8015e1c:	fa00 f009 	lsl.w	r0, r0, r9
 8015e20:	4310      	orrs	r0, r2
 8015e22:	f84a 0b04 	str.w	r0, [sl], #4
 8015e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e2a:	459c      	cmp	ip, r3
 8015e2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8015e30:	d8f3      	bhi.n	8015e1a <__lshift+0x6e>
 8015e32:	ebac 0304 	sub.w	r3, ip, r4
 8015e36:	3b15      	subs	r3, #21
 8015e38:	f023 0303 	bic.w	r3, r3, #3
 8015e3c:	3304      	adds	r3, #4
 8015e3e:	f104 0015 	add.w	r0, r4, #21
 8015e42:	4560      	cmp	r0, ip
 8015e44:	bf88      	it	hi
 8015e46:	2304      	movhi	r3, #4
 8015e48:	50ca      	str	r2, [r1, r3]
 8015e4a:	b10a      	cbz	r2, 8015e50 <__lshift+0xa4>
 8015e4c:	f108 0602 	add.w	r6, r8, #2
 8015e50:	3e01      	subs	r6, #1
 8015e52:	4638      	mov	r0, r7
 8015e54:	612e      	str	r6, [r5, #16]
 8015e56:	4621      	mov	r1, r4
 8015e58:	f7ff fde2 	bl	8015a20 <_Bfree>
 8015e5c:	4628      	mov	r0, r5
 8015e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e62:	f842 0f04 	str.w	r0, [r2, #4]!
 8015e66:	3301      	adds	r3, #1
 8015e68:	e7c5      	b.n	8015df6 <__lshift+0x4a>
 8015e6a:	3904      	subs	r1, #4
 8015e6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e70:	f841 2f04 	str.w	r2, [r1, #4]!
 8015e74:	459c      	cmp	ip, r3
 8015e76:	d8f9      	bhi.n	8015e6c <__lshift+0xc0>
 8015e78:	e7ea      	b.n	8015e50 <__lshift+0xa4>
 8015e7a:	bf00      	nop
 8015e7c:	08016f7c 	.word	0x08016f7c
 8015e80:	08016f8d 	.word	0x08016f8d

08015e84 <__mcmp>:
 8015e84:	690a      	ldr	r2, [r1, #16]
 8015e86:	4603      	mov	r3, r0
 8015e88:	6900      	ldr	r0, [r0, #16]
 8015e8a:	1a80      	subs	r0, r0, r2
 8015e8c:	b530      	push	{r4, r5, lr}
 8015e8e:	d10e      	bne.n	8015eae <__mcmp+0x2a>
 8015e90:	3314      	adds	r3, #20
 8015e92:	3114      	adds	r1, #20
 8015e94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015e98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015e9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015ea0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015ea4:	4295      	cmp	r5, r2
 8015ea6:	d003      	beq.n	8015eb0 <__mcmp+0x2c>
 8015ea8:	d205      	bcs.n	8015eb6 <__mcmp+0x32>
 8015eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8015eae:	bd30      	pop	{r4, r5, pc}
 8015eb0:	42a3      	cmp	r3, r4
 8015eb2:	d3f3      	bcc.n	8015e9c <__mcmp+0x18>
 8015eb4:	e7fb      	b.n	8015eae <__mcmp+0x2a>
 8015eb6:	2001      	movs	r0, #1
 8015eb8:	e7f9      	b.n	8015eae <__mcmp+0x2a>
	...

08015ebc <__mdiff>:
 8015ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ec0:	4689      	mov	r9, r1
 8015ec2:	4606      	mov	r6, r0
 8015ec4:	4611      	mov	r1, r2
 8015ec6:	4648      	mov	r0, r9
 8015ec8:	4614      	mov	r4, r2
 8015eca:	f7ff ffdb 	bl	8015e84 <__mcmp>
 8015ece:	1e05      	subs	r5, r0, #0
 8015ed0:	d112      	bne.n	8015ef8 <__mdiff+0x3c>
 8015ed2:	4629      	mov	r1, r5
 8015ed4:	4630      	mov	r0, r6
 8015ed6:	f7ff fd63 	bl	80159a0 <_Balloc>
 8015eda:	4602      	mov	r2, r0
 8015edc:	b928      	cbnz	r0, 8015eea <__mdiff+0x2e>
 8015ede:	4b3f      	ldr	r3, [pc, #252]	@ (8015fdc <__mdiff+0x120>)
 8015ee0:	f240 2137 	movw	r1, #567	@ 0x237
 8015ee4:	483e      	ldr	r0, [pc, #248]	@ (8015fe0 <__mdiff+0x124>)
 8015ee6:	f000 fb47 	bl	8016578 <__assert_func>
 8015eea:	2301      	movs	r3, #1
 8015eec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015ef0:	4610      	mov	r0, r2
 8015ef2:	b003      	add	sp, #12
 8015ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ef8:	bfbc      	itt	lt
 8015efa:	464b      	movlt	r3, r9
 8015efc:	46a1      	movlt	r9, r4
 8015efe:	4630      	mov	r0, r6
 8015f00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015f04:	bfba      	itte	lt
 8015f06:	461c      	movlt	r4, r3
 8015f08:	2501      	movlt	r5, #1
 8015f0a:	2500      	movge	r5, #0
 8015f0c:	f7ff fd48 	bl	80159a0 <_Balloc>
 8015f10:	4602      	mov	r2, r0
 8015f12:	b918      	cbnz	r0, 8015f1c <__mdiff+0x60>
 8015f14:	4b31      	ldr	r3, [pc, #196]	@ (8015fdc <__mdiff+0x120>)
 8015f16:	f240 2145 	movw	r1, #581	@ 0x245
 8015f1a:	e7e3      	b.n	8015ee4 <__mdiff+0x28>
 8015f1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015f20:	6926      	ldr	r6, [r4, #16]
 8015f22:	60c5      	str	r5, [r0, #12]
 8015f24:	f109 0310 	add.w	r3, r9, #16
 8015f28:	f109 0514 	add.w	r5, r9, #20
 8015f2c:	f104 0e14 	add.w	lr, r4, #20
 8015f30:	f100 0b14 	add.w	fp, r0, #20
 8015f34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015f38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015f3c:	9301      	str	r3, [sp, #4]
 8015f3e:	46d9      	mov	r9, fp
 8015f40:	f04f 0c00 	mov.w	ip, #0
 8015f44:	9b01      	ldr	r3, [sp, #4]
 8015f46:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015f4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015f4e:	9301      	str	r3, [sp, #4]
 8015f50:	fa1f f38a 	uxth.w	r3, sl
 8015f54:	4619      	mov	r1, r3
 8015f56:	b283      	uxth	r3, r0
 8015f58:	1acb      	subs	r3, r1, r3
 8015f5a:	0c00      	lsrs	r0, r0, #16
 8015f5c:	4463      	add	r3, ip
 8015f5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015f62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015f66:	b29b      	uxth	r3, r3
 8015f68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015f6c:	4576      	cmp	r6, lr
 8015f6e:	f849 3b04 	str.w	r3, [r9], #4
 8015f72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015f76:	d8e5      	bhi.n	8015f44 <__mdiff+0x88>
 8015f78:	1b33      	subs	r3, r6, r4
 8015f7a:	3b15      	subs	r3, #21
 8015f7c:	f023 0303 	bic.w	r3, r3, #3
 8015f80:	3415      	adds	r4, #21
 8015f82:	3304      	adds	r3, #4
 8015f84:	42a6      	cmp	r6, r4
 8015f86:	bf38      	it	cc
 8015f88:	2304      	movcc	r3, #4
 8015f8a:	441d      	add	r5, r3
 8015f8c:	445b      	add	r3, fp
 8015f8e:	461e      	mov	r6, r3
 8015f90:	462c      	mov	r4, r5
 8015f92:	4544      	cmp	r4, r8
 8015f94:	d30e      	bcc.n	8015fb4 <__mdiff+0xf8>
 8015f96:	f108 0103 	add.w	r1, r8, #3
 8015f9a:	1b49      	subs	r1, r1, r5
 8015f9c:	f021 0103 	bic.w	r1, r1, #3
 8015fa0:	3d03      	subs	r5, #3
 8015fa2:	45a8      	cmp	r8, r5
 8015fa4:	bf38      	it	cc
 8015fa6:	2100      	movcc	r1, #0
 8015fa8:	440b      	add	r3, r1
 8015faa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015fae:	b191      	cbz	r1, 8015fd6 <__mdiff+0x11a>
 8015fb0:	6117      	str	r7, [r2, #16]
 8015fb2:	e79d      	b.n	8015ef0 <__mdiff+0x34>
 8015fb4:	f854 1b04 	ldr.w	r1, [r4], #4
 8015fb8:	46e6      	mov	lr, ip
 8015fba:	0c08      	lsrs	r0, r1, #16
 8015fbc:	fa1c fc81 	uxtah	ip, ip, r1
 8015fc0:	4471      	add	r1, lr
 8015fc2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015fc6:	b289      	uxth	r1, r1
 8015fc8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015fcc:	f846 1b04 	str.w	r1, [r6], #4
 8015fd0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015fd4:	e7dd      	b.n	8015f92 <__mdiff+0xd6>
 8015fd6:	3f01      	subs	r7, #1
 8015fd8:	e7e7      	b.n	8015faa <__mdiff+0xee>
 8015fda:	bf00      	nop
 8015fdc:	08016f7c 	.word	0x08016f7c
 8015fe0:	08016f8d 	.word	0x08016f8d

08015fe4 <__d2b>:
 8015fe4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015fe8:	460f      	mov	r7, r1
 8015fea:	2101      	movs	r1, #1
 8015fec:	ec59 8b10 	vmov	r8, r9, d0
 8015ff0:	4616      	mov	r6, r2
 8015ff2:	f7ff fcd5 	bl	80159a0 <_Balloc>
 8015ff6:	4604      	mov	r4, r0
 8015ff8:	b930      	cbnz	r0, 8016008 <__d2b+0x24>
 8015ffa:	4602      	mov	r2, r0
 8015ffc:	4b23      	ldr	r3, [pc, #140]	@ (801608c <__d2b+0xa8>)
 8015ffe:	4824      	ldr	r0, [pc, #144]	@ (8016090 <__d2b+0xac>)
 8016000:	f240 310f 	movw	r1, #783	@ 0x30f
 8016004:	f000 fab8 	bl	8016578 <__assert_func>
 8016008:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801600c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016010:	b10d      	cbz	r5, 8016016 <__d2b+0x32>
 8016012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016016:	9301      	str	r3, [sp, #4]
 8016018:	f1b8 0300 	subs.w	r3, r8, #0
 801601c:	d023      	beq.n	8016066 <__d2b+0x82>
 801601e:	4668      	mov	r0, sp
 8016020:	9300      	str	r3, [sp, #0]
 8016022:	f7ff fd84 	bl	8015b2e <__lo0bits>
 8016026:	e9dd 1200 	ldrd	r1, r2, [sp]
 801602a:	b1d0      	cbz	r0, 8016062 <__d2b+0x7e>
 801602c:	f1c0 0320 	rsb	r3, r0, #32
 8016030:	fa02 f303 	lsl.w	r3, r2, r3
 8016034:	430b      	orrs	r3, r1
 8016036:	40c2      	lsrs	r2, r0
 8016038:	6163      	str	r3, [r4, #20]
 801603a:	9201      	str	r2, [sp, #4]
 801603c:	9b01      	ldr	r3, [sp, #4]
 801603e:	61a3      	str	r3, [r4, #24]
 8016040:	2b00      	cmp	r3, #0
 8016042:	bf0c      	ite	eq
 8016044:	2201      	moveq	r2, #1
 8016046:	2202      	movne	r2, #2
 8016048:	6122      	str	r2, [r4, #16]
 801604a:	b1a5      	cbz	r5, 8016076 <__d2b+0x92>
 801604c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8016050:	4405      	add	r5, r0
 8016052:	603d      	str	r5, [r7, #0]
 8016054:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8016058:	6030      	str	r0, [r6, #0]
 801605a:	4620      	mov	r0, r4
 801605c:	b003      	add	sp, #12
 801605e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016062:	6161      	str	r1, [r4, #20]
 8016064:	e7ea      	b.n	801603c <__d2b+0x58>
 8016066:	a801      	add	r0, sp, #4
 8016068:	f7ff fd61 	bl	8015b2e <__lo0bits>
 801606c:	9b01      	ldr	r3, [sp, #4]
 801606e:	6163      	str	r3, [r4, #20]
 8016070:	3020      	adds	r0, #32
 8016072:	2201      	movs	r2, #1
 8016074:	e7e8      	b.n	8016048 <__d2b+0x64>
 8016076:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801607a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801607e:	6038      	str	r0, [r7, #0]
 8016080:	6918      	ldr	r0, [r3, #16]
 8016082:	f7ff fd35 	bl	8015af0 <__hi0bits>
 8016086:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801608a:	e7e5      	b.n	8016058 <__d2b+0x74>
 801608c:	08016f7c 	.word	0x08016f7c
 8016090:	08016f8d 	.word	0x08016f8d

08016094 <__sfputc_r>:
 8016094:	6893      	ldr	r3, [r2, #8]
 8016096:	3b01      	subs	r3, #1
 8016098:	2b00      	cmp	r3, #0
 801609a:	b410      	push	{r4}
 801609c:	6093      	str	r3, [r2, #8]
 801609e:	da08      	bge.n	80160b2 <__sfputc_r+0x1e>
 80160a0:	6994      	ldr	r4, [r2, #24]
 80160a2:	42a3      	cmp	r3, r4
 80160a4:	db01      	blt.n	80160aa <__sfputc_r+0x16>
 80160a6:	290a      	cmp	r1, #10
 80160a8:	d103      	bne.n	80160b2 <__sfputc_r+0x1e>
 80160aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160ae:	f7fe bcb6 	b.w	8014a1e <__swbuf_r>
 80160b2:	6813      	ldr	r3, [r2, #0]
 80160b4:	1c58      	adds	r0, r3, #1
 80160b6:	6010      	str	r0, [r2, #0]
 80160b8:	7019      	strb	r1, [r3, #0]
 80160ba:	4608      	mov	r0, r1
 80160bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160c0:	4770      	bx	lr

080160c2 <__sfputs_r>:
 80160c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160c4:	4606      	mov	r6, r0
 80160c6:	460f      	mov	r7, r1
 80160c8:	4614      	mov	r4, r2
 80160ca:	18d5      	adds	r5, r2, r3
 80160cc:	42ac      	cmp	r4, r5
 80160ce:	d101      	bne.n	80160d4 <__sfputs_r+0x12>
 80160d0:	2000      	movs	r0, #0
 80160d2:	e007      	b.n	80160e4 <__sfputs_r+0x22>
 80160d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160d8:	463a      	mov	r2, r7
 80160da:	4630      	mov	r0, r6
 80160dc:	f7ff ffda 	bl	8016094 <__sfputc_r>
 80160e0:	1c43      	adds	r3, r0, #1
 80160e2:	d1f3      	bne.n	80160cc <__sfputs_r+0xa>
 80160e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080160e8 <_vfiprintf_r>:
 80160e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160ec:	460d      	mov	r5, r1
 80160ee:	b09d      	sub	sp, #116	@ 0x74
 80160f0:	4614      	mov	r4, r2
 80160f2:	4698      	mov	r8, r3
 80160f4:	4606      	mov	r6, r0
 80160f6:	b118      	cbz	r0, 8016100 <_vfiprintf_r+0x18>
 80160f8:	6a03      	ldr	r3, [r0, #32]
 80160fa:	b90b      	cbnz	r3, 8016100 <_vfiprintf_r+0x18>
 80160fc:	f7fe fba6 	bl	801484c <__sinit>
 8016100:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016102:	07d9      	lsls	r1, r3, #31
 8016104:	d405      	bmi.n	8016112 <_vfiprintf_r+0x2a>
 8016106:	89ab      	ldrh	r3, [r5, #12]
 8016108:	059a      	lsls	r2, r3, #22
 801610a:	d402      	bmi.n	8016112 <_vfiprintf_r+0x2a>
 801610c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801610e:	f7fe fe06 	bl	8014d1e <__retarget_lock_acquire_recursive>
 8016112:	89ab      	ldrh	r3, [r5, #12]
 8016114:	071b      	lsls	r3, r3, #28
 8016116:	d501      	bpl.n	801611c <_vfiprintf_r+0x34>
 8016118:	692b      	ldr	r3, [r5, #16]
 801611a:	b99b      	cbnz	r3, 8016144 <_vfiprintf_r+0x5c>
 801611c:	4629      	mov	r1, r5
 801611e:	4630      	mov	r0, r6
 8016120:	f7fe fcbc 	bl	8014a9c <__swsetup_r>
 8016124:	b170      	cbz	r0, 8016144 <_vfiprintf_r+0x5c>
 8016126:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016128:	07dc      	lsls	r4, r3, #31
 801612a:	d504      	bpl.n	8016136 <_vfiprintf_r+0x4e>
 801612c:	f04f 30ff 	mov.w	r0, #4294967295
 8016130:	b01d      	add	sp, #116	@ 0x74
 8016132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016136:	89ab      	ldrh	r3, [r5, #12]
 8016138:	0598      	lsls	r0, r3, #22
 801613a:	d4f7      	bmi.n	801612c <_vfiprintf_r+0x44>
 801613c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801613e:	f7fe fdef 	bl	8014d20 <__retarget_lock_release_recursive>
 8016142:	e7f3      	b.n	801612c <_vfiprintf_r+0x44>
 8016144:	2300      	movs	r3, #0
 8016146:	9309      	str	r3, [sp, #36]	@ 0x24
 8016148:	2320      	movs	r3, #32
 801614a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801614e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016152:	2330      	movs	r3, #48	@ 0x30
 8016154:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016304 <_vfiprintf_r+0x21c>
 8016158:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801615c:	f04f 0901 	mov.w	r9, #1
 8016160:	4623      	mov	r3, r4
 8016162:	469a      	mov	sl, r3
 8016164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016168:	b10a      	cbz	r2, 801616e <_vfiprintf_r+0x86>
 801616a:	2a25      	cmp	r2, #37	@ 0x25
 801616c:	d1f9      	bne.n	8016162 <_vfiprintf_r+0x7a>
 801616e:	ebba 0b04 	subs.w	fp, sl, r4
 8016172:	d00b      	beq.n	801618c <_vfiprintf_r+0xa4>
 8016174:	465b      	mov	r3, fp
 8016176:	4622      	mov	r2, r4
 8016178:	4629      	mov	r1, r5
 801617a:	4630      	mov	r0, r6
 801617c:	f7ff ffa1 	bl	80160c2 <__sfputs_r>
 8016180:	3001      	adds	r0, #1
 8016182:	f000 80a7 	beq.w	80162d4 <_vfiprintf_r+0x1ec>
 8016186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016188:	445a      	add	r2, fp
 801618a:	9209      	str	r2, [sp, #36]	@ 0x24
 801618c:	f89a 3000 	ldrb.w	r3, [sl]
 8016190:	2b00      	cmp	r3, #0
 8016192:	f000 809f 	beq.w	80162d4 <_vfiprintf_r+0x1ec>
 8016196:	2300      	movs	r3, #0
 8016198:	f04f 32ff 	mov.w	r2, #4294967295
 801619c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80161a0:	f10a 0a01 	add.w	sl, sl, #1
 80161a4:	9304      	str	r3, [sp, #16]
 80161a6:	9307      	str	r3, [sp, #28]
 80161a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80161ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80161ae:	4654      	mov	r4, sl
 80161b0:	2205      	movs	r2, #5
 80161b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161b6:	4853      	ldr	r0, [pc, #332]	@ (8016304 <_vfiprintf_r+0x21c>)
 80161b8:	f7ea f842 	bl	8000240 <memchr>
 80161bc:	9a04      	ldr	r2, [sp, #16]
 80161be:	b9d8      	cbnz	r0, 80161f8 <_vfiprintf_r+0x110>
 80161c0:	06d1      	lsls	r1, r2, #27
 80161c2:	bf44      	itt	mi
 80161c4:	2320      	movmi	r3, #32
 80161c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80161ca:	0713      	lsls	r3, r2, #28
 80161cc:	bf44      	itt	mi
 80161ce:	232b      	movmi	r3, #43	@ 0x2b
 80161d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80161d4:	f89a 3000 	ldrb.w	r3, [sl]
 80161d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80161da:	d015      	beq.n	8016208 <_vfiprintf_r+0x120>
 80161dc:	9a07      	ldr	r2, [sp, #28]
 80161de:	4654      	mov	r4, sl
 80161e0:	2000      	movs	r0, #0
 80161e2:	f04f 0c0a 	mov.w	ip, #10
 80161e6:	4621      	mov	r1, r4
 80161e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80161ec:	3b30      	subs	r3, #48	@ 0x30
 80161ee:	2b09      	cmp	r3, #9
 80161f0:	d94b      	bls.n	801628a <_vfiprintf_r+0x1a2>
 80161f2:	b1b0      	cbz	r0, 8016222 <_vfiprintf_r+0x13a>
 80161f4:	9207      	str	r2, [sp, #28]
 80161f6:	e014      	b.n	8016222 <_vfiprintf_r+0x13a>
 80161f8:	eba0 0308 	sub.w	r3, r0, r8
 80161fc:	fa09 f303 	lsl.w	r3, r9, r3
 8016200:	4313      	orrs	r3, r2
 8016202:	9304      	str	r3, [sp, #16]
 8016204:	46a2      	mov	sl, r4
 8016206:	e7d2      	b.n	80161ae <_vfiprintf_r+0xc6>
 8016208:	9b03      	ldr	r3, [sp, #12]
 801620a:	1d19      	adds	r1, r3, #4
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	9103      	str	r1, [sp, #12]
 8016210:	2b00      	cmp	r3, #0
 8016212:	bfbb      	ittet	lt
 8016214:	425b      	neglt	r3, r3
 8016216:	f042 0202 	orrlt.w	r2, r2, #2
 801621a:	9307      	strge	r3, [sp, #28]
 801621c:	9307      	strlt	r3, [sp, #28]
 801621e:	bfb8      	it	lt
 8016220:	9204      	strlt	r2, [sp, #16]
 8016222:	7823      	ldrb	r3, [r4, #0]
 8016224:	2b2e      	cmp	r3, #46	@ 0x2e
 8016226:	d10a      	bne.n	801623e <_vfiprintf_r+0x156>
 8016228:	7863      	ldrb	r3, [r4, #1]
 801622a:	2b2a      	cmp	r3, #42	@ 0x2a
 801622c:	d132      	bne.n	8016294 <_vfiprintf_r+0x1ac>
 801622e:	9b03      	ldr	r3, [sp, #12]
 8016230:	1d1a      	adds	r2, r3, #4
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	9203      	str	r2, [sp, #12]
 8016236:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801623a:	3402      	adds	r4, #2
 801623c:	9305      	str	r3, [sp, #20]
 801623e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016314 <_vfiprintf_r+0x22c>
 8016242:	7821      	ldrb	r1, [r4, #0]
 8016244:	2203      	movs	r2, #3
 8016246:	4650      	mov	r0, sl
 8016248:	f7e9 fffa 	bl	8000240 <memchr>
 801624c:	b138      	cbz	r0, 801625e <_vfiprintf_r+0x176>
 801624e:	9b04      	ldr	r3, [sp, #16]
 8016250:	eba0 000a 	sub.w	r0, r0, sl
 8016254:	2240      	movs	r2, #64	@ 0x40
 8016256:	4082      	lsls	r2, r0
 8016258:	4313      	orrs	r3, r2
 801625a:	3401      	adds	r4, #1
 801625c:	9304      	str	r3, [sp, #16]
 801625e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016262:	4829      	ldr	r0, [pc, #164]	@ (8016308 <_vfiprintf_r+0x220>)
 8016264:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016268:	2206      	movs	r2, #6
 801626a:	f7e9 ffe9 	bl	8000240 <memchr>
 801626e:	2800      	cmp	r0, #0
 8016270:	d03f      	beq.n	80162f2 <_vfiprintf_r+0x20a>
 8016272:	4b26      	ldr	r3, [pc, #152]	@ (801630c <_vfiprintf_r+0x224>)
 8016274:	bb1b      	cbnz	r3, 80162be <_vfiprintf_r+0x1d6>
 8016276:	9b03      	ldr	r3, [sp, #12]
 8016278:	3307      	adds	r3, #7
 801627a:	f023 0307 	bic.w	r3, r3, #7
 801627e:	3308      	adds	r3, #8
 8016280:	9303      	str	r3, [sp, #12]
 8016282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016284:	443b      	add	r3, r7
 8016286:	9309      	str	r3, [sp, #36]	@ 0x24
 8016288:	e76a      	b.n	8016160 <_vfiprintf_r+0x78>
 801628a:	fb0c 3202 	mla	r2, ip, r2, r3
 801628e:	460c      	mov	r4, r1
 8016290:	2001      	movs	r0, #1
 8016292:	e7a8      	b.n	80161e6 <_vfiprintf_r+0xfe>
 8016294:	2300      	movs	r3, #0
 8016296:	3401      	adds	r4, #1
 8016298:	9305      	str	r3, [sp, #20]
 801629a:	4619      	mov	r1, r3
 801629c:	f04f 0c0a 	mov.w	ip, #10
 80162a0:	4620      	mov	r0, r4
 80162a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80162a6:	3a30      	subs	r2, #48	@ 0x30
 80162a8:	2a09      	cmp	r2, #9
 80162aa:	d903      	bls.n	80162b4 <_vfiprintf_r+0x1cc>
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d0c6      	beq.n	801623e <_vfiprintf_r+0x156>
 80162b0:	9105      	str	r1, [sp, #20]
 80162b2:	e7c4      	b.n	801623e <_vfiprintf_r+0x156>
 80162b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80162b8:	4604      	mov	r4, r0
 80162ba:	2301      	movs	r3, #1
 80162bc:	e7f0      	b.n	80162a0 <_vfiprintf_r+0x1b8>
 80162be:	ab03      	add	r3, sp, #12
 80162c0:	9300      	str	r3, [sp, #0]
 80162c2:	462a      	mov	r2, r5
 80162c4:	4b12      	ldr	r3, [pc, #72]	@ (8016310 <_vfiprintf_r+0x228>)
 80162c6:	a904      	add	r1, sp, #16
 80162c8:	4630      	mov	r0, r6
 80162ca:	f7fd fe8d 	bl	8013fe8 <_printf_float>
 80162ce:	4607      	mov	r7, r0
 80162d0:	1c78      	adds	r0, r7, #1
 80162d2:	d1d6      	bne.n	8016282 <_vfiprintf_r+0x19a>
 80162d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80162d6:	07d9      	lsls	r1, r3, #31
 80162d8:	d405      	bmi.n	80162e6 <_vfiprintf_r+0x1fe>
 80162da:	89ab      	ldrh	r3, [r5, #12]
 80162dc:	059a      	lsls	r2, r3, #22
 80162de:	d402      	bmi.n	80162e6 <_vfiprintf_r+0x1fe>
 80162e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80162e2:	f7fe fd1d 	bl	8014d20 <__retarget_lock_release_recursive>
 80162e6:	89ab      	ldrh	r3, [r5, #12]
 80162e8:	065b      	lsls	r3, r3, #25
 80162ea:	f53f af1f 	bmi.w	801612c <_vfiprintf_r+0x44>
 80162ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80162f0:	e71e      	b.n	8016130 <_vfiprintf_r+0x48>
 80162f2:	ab03      	add	r3, sp, #12
 80162f4:	9300      	str	r3, [sp, #0]
 80162f6:	462a      	mov	r2, r5
 80162f8:	4b05      	ldr	r3, [pc, #20]	@ (8016310 <_vfiprintf_r+0x228>)
 80162fa:	a904      	add	r1, sp, #16
 80162fc:	4630      	mov	r0, r6
 80162fe:	f7fe f8fb 	bl	80144f8 <_printf_i>
 8016302:	e7e4      	b.n	80162ce <_vfiprintf_r+0x1e6>
 8016304:	08016fe6 	.word	0x08016fe6
 8016308:	08016ff0 	.word	0x08016ff0
 801630c:	08013fe9 	.word	0x08013fe9
 8016310:	080160c3 	.word	0x080160c3
 8016314:	08016fec 	.word	0x08016fec

08016318 <__sflush_r>:
 8016318:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801631c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016320:	0716      	lsls	r6, r2, #28
 8016322:	4605      	mov	r5, r0
 8016324:	460c      	mov	r4, r1
 8016326:	d454      	bmi.n	80163d2 <__sflush_r+0xba>
 8016328:	684b      	ldr	r3, [r1, #4]
 801632a:	2b00      	cmp	r3, #0
 801632c:	dc02      	bgt.n	8016334 <__sflush_r+0x1c>
 801632e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016330:	2b00      	cmp	r3, #0
 8016332:	dd48      	ble.n	80163c6 <__sflush_r+0xae>
 8016334:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016336:	2e00      	cmp	r6, #0
 8016338:	d045      	beq.n	80163c6 <__sflush_r+0xae>
 801633a:	2300      	movs	r3, #0
 801633c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016340:	682f      	ldr	r7, [r5, #0]
 8016342:	6a21      	ldr	r1, [r4, #32]
 8016344:	602b      	str	r3, [r5, #0]
 8016346:	d030      	beq.n	80163aa <__sflush_r+0x92>
 8016348:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801634a:	89a3      	ldrh	r3, [r4, #12]
 801634c:	0759      	lsls	r1, r3, #29
 801634e:	d505      	bpl.n	801635c <__sflush_r+0x44>
 8016350:	6863      	ldr	r3, [r4, #4]
 8016352:	1ad2      	subs	r2, r2, r3
 8016354:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016356:	b10b      	cbz	r3, 801635c <__sflush_r+0x44>
 8016358:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801635a:	1ad2      	subs	r2, r2, r3
 801635c:	2300      	movs	r3, #0
 801635e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016360:	6a21      	ldr	r1, [r4, #32]
 8016362:	4628      	mov	r0, r5
 8016364:	47b0      	blx	r6
 8016366:	1c43      	adds	r3, r0, #1
 8016368:	89a3      	ldrh	r3, [r4, #12]
 801636a:	d106      	bne.n	801637a <__sflush_r+0x62>
 801636c:	6829      	ldr	r1, [r5, #0]
 801636e:	291d      	cmp	r1, #29
 8016370:	d82b      	bhi.n	80163ca <__sflush_r+0xb2>
 8016372:	4a2a      	ldr	r2, [pc, #168]	@ (801641c <__sflush_r+0x104>)
 8016374:	40ca      	lsrs	r2, r1
 8016376:	07d6      	lsls	r6, r2, #31
 8016378:	d527      	bpl.n	80163ca <__sflush_r+0xb2>
 801637a:	2200      	movs	r2, #0
 801637c:	6062      	str	r2, [r4, #4]
 801637e:	04d9      	lsls	r1, r3, #19
 8016380:	6922      	ldr	r2, [r4, #16]
 8016382:	6022      	str	r2, [r4, #0]
 8016384:	d504      	bpl.n	8016390 <__sflush_r+0x78>
 8016386:	1c42      	adds	r2, r0, #1
 8016388:	d101      	bne.n	801638e <__sflush_r+0x76>
 801638a:	682b      	ldr	r3, [r5, #0]
 801638c:	b903      	cbnz	r3, 8016390 <__sflush_r+0x78>
 801638e:	6560      	str	r0, [r4, #84]	@ 0x54
 8016390:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016392:	602f      	str	r7, [r5, #0]
 8016394:	b1b9      	cbz	r1, 80163c6 <__sflush_r+0xae>
 8016396:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801639a:	4299      	cmp	r1, r3
 801639c:	d002      	beq.n	80163a4 <__sflush_r+0x8c>
 801639e:	4628      	mov	r0, r5
 80163a0:	f7ff fab4 	bl	801590c <_free_r>
 80163a4:	2300      	movs	r3, #0
 80163a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80163a8:	e00d      	b.n	80163c6 <__sflush_r+0xae>
 80163aa:	2301      	movs	r3, #1
 80163ac:	4628      	mov	r0, r5
 80163ae:	47b0      	blx	r6
 80163b0:	4602      	mov	r2, r0
 80163b2:	1c50      	adds	r0, r2, #1
 80163b4:	d1c9      	bne.n	801634a <__sflush_r+0x32>
 80163b6:	682b      	ldr	r3, [r5, #0]
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d0c6      	beq.n	801634a <__sflush_r+0x32>
 80163bc:	2b1d      	cmp	r3, #29
 80163be:	d001      	beq.n	80163c4 <__sflush_r+0xac>
 80163c0:	2b16      	cmp	r3, #22
 80163c2:	d11e      	bne.n	8016402 <__sflush_r+0xea>
 80163c4:	602f      	str	r7, [r5, #0]
 80163c6:	2000      	movs	r0, #0
 80163c8:	e022      	b.n	8016410 <__sflush_r+0xf8>
 80163ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80163ce:	b21b      	sxth	r3, r3
 80163d0:	e01b      	b.n	801640a <__sflush_r+0xf2>
 80163d2:	690f      	ldr	r7, [r1, #16]
 80163d4:	2f00      	cmp	r7, #0
 80163d6:	d0f6      	beq.n	80163c6 <__sflush_r+0xae>
 80163d8:	0793      	lsls	r3, r2, #30
 80163da:	680e      	ldr	r6, [r1, #0]
 80163dc:	bf08      	it	eq
 80163de:	694b      	ldreq	r3, [r1, #20]
 80163e0:	600f      	str	r7, [r1, #0]
 80163e2:	bf18      	it	ne
 80163e4:	2300      	movne	r3, #0
 80163e6:	eba6 0807 	sub.w	r8, r6, r7
 80163ea:	608b      	str	r3, [r1, #8]
 80163ec:	f1b8 0f00 	cmp.w	r8, #0
 80163f0:	dde9      	ble.n	80163c6 <__sflush_r+0xae>
 80163f2:	6a21      	ldr	r1, [r4, #32]
 80163f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80163f6:	4643      	mov	r3, r8
 80163f8:	463a      	mov	r2, r7
 80163fa:	4628      	mov	r0, r5
 80163fc:	47b0      	blx	r6
 80163fe:	2800      	cmp	r0, #0
 8016400:	dc08      	bgt.n	8016414 <__sflush_r+0xfc>
 8016402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801640a:	81a3      	strh	r3, [r4, #12]
 801640c:	f04f 30ff 	mov.w	r0, #4294967295
 8016410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016414:	4407      	add	r7, r0
 8016416:	eba8 0800 	sub.w	r8, r8, r0
 801641a:	e7e7      	b.n	80163ec <__sflush_r+0xd4>
 801641c:	20400001 	.word	0x20400001

08016420 <_fflush_r>:
 8016420:	b538      	push	{r3, r4, r5, lr}
 8016422:	690b      	ldr	r3, [r1, #16]
 8016424:	4605      	mov	r5, r0
 8016426:	460c      	mov	r4, r1
 8016428:	b913      	cbnz	r3, 8016430 <_fflush_r+0x10>
 801642a:	2500      	movs	r5, #0
 801642c:	4628      	mov	r0, r5
 801642e:	bd38      	pop	{r3, r4, r5, pc}
 8016430:	b118      	cbz	r0, 801643a <_fflush_r+0x1a>
 8016432:	6a03      	ldr	r3, [r0, #32]
 8016434:	b90b      	cbnz	r3, 801643a <_fflush_r+0x1a>
 8016436:	f7fe fa09 	bl	801484c <__sinit>
 801643a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d0f3      	beq.n	801642a <_fflush_r+0xa>
 8016442:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016444:	07d0      	lsls	r0, r2, #31
 8016446:	d404      	bmi.n	8016452 <_fflush_r+0x32>
 8016448:	0599      	lsls	r1, r3, #22
 801644a:	d402      	bmi.n	8016452 <_fflush_r+0x32>
 801644c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801644e:	f7fe fc66 	bl	8014d1e <__retarget_lock_acquire_recursive>
 8016452:	4628      	mov	r0, r5
 8016454:	4621      	mov	r1, r4
 8016456:	f7ff ff5f 	bl	8016318 <__sflush_r>
 801645a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801645c:	07da      	lsls	r2, r3, #31
 801645e:	4605      	mov	r5, r0
 8016460:	d4e4      	bmi.n	801642c <_fflush_r+0xc>
 8016462:	89a3      	ldrh	r3, [r4, #12]
 8016464:	059b      	lsls	r3, r3, #22
 8016466:	d4e1      	bmi.n	801642c <_fflush_r+0xc>
 8016468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801646a:	f7fe fc59 	bl	8014d20 <__retarget_lock_release_recursive>
 801646e:	e7dd      	b.n	801642c <_fflush_r+0xc>

08016470 <__swhatbuf_r>:
 8016470:	b570      	push	{r4, r5, r6, lr}
 8016472:	460c      	mov	r4, r1
 8016474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016478:	2900      	cmp	r1, #0
 801647a:	b096      	sub	sp, #88	@ 0x58
 801647c:	4615      	mov	r5, r2
 801647e:	461e      	mov	r6, r3
 8016480:	da0d      	bge.n	801649e <__swhatbuf_r+0x2e>
 8016482:	89a3      	ldrh	r3, [r4, #12]
 8016484:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016488:	f04f 0100 	mov.w	r1, #0
 801648c:	bf14      	ite	ne
 801648e:	2340      	movne	r3, #64	@ 0x40
 8016490:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016494:	2000      	movs	r0, #0
 8016496:	6031      	str	r1, [r6, #0]
 8016498:	602b      	str	r3, [r5, #0]
 801649a:	b016      	add	sp, #88	@ 0x58
 801649c:	bd70      	pop	{r4, r5, r6, pc}
 801649e:	466a      	mov	r2, sp
 80164a0:	f000 f848 	bl	8016534 <_fstat_r>
 80164a4:	2800      	cmp	r0, #0
 80164a6:	dbec      	blt.n	8016482 <__swhatbuf_r+0x12>
 80164a8:	9901      	ldr	r1, [sp, #4]
 80164aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80164ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80164b2:	4259      	negs	r1, r3
 80164b4:	4159      	adcs	r1, r3
 80164b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80164ba:	e7eb      	b.n	8016494 <__swhatbuf_r+0x24>

080164bc <__smakebuf_r>:
 80164bc:	898b      	ldrh	r3, [r1, #12]
 80164be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80164c0:	079d      	lsls	r5, r3, #30
 80164c2:	4606      	mov	r6, r0
 80164c4:	460c      	mov	r4, r1
 80164c6:	d507      	bpl.n	80164d8 <__smakebuf_r+0x1c>
 80164c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80164cc:	6023      	str	r3, [r4, #0]
 80164ce:	6123      	str	r3, [r4, #16]
 80164d0:	2301      	movs	r3, #1
 80164d2:	6163      	str	r3, [r4, #20]
 80164d4:	b003      	add	sp, #12
 80164d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164d8:	ab01      	add	r3, sp, #4
 80164da:	466a      	mov	r2, sp
 80164dc:	f7ff ffc8 	bl	8016470 <__swhatbuf_r>
 80164e0:	9f00      	ldr	r7, [sp, #0]
 80164e2:	4605      	mov	r5, r0
 80164e4:	4639      	mov	r1, r7
 80164e6:	4630      	mov	r0, r6
 80164e8:	f7fd fc62 	bl	8013db0 <_malloc_r>
 80164ec:	b948      	cbnz	r0, 8016502 <__smakebuf_r+0x46>
 80164ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80164f2:	059a      	lsls	r2, r3, #22
 80164f4:	d4ee      	bmi.n	80164d4 <__smakebuf_r+0x18>
 80164f6:	f023 0303 	bic.w	r3, r3, #3
 80164fa:	f043 0302 	orr.w	r3, r3, #2
 80164fe:	81a3      	strh	r3, [r4, #12]
 8016500:	e7e2      	b.n	80164c8 <__smakebuf_r+0xc>
 8016502:	89a3      	ldrh	r3, [r4, #12]
 8016504:	6020      	str	r0, [r4, #0]
 8016506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801650a:	81a3      	strh	r3, [r4, #12]
 801650c:	9b01      	ldr	r3, [sp, #4]
 801650e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016512:	b15b      	cbz	r3, 801652c <__smakebuf_r+0x70>
 8016514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016518:	4630      	mov	r0, r6
 801651a:	f000 f81d 	bl	8016558 <_isatty_r>
 801651e:	b128      	cbz	r0, 801652c <__smakebuf_r+0x70>
 8016520:	89a3      	ldrh	r3, [r4, #12]
 8016522:	f023 0303 	bic.w	r3, r3, #3
 8016526:	f043 0301 	orr.w	r3, r3, #1
 801652a:	81a3      	strh	r3, [r4, #12]
 801652c:	89a3      	ldrh	r3, [r4, #12]
 801652e:	431d      	orrs	r5, r3
 8016530:	81a5      	strh	r5, [r4, #12]
 8016532:	e7cf      	b.n	80164d4 <__smakebuf_r+0x18>

08016534 <_fstat_r>:
 8016534:	b538      	push	{r3, r4, r5, lr}
 8016536:	4d07      	ldr	r5, [pc, #28]	@ (8016554 <_fstat_r+0x20>)
 8016538:	2300      	movs	r3, #0
 801653a:	4604      	mov	r4, r0
 801653c:	4608      	mov	r0, r1
 801653e:	4611      	mov	r1, r2
 8016540:	602b      	str	r3, [r5, #0]
 8016542:	f7ed fbad 	bl	8003ca0 <_fstat>
 8016546:	1c43      	adds	r3, r0, #1
 8016548:	d102      	bne.n	8016550 <_fstat_r+0x1c>
 801654a:	682b      	ldr	r3, [r5, #0]
 801654c:	b103      	cbz	r3, 8016550 <_fstat_r+0x1c>
 801654e:	6023      	str	r3, [r4, #0]
 8016550:	bd38      	pop	{r3, r4, r5, pc}
 8016552:	bf00      	nop
 8016554:	2000da1c 	.word	0x2000da1c

08016558 <_isatty_r>:
 8016558:	b538      	push	{r3, r4, r5, lr}
 801655a:	4d06      	ldr	r5, [pc, #24]	@ (8016574 <_isatty_r+0x1c>)
 801655c:	2300      	movs	r3, #0
 801655e:	4604      	mov	r4, r0
 8016560:	4608      	mov	r0, r1
 8016562:	602b      	str	r3, [r5, #0]
 8016564:	f7ed fbac 	bl	8003cc0 <_isatty>
 8016568:	1c43      	adds	r3, r0, #1
 801656a:	d102      	bne.n	8016572 <_isatty_r+0x1a>
 801656c:	682b      	ldr	r3, [r5, #0]
 801656e:	b103      	cbz	r3, 8016572 <_isatty_r+0x1a>
 8016570:	6023      	str	r3, [r4, #0]
 8016572:	bd38      	pop	{r3, r4, r5, pc}
 8016574:	2000da1c 	.word	0x2000da1c

08016578 <__assert_func>:
 8016578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801657a:	4614      	mov	r4, r2
 801657c:	461a      	mov	r2, r3
 801657e:	4b09      	ldr	r3, [pc, #36]	@ (80165a4 <__assert_func+0x2c>)
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	4605      	mov	r5, r0
 8016584:	68d8      	ldr	r0, [r3, #12]
 8016586:	b14c      	cbz	r4, 801659c <__assert_func+0x24>
 8016588:	4b07      	ldr	r3, [pc, #28]	@ (80165a8 <__assert_func+0x30>)
 801658a:	9100      	str	r1, [sp, #0]
 801658c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016590:	4906      	ldr	r1, [pc, #24]	@ (80165ac <__assert_func+0x34>)
 8016592:	462b      	mov	r3, r5
 8016594:	f000 f842 	bl	801661c <fiprintf>
 8016598:	f000 f852 	bl	8016640 <abort>
 801659c:	4b04      	ldr	r3, [pc, #16]	@ (80165b0 <__assert_func+0x38>)
 801659e:	461c      	mov	r4, r3
 80165a0:	e7f3      	b.n	801658a <__assert_func+0x12>
 80165a2:	bf00      	nop
 80165a4:	200000fc 	.word	0x200000fc
 80165a8:	08017001 	.word	0x08017001
 80165ac:	0801700e 	.word	0x0801700e
 80165b0:	0801703c 	.word	0x0801703c

080165b4 <_calloc_r>:
 80165b4:	b570      	push	{r4, r5, r6, lr}
 80165b6:	fba1 5402 	umull	r5, r4, r1, r2
 80165ba:	b934      	cbnz	r4, 80165ca <_calloc_r+0x16>
 80165bc:	4629      	mov	r1, r5
 80165be:	f7fd fbf7 	bl	8013db0 <_malloc_r>
 80165c2:	4606      	mov	r6, r0
 80165c4:	b928      	cbnz	r0, 80165d2 <_calloc_r+0x1e>
 80165c6:	4630      	mov	r0, r6
 80165c8:	bd70      	pop	{r4, r5, r6, pc}
 80165ca:	220c      	movs	r2, #12
 80165cc:	6002      	str	r2, [r0, #0]
 80165ce:	2600      	movs	r6, #0
 80165d0:	e7f9      	b.n	80165c6 <_calloc_r+0x12>
 80165d2:	462a      	mov	r2, r5
 80165d4:	4621      	mov	r1, r4
 80165d6:	f7fe fab7 	bl	8014b48 <memset>
 80165da:	e7f4      	b.n	80165c6 <_calloc_r+0x12>

080165dc <__ascii_mbtowc>:
 80165dc:	b082      	sub	sp, #8
 80165de:	b901      	cbnz	r1, 80165e2 <__ascii_mbtowc+0x6>
 80165e0:	a901      	add	r1, sp, #4
 80165e2:	b142      	cbz	r2, 80165f6 <__ascii_mbtowc+0x1a>
 80165e4:	b14b      	cbz	r3, 80165fa <__ascii_mbtowc+0x1e>
 80165e6:	7813      	ldrb	r3, [r2, #0]
 80165e8:	600b      	str	r3, [r1, #0]
 80165ea:	7812      	ldrb	r2, [r2, #0]
 80165ec:	1e10      	subs	r0, r2, #0
 80165ee:	bf18      	it	ne
 80165f0:	2001      	movne	r0, #1
 80165f2:	b002      	add	sp, #8
 80165f4:	4770      	bx	lr
 80165f6:	4610      	mov	r0, r2
 80165f8:	e7fb      	b.n	80165f2 <__ascii_mbtowc+0x16>
 80165fa:	f06f 0001 	mvn.w	r0, #1
 80165fe:	e7f8      	b.n	80165f2 <__ascii_mbtowc+0x16>

08016600 <__ascii_wctomb>:
 8016600:	4603      	mov	r3, r0
 8016602:	4608      	mov	r0, r1
 8016604:	b141      	cbz	r1, 8016618 <__ascii_wctomb+0x18>
 8016606:	2aff      	cmp	r2, #255	@ 0xff
 8016608:	d904      	bls.n	8016614 <__ascii_wctomb+0x14>
 801660a:	228a      	movs	r2, #138	@ 0x8a
 801660c:	601a      	str	r2, [r3, #0]
 801660e:	f04f 30ff 	mov.w	r0, #4294967295
 8016612:	4770      	bx	lr
 8016614:	700a      	strb	r2, [r1, #0]
 8016616:	2001      	movs	r0, #1
 8016618:	4770      	bx	lr
	...

0801661c <fiprintf>:
 801661c:	b40e      	push	{r1, r2, r3}
 801661e:	b503      	push	{r0, r1, lr}
 8016620:	4601      	mov	r1, r0
 8016622:	ab03      	add	r3, sp, #12
 8016624:	4805      	ldr	r0, [pc, #20]	@ (801663c <fiprintf+0x20>)
 8016626:	f853 2b04 	ldr.w	r2, [r3], #4
 801662a:	6800      	ldr	r0, [r0, #0]
 801662c:	9301      	str	r3, [sp, #4]
 801662e:	f7ff fd5b 	bl	80160e8 <_vfiprintf_r>
 8016632:	b002      	add	sp, #8
 8016634:	f85d eb04 	ldr.w	lr, [sp], #4
 8016638:	b003      	add	sp, #12
 801663a:	4770      	bx	lr
 801663c:	200000fc 	.word	0x200000fc

08016640 <abort>:
 8016640:	b508      	push	{r3, lr}
 8016642:	2006      	movs	r0, #6
 8016644:	f000 f82c 	bl	80166a0 <raise>
 8016648:	2001      	movs	r0, #1
 801664a:	f7ed faf5 	bl	8003c38 <_exit>

0801664e <_raise_r>:
 801664e:	291f      	cmp	r1, #31
 8016650:	b538      	push	{r3, r4, r5, lr}
 8016652:	4605      	mov	r5, r0
 8016654:	460c      	mov	r4, r1
 8016656:	d904      	bls.n	8016662 <_raise_r+0x14>
 8016658:	2316      	movs	r3, #22
 801665a:	6003      	str	r3, [r0, #0]
 801665c:	f04f 30ff 	mov.w	r0, #4294967295
 8016660:	bd38      	pop	{r3, r4, r5, pc}
 8016662:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016664:	b112      	cbz	r2, 801666c <_raise_r+0x1e>
 8016666:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801666a:	b94b      	cbnz	r3, 8016680 <_raise_r+0x32>
 801666c:	4628      	mov	r0, r5
 801666e:	f000 f831 	bl	80166d4 <_getpid_r>
 8016672:	4622      	mov	r2, r4
 8016674:	4601      	mov	r1, r0
 8016676:	4628      	mov	r0, r5
 8016678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801667c:	f000 b818 	b.w	80166b0 <_kill_r>
 8016680:	2b01      	cmp	r3, #1
 8016682:	d00a      	beq.n	801669a <_raise_r+0x4c>
 8016684:	1c59      	adds	r1, r3, #1
 8016686:	d103      	bne.n	8016690 <_raise_r+0x42>
 8016688:	2316      	movs	r3, #22
 801668a:	6003      	str	r3, [r0, #0]
 801668c:	2001      	movs	r0, #1
 801668e:	e7e7      	b.n	8016660 <_raise_r+0x12>
 8016690:	2100      	movs	r1, #0
 8016692:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016696:	4620      	mov	r0, r4
 8016698:	4798      	blx	r3
 801669a:	2000      	movs	r0, #0
 801669c:	e7e0      	b.n	8016660 <_raise_r+0x12>
	...

080166a0 <raise>:
 80166a0:	4b02      	ldr	r3, [pc, #8]	@ (80166ac <raise+0xc>)
 80166a2:	4601      	mov	r1, r0
 80166a4:	6818      	ldr	r0, [r3, #0]
 80166a6:	f7ff bfd2 	b.w	801664e <_raise_r>
 80166aa:	bf00      	nop
 80166ac:	200000fc 	.word	0x200000fc

080166b0 <_kill_r>:
 80166b0:	b538      	push	{r3, r4, r5, lr}
 80166b2:	4d07      	ldr	r5, [pc, #28]	@ (80166d0 <_kill_r+0x20>)
 80166b4:	2300      	movs	r3, #0
 80166b6:	4604      	mov	r4, r0
 80166b8:	4608      	mov	r0, r1
 80166ba:	4611      	mov	r1, r2
 80166bc:	602b      	str	r3, [r5, #0]
 80166be:	f7ed faab 	bl	8003c18 <_kill>
 80166c2:	1c43      	adds	r3, r0, #1
 80166c4:	d102      	bne.n	80166cc <_kill_r+0x1c>
 80166c6:	682b      	ldr	r3, [r5, #0]
 80166c8:	b103      	cbz	r3, 80166cc <_kill_r+0x1c>
 80166ca:	6023      	str	r3, [r4, #0]
 80166cc:	bd38      	pop	{r3, r4, r5, pc}
 80166ce:	bf00      	nop
 80166d0:	2000da1c 	.word	0x2000da1c

080166d4 <_getpid_r>:
 80166d4:	f7ed ba98 	b.w	8003c08 <_getpid>

080166d8 <_init>:
 80166d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166da:	bf00      	nop
 80166dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166de:	bc08      	pop	{r3}
 80166e0:	469e      	mov	lr, r3
 80166e2:	4770      	bx	lr

080166e4 <_fini>:
 80166e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166e6:	bf00      	nop
 80166e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166ea:	bc08      	pop	{r3}
 80166ec:	469e      	mov	lr, r3
 80166ee:	4770      	bx	lr
